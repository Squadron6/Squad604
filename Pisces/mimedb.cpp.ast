typedef char *__builtin_va_list;
extern "C" {
    typedef typeof (((int *)0) - ((int *)0)) ptrdiff_t;
    typedef typeof (sizeof(int)) size_t;
    extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n) throw();
    extern void *memmove(void *__dest, const void *__src, size_t __n) throw();
    extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n) throw();
    extern void *memset(void *__s, int __c, size_t __n) throw();
    extern int memcmp(const void *__s1, const void *__s2, size_t __n) throw();
    extern void *memchr(const void *__s, int __c, size_t __n) throw();
    extern void *rawmemchr(const void *__s, int __c) throw();
    extern void *memrchr(const void *__s, int __c, size_t __n) throw();
    extern char *strcpy(char *restrict __dest, const char *restrict __src) throw();
    extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern char *strcat(char *restrict __dest, const char *restrict __src) throw();
    extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern int strcmp(const char *__s1, const char *__s2) throw();
    extern int strncmp(const char *__s1, const char *__s2, size_t __n) throw();
    extern int strcoll(const char *__s1, const char *__s2) throw();
    extern size_t strxfrm(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    struct __locale_struct {
        struct __locale_struct;
        struct __locale_data;
        struct __locale_data *__locales[13];
        const unsigned short *__ctype_b;
        const int *__ctype_tolower;
        const int *__ctype_toupper;
        const char *__names[13];
    };
    typedef struct __locale_struct *__locale_t;
    typedef __locale_t locale_t;
    extern int strcoll_l(const char *__s1, const char *__s2, __locale_t __l) throw();
    extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l) throw();
    extern char *strdup(const char *__s) throw();
    extern char *strndup(const char *__string, size_t __n) throw();
    extern char *strchr(const char *__s, int __c) throw();
    extern char *strrchr(const char *__s, int __c) throw();
    extern char *strchrnul(const char *__s, int __c) throw();
    extern size_t strcspn(const char *__s, const char *__reject) throw();
    extern size_t strspn(const char *__s, const char *__accept) throw();
    extern char *strpbrk(const char *__s, const char *__accept) throw();
    extern char *strstr(const char *__haystack, const char *__needle) throw();
    extern char *strtok(char *restrict __s, const char *restrict __delim) throw();
    extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr) throw();
    extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr) throw();
    extern char *strcasestr(const char *__haystack, const char *__needle) throw();
    extern void *memmem(const void *__haystack, size_t __haystacklen, const void *__needle, size_t __needlelen) throw();
    extern void *__mempcpy(void *restrict __dest, const void *restrict __src, size_t __n) throw();
    extern void *mempcpy(void *restrict __dest, const void *restrict __src, size_t __n) throw();
    extern size_t strlen(const char *__s) throw();
    extern size_t strnlen(const char *__string, size_t __maxlen) throw();
    extern char *strerror(int __errnum) throw();
    extern char *strerror_r(int __errnum, char *__buf, size_t __buflen) throw();
    extern char *strerror_l(int __errnum, __locale_t __l) throw();
    extern void __bzero(void *__s, size_t __n) throw();
    extern void bcopy(const void *__src, void *__dest, size_t __n) throw();
    extern void bzero(void *__s, size_t __n) throw();
    extern int bcmp(const void *__s1, const void *__s2, size_t __n) throw();
    extern char *index(const char *__s, int __c) throw();
    extern char *rindex(const char *__s, int __c) throw();
    extern int ffs(int __i) throw();
    extern int ffsl(long __l) throw();
    extern int ffsll(long long __ll) throw();
    extern int strcasecmp(const char *__s1, const char *__s2) throw();
    extern int strncasecmp(const char *__s1, const char *__s2, size_t __n) throw();
    extern int strcasecmp_l(const char *__s1, const char *__s2, __locale_t __loc) throw();
    extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, __locale_t __loc) throw();
    extern char *strsep(char **restrict __stringp, const char *restrict __delim) throw();
    extern char *strsignal(int __sig) throw();
    extern char *__stpcpy(char *restrict __dest, const char *restrict __src) throw();
    extern char *stpcpy(char *restrict __dest, const char *restrict __src) throw();
    extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern int strverscmp(const char *__s1, const char *__s2) throw();
    extern char *strfry(char *__string) throw();
    extern void *memfrob(void *__s, size_t __n) throw();
    extern char *basename(const char *__filename) throw();
}
extern "C" {
    typedef unsigned char __u_char;
    typedef unsigned short __u_short;
    typedef unsigned int __u_int;
    typedef unsigned long __u_long;
    typedef signed char __int8_t;
    typedef unsigned char __uint8_t;
    typedef short __int16_t;
    typedef unsigned short __uint16_t;
    typedef int __int32_t;
    typedef unsigned int __uint32_t;
    typedef long long __int64_t;
    typedef unsigned long long __uint64_t;
    typedef long long __quad_t;
    typedef unsigned long long __u_quad_t;
    typedef __u_quad_t __dev_t;
    typedef unsigned int __uid_t;
    typedef unsigned int __gid_t;
    typedef unsigned long __ino_t;
    typedef __u_quad_t __ino64_t;
    typedef unsigned int __mode_t;
    typedef unsigned int __nlink_t;
    typedef long __off_t;
    typedef __quad_t __off64_t;
    typedef int __pid_t;
    struct {
        int __val[2];
    };
    typedef struct __fsid_t __fsid_t;
    typedef long __clock_t;
    typedef unsigned long __rlim_t;
    typedef __u_quad_t __rlim64_t;
    typedef unsigned int __id_t;
    typedef long __time_t;
    typedef unsigned int __useconds_t;
    typedef long __suseconds_t;
    typedef int __daddr_t;
    typedef long __swblk_t;
    typedef int __key_t;
    typedef int __clockid_t;
    typedef void *__timer_t;
    typedef long __blksize_t;
    typedef long __blkcnt_t;
    typedef __quad_t __blkcnt64_t;
    typedef unsigned long __fsblkcnt_t;
    typedef __u_quad_t __fsblkcnt64_t;
    typedef unsigned long __fsfilcnt_t;
    typedef __u_quad_t __fsfilcnt64_t;
    typedef int __ssize_t;
    typedef __off64_t __loff_t;
    typedef __quad_t *__qaddr_t;
    typedef char *__caddr_t;
    typedef int __intptr_t;
    typedef unsigned int __socklen_t;
    struct _IO_FILE;
    typedef struct _IO_FILE FILE;
    typedef struct _IO_FILE __FILE;
    struct {
        int __count;
        union {
            unsigned int __wch;
            char __wchb[4];
        };
        union <anonymous union at /usr/include/wchar.h:86:3> __value;
    };
    typedef struct __mbstate_t __mbstate_t;
    struct {
        __off_t __pos;
        __mbstate_t __state;
    };
    typedef struct _G_fpos_t _G_fpos_t;
    struct {
        __off64_t __pos;
        __mbstate_t __state;
    };
    typedef struct _G_fpos64_t _G_fpos64_t;
    typedef short _G_int16_t;
    typedef int _G_int32_t;
    typedef unsigned short _G_uint16_t;
    typedef unsigned int _G_uint32_t;
    typedef __builtin_va_list va_list;
    typedef __builtin_va_list __gnuc_va_list;
    struct _IO_jump_t;
    struct _IO_FILE;
    typedef void _IO_lock_t;
    struct _IO_marker {
        struct _IO_marker;
        struct _IO_marker *_next;
        struct _IO_FILE *_sbuf;
        int _pos;
    };
    enum __codecvt_result {
        __codecvt_ok,
        __codecvt_partial,
        __codecvt_error,
        __codecvt_noconv
    };
    struct _IO_FILE {
        struct _IO_FILE;
        int _flags;
        char *_IO_read_ptr;
        char *_IO_read_end;
        char *_IO_read_base;
        char *_IO_write_base;
        char *_IO_write_ptr;
        char *_IO_write_end;
        char *_IO_buf_base;
        char *_IO_buf_end;
        char *_IO_save_base;
        char *_IO_backup_base;
        char *_IO_save_end;
        struct _IO_marker *_markers;
        struct _IO_FILE *_chain;
        int _fileno;
        int _flags2;
        __off_t _old_offset;
        unsigned short _cur_column;
        signed char _vtable_offset;
        char _shortbuf[1];
        _IO_lock_t *_lock;
        __off64_t _offset;
        void *__pad1;
        void *__pad2;
        void *__pad3;
        void *__pad4;
        size_t __pad5;
        int _mode;
        char _unused2[40];
    };
    struct _IO_FILE_plus;
    extern struct _IO_FILE_plus _IO_2_1_stdin_;
    extern struct _IO_FILE_plus _IO_2_1_stdout_;
    extern struct _IO_FILE_plus _IO_2_1_stderr_;
    typedef __ssize_t (__io_read_fn)(void *, char *, size_t);
    typedef __ssize_t (__io_write_fn)(void *, const char *, size_t);
    typedef int (__io_seek_fn)(void *, __off64_t *, int);
    typedef int (__io_close_fn)(void *);
    typedef __io_read_fn cookie_read_function_t;
    typedef __io_write_fn cookie_write_function_t;
    typedef __io_seek_fn cookie_seek_function_t;
    typedef __io_close_fn cookie_close_function_t;
    struct {
        __io_read_fn *read;
        __io_write_fn *write;
        __io_seek_fn *seek;
        __io_close_fn *close;
    };
    typedef struct _IO_cookie_io_functions_t _IO_cookie_io_functions_t;
    typedef _IO_cookie_io_functions_t cookie_io_functions_t;
    struct _IO_cookie_file;
    extern void _IO_cookie_init(struct _IO_cookie_file *__cfile, int __read_write, void *__cookie, _IO_cookie_io_functions_t __fns);
    extern "C" {
        extern int __underflow(_IO_FILE *);
        extern int __uflow(_IO_FILE *);
        extern int __overflow(_IO_FILE *, int);
        extern int _IO_getc(_IO_FILE *__fp);
        extern int _IO_putc(int __c, _IO_FILE *__fp);
        extern int _IO_feof(_IO_FILE *__fp) throw();
        extern int _IO_ferror(_IO_FILE *__fp) throw();
        extern int _IO_peekc_locked(_IO_FILE *__fp);
        extern void _IO_flockfile(_IO_FILE *) throw();
        extern void _IO_funlockfile(_IO_FILE *) throw();
        extern int _IO_ftrylockfile(_IO_FILE *) throw();
        extern int _IO_vfscanf(_IO_FILE *restrict, const char *restrict, __gnuc_va_list, int *restrict);
        extern int _IO_vfprintf(_IO_FILE *restrict, const char *restrict, __gnuc_va_list);
        extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
        extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);
        extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
        extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
        extern void _IO_free_backup_area(_IO_FILE *) throw();
    }
    typedef __gnuc_va_list va_list;
    typedef __off_t off_t;
    typedef __off64_t off64_t;
    typedef __ssize_t ssize_t;
    typedef _G_fpos_t fpos_t;
    typedef _G_fpos64_t fpos64_t;
    extern struct _IO_FILE *stdin;
    extern struct _IO_FILE *stdout;
    extern struct _IO_FILE *stderr;
    extern int remove(const char *__filename) throw();
    extern int rename(const char *__old, const char *__new) throw();
    extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new) throw();
    extern FILE *tmpfile();
    extern FILE *tmpfile64();
    extern char *tmpnam(char *__s) throw();
    extern char *tmpnam_r(char *__s) throw();
    extern char *tempnam(const char *__dir, const char *__pfx) throw();
    extern int fclose(FILE *__stream);
    extern int fflush(FILE *__stream);
    extern int fflush_unlocked(FILE *__stream);
    extern int fcloseall();
    extern FILE *fopen(const char *restrict __filename, const char *restrict __modes);
    extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream);
    extern FILE *fopen64(const char *restrict __filename, const char *restrict __modes);
    extern FILE *freopen64(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream);
    extern FILE *fdopen(int __fd, const char *__modes) throw();
    extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes, _IO_cookie_io_functions_t __io_funcs) throw();
    extern FILE *fmemopen(void *__s, size_t __len, const char *__modes) throw();
    extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc) throw();
    extern void setbuf(FILE *restrict __stream, char *restrict __buf) throw();
    extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n) throw();
    extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size) throw();
    extern void setlinebuf(FILE *__stream) throw();
    extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...);
    extern int printf(const char *restrict __format, ...);
    extern int sprintf(char *restrict __s, const char *restrict __format, ...) throw();
    extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg);
    extern int vprintf(const char *restrict __format, __gnuc_va_list __arg);
    extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg) throw();
    extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...) throw();
    extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list __arg) throw();
    extern int vasprintf(char **restrict __ptr, const char *restrict __f, __gnuc_va_list __arg) throw();
    extern int __asprintf(char **restrict __ptr, const char *restrict __fmt, ...) throw();
    extern int asprintf(char **restrict __ptr, const char *restrict __fmt, ...) throw();
    extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg);
    extern int dprintf(int __fd, const char *restrict __fmt, ...);
    extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...);
    extern int scanf(const char *restrict __format, ...);
    extern int sscanf(const char *restrict __s, const char *restrict __format, ...) throw();
    extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg);
    extern int vscanf(const char *restrict __format, __gnuc_va_list __arg);
    extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg) throw();
    extern int fgetc(FILE *__stream);
    extern int getc(FILE *__stream);
    extern int getchar();
    extern int getc_unlocked(FILE *__stream);
    extern int getchar_unlocked();
    extern int fgetc_unlocked(FILE *__stream);
    extern int fputc(int __c, FILE *__stream);
    extern int putc(int __c, FILE *__stream);
    extern int putchar(int __c);
    extern int fputc_unlocked(int __c, FILE *__stream);
    extern int putc_unlocked(int __c, FILE *__stream);
    extern int putchar_unlocked(int __c);
    extern int getw(FILE *__stream);
    extern int putw(int __w, FILE *__stream);
    extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream);
    extern char *gets(char *__s);
    extern char *fgets_unlocked(char *restrict __s, int __n, FILE *restrict __stream);
    extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream);
    extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream);
    extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream);
    extern int fputs(const char *restrict __s, FILE *restrict __stream);
    extern int puts(const char *__s);
    extern int ungetc(int __c, FILE *__stream);
    extern size_t fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream);
    extern size_t fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s);
    extern int fputs_unlocked(const char *restrict __s, FILE *restrict __stream);
    extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream);
    extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream);
    extern int fseek(FILE *__stream, long __off, int __whence);
    extern long ftell(FILE *__stream);
    extern void rewind(FILE *__stream);
    extern int fseeko(FILE *__stream, __off_t __off, int __whence);
    extern __off_t ftello(FILE *__stream);
    extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos);
    extern int fsetpos(FILE *__stream, const fpos_t *__pos);
    extern int fseeko64(FILE *__stream, __off64_t __off, int __whence);
    extern __off64_t ftello64(FILE *__stream);
    extern int fgetpos64(FILE *restrict __stream, fpos64_t *restrict __pos);
    extern int fsetpos64(FILE *__stream, const fpos64_t *__pos);
    extern void clearerr(FILE *__stream) throw();
    extern int feof(FILE *__stream) throw();
    extern int ferror(FILE *__stream) throw();
    extern void clearerr_unlocked(FILE *__stream) throw();
    extern int feof_unlocked(FILE *__stream) throw();
    extern int ferror_unlocked(FILE *__stream) throw();
    extern void perror(const char *__s);
    extern int sys_nerr;
    extern const char *const sys_errlist[];
    extern int _sys_nerr;
    extern const char *const _sys_errlist[];
    extern int fileno(FILE *__stream) throw();
    extern int fileno_unlocked(FILE *__stream) throw();
    extern FILE *popen(const char *__command, const char *__modes);
    extern int pclose(FILE *__stream);
    extern char *ctermid(char *__s) throw();
    extern char *cuserid(char *__s);
    struct obstack;
    extern int obstack_printf(struct obstack *restrict __obstack, const char *restrict __format, ...) throw();
    extern int obstack_vprintf(struct obstack *restrict __obstack, const char *restrict __format, __gnuc_va_list __args) throw();
    extern void flockfile(FILE *__stream) throw();
    extern int ftrylockfile(FILE *__stream) throw();
    extern void funlockfile(FILE *__stream) throw();
}
extern "C" {
    union wait {
        union wait;
        int w_status;
        struct {
            unsigned int __w_termsig : (IntegerLiteral 0xa518fc0 </usr/include/i386-linux-gnu/bits/waitstatus.h:73:27> 'int' 7)
;
            unsigned int __w_coredump : (IntegerLiteral 0xa519020 </usr/include/i386-linux-gnu/bits/waitstatus.h:74:28> 'int' 1)
;
            unsigned int __w_retcode : (IntegerLiteral 0xa519080 </usr/include/i386-linux-gnu/bits/waitstatus.h:75:27> 'int' 8)
;
            unsigned int : (IntegerLiteral 0xa5190e0 </usr/include/i386-linux-gnu/bits/waitstatus.h:76:15> 'int' 16)
;
        };
        struct <anonymous struct at /usr/include/i386-linux-gnu/bits/waitstatus.h:70:5> __wait_terminated;
        struct {
            unsigned int __w_stopval : (IntegerLiteral 0xa519280 </usr/include/i386-linux-gnu/bits/waitstatus.h:88:27> 'int' 8)
;
            unsigned int __w_stopsig : (IntegerLiteral 0xa5192e0 </usr/include/i386-linux-gnu/bits/waitstatus.h:89:27> 'int' 8)
;
            unsigned int : (IntegerLiteral 0xa519340 </usr/include/i386-linux-gnu/bits/waitstatus.h:90:15> 'int' 16)
;
        };
        struct <anonymous struct at /usr/include/i386-linux-gnu/bits/waitstatus.h:85:5> __wait_stopped;
    };
    struct {
        int quot;
        int rem;
    };
    typedef struct div_t div_t;
    struct {
        long quot;
        long rem;
    };
    typedef struct ldiv_t ldiv_t;
    struct {
        long long quot;
        long long rem;
    };
    typedef struct lldiv_t lldiv_t;
    extern size_t __ctype_get_mb_cur_max() throw();
    extern double atof(const char *__nptr) throw();
    extern int atoi(const char *__nptr) throw();
    extern long atol(const char *__nptr) throw();
    extern long long atoll(const char *__nptr) throw();
    extern double strtod(const char *restrict __nptr, char **restrict __endptr) throw();
    extern float strtof(const char *restrict __nptr, char **restrict __endptr) throw();
    extern long double strtold(const char *restrict __nptr, char **restrict __endptr) throw();
    extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern long strtol_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern unsigned long strtoul_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern long long strtoll_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern unsigned long long strtoull_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern double strtod_l(const char *restrict __nptr, char **restrict __endptr, __locale_t __loc) throw();
    extern float strtof_l(const char *restrict __nptr, char **restrict __endptr, __locale_t __loc) throw();
    extern long double strtold_l(const char *restrict __nptr, char **restrict __endptr, __locale_t __loc) throw();
    extern char *l64a(long __n) throw();
    extern long a64l(const char *__s) throw();
    extern "C" {
        typedef __u_char u_char;
        typedef __u_short u_short;
        typedef __u_int u_int;
        typedef __u_long u_long;
        typedef __quad_t quad_t;
        typedef __u_quad_t u_quad_t;
        typedef __fsid_t fsid_t;
        typedef __loff_t loff_t;
        typedef __ino_t ino_t;
        typedef __ino64_t ino64_t;
        typedef __dev_t dev_t;
        typedef __gid_t gid_t;
        typedef __mode_t mode_t;
        typedef __nlink_t nlink_t;
        typedef __uid_t uid_t;
        typedef __pid_t pid_t;
        typedef __id_t id_t;
        typedef __daddr_t daddr_t;
        typedef __caddr_t caddr_t;
        typedef __key_t key_t;
        typedef __clock_t clock_t;
        typedef __time_t time_t;
        typedef __clockid_t clockid_t;
        typedef __timer_t timer_t;
        typedef __useconds_t useconds_t;
        typedef __suseconds_t suseconds_t;
        typedef unsigned long ulong;
        typedef unsigned short ushort;
        typedef unsigned int uint;
        typedef signed char int8_t;
        typedef short int16_t;
        typedef int int32_t;
        typedef long long int64_t;
        typedef unsigned char u_int8_t;
        typedef unsigned short u_int16_t;
        typedef unsigned int u_int32_t;
        typedef unsigned long long u_int64_t;
        typedef int register_t;
        typedef int __sig_atomic_t;
        struct {
            unsigned long __val[32];
        };
        typedef struct __sigset_t __sigset_t;
        typedef __sigset_t sigset_t;
        struct timespec {
            struct timespec;
            __time_t tv_sec;
            long tv_nsec;
            inline timespec() throw() (CompoundStmt 0xa954cc0 </usr/include/time.h:120:8>)


            inline timespec(const timespec &) throw();
        };
        struct timeval {
            struct timeval;
            __time_t tv_sec;
            __suseconds_t tv_usec;
        };
        typedef long __fd_mask;
        struct {
            __fd_mask fds_bits[32];
        };
        typedef struct fd_set fd_set;
        typedef __fd_mask fd_mask;
        extern "C" {
            extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout);
            extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask);
        }
        extern "C" {
            extern unsigned int gnu_dev_major(unsigned long long __dev) throw();
            extern unsigned int gnu_dev_minor(unsigned long long __dev) throw();
            extern unsigned long long gnu_dev_makedev(unsigned int __major, unsigned int __minor) throw();
        }
        typedef __blksize_t blksize_t;
        typedef __blkcnt_t blkcnt_t;
        typedef __fsblkcnt_t fsblkcnt_t;
        typedef __fsfilcnt_t fsfilcnt_t;
        typedef __blkcnt64_t blkcnt64_t;
        typedef __fsblkcnt64_t fsblkcnt64_t;
        typedef __fsfilcnt64_t fsfilcnt64_t;
        typedef unsigned long pthread_t;
        union {
            char __size[36];
            long __align;
        };
        typedef union pthread_attr_t pthread_attr_t;
        struct __pthread_internal_slist {
            struct __pthread_internal_slist;
            struct __pthread_internal_slist *__next;
        };
        typedef struct __pthread_internal_slist __pthread_slist_t;
        union {
            struct __pthread_mutex_s {
                struct __pthread_mutex_s;
                int __lock;
                unsigned int __count;
                int __owner;
                int __kind;
                unsigned int __nusers;
                union {
                    int __spins;
                    __pthread_slist_t __list;
                } ;
                ;
                ;
            };
            struct __pthread_mutex_s __data;
            char __size[24];
            long __align;
        };
        typedef union pthread_mutex_t pthread_mutex_t;
        union {
            char __size[4];
            long __align;
        };
        typedef union pthread_mutexattr_t pthread_mutexattr_t;
        union {
            struct {
                int __lock;
                unsigned int __futex;
                unsigned long long __total_seq;
                unsigned long long __wakeup_seq;
                unsigned long long __woken_seq;
                void *__mutex;
                unsigned int __nwaiters;
                unsigned int __broadcast_seq;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/pthreadtypes.h:86:3> __data;
            char __size[48];
            long long __align;
        };
        typedef union pthread_cond_t pthread_cond_t;
        union {
            char __size[4];
            long __align;
        };
        typedef union pthread_condattr_t pthread_condattr_t;
        typedef unsigned int pthread_key_t;
        typedef int pthread_once_t;
        union {
            struct {
                int __lock;
                unsigned int __nr_readers;
                unsigned int __readers_wakeup;
                unsigned int __writer_wakeup;
                unsigned int __nr_readers_queued;
                unsigned int __nr_writers_queued;
                unsigned char __flags;
                unsigned char __shared;
                unsigned char __pad1;
                unsigned char __pad2;
                int __writer;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/pthreadtypes.h:121:3> __data;
            char __size[32];
            long __align;
        };
        typedef union pthread_rwlock_t pthread_rwlock_t;
        union {
            char __size[8];
            long __align;
        };
        typedef union pthread_rwlockattr_t pthread_rwlockattr_t;
        typedef volatile int pthread_spinlock_t;
        union {
            char __size[20];
            long __align;
        };
        typedef union pthread_barrier_t pthread_barrier_t;
        union {
            char __size[4];
            int __align;
        };
        typedef union pthread_barrierattr_t pthread_barrierattr_t;
    }
    extern long random() throw();
    extern void srandom(unsigned int __seed) throw();
    extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen) throw();
    extern char *setstate(char *__statebuf) throw();
    struct random_data {
        struct random_data;
        int32_t *fptr;
        int32_t *rptr;
        int32_t *state;
        int rand_type;
        int rand_deg;
        int rand_sep;
        int32_t *end_ptr;
    };
    extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result) throw();
    extern int srandom_r(unsigned int __seed, struct random_data *__buf) throw();
    extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf) throw();
    extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf) throw();
    extern int rand() throw();
    extern void srand(unsigned int __seed) throw();
    extern int rand_r(unsigned int *__seed) throw();
    extern double drand48() throw();
    extern double erand48(unsigned short __xsubi[3]) throw();
    extern long lrand48() throw();
    extern long nrand48(unsigned short __xsubi[3]) throw();
    extern long mrand48() throw();
    extern long jrand48(unsigned short __xsubi[3]) throw();
    extern void srand48(long __seedval) throw();
    extern unsigned short *seed48(unsigned short __seed16v[3]) throw();
    extern void lcong48(unsigned short __param[7]) throw();
    struct drand48_data {
        struct drand48_data;
        unsigned short __x[3];
        unsigned short __old_x[3];
        unsigned short __c;
        unsigned short __init;
        unsigned long long __a;
    };
    extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result) throw();
    extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result) throw();
    extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int srand48_r(long __seedval, struct drand48_data *__buffer) throw();
    extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer) throw();
    extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer) throw();
    extern void *malloc(size_t __size) throw();
    extern void *calloc(size_t __nmemb, size_t __size) throw();
    extern void *realloc(void *__ptr, size_t __size) throw();
    extern void free(void *__ptr) throw();
    extern void cfree(void *__ptr) throw();
    extern "C" {
        extern void *alloca(size_t __size) throw();
    }
    extern void *valloc(size_t __size) throw();
    extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size) throw();
    extern void abort() throw();
    extern int atexit(void (*__func)()) throw();
    extern "C++" extern int at_quick_exit(void (*__func)()) throw()
    extern int on_exit(void (*__func)(int, void *), void *__arg) throw();
    extern void exit(int __status) throw();
    extern void quick_exit(int __status) throw();
    extern void _Exit(int __status) throw();
    extern char *getenv(const char *__name) throw();
    extern char *__secure_getenv(const char *__name) throw();
    extern int putenv(char *__string) throw();
    extern int setenv(const char *__name, const char *__value, int __replace) throw();
    extern int unsetenv(const char *__name) throw();
    extern int clearenv() throw();
    extern char *mktemp(char *__template) throw();
    extern int mkstemp(char *__template);
    extern int mkstemp64(char *__template);
    extern int mkstemps(char *__template, int __suffixlen);
    extern int mkstemps64(char *__template, int __suffixlen);
    extern char *mkdtemp(char *__template) throw();
    extern int mkostemp(char *__template, int __flags);
    extern int mkostemp64(char *__template, int __flags);
    extern int mkostemps(char *__template, int __suffixlen, int __flags);
    extern int mkostemps64(char *__template, int __suffixlen, int __flags);
    extern int system(const char *__command);
    extern char *canonicalize_file_name(const char *__name) throw();
    extern char *realpath(const char *restrict __name, char *restrict __resolved) throw();
    typedef int (*__compar_fn_t)(const void *, const void *);
    typedef __compar_fn_t comparison_fn_t;
    typedef int (*__compar_d_fn_t)(const void *, const void *, void *);
    extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
    extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
    extern void qsort_r(void *__base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void *__arg);
    extern int abs(int __x) throw();
    extern long labs(long __x) throw();
    extern long long llabs(long long __x) throw();
    extern div_t div(int __numer, int __denom) throw();
    extern ldiv_t ldiv(long __numer, long __denom) throw();
    extern lldiv_t lldiv(long long __numer, long long __denom) throw();
    extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *gcvt(double __value, int __ndigit, char *__buf) throw();
    extern char *qecvt(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *qfcvt(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *qgcvt(long double __value, int __ndigit, char *__buf) throw();
    extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int qecvt_r(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int qfcvt_r(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int mblen(const char *__s, size_t __n) throw();
    extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n) throw();
    extern int wctomb(char *__s, wchar_t __wchar) throw();
    extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n) throw();
    extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n) throw();
    extern int rpmatch(const char *__response) throw();
    extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep) throw();
    extern void setkey(const char *__key) throw();
    extern int posix_openpt(int __oflag);
    extern int grantpt(int __fd) throw();
    extern int unlockpt(int __fd) throw();
    extern char *ptsname(int __fd) throw();
    extern int ptsname_r(int __fd, char *__buf, size_t __buflen) throw();
    extern int getpt();
    extern int getloadavg(double __loadavg[], int __nelem) throw();
}
extern "C" {
    struct stat {
        struct stat;
        __dev_t st_dev;
        unsigned short __pad1;
        __ino_t st_ino;
        __mode_t st_mode;
        __nlink_t st_nlink;
        __uid_t st_uid;
        __gid_t st_gid;
        __dev_t st_rdev;
        unsigned short __pad2;
        __off_t st_size;
        __blksize_t st_blksize;
        __blkcnt_t st_blocks;
        struct timespec st_atim;
        struct timespec st_mtim;
        struct timespec st_ctim;
        unsigned long __unused4;
        unsigned long __unused5;
        inline stat() throw() : st_atim(), st_mtim(), st_ctim() (CompoundStmt 0xa954d98 </usr/include/i386-linux-gnu/bits/stat.h:39:8>)


        inline stat(const stat &) throw();
    };
    struct stat64 {
        struct stat64;
        __dev_t st_dev;
        unsigned int __pad1;
        __ino_t __st_ino;
        __mode_t st_mode;
        __nlink_t st_nlink;
        __uid_t st_uid;
        __gid_t st_gid;
        __dev_t st_rdev;
        unsigned int __pad2;
        __off64_t st_size;
        __blksize_t st_blksize;
        __blkcnt64_t st_blocks;
        struct timespec st_atim;
        struct timespec st_mtim;
        struct timespec st_ctim;
        __ino64_t st_ino;
    };
    extern int stat(const char *restrict __file, struct stat *restrict __buf) throw();
    extern int fstat(int __fd, struct stat *__buf) throw();
    extern int stat64(const char *restrict __file, struct stat64 *restrict __buf) throw();
    extern int fstat64(int __fd, struct stat64 *__buf) throw();
    extern int fstatat(int __fd, const char *restrict __file, struct stat *restrict __buf, int __flag) throw();
    extern int fstatat64(int __fd, const char *restrict __file, struct stat64 *restrict __buf, int __flag) throw();
    extern int lstat(const char *restrict __file, struct stat *restrict __buf) throw();
    extern int lstat64(const char *restrict __file, struct stat64 *restrict __buf) throw();
    extern int chmod(const char *__file, __mode_t __mode) throw();
    extern int lchmod(const char *__file, __mode_t __mode) throw();
    extern int fchmod(int __fd, __mode_t __mode) throw();
    extern int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag) throw();
    extern __mode_t umask(__mode_t __mask) throw();
    extern __mode_t getumask() throw();
    extern int mkdir(const char *__path, __mode_t __mode) throw();
    extern int mkdirat(int __fd, const char *__path, __mode_t __mode) throw();
    extern int mknod(const char *__path, __mode_t __mode, __dev_t __dev) throw();
    extern int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw();
    extern int mkfifo(const char *__path, __mode_t __mode) throw();
    extern int mkfifoat(int __fd, const char *__path, __mode_t __mode) throw();
    extern int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags) throw();
    extern int futimens(int __fd, const struct timespec __times[2]) throw();
    extern int __fxstat(int __ver, int __fildes, struct stat *__stat_buf) throw();
    extern int __xstat(int __ver, const char *__filename, struct stat *__stat_buf) throw();
    extern int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf) throw();
    extern int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag) throw();
    extern int __fxstat64(int __ver, int __fildes, struct stat64 *__stat_buf) throw();
    extern int __xstat64(int __ver, const char *__filename, struct stat64 *__stat_buf) throw();
    extern int __lxstat64(int __ver, const char *__filename, struct stat64 *__stat_buf) throw();
    extern int __fxstatat64(int __ver, int __fildes, const char *__filename, struct stat64 *__stat_buf, int __flag) throw();
    extern int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev) throw();
    extern int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev) throw();
}
extern "C" {
    typedef __intptr_t intptr_t;
    typedef __socklen_t socklen_t;
    extern int access(const char *__name, int __type) throw();
    extern int euidaccess(const char *__name, int __type) throw();
    extern int eaccess(const char *__name, int __type) throw();
    extern int faccessat(int __fd, const char *__file, int __type, int __flag) throw();
    extern __off_t lseek(int __fd, __off_t __offset, int __whence) throw();
    extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence) throw();
    extern int close(int __fd);
    extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
    extern ssize_t write(int __fd, const void *__buf, size_t __n);
    extern ssize_t pread(int __fd, void *__buf, size_t __nbytes, __off_t __offset);
    extern ssize_t pwrite(int __fd, const void *__buf, size_t __n, __off_t __offset);
    extern ssize_t pread64(int __fd, void *__buf, size_t __nbytes, __off64_t __offset);
    extern ssize_t pwrite64(int __fd, const void *__buf, size_t __n, __off64_t __offset);
    extern int pipe(int __pipedes[2]) throw();
    extern int pipe2(int __pipedes[2], int __flags) throw();
    extern unsigned int alarm(unsigned int __seconds) throw();
    extern unsigned int sleep(unsigned int __seconds);
    extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval) throw();
    extern int usleep(__useconds_t __useconds);
    extern int pause();
    extern int chown(const char *__file, __uid_t __owner, __gid_t __group) throw();
    extern int fchown(int __fd, __uid_t __owner, __gid_t __group) throw();
    extern int lchown(const char *__file, __uid_t __owner, __gid_t __group) throw();
    extern int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag) throw();
    extern int chdir(const char *__path) throw();
    extern int fchdir(int __fd) throw();
    extern char *getcwd(char *__buf, size_t __size) throw();
    extern char *get_current_dir_name() throw();
    extern char *getwd(char *__buf) throw();
    extern int dup(int __fd) throw();
    extern int dup2(int __fd, int __fd2) throw();
    extern int dup3(int __fd, int __fd2, int __flags) throw();
    extern char **__environ;
    extern char **environ;
    extern int execve(const char *__path, char *const __argv[], char *const __envp[]) throw();
    extern int fexecve(int __fd, char *const __argv[], char *const __envp[]) throw();
    extern int execv(const char *__path, char *const __argv[]) throw();
    extern int execle(const char *__path, const char *__arg, ...) throw();
    extern int execl(const char *__path, const char *__arg, ...) throw();
    extern int execvp(const char *__file, char *const __argv[]) throw();
    extern int execlp(const char *__file, const char *__arg, ...) throw();
    extern int execvpe(const char *__file, char *const __argv[], char *const __envp[]) throw();
    extern int nice(int __inc) throw();
    extern void _exit(int __status);
    enum  {
        _PC_LINK_MAX,
        _PC_MAX_CANON,
        _PC_MAX_INPUT,
        _PC_NAME_MAX,
        _PC_PATH_MAX,
        _PC_PIPE_BUF,
        _PC_CHOWN_RESTRICTED,
        _PC_NO_TRUNC,
        _PC_VDISABLE,
        _PC_SYNC_IO,
        _PC_ASYNC_IO,
        _PC_PRIO_IO,
        _PC_SOCK_MAXBUF,
        _PC_FILESIZEBITS,
        _PC_REC_INCR_XFER_SIZE,
        _PC_REC_MAX_XFER_SIZE,
        _PC_REC_MIN_XFER_SIZE,
        _PC_REC_XFER_ALIGN,
        _PC_ALLOC_SIZE_MIN,
        _PC_SYMLINK_MAX,
        _PC_2_SYMLINKS
    };
    enum  {
        _SC_ARG_MAX,
        _SC_CHILD_MAX,
        _SC_CLK_TCK,
        _SC_NGROUPS_MAX,
        _SC_OPEN_MAX,
        _SC_STREAM_MAX,
        _SC_TZNAME_MAX,
        _SC_JOB_CONTROL,
        _SC_SAVED_IDS,
        _SC_REALTIME_SIGNALS,
        _SC_PRIORITY_SCHEDULING,
        _SC_TIMERS,
        _SC_ASYNCHRONOUS_IO,
        _SC_PRIORITIZED_IO,
        _SC_SYNCHRONIZED_IO,
        _SC_FSYNC,
        _SC_MAPPED_FILES,
        _SC_MEMLOCK,
        _SC_MEMLOCK_RANGE,
        _SC_MEMORY_PROTECTION,
        _SC_MESSAGE_PASSING,
        _SC_SEMAPHORES,
        _SC_SHARED_MEMORY_OBJECTS,
        _SC_AIO_LISTIO_MAX,
        _SC_AIO_MAX,
        _SC_AIO_PRIO_DELTA_MAX,
        _SC_DELAYTIMER_MAX,
        _SC_MQ_OPEN_MAX,
        _SC_MQ_PRIO_MAX,
        _SC_VERSION,
        _SC_PAGESIZE,
        _SC_RTSIG_MAX,
        _SC_SEM_NSEMS_MAX,
        _SC_SEM_VALUE_MAX,
        _SC_SIGQUEUE_MAX,
        _SC_TIMER_MAX,
        _SC_BC_BASE_MAX,
        _SC_BC_DIM_MAX,
        _SC_BC_SCALE_MAX,
        _SC_BC_STRING_MAX,
        _SC_COLL_WEIGHTS_MAX,
        _SC_EQUIV_CLASS_MAX,
        _SC_EXPR_NEST_MAX,
        _SC_LINE_MAX,
        _SC_RE_DUP_MAX,
        _SC_CHARCLASS_NAME_MAX,
        _SC_2_VERSION,
        _SC_2_C_BIND,
        _SC_2_C_DEV,
        _SC_2_FORT_DEV,
        _SC_2_FORT_RUN,
        _SC_2_SW_DEV,
        _SC_2_LOCALEDEF,
        _SC_PII,
        _SC_PII_XTI,
        _SC_PII_SOCKET,
        _SC_PII_INTERNET,
        _SC_PII_OSI,
        _SC_POLL,
        _SC_SELECT,
        _SC_UIO_MAXIOV,
        _SC_IOV_MAX = (ImplicitCastExpr 0xa5898d8 </usr/include/i386-linux-gnu/bits/confname.h:202:26> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa576904 <col:26> 'int' EnumConstant 0xa5768d0 '_SC_UIO_MAXIOV' 'enum <anonymous at /usr/include/i386-linux-gnu/bits/confname.h:73:1>'))
,
        _SC_PII_INTERNET_STREAM,
        _SC_PII_INTERNET_DGRAM,
        _SC_PII_OSI_COTS,
        _SC_PII_OSI_CLTS,
        _SC_PII_OSI_M,
        _SC_T_IOV_MAX,
        _SC_THREADS,
        _SC_THREAD_SAFE_FUNCTIONS,
        _SC_GETGR_R_SIZE_MAX,
        _SC_GETPW_R_SIZE_MAX,
        _SC_LOGIN_NAME_MAX,
        _SC_TTY_NAME_MAX,
        _SC_THREAD_DESTRUCTOR_ITERATIONS,
        _SC_THREAD_KEYS_MAX,
        _SC_THREAD_STACK_MIN,
        _SC_THREAD_THREADS_MAX,
        _SC_THREAD_ATTR_STACKADDR,
        _SC_THREAD_ATTR_STACKSIZE,
        _SC_THREAD_PRIORITY_SCHEDULING,
        _SC_THREAD_PRIO_INHERIT,
        _SC_THREAD_PRIO_PROTECT,
        _SC_THREAD_PROCESS_SHARED,
        _SC_NPROCESSORS_CONF,
        _SC_NPROCESSORS_ONLN,
        _SC_PHYS_PAGES,
        _SC_AVPHYS_PAGES,
        _SC_ATEXIT_MAX,
        _SC_PASS_MAX,
        _SC_XOPEN_VERSION,
        _SC_XOPEN_XCU_VERSION,
        _SC_XOPEN_UNIX,
        _SC_XOPEN_CRYPT,
        _SC_XOPEN_ENH_I18N,
        _SC_XOPEN_SHM,
        _SC_2_CHAR_TERM,
        _SC_2_C_VERSION,
        _SC_2_UPE,
        _SC_XOPEN_XPG2,
        _SC_XOPEN_XPG3,
        _SC_XOPEN_XPG4,
        _SC_CHAR_BIT,
        _SC_CHAR_MAX,
        _SC_CHAR_MIN,
        _SC_INT_MAX,
        _SC_INT_MIN,
        _SC_LONG_BIT,
        _SC_WORD_BIT,
        _SC_MB_LEN_MAX,
        _SC_NZERO,
        _SC_SSIZE_MAX,
        _SC_SCHAR_MAX,
        _SC_SCHAR_MIN,
        _SC_SHRT_MAX,
        _SC_SHRT_MIN,
        _SC_UCHAR_MAX,
        _SC_UINT_MAX,
        _SC_ULONG_MAX,
        _SC_USHRT_MAX,
        _SC_NL_ARGMAX,
        _SC_NL_LANGMAX,
        _SC_NL_MSGMAX,
        _SC_NL_NMAX,
        _SC_NL_SETMAX,
        _SC_NL_TEXTMAX,
        _SC_XBS5_ILP32_OFF32,
        _SC_XBS5_ILP32_OFFBIG,
        _SC_XBS5_LP64_OFF64,
        _SC_XBS5_LPBIG_OFFBIG,
        _SC_XOPEN_LEGACY,
        _SC_XOPEN_REALTIME,
        _SC_XOPEN_REALTIME_THREADS,
        _SC_ADVISORY_INFO,
        _SC_BARRIERS,
        _SC_BASE,
        _SC_C_LANG_SUPPORT,
        _SC_C_LANG_SUPPORT_R,
        _SC_CLOCK_SELECTION,
        _SC_CPUTIME,
        _SC_THREAD_CPUTIME,
        _SC_DEVICE_IO,
        _SC_DEVICE_SPECIFIC,
        _SC_DEVICE_SPECIFIC_R,
        _SC_FD_MGMT,
        _SC_FIFO,
        _SC_PIPE,
        _SC_FILE_ATTRIBUTES,
        _SC_FILE_LOCKING,
        _SC_FILE_SYSTEM,
        _SC_MONOTONIC_CLOCK,
        _SC_MULTI_PROCESS,
        _SC_SINGLE_PROCESS,
        _SC_NETWORKING,
        _SC_READER_WRITER_LOCKS,
        _SC_SPIN_LOCKS,
        _SC_REGEXP,
        _SC_REGEX_VERSION,
        _SC_SHELL,
        _SC_SIGNALS,
        _SC_SPAWN,
        _SC_SPORADIC_SERVER,
        _SC_THREAD_SPORADIC_SERVER,
        _SC_SYSTEM_DATABASE,
        _SC_SYSTEM_DATABASE_R,
        _SC_TIMEOUTS,
        _SC_TYPED_MEMORY_OBJECTS,
        _SC_USER_GROUPS,
        _SC_USER_GROUPS_R,
        _SC_2_PBS,
        _SC_2_PBS_ACCOUNTING,
        _SC_2_PBS_LOCATE,
        _SC_2_PBS_MESSAGE,
        _SC_2_PBS_TRACK,
        _SC_SYMLOOP_MAX,
        _SC_STREAMS,
        _SC_2_PBS_CHECKPOINT,
        _SC_V6_ILP32_OFF32,
        _SC_V6_ILP32_OFFBIG,
        _SC_V6_LP64_OFF64,
        _SC_V6_LPBIG_OFFBIG,
        _SC_HOST_NAME_MAX,
        _SC_TRACE,
        _SC_TRACE_EVENT_FILTER,
        _SC_TRACE_INHERIT,
        _SC_TRACE_LOG,
        _SC_LEVEL1_ICACHE_SIZE,
        _SC_LEVEL1_ICACHE_ASSOC,
        _SC_LEVEL1_ICACHE_LINESIZE,
        _SC_LEVEL1_DCACHE_SIZE,
        _SC_LEVEL1_DCACHE_ASSOC,
        _SC_LEVEL1_DCACHE_LINESIZE,
        _SC_LEVEL2_CACHE_SIZE,
        _SC_LEVEL2_CACHE_ASSOC,
        _SC_LEVEL2_CACHE_LINESIZE,
        _SC_LEVEL3_CACHE_SIZE,
        _SC_LEVEL3_CACHE_ASSOC,
        _SC_LEVEL3_CACHE_LINESIZE,
        _SC_LEVEL4_CACHE_SIZE,
        _SC_LEVEL4_CACHE_ASSOC,
        _SC_LEVEL4_CACHE_LINESIZE,
        _SC_IPV6 = (ImplicitCastExpr 0xa5898e8 </usr/include/i386-linux-gnu/bits/confname.h:468:33, line:499:41> 'unsigned int' <IntegralCast>
  (BinaryOperator 0xa589548 <line:468:33, line:499:41> 'int' '+'
    (DeclRefExpr 0xa589514 <line:468:33> 'int' EnumConstant 0xa5810f0 '_SC_LEVEL1_ICACHE_SIZE' 'enum <anonymous at /usr/include/i386-linux-gnu/bits/confname.h:73:1>')
    (IntegerLiteral 0xa589530 <line:499:41> 'int' 50)))
,
        _SC_RAW_SOCKETS,
        _SC_V7_ILP32_OFF32,
        _SC_V7_ILP32_OFFBIG,
        _SC_V7_LP64_OFF64,
        _SC_V7_LPBIG_OFFBIG,
        _SC_SS_REPL_MAX,
        _SC_TRACE_EVENT_NAME_MAX,
        _SC_TRACE_NAME_MAX,
        _SC_TRACE_SYS_MAX,
        _SC_TRACE_USER_EVENT_MAX,
        _SC_XOPEN_STREAMS,
        _SC_THREAD_ROBUST_PRIO_INHERIT,
        _SC_THREAD_ROBUST_PRIO_PROTECT
    };
    enum  {
        _CS_PATH,
        _CS_V6_WIDTH_RESTRICTED_ENVS,
        _CS_GNU_LIBC_VERSION,
        _CS_GNU_LIBPTHREAD_VERSION,
        _CS_V5_WIDTH_RESTRICTED_ENVS,
        _CS_V7_WIDTH_RESTRICTED_ENVS,
        _CS_LFS_CFLAGS = (ImplicitCastExpr 0xa58d9b8 </usr/include/i386-linux-gnu/bits/confname.h:557:22> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa589ad8 <col:22> 'int' 1000))
,
        _CS_LFS_LDFLAGS,
        _CS_LFS_LIBS,
        _CS_LFS_LINTFLAGS,
        _CS_LFS64_CFLAGS,
        _CS_LFS64_LDFLAGS,
        _CS_LFS64_LIBS,
        _CS_LFS64_LINTFLAGS,
        _CS_XBS5_ILP32_OFF32_CFLAGS = (ImplicitCastExpr 0xa58d9c8 </usr/include/i386-linux-gnu/bits/confname.h:574:35> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa589ce8 <col:35> 'int' 1100))
,
        _CS_XBS5_ILP32_OFF32_LDFLAGS,
        _CS_XBS5_ILP32_OFF32_LIBS,
        _CS_XBS5_ILP32_OFF32_LINTFLAGS,
        _CS_XBS5_ILP32_OFFBIG_CFLAGS,
        _CS_XBS5_ILP32_OFFBIG_LDFLAGS,
        _CS_XBS5_ILP32_OFFBIG_LIBS,
        _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
        _CS_XBS5_LP64_OFF64_CFLAGS,
        _CS_XBS5_LP64_OFF64_LDFLAGS,
        _CS_XBS5_LP64_OFF64_LIBS,
        _CS_XBS5_LP64_OFF64_LINTFLAGS,
        _CS_XBS5_LPBIG_OFFBIG_CFLAGS,
        _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
        _CS_XBS5_LPBIG_OFFBIG_LIBS,
        _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
        _CS_POSIX_V6_ILP32_OFF32_CFLAGS,
        _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
        _CS_POSIX_V6_ILP32_OFF32_LIBS,
        _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
        _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
        _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
        _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
        _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
        _CS_POSIX_V6_LP64_OFF64_CFLAGS,
        _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
        _CS_POSIX_V6_LP64_OFF64_LIBS,
        _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
        _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
        _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
        _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
        _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
        _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
        _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
        _CS_POSIX_V7_ILP32_OFF32_LIBS,
        _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
        _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
        _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
        _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
        _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
        _CS_POSIX_V7_LP64_OFF64_CFLAGS,
        _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
        _CS_POSIX_V7_LP64_OFF64_LIBS,
        _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
        _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
        _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
        _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
        _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
        _CS_V6_ENV,
        _CS_V7_ENV
    };
    extern long pathconf(const char *__path, int __name) throw();
    extern long fpathconf(int __fd, int __name) throw();
    extern long sysconf(int __name) throw();
    extern size_t confstr(int __name, char *__buf, size_t __len) throw();
    extern __pid_t getpid() throw();
    extern __pid_t getppid() throw();
    extern __pid_t getpgrp() throw();
    extern __pid_t __getpgid(__pid_t __pid) throw();
    extern __pid_t getpgid(__pid_t __pid) throw();
    extern int setpgid(__pid_t __pid, __pid_t __pgid) throw();
    extern int setpgrp() throw();
    extern __pid_t setsid() throw();
    extern __pid_t getsid(__pid_t __pid) throw();
    extern __uid_t getuid() throw();
    extern __uid_t geteuid() throw();
    extern __gid_t getgid() throw();
    extern __gid_t getegid() throw();
    extern int getgroups(int __size, __gid_t __list[]) throw();
    extern int group_member(__gid_t __gid) throw();
    extern int setuid(__uid_t __uid) throw();
    extern int setreuid(__uid_t __ruid, __uid_t __euid) throw();
    extern int seteuid(__uid_t __uid) throw();
    extern int setgid(__gid_t __gid) throw();
    extern int setregid(__gid_t __rgid, __gid_t __egid) throw();
    extern int setegid(__gid_t __gid) throw();
    extern int getresuid(__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid) throw();
    extern int getresgid(__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid) throw();
    extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid) throw();
    extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid) throw();
    extern __pid_t fork() throw();
    extern __pid_t vfork() throw() __attribute((returns_twice));
    extern char *ttyname(int __fd) throw();
    extern int ttyname_r(int __fd, char *__buf, size_t __buflen) throw();
    extern int isatty(int __fd) throw();
    extern int ttyslot() throw();
    extern int link(const char *__from, const char *__to) throw();
    extern int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags) throw();
    extern int symlink(const char *__from, const char *__to) throw();
    extern ssize_t readlink(const char *restrict __path, char *restrict __buf, size_t __len) throw();
    extern int symlinkat(const char *__from, int __tofd, const char *__to) throw();
    extern ssize_t readlinkat(int __fd, const char *restrict __path, char *restrict __buf, size_t __len) throw();
    extern int unlink(const char *__name) throw();
    extern int unlinkat(int __fd, const char *__name, int __flag) throw();
    extern int rmdir(const char *__path) throw();
    extern __pid_t tcgetpgrp(int __fd) throw();
    extern int tcsetpgrp(int __fd, __pid_t __pgrp_id) throw();
    extern char *getlogin();
    extern int getlogin_r(char *__name, size_t __name_len);
    extern int setlogin(const char *__name) throw();
    extern "C" {
        extern char *optarg;
        extern int optind;
        extern int opterr;
        extern int optopt;
        extern int getopt(int ___argc, char *const *___argv, const char *__shortopts) throw();
    }
    extern int gethostname(char *__name, size_t __len) throw();
    extern int sethostname(const char *__name, size_t __len) throw();
    extern int sethostid(long __id) throw();
    extern int getdomainname(char *__name, size_t __len) throw();
    extern int setdomainname(const char *__name, size_t __len) throw();
    extern int vhangup() throw();
    extern int revoke(const char *__file) throw();
    extern int profil(unsigned short *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale) throw();
    extern int acct(const char *__name) throw();
    extern char *getusershell() throw();
    extern void endusershell() throw();
    extern void setusershell() throw();
    extern int daemon(int __nochdir, int __noclose) throw();
    extern int chroot(const char *__path) throw();
    extern char *getpass(const char *__prompt);
    extern int fsync(int __fd);
    extern int syncfs(int __fd) throw();
    extern long gethostid();
    extern void sync() throw();
    extern int getpagesize() throw();
    extern int getdtablesize() throw();
    extern int truncate(const char *__file, __off_t __length) throw();
    extern int truncate64(const char *__file, __off64_t __length) throw();
    extern int ftruncate(int __fd, __off_t __length) throw();
    extern int ftruncate64(int __fd, __off64_t __length) throw();
    extern int brk(void *__addr) throw();
    extern void *sbrk(intptr_t __delta) throw();
    extern long syscall(long __sysno, ...) throw();
    extern int lockf(int __fd, int __cmd, __off_t __len);
    extern int lockf64(int __fd, int __cmd, __off64_t __len);
    extern int fdatasync(int __fildes);
    extern char *crypt(const char *__key, const char *__salt) throw();
    extern void encrypt(char *__libc_block, int __edflag) throw();
    extern void swab(const void *restrict __from, void *restrict __to, ssize_t __n) throw();
    extern char *ctermid(char *__s) throw();
}
extern "C" {
    struct iovec {
        struct iovec;
        void *iov_base;
        size_t iov_len;
    };
    struct flock {
        struct flock;
        short l_type;
        short l_whence;
        __off_t l_start;
        __off_t l_len;
        __pid_t l_pid;
    };
    struct flock64 {
        struct flock64;
        short l_type;
        short l_whence;
        __off64_t l_start;
        __off64_t l_len;
        __pid_t l_pid;
    };
    enum __pid_type {
        F_OWNER_TID = (ImplicitCastExpr 0xa59ac58 </usr/include/i386-linux-gnu/bits/fcntl.h:182:19> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa59ab30 <col:19> 'int' 0))
,
        F_OWNER_PID,
        F_OWNER_PGRP,
        F_OWNER_GID = (ImplicitCastExpr 0xa59ac68 </usr/include/i386-linux-gnu/bits/fcntl.h:185:19> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa59ac04 <col:19> 'int' EnumConstant 0xa59abd0 'F_OWNER_PGRP' 'enum __pid_type'))

    };
    struct f_owner_ex {
        struct f_owner_ex;
        enum __pid_type type;
        __pid_t pid;
    };
    struct file_handle {
        struct file_handle;
        unsigned int handle_bytes;
        int handle_type;
        unsigned char f_handle[0];
    };
    extern "C" {
        extern ssize_t readahead(int __fd, __off64_t __offset, size_t __count) throw();
        extern int sync_file_range(int __fd, __off64_t __offset, __off64_t __count, unsigned int __flags);
        extern ssize_t vmsplice(int __fdout, const struct iovec *__iov, size_t __count, unsigned int __flags);
        extern ssize_t splice(int __fdin, __off64_t *__offin, int __fdout, __off64_t *__offout, size_t __len, unsigned int __flags);
        extern ssize_t tee(int __fdin, int __fdout, size_t __len, unsigned int __flags);
        extern int fallocate(int __fd, int __mode, __off_t __offset, __off_t __len);
        extern int fallocate64(int __fd, int __mode, __off64_t __offset, __off64_t __len);
        extern int name_to_handle_at(int __dfd, const char *__name, struct file_handle *__handle, int *__mnt_id, int __flags) throw();
        extern int open_by_handle_at(int __mountdirfd, struct file_handle *__handle, int __flags);
    }
    extern int fcntl(int __fd, int __cmd, ...);
    extern int open(const char *__file, int __oflag, ...);
    extern int open64(const char *__file, int __oflag, ...);
    extern int openat(int __fd, const char *__file, int __oflag, ...);
    extern int openat64(int __fd, const char *__file, int __oflag, ...);
    extern int creat(const char *__file, __mode_t __mode);
    extern int creat64(const char *__file, __mode_t __mode);
    extern int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise) throw();
    extern int posix_fadvise64(int __fd, __off64_t __offset, __off64_t __len, int __advise) throw();
    extern int posix_fallocate(int __fd, __off_t __offset, __off_t __len);
    extern int posix_fallocate64(int __fd, __off64_t __offset, __off64_t __len);
}
extern "C" {
    extern char *dirname(char *__path) throw();
    extern char *__xpg_basename(char *__path) throw();
}
extern "C" {
    extern int *__errno_location() throw();
    extern char *program_invocation_name;
    extern char *program_invocation_short_name;
}
typedef int error_t;
extern "C" {
    typedef long s_reg_t;
    typedef unsigned long active_reg_t;
    typedef unsigned long reg_syntax_t;
    extern reg_syntax_t re_syntax_options;
    enum  {
        REG_ENOSYS = (UnaryOperator 0xa5bbe48 </usr/include/regex.h:324:16, col:17> 'int' prefix '-'
  (IntegerLiteral 0xa5bbe30 <col:17> 'int' 1))
,
        REG_NOERROR = (IntegerLiteral 0xa5bbe98 </usr/include/regex.h:327:17> 'int' 0)
,
        REG_NOMATCH,
        REG_BADPAT,
        REG_ECOLLATE,
        REG_ECTYPE,
        REG_EESCAPE,
        REG_ESUBREG,
        REG_EBRACK,
        REG_EPAREN,
        REG_EBRACE,
        REG_BADBR,
        REG_ERANGE,
        REG_ESPACE,
        REG_BADRPT,
        REG_EEND,
        REG_ESIZE,
        REG_ERPAREN
    };
    typedef enum reg_errcode_t reg_errcode_t;
    struct re_pattern_buffer {
        struct re_pattern_buffer;
        unsigned char *buffer;
        unsigned long allocated;
        unsigned long used;
        reg_syntax_t syntax;
        char *fastmap;
        unsigned char *translate;
        size_t re_nsub;
        unsigned int can_be_null : (IntegerLiteral 0xa5bc660 </usr/include/regex.h:404:41> 'int' 1)
;
        unsigned int regs_allocated : (IntegerLiteral 0xa5bc6c0 </usr/include/regex.h:415:44> 'int' 2)
;
        unsigned int fastmap_accurate : (IntegerLiteral 0xa5bc720 </usr/include/regex.h:419:46> 'int' 1)
;
        unsigned int no_sub : (IntegerLiteral 0xa5bc780 </usr/include/regex.h:423:36> 'int' 1)
;
        unsigned int not_bol : (IntegerLiteral 0xa5bc7e0 </usr/include/regex.h:427:37> 'int' 1)
;
        unsigned int not_eol : (IntegerLiteral 0xa5bc840 </usr/include/regex.h:430:37> 'int' 1)
;
        unsigned int newline_anchor : (IntegerLiteral 0xa5bc8a0 </usr/include/regex.h:433:44> 'int' 1)
;
    };
    typedef struct re_pattern_buffer regex_t;
    typedef int regoff_t;
    struct re_registers {
        struct re_registers;
        unsigned int num_regs;
        regoff_t *start;
        regoff_t *end;
    };
    struct {
        regoff_t rm_so;
        regoff_t rm_eo;
        inline () throw() (CompoundStmt 0xa9710d0 </usr/include/regex.h:465:9>)


        inline (const regmatch_t &) throw();
    };
    typedef struct regmatch_t regmatch_t;
    extern reg_syntax_t re_set_syntax(reg_syntax_t __syntax);
    extern const char *re_compile_pattern(const char *__pattern, size_t __length, struct re_pattern_buffer *__buffer);
    extern int re_compile_fastmap(struct re_pattern_buffer *__buffer);
    extern int re_search(struct re_pattern_buffer *__buffer, const char *__string, int __length, int __start, int __range, struct re_registers *__regs);
    extern int re_search_2(struct re_pattern_buffer *__buffer, const char *__string1, int __length1, const char *__string2, int __length2, int __start, int __range, struct re_registers *__regs, int __stop);
    extern int re_match(struct re_pattern_buffer *__buffer, const char *__string, int __length, int __start, struct re_registers *__regs);
    extern int re_match_2(struct re_pattern_buffer *__buffer, const char *__string1, int __length1, const char *__string2, int __length2, int __start, struct re_registers *__regs, int __stop);
    extern void re_set_registers(struct re_pattern_buffer *__buffer, struct re_registers *__regs, unsigned int __num_regs, regoff_t *__starts, regoff_t *__ends);
    extern int regcomp(regex_t *restrict __preg, const char *restrict __pattern, int __cflags);
    extern int regexec(const regex_t *restrict __preg, const char *restrict __string, size_t __nmatch, regmatch_t __pmatch[], int __eflags);
    extern size_t regerror(int __errcode, const regex_t *restrict __preg, char *restrict __errbuf, size_t __errbuf_size);
    extern void regfree(regex_t *__preg);
}
enum  {
    __LC_CTYPE = (ImplicitCastExpr 0xa5c2b58 </usr/include/i386-linux-gnu/bits/locale.h:29:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf1d0 <col:16> 'int' 0))
,
    __LC_NUMERIC = (ImplicitCastExpr 0xa5c2b68 </usr/include/i386-linux-gnu/bits/locale.h:30:18> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf228 <col:18> 'int' 1))
,
    __LC_TIME = (ImplicitCastExpr 0xa5c2b78 </usr/include/i386-linux-gnu/bits/locale.h:31:15> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf278 <col:15> 'int' 2))
,
    __LC_COLLATE = (ImplicitCastExpr 0xa5c2b88 </usr/include/i386-linux-gnu/bits/locale.h:32:18> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf2c8 <col:18> 'int' 3))
,
    __LC_MONETARY = (ImplicitCastExpr 0xa5c2b98 </usr/include/i386-linux-gnu/bits/locale.h:33:19> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf318 <col:19> 'int' 4))
,
    __LC_MESSAGES = (ImplicitCastExpr 0xa5c2ba8 </usr/include/i386-linux-gnu/bits/locale.h:34:19> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf368 <col:19> 'int' 5))
,
    __LC_ALL = (ImplicitCastExpr 0xa5c2bb8 </usr/include/i386-linux-gnu/bits/locale.h:35:14> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5bf3b8 <col:14> 'int' 6))
,
    __LC_PAPER = (ImplicitCastExpr 0xa5c2bc8 </usr/include/i386-linux-gnu/bits/locale.h:36:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5c2978 <col:16> 'int' 7))
,
    __LC_NAME = (ImplicitCastExpr 0xa5c2bd8 </usr/include/i386-linux-gnu/bits/locale.h:37:15> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5c29c8 <col:15> 'int' 8))
,
    __LC_ADDRESS = (ImplicitCastExpr 0xa5c2be8 </usr/include/i386-linux-gnu/bits/locale.h:38:18> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5c2a18 <col:18> 'int' 9))
,
    __LC_TELEPHONE = (ImplicitCastExpr 0xa5c2bf8 </usr/include/i386-linux-gnu/bits/locale.h:39:20> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5c2a68 <col:20> 'int' 10))
,
    __LC_MEASUREMENT = (ImplicitCastExpr 0xa5c2c08 </usr/include/i386-linux-gnu/bits/locale.h:40:22> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5c2ab8 <col:22> 'int' 11))
,
    __LC_IDENTIFICATION = (ImplicitCastExpr 0xa5c2c18 </usr/include/i386-linux-gnu/bits/locale.h:41:25> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5c2b08 <col:25> 'int' 12))

};
extern "C" {
    struct lconv {
        struct lconv;
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        char int_p_cs_precedes;
        char int_p_sep_by_space;
        char int_n_cs_precedes;
        char int_n_sep_by_space;
        char int_p_sign_posn;
        char int_n_sign_posn;
    };
    extern char *setlocale(int __category, const char *__locale) throw();
    extern struct lconv *localeconv() throw();
    extern __locale_t newlocale(int __category_mask, const char *__locale, __locale_t __base) throw();
    extern __locale_t duplocale(__locale_t __dataset) throw();
    extern void freelocale(__locale_t __dataset) throw();
    extern __locale_t uselocale(__locale_t __dataset) throw();
}
namespace std {
    typedef unsigned int size_t;
    typedef int ptrdiff_t;
}
namespace std {
    void __throw_bad_exception();
    void __throw_bad_alloc();
    void __throw_bad_cast();
    void __throw_bad_typeid();
    void __throw_logic_error(const char *);
    void __throw_domain_error(const char *);
    void __throw_invalid_argument(const char *);
    void __throw_length_error(const char *);
    void __throw_out_of_range(const char *);
    void __throw_runtime_error(const char *);
    void __throw_range_error(const char *);
    void __throw_overflow_error(const char *);
    void __throw_underflow_error(const char *);
    void __throw_ios_failure(const char *);
    void __throw_system_error(int);
    void __throw_future_error(int);
    void __throw_bad_function_call();
}
namespace __gnu_cxx {
    template <typename _Iterator = wchar_t *, typename _Container = std::basic_string<wchar_t>> class __normal_iterator
template <typename _Iterator = const wchar_t *, typename _Container = std::basic_string<wchar_t>> class __normal_iterator
template <typename _Iterator = std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> class __normal_iterator {
        class __normal_iterator;
    protected:
    protected:
        std::basic_string<char> *_M_current;
        typedef iterator_traits<std::basic_string<char> *> __traits_type;
    public:
    public:
        typedef std::basic_string<char> *iterator_type;
        typedef typename __traits_type::iterator_category iterator_category;
        typedef typename __traits_type::value_type value_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::reference reference;
        typedef typename __traits_type::pointer pointer;
        __normal_iterator();
        __normal_iterator(std::basic_string<char> *const &__i) : _M_current((ImplicitCastExpr 0xa9ca8a8 </usr/include/c++/4.6/bits/stl_iterator.h:720:60> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
  (DeclRefExpr 0xa9ca7bc <col:60> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ParmVar 0xa9a8160 '__i' 'class std::basic_string<char> *const &'))
) (CompoundStmt 0xa6319d0 </usr/include/c++/4.6/bits/stl_iterator.h:720:65, col:67>)


        template <typename _Iter = std::basic_string<char> *> __normal_iterator(const __normal_iterator<std::basic_string<char> *, typename __enable_if<(std::__are_same<basic_string<char> *, typename vector<basic_string<char>, allocator<basic_string<char> > >::pointer>::__value), vector<basic_string<char>, allocator<basic_string<char> > > >::__type> &__i)template <typename _Iter> __normal_iterator(const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename vector<basic_string<char>, allocator<basic_string<char> > >::pointer>::__value), vector<basic_string<char>, allocator<basic_string<char> > > >::__type> &__i);
        reference operator*() const (CompoundStmt 0xa9b3980 </usr/include/c++/4.6/bits/stl_iterator.h:733:7, col:29>
  (ReturnStmt 0xa9b3970 <col:9, col:17>
    (UnaryOperator 0xa9b3958 <col:16, col:17> 'class std::basic_string<char>' lvalue prefix '*'
      (ImplicitCastExpr 0xa9b3948 <col:17> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9b3928 <col:17> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ->_M_current 0xa9a7440
          (CXXThisExpr 0xa9b3848 <col:17> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))))


        pointer operator->() const;
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator++();
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator++(int);
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator--();
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator--(int);
        reference operator[](const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator+=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator+(const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator-=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator-(const difference_type &__n) const (CompoundStmt 0xa9d77a0 </usr/include/c++/4.6/bits/stl_iterator.h:781:7, col:53>
  (ReturnStmt 0xa9d7790 <col:9, col:50>
    (CXXConstructExpr 0xa9d7768 <col:16, col:50> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9d7758 <col:16, col:50> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9d7748 <col:16, col:50> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9d76d0 <col:16, col:50> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' functional cast to class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > <ConstructorConversion>
            (CXXConstructExpr 0xa9d76a8 <col:16, col:47> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (class std::basic_string<char> *const &)'
              (MaterializeTemporaryExpr 0xa9d7698 <col:34, col:47> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
                (BinaryOperator 0xa9d7680 <col:34, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' '-'
                  (ImplicitCastExpr 0xa9d7660 <col:34> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                    (MemberExpr 0xa9d7628 <col:34> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ->_M_current 0xa9a7440
                      (CXXThisExpr 0xa9d7550 <col:34> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this)))
                  (ImplicitCastExpr 0xa9d7670 <col:47> 'difference_type':'int' <LValueToRValue>
                    (DeclRefExpr 0xa9d7648 <col:47> 'const difference_type':'const int' lvalue ParmVar 0xa9aa0f0 '__n' 'const difference_type &')))))))))))


        std::basic_string<char> *const &base() const (CompoundStmt 0xa9afe98 </usr/include/c++/4.6/bits/stl_iterator.h:785:7, col:28>
  (ReturnStmt 0xa9afe88 <col:9, col:16>
    (MemberExpr 0xa9afe64 <col:16> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ->_M_current 0xa9a7440
      (CXXThisExpr 0xa9afd70 <col:16> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))


        inline __normal_iterator(const __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &) throw() : _M_current((ImplicitCastExpr 0xa9aad30 </usr/include/c++/4.6/bits/stl_iterator.h:702:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
  (MemberExpr 0xa9aad04 <col:11> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ._M_current 0xa9a7440
    (DeclRefExpr 0xa9aacec <col:11> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9aa380 '' 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))
) (CompoundStmt 0xa9aad60 </usr/include/c++/4.6/bits/stl_iterator.h:702:11>)


    }
template <typename _Iterator = const char *, typename _Container = std::basic_string<char>> class __normal_iterator
template <typename _Iterator = const std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> class __normal_iterator {
        class __normal_iterator;
    protected:
    protected:
        const std::basic_string<char> *_M_current;
        typedef iterator_traits<const std::basic_string<char> *> __traits_type;
    public:
    public:
        typedef const std::basic_string<char> *iterator_type;
        typedef typename __traits_type::iterator_category iterator_category;
        typedef typename __traits_type::value_type value_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::reference reference;
        typedef typename __traits_type::pointer pointer;
        __normal_iterator();
        __normal_iterator(const std::basic_string<char> *const &__i) : _M_current((ImplicitCastExpr 0xa9d66b8 </usr/include/c++/4.6/bits/stl_iterator.h:720:60> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
  (DeclRefExpr 0xa9d65cc <col:60> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ParmVar 0xa9d2bd0 '__i' 'const class std::basic_string<char> *const &'))
) (CompoundStmt 0xa6319d0 </usr/include/c++/4.6/bits/stl_iterator.h:720:65, col:67>)


        template <typename _Iter> __normal_iterator(const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename vector<basic_string<char>, allocator<basic_string<char> > >::pointer>::__value), vector<basic_string<char>, allocator<basic_string<char> > > >::__type> &__i);
        reference operator*() const (CompoundStmt 0xa9edfb0 </usr/include/c++/4.6/bits/stl_iterator.h:733:7, col:29>
  (ReturnStmt 0xa9edfa0 <col:9, col:17>
    (UnaryOperator 0xa9edf88 <col:16, col:17> 'const class std::basic_string<char>' lvalue prefix '*'
      (ImplicitCastExpr 0xa9edf78 <col:17> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9edf58 <col:17> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ->_M_current 0xa9d1db0
          (CXXThisExpr 0xa9ede80 <col:17> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))))


        pointer operator->() const;
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator++() (CompoundStmt 0xa9ede68 </usr/include/c++/4.6/bits/stl_iterator.h:741:7, line:744:7>
  (UnaryOperator 0xa9ede18 <line:742:2, col:4> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' lvalue prefix '++'
    (MemberExpr 0xa9eddf8 <col:4> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' lvalue ->_M_current 0xa9d1db0
      (CXXThisExpr 0xa9edd18 <col:4> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this)))
  (ReturnStmt 0xa9ede58 <line:743:2, col:10>
    (UnaryOperator 0xa9ede40 <col:9, col:10> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue prefix '*'
      (CXXThisExpr 0xa9ede30 <col:10> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))


        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator++(int);
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator--();
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator--(int);
        reference operator[](const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator+=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator+(const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator-=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator-(const difference_type &__n) const;
        const std::basic_string<char> *const &base() const (CompoundStmt 0xa9d6ef8 </usr/include/c++/4.6/bits/stl_iterator.h:785:7, col:28>
  (ReturnStmt 0xa9d6ee8 <col:9, col:16>
    (MemberExpr 0xa9d6ec4 <col:16> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ->_M_current 0xa9d1db0
      (CXXThisExpr 0xa9d6dd0 <col:16> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))


        inline __normal_iterator(const __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &) throw() : _M_current((ImplicitCastExpr 0xa9d6540 </usr/include/c++/4.6/bits/stl_iterator.h:702:11> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
  (MemberExpr 0xa9d6514 <col:11> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ._M_current 0xa9d1db0
    (DeclRefExpr 0xa9d64fc <col:11> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9d5720 '' 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))
) (CompoundStmt 0xa9d6570 </usr/include/c++/4.6/bits/stl_iterator.h:702:11>)


    }
template <typename _Iterator = char *, typename _Container = std::basic_string<char>> class __normal_iterator
template <typename _Iterator, typename _Container> class __normal_iterator;
}
namespace std {
    struct __true_type {
        struct __true_type;
    };
    struct __false_type {
        struct __false_type;
    };
    template <bool = true> struct __truth_type {
        struct __truth_type;
        typedef std::__true_type __type;
    }
template <bool> struct __truth_type {
        struct __truth_type;
        typedef std::__false_type __type;
    };
    struct __truth_type {
        struct __truth_type;
        typedef std::__true_type __type;
    };
    template <class _Sp = std::__is_integer<int>, class _Tp = std::__is_floating<int>> struct __traitor {
        struct __traitor;
        enum  {
            __value = (ImplicitCastExpr 0xa9a5418 </usr/include/c++/4.6/bits/cpp_type_traits.h:98:24, col:63> 'unsigned int' <IntegralCast>
  (BinaryOperator 0xa9a53c8 <col:24, col:63> '_Bool' '||'
    (CXXFunctionalCastExpr 0xa9a5188 <col:24, col:41> '_Bool' functional cast to _Bool <NoOp>
      (ImplicitCastExpr 0xa9a5178 <col:29, col:34> '_Bool' <IntegralToBoolean>
        (DeclRefExpr 0xa9a5154 <col:29, col:34> 'enum std::__is_integer<int>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:215:7>' EnumConstant 0xa5e5280 '__value' 'enum std::__is_integer<int>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:215:7>')))
    (CXXFunctionalCastExpr 0xa9a53b0 <col:46, col:63> '_Bool' functional cast to _Bool <NoOp>
      (ImplicitCastExpr 0xa9a53a0 <col:51, col:56> '_Bool' <IntegralToBoolean>
        (DeclRefExpr 0xa9a537c <col:51, col:56> 'enum std::__is_floating<int>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:260:7>' EnumConstant 0xa9a5300 '__value' 'enum std::__is_floating<int>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:260:7>')))))

        };
        typedef typename __truth_type<__value>::__type __type;
    }
template <class _Sp = std::__is_arithmetic<int>, class _Tp = std::__is_pointer<int>> struct __traitor {
        struct __traitor;
        enum  {
            __value = (ImplicitCastExpr 0xa9a5948 </usr/include/c++/4.6/bits/cpp_type_traits.h:98:24, col:63> 'unsigned int' <IntegralCast>
  (BinaryOperator 0xa9a58f8 <col:24, col:63> '_Bool' '||'
    (CXXFunctionalCastExpr 0xa9a56b0 <col:24, col:41> '_Bool' functional cast to _Bool <NoOp>
      (ImplicitCastExpr 0xa9a56a0 <col:29, col:34> '_Bool' <IntegralToBoolean>
        (DeclRefExpr 0xa9a5680 <col:29, col:34> 'enum std::__traitor<struct std::__is_integer<int>, struct std::__is_floating<int> >::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:98:7>' EnumConstant 0xa9a53e0 '__value' 'enum std::__traitor<struct std::__is_integer<int>, struct std::__is_floating<int> >::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:98:7>')))
    (CXXFunctionalCastExpr 0xa9a58e0 <col:46, col:63> '_Bool' functional cast to _Bool <NoOp>
      (ImplicitCastExpr 0xa9a58d0 <col:51, col:56> '_Bool' <IntegralToBoolean>
        (DeclRefExpr 0xa9a58ac <col:51, col:56> 'enum std::__is_pointer<int>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:292:7>' EnumConstant 0xa9a5830 '__value' 'enum std::__is_pointer<int>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:292:7>')))))

        };
        typedef typename __truth_type<__value>::__type __type;
    }
template <class _Sp, class _Tp> struct __traitor {
        struct __traitor;
        enum  {
            __value = (BinaryOperator 0xa5e0cf0 </usr/include/c++/4.6/bits/cpp_type_traits.h:98:24, col:63> '_Bool' '||'
  (CXXUnresolvedConstructExpr 0xa5e0c58 <col:24, col:41> '_Bool'
    (DependentScopeDeclRefExpr 0xa5e0c30 <col:29, col:34> '<dependent type>' lvalue))
  (CXXUnresolvedConstructExpr 0xa5e0cd0 <col:46, col:63> '_Bool'
    (DependentScopeDeclRefExpr 0xa5e0ca8 <col:51, col:56> '<dependent type>' lvalue)))

        };
        typedef typename __truth_type<__value>::__type __type;
    };
    template <typename  = std::basic_string<char>, typename  = std::basic_string<char>> struct __are_same {
        struct __are_same;
        enum  {
            __value = (ImplicitCastExpr 0xa9b2e48 </usr/include/c++/4.6/bits/cpp_type_traits.h:113:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e16b0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename  = std::basic_string<char> *, typename  = std::basic_string<char> *> struct __are_same {
        struct __are_same;
        enum  {
            __value = (ImplicitCastExpr 0xa9aa748 </usr/include/c++/4.6/bits/cpp_type_traits.h:113:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e16b0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename  = const std::basic_string<char> *, typename  = std::basic_string<char> *> struct __are_same {
        struct __are_same;
        enum  {
            __value = (ImplicitCastExpr 0xa9d5a78 </usr/include/c++/4.6/bits/cpp_type_traits.h:106:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e1220 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename , typename > struct __are_same {
        struct __are_same;
        enum  {
            __value = (IntegerLiteral 0xa5e1220 </usr/include/c++/4.6/bits/cpp_type_traits.h:106:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __are_same {
        struct __are_same;
        enum  {
            __value = (IntegerLiteral 0xa5e16b0 </usr/include/c++/4.6/bits/cpp_type_traits.h:113:24> 'int' 1)

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = void> struct __is_void {
        struct __is_void;
        enum  {
            __value = (ImplicitCastExpr 0xa5e2a48 </usr/include/c++/4.6/bits/cpp_type_traits.h:128:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e29f0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp> struct __is_void {
        struct __is_void;
        enum  {
            __value = (IntegerLiteral 0xa5e1a00 </usr/include/c++/4.6/bits/cpp_type_traits.h:121:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_void {
        struct __is_void;
        enum  {
            __value = (ImplicitCastExpr 0xa5e2a48 </usr/include/c++/4.6/bits/cpp_type_traits.h:128:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e29f0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = bool> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e30a8 </usr/include/c++/4.6/bits/cpp_type_traits.h:148:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e3050 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = wchar_t> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4988 </usr/include/c++/4.6/bits/cpp_type_traits.h:177:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4930 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = unsigned char> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4678 </usr/include/c++/4.6/bits/cpp_type_traits.h:169:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4620 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = long double> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5fa4d8 </usr/include/c++/4.6/bits/cpp_type_traits.h:138:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e2d50 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp = unsigned long long> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e6ce8 </usr/include/c++/4.6/bits/cpp_type_traits.h:250:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6c90 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = float> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5fb8d8 </usr/include/c++/4.6/bits/cpp_type_traits.h:138:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e2d50 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp = unsigned long> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e66c8 </usr/include/c++/4.6/bits/cpp_type_traits.h:236:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6670 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = double> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5fb368 </usr/include/c++/4.6/bits/cpp_type_traits.h:138:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e2d50 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp = char> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e33b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:155:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e3360 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = unsigned short> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4fa8 </usr/include/c++/4.6/bits/cpp_type_traits.h:208:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4f50 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = short> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4c98 </usr/include/c++/4.6/bits/cpp_type_traits.h:201:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4c40 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = long long> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e69d8 </usr/include/c++/4.6/bits/cpp_type_traits.h:243:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6980 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = long> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e63b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:229:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6360 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = unsigned int> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e60a8 </usr/include/c++/4.6/bits/cpp_type_traits.h:222:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6050 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = signed char> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e36c8 </usr/include/c++/4.6/bits/cpp_type_traits.h:162:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e3670 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = int> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e52b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:215:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e5260 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp> struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (IntegerLiteral 0xa5e2d50 </usr/include/c++/4.6/bits/cpp_type_traits.h:138:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e30a8 </usr/include/c++/4.6/bits/cpp_type_traits.h:148:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e3050 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e33b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:155:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e3360 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e36c8 </usr/include/c++/4.6/bits/cpp_type_traits.h:162:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e3670 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4678 </usr/include/c++/4.6/bits/cpp_type_traits.h:169:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4620 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4988 </usr/include/c++/4.6/bits/cpp_type_traits.h:177:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4930 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4c98 </usr/include/c++/4.6/bits/cpp_type_traits.h:201:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4c40 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e4fa8 </usr/include/c++/4.6/bits/cpp_type_traits.h:208:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e4f50 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e52b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:215:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e5260 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e60a8 </usr/include/c++/4.6/bits/cpp_type_traits.h:222:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6050 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e63b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:229:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6360 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e66c8 </usr/include/c++/4.6/bits/cpp_type_traits.h:236:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6670 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e69d8 </usr/include/c++/4.6/bits/cpp_type_traits.h:243:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6980 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_integer {
        struct __is_integer;
        enum  {
            __value = (ImplicitCastExpr 0xa5e6ce8 </usr/include/c++/4.6/bits/cpp_type_traits.h:250:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5e6c90 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = long double> struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa548968 </usr/include/c++/4.6/bits/cpp_type_traits.h:282:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa548910 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = float> struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa548348 </usr/include/c++/4.6/bits/cpp_type_traits.h:268:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5482f0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = double> struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa548658 </usr/include/c++/4.6/bits/cpp_type_traits.h:275:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa548600 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = int> struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa9a5338 </usr/include/c++/4.6/bits/cpp_type_traits.h:260:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa547ff0 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp> struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (IntegerLiteral 0xa547ff0 </usr/include/c++/4.6/bits/cpp_type_traits.h:260:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa548348 </usr/include/c++/4.6/bits/cpp_type_traits.h:268:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5482f0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa548658 </usr/include/c++/4.6/bits/cpp_type_traits.h:275:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa548600 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_floating {
        struct __is_floating;
        enum  {
            __value = (ImplicitCastExpr 0xa548968 </usr/include/c++/4.6/bits/cpp_type_traits.h:282:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa548910 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = std::basic_string<char> *> struct __is_pointer {
        struct __is_pointer;
        enum  {
            __value = (ImplicitCastExpr 0xa9b29b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:299:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5eaa90 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = int> struct __is_pointer {
        struct __is_pointer;
        enum  {
            __value = (ImplicitCastExpr 0xa9a5868 </usr/include/c++/4.6/bits/cpp_type_traits.h:292:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa548c70 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp> struct __is_pointer {
        struct __is_pointer;
        enum  {
            __value = (IntegerLiteral 0xa548c70 </usr/include/c++/4.6/bits/cpp_type_traits.h:292:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_pointer {
        struct __is_pointer;
        enum  {
            __value = (IntegerLiteral 0xa5eaa90 </usr/include/c++/4.6/bits/cpp_type_traits.h:299:24> 'int' 1)

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = unsigned long *> struct __is_normal_iterator {
        struct __is_normal_iterator;
        enum  {
            __value = (ImplicitCastExpr 0xaa2b668 </usr/include/c++/4.6/bits/cpp_type_traits.h:309:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5eade0 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp = std::basic_string<char> *> struct __is_normal_iterator {
        struct __is_normal_iterator;
        enum  {
            __value = (ImplicitCastExpr 0xa9b18b8 </usr/include/c++/4.6/bits/cpp_type_traits.h:309:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5eade0 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp> struct __is_normal_iterator {
        struct __is_normal_iterator;
        enum  {
            __value = (IntegerLiteral 0xa5eade0 </usr/include/c++/4.6/bits/cpp_type_traits.h:309:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_normal_iterator {
        struct __is_normal_iterator;
        enum  {
            __value = (IntegerLiteral 0xa5eb360 </usr/include/c++/4.6/bits/cpp_type_traits.h:317:24> 'int' 1)

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = int> struct __is_arithmetic : public __traitor<__is_integer<int>, __is_floating<int> > {
        struct __is_arithmetic;
    }
template <typename _Tp> struct __is_arithmetic : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> > {
        struct __is_arithmetic;
    };
    template <typename _Tp> struct __is_fundamental : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> > {
        struct __is_fundamental;
    };
    template <typename _Tp = int> struct __is_scalar : public __traitor<__is_arithmetic<int>, __is_pointer<int> > {
        struct __is_scalar;
    }
template <typename _Tp> struct __is_scalar : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> > {
        struct __is_scalar;
    };
    template <typename _Tp = wchar_t> struct __is_char {
        struct __is_char;
        enum  {
            __value = (ImplicitCastExpr 0xa5eead8 </usr/include/c++/4.6/bits/cpp_type_traits.h:366:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5eea80 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = char> struct __is_char {
        struct __is_char;
        enum  {
            __value = (ImplicitCastExpr 0xa5ed928 </usr/include/c++/4.6/bits/cpp_type_traits.h:358:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ed8d0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp> struct __is_char {
        struct __is_char;
        enum  {
            __value = (IntegerLiteral 0xa5ed5d0 </usr/include/c++/4.6/bits/cpp_type_traits.h:351:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_char {
        struct __is_char;
        enum  {
            __value = (ImplicitCastExpr 0xa5ed928 </usr/include/c++/4.6/bits/cpp_type_traits.h:358:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ed8d0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_char {
        struct __is_char;
        enum  {
            __value = (ImplicitCastExpr 0xa5eead8 </usr/include/c++/4.6/bits/cpp_type_traits.h:366:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5eea80 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = unsigned char> struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (ImplicitCastExpr 0xa5ef758 </usr/include/c++/4.6/bits/cpp_type_traits.h:395:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ef700 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = char> struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (ImplicitCastExpr 0xa5ef138 </usr/include/c++/4.6/bits/cpp_type_traits.h:381:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ef0e0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp = signed char> struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (ImplicitCastExpr 0xa5ef448 </usr/include/c++/4.6/bits/cpp_type_traits.h:388:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ef3f0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    }
template <typename _Tp> struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (IntegerLiteral 0xa5eede0 </usr/include/c++/4.6/bits/cpp_type_traits.h:374:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
    struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (ImplicitCastExpr 0xa5ef138 </usr/include/c++/4.6/bits/cpp_type_traits.h:381:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ef0e0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (ImplicitCastExpr 0xa5ef448 </usr/include/c++/4.6/bits/cpp_type_traits.h:388:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ef3f0 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    struct __is_byte {
        struct __is_byte;
        enum  {
            __value = (ImplicitCastExpr 0xa5ef758 </usr/include/c++/4.6/bits/cpp_type_traits.h:395:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5ef700 <col:24> 'int' 1))

        };
        typedef std::__true_type __type;
    };
    template <typename _Tp = std::basic_string<char> *> struct __is_move_iterator {
        struct __is_move_iterator;
        enum  {
            __value = (ImplicitCastExpr 0xa9b0138 </usr/include/c++/4.6/bits/cpp_type_traits.h:405:24> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa5f06d0 <col:24> 'int' 0))

        };
        typedef std::__false_type __type;
    }
template <typename _Tp> struct __is_move_iterator {
        struct __is_move_iterator;
        enum  {
            __value = (IntegerLiteral 0xa5f06d0 </usr/include/c++/4.6/bits/cpp_type_traits.h:405:24> 'int' 0)

        };
        typedef std::__false_type __type;
    };
}
namespace __gnu_cxx {
    template <bool = true, typename  = void> struct __enable_if {
        struct __enable_if;
        typedef void __type;
    }
template <bool = false, typename  = void> struct __enable_if {
        struct __enable_if;
    }
template <bool = false, typename  = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> struct __enable_if {
        struct __enable_if;
    }
template <bool = true, typename  = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> struct __enable_if {
        struct __enable_if;
        typedef std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > __type;
    }
template <bool, typename > struct __enable_if {
        struct __enable_if;
    };
    struct __enable_if {
        struct __enable_if;
        typedef _Tp __type;
    };
    template <bool _Cond = true, typename _Iftrue = __gnu_cxx::__numeric_traits_integer<int>, typename _Iffalse = __gnu_cxx::__numeric_traits_floating<int>> struct __conditional_type {
        struct __conditional_type;
        typedef __gnu_cxx::__numeric_traits_integer<int> __type;
    }
template <bool _Cond, typename _Iftrue, typename _Iffalse> struct __conditional_type {
        struct __conditional_type;
        typedef _Iftrue __type;
    };
    struct __conditional_type {
        struct __conditional_type;
        typedef _Iffalse __type;
    };
    template <typename _Tp = bool> struct __add_unsigned
template <typename _Tp = wchar_t> struct __add_unsigned
template <typename _Tp = char> struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned char __type;
    }
template <typename _Tp = short> struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned short __type;
    }
template <typename _Tp = long long> struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned long long __type;
    }
template <typename _Tp = long> struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned long __type;
    }
template <typename _Tp = signed char> struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned char __type;
    }
template <typename _Tp = int> struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned int __type;
    }
template <typename _Tp> struct __add_unsigned {
        struct __add_unsigned;
    private:
    private:
        typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;
    public:
    public:
        typedef typename __if_type::__type __type;
    };
    struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned char __type;
    };
    struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned char __type;
    };
    struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned short __type;
    };
    struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned int __type;
    };
    struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned long __type;
    };
    struct __add_unsigned {
        struct __add_unsigned;
        typedef unsigned long long __type;
    };
    struct __add_unsigned;
    struct __add_unsigned;
    template <typename _Tp = bool> struct __remove_unsigned
template <typename _Tp = wchar_t> struct __remove_unsigned
template <typename _Tp = unsigned char> struct __remove_unsigned {
        struct __remove_unsigned;
        typedef signed char __type;
    }
template <typename _Tp = unsigned long long> struct __remove_unsigned {
        struct __remove_unsigned;
        typedef long long __type;
    }
template <typename _Tp = unsigned long> struct __remove_unsigned {
        struct __remove_unsigned;
        typedef long __type;
    }
template <typename _Tp = char> struct __remove_unsigned {
        struct __remove_unsigned;
        typedef signed char __type;
    }
template <typename _Tp = unsigned short> struct __remove_unsigned {
        struct __remove_unsigned;
        typedef short __type;
    }
template <typename _Tp = unsigned int> struct __remove_unsigned {
        struct __remove_unsigned;
        typedef int __type;
    }
template <typename _Tp> struct __remove_unsigned {
        struct __remove_unsigned;
    private:
    private:
        typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;
    public:
    public:
        typedef typename __if_type::__type __type;
    };
    struct __remove_unsigned {
        struct __remove_unsigned;
        typedef signed char __type;
    };
    struct __remove_unsigned {
        struct __remove_unsigned;
        typedef signed char __type;
    };
    struct __remove_unsigned {
        struct __remove_unsigned;
        typedef short __type;
    };
    struct __remove_unsigned {
        struct __remove_unsigned;
        typedef int __type;
    };
    struct __remove_unsigned {
        struct __remove_unsigned;
        typedef long __type;
    };
    struct __remove_unsigned {
        struct __remove_unsigned;
        typedef long long __type;
    };
    struct __remove_unsigned;
    struct __remove_unsigned;
    template <typename _Type> inline bool __is_null_pointer(_Type *__ptr) (CompoundStmt 0xa5f9868 </usr/include/c++/4.6/ext/type_traits.h:151:5, col:26>
  (ReturnStmt 0xa5f9858 <col:7, col:23>
    (BinaryOperator 0xa5f9840 <col:14, col:23> '<dependent type>' '=='
      (DeclRefExpr 0xa5f980c <col:14> '_Type *' lvalue ParmVar 0xa5f96e0 '__ptr' '_Type *')
      (IntegerLiteral 0xa5f9828 <col:23> 'int' 0))))

;
    template <typename _Type> inline bool __is_null_pointer(_Type) (CompoundStmt 0xa5f9a30 </usr/include/c++/4.6/ext/type_traits.h:156:5, col:21>
  (ReturnStmt 0xa5f9a20 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa5f9a10 <col:14> '_Bool' false)))

;
    template <typename _Tp = float, bool = false> struct __promote {
        struct __promote;
        typedef float __type;
    }
template <typename _Tp = double, bool = false> struct __promote {
        struct __promote;
        typedef double __type;
    }
template <typename _Tp = long double, bool = false> struct __promote {
        struct __promote;
        typedef long double __type;
    }
template <typename _Tp, bool = (DependentScopeDeclRefExpr 0xa5f9b50 </usr/include/c++/4.6/ext/type_traits.h:160:33, col:57> '<dependent type>' lvalue)
> struct __promote {
        struct __promote;
        typedef double __type;
    };
    struct __promote {
        struct __promote;
    };
    struct __promote {
        struct __promote;
        typedef long double __type;
    };
    struct __promote {
        struct __promote;
        typedef double __type;
    };
    struct __promote {
        struct __promote;
        typedef float __type;
    };
    template <typename _Tp, typename _Up, typename _Tp2 = typename __promote<_Tp>::__type, typename _Up2 = typename __promote<_Up>::__type> struct __promote_2 {
        struct __promote_2;
        typedef typeof (_Tp2() + _Up2()) __type;
    };
    template <typename _Tp, typename _Up, typename _Vp, typename _Tp2 = typename __promote<_Tp>::__type, typename _Up2 = typename __promote<_Up>::__type, typename _Vp2 = typename __promote<_Vp>::__type> struct __promote_3 {
        struct __promote_3;
        typedef typeof (_Tp2() + _Up2() + _Vp2()) __type;
    };
    template <typename _Tp, typename _Up, typename _Vp, typename _Wp, typename _Tp2 = typename __promote<_Tp>::__type, typename _Up2 = typename __promote<_Up>::__type, typename _Vp2 = typename __promote<_Vp>::__type, typename _Wp2 = typename __promote<_Wp>::__type> struct __promote_4 {
        struct __promote_4;
        typedef typeof (_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };
}
namespace __gnu_cxx {
    template <typename _Value = int> struct __numeric_traits_integer {
        struct __numeric_traits_integer;
        static const int __min = (ParenExpr 0xa638298 </usr/include/c++/4.6/ext/numeric_traits.h:47:3, col:68> 'int':'int'
  (ConditionalOperator 0xa638278 <line:42:31, line:47:67> 'int':'int'
    (ParenExpr 0xa638130 <line:42:31, col:45> '_Bool'
      (BinaryOperator 0xa638118 <col:32, col:44> '_Bool' '<'
        (CStyleCastExpr 0xa638100 <col:32, col:40> 'int':'int' <NoOp>
          (ParenExpr 0xa5ffc88 <col:37, col:40> 'int'
            (UnaryOperator 0xa5ffc70 <col:38, col:39> 'int' prefix '-'
              (IntegerLiteral 0xa5ffc58 <col:39> 'int' 1))))
        (IntegerLiteral 0xa5ffcc0 <col:44> 'int' 0)))
    (BinaryOperator 0xa638240 <line:47:28, line:44:54> 'int':'int' '<<'
      (CStyleCastExpr 0xa638150 <line:47:28, col:33> 'int':'int' <NoOp>
        (IntegerLiteral 0xa5ffd08 <col:33> 'int' 1))
      (ParenExpr 0xa638228 <line:44:3, col:54> 'unsigned int'
        (BinaryOperator 0xa638210 <col:4, line:42:45> 'unsigned int' '-'
          (BinaryOperator 0xa638198 <line:44:4, <built-in>:17:22> 'unsigned int' '*'
            (UnaryExprOrTypeTraitExpr 0xa638170 </usr/include/c++/4.6/ext/numeric_traits.h:44:4, col:14> 'unsigned int' sizeof 'int':'int')
            (ImplicitCastExpr 0xa638188 <<built-in>:17:22> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa5ffd60 <col:22> 'int' 8)))
          (ImplicitCastExpr 0xa638200 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> 'unsigned int' <IntegralCast>
            (ParenExpr 0xa6381e8 <col:31, col:45> '_Bool'
              (BinaryOperator 0xa6381d0 <col:32, col:44> '_Bool' '<'
                (CStyleCastExpr 0xa6381b8 <col:32, col:40> 'int':'int' <NoOp>
                  (ParenExpr 0xa5ffdd0 <col:37, col:40> 'int'
                    (UnaryOperator 0xa5ffdb8 <col:38, col:39> 'int' prefix '-'
                      (IntegerLiteral 0xa5ffda0 <col:39> 'int' 1))))
                (IntegerLiteral 0xa5ffe08 <col:44> 'int' 0)))))))
    (CStyleCastExpr 0xa638260 <line:47:62, col:67> 'int':'int' <NoOp>
      (IntegerLiteral 0xa5ffe98 <col:67> 'int' 0))))
;
        static const int __max = (ParenExpr 0xa6385a8 </usr/include/c++/4.6/ext/numeric_traits.h:50:3, line:51:72> 'int'
  (ConditionalOperator 0xa638588 <line:42:31, line:51:71> 'int'
    (ParenExpr 0xa638340 <line:42:31, col:45> '_Bool'
      (BinaryOperator 0xa638328 <col:32, col:44> '_Bool' '<'
        (CStyleCastExpr 0xa638310 <col:32, col:40> 'int':'int' <NoOp>
          (ParenExpr 0xa5fff78 <col:37, col:40> 'int'
            (UnaryOperator 0xa5fff60 <col:38, col:39> 'int' prefix '-'
              (IntegerLiteral 0xa5fff48 <col:39> 'int' 1))))
        (IntegerLiteral 0xa5fffb0 <col:44> 'int' 0)))
    (ParenExpr 0xa638538 <line:51:4, col:61> 'int'
      (BinaryOperator 0xa638520 <col:5, col:60> 'int' '+'
        (ParenExpr 0xa638508 <col:5, col:56> 'int'
          (BinaryOperator 0xa6384f0 <col:6, col:55> 'int' '<<'
            (ParenExpr 0xa6384d8 <col:6, col:50> 'int'
              (BinaryOperator 0xa6384c0 <col:7, col:49> 'int' '-'
                (ParenExpr 0xa6384a8 <col:7, col:45> 'int':'int'
                  (BinaryOperator 0xa638490 <col:8, col:44> 'int':'int' '<<'
                    (CStyleCastExpr 0xa638360 <col:8, col:13> 'int':'int' <NoOp>
                      (IntegerLiteral 0xa5ffff8 <col:13> 'int' 1))
                    (ParenExpr 0xa638478 <col:18, col:44> 'unsigned int'
                      (BinaryOperator 0xa638460 <line:44:3, line:51:43> 'unsigned int' '-'
                        (ParenExpr 0xa638438 <line:44:3, col:54> 'unsigned int'
                          (BinaryOperator 0xa638420 <col:4, line:42:45> 'unsigned int' '-'
                            (BinaryOperator 0xa6383a8 <line:44:4, <built-in>:17:22> 'unsigned int' '*'
                              (UnaryExprOrTypeTraitExpr 0xa638380 </usr/include/c++/4.6/ext/numeric_traits.h:44:4, col:14> 'unsigned int' sizeof 'int':'int')
                              (ImplicitCastExpr 0xa638398 <<built-in>:17:22> 'unsigned int' <IntegralCast>
                                (IntegerLiteral 0xa600050 <col:22> 'int' 8)))
                            (ImplicitCastExpr 0xa638410 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> 'unsigned int' <IntegralCast>
                              (ParenExpr 0xa6383f8 <col:31, col:45> '_Bool'
                                (BinaryOperator 0xa6383e0 <col:32, col:44> '_Bool' '<'
                                  (CStyleCastExpr 0xa6383c8 <col:32, col:40> 'int':'int' <NoOp>
                                    (ParenExpr 0xa6000c0 <col:37, col:40> 'int'
                                      (UnaryOperator 0xa6000a8 <col:38, col:39> 'int' prefix '-'
                                        (IntegerLiteral 0xa600090 <col:39> 'int' 1))))
                                  (IntegerLiteral 0xa6000f8 <col:44> 'int' 0))))))
                        (ImplicitCastExpr 0xa638450 <line:51:43> 'unsigned int' <IntegralCast>
                          (IntegerLiteral 0xa600170 <col:43> 'int' 1))))))
                (IntegerLiteral 0xa6001e8 <col:49> 'int' 1)))
            (IntegerLiteral 0xa600230 <col:55> 'int' 1)))
        (IntegerLiteral 0xa600278 <col:60> 'int' 1)))
    (UnaryOperator 0xa638570 <col:65, col:71> 'int':'int' prefix '~'
      (CStyleCastExpr 0xa638558 <col:66, col:71> 'int':'int' <NoOp>
        (IntegerLiteral 0xa6002c0 <col:71> 'int' 0)))))
;
        static const bool __is_signed = (ParenExpr 0xa638640 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> '_Bool'
  (BinaryOperator 0xa638628 <col:32, col:44> '_Bool' '<'
    (CStyleCastExpr 0xa638610 <col:32, col:40> 'int':'int' <NoOp>
      (ParenExpr 0xa6003b8 <col:37, col:40> 'int'
        (UnaryOperator 0xa6003a0 <col:38, col:39> 'int' prefix '-'
          (IntegerLiteral 0xa600388 <col:39> 'int' 1))))
    (IntegerLiteral 0xa6003f0 <col:44> 'int' 0)))
;
        static const int __digits = (ImplicitCastExpr 0xa638780 </usr/include/c++/4.6/ext/numeric_traits.h:44:3, col:54> 'const int' <IntegralCast>
  (ParenExpr 0xa638768 <col:3, col:54> 'unsigned int'
    (BinaryOperator 0xa638750 <col:4, line:42:45> 'unsigned int' '-'
      (BinaryOperator 0xa6386d8 <line:44:4, <built-in>:17:22> 'unsigned int' '*'
        (UnaryExprOrTypeTraitExpr 0xa6386b0 </usr/include/c++/4.6/ext/numeric_traits.h:44:4, col:14> 'unsigned int' sizeof 'int':'int')
        (ImplicitCastExpr 0xa6386c8 <<built-in>:17:22> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa603c48 <col:22> 'int' 8)))
      (ImplicitCastExpr 0xa638740 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> 'unsigned int' <IntegralCast>
        (ParenExpr 0xa638728 <col:31, col:45> '_Bool'
          (BinaryOperator 0xa638710 <col:32, col:44> '_Bool' '<'
            (CStyleCastExpr 0xa6386f8 <col:32, col:40> 'int':'int' <NoOp>
              (ParenExpr 0xa603cb8 <col:37, col:40> 'int'
                (UnaryOperator 0xa603ca0 <col:38, col:39> 'int' prefix '-'
                  (IntegerLiteral 0xa603c88 <col:39> 'int' 1))))
            (IntegerLiteral 0xa603cf0 <col:44> 'int' 0)))))))
;
    }
template <typename _Value> struct __numeric_traits_integer {
        struct __numeric_traits_integer;
        static const _Value __min = (ParenExpr 0xa5ffef0 </usr/include/c++/4.6/ext/numeric_traits.h:47:3, col:68> '<dependent type>'
  (ConditionalOperator 0xa5ffed0 <line:42:31, line:47:67> '<dependent type>'
    (ParenExpr 0xa5ffcf0 <line:42:31, col:45> '<dependent type>'
      (BinaryOperator 0xa5ffcd8 <col:32, col:44> '<dependent type>' '<'
        (CStyleCastExpr 0xa5ffca8 <col:32, col:40> '_Value' <Dependent>
          (ParenExpr 0xa5ffc88 <col:37, col:40> 'int'
            (UnaryOperator 0xa5ffc70 <col:38, col:39> 'int' prefix '-'
              (IntegerLiteral 0xa5ffc58 <col:39> 'int' 1))))
        (IntegerLiteral 0xa5ffcc0 <col:44> 'int' 0)))
    (BinaryOperator 0xa5ffe80 <line:47:28, line:44:54> '<dependent type>' '<<'
      (CStyleCastExpr 0xa5ffd28 <line:47:28, col:33> '_Value' <Dependent>
        (IntegerLiteral 0xa5ffd08 <col:33> 'int' 1))
      (ParenExpr 0xa5ffe68 <line:44:3, col:54> '<dependent type>'
        (BinaryOperator 0xa5ffe50 <col:4, line:42:45> '<dependent type>' '-'
          (BinaryOperator 0xa5ffd88 <line:44:4, <built-in>:17:22> 'unsigned int' '*'
            (UnaryExprOrTypeTraitExpr 0xa5ffd48 </usr/include/c++/4.6/ext/numeric_traits.h:44:4, col:14> 'unsigned int' sizeof '_Value')
            (ImplicitCastExpr 0xa5ffd78 <<built-in>:17:22> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa5ffd60 <col:22> 'int' 8)))
          (ParenExpr 0xa5ffe38 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> '<dependent type>'
            (BinaryOperator 0xa5ffe20 <col:32, col:44> '<dependent type>' '<'
              (CStyleCastExpr 0xa5ffdf0 <col:32, col:40> '_Value' <Dependent>
                (ParenExpr 0xa5ffdd0 <col:37, col:40> 'int'
                  (UnaryOperator 0xa5ffdb8 <col:38, col:39> 'int' prefix '-'
                    (IntegerLiteral 0xa5ffda0 <col:39> 'int' 1))))
              (IntegerLiteral 0xa5ffe08 <col:44> 'int' 0))))))
    (CStyleCastExpr 0xa5ffeb8 <line:47:62, col:67> '_Value' <Dependent>
      (IntegerLiteral 0xa5ffe98 <col:67> 'int' 0))))
;
        static const _Value __max = (ParenExpr 0xa600330 </usr/include/c++/4.6/ext/numeric_traits.h:50:3, line:51:72> '<dependent type>'
  (ConditionalOperator 0xa600310 <line:42:31, line:51:71> '<dependent type>'
    (ParenExpr 0xa5fffe0 <line:42:31, col:45> '<dependent type>'
      (BinaryOperator 0xa5fffc8 <col:32, col:44> '<dependent type>' '<'
        (CStyleCastExpr 0xa5fff98 <col:32, col:40> '_Value' <Dependent>
          (ParenExpr 0xa5fff78 <col:37, col:40> 'int'
            (UnaryOperator 0xa5fff60 <col:38, col:39> 'int' prefix '-'
              (IntegerLiteral 0xa5fff48 <col:39> 'int' 1))))
        (IntegerLiteral 0xa5fffb0 <col:44> 'int' 0)))
    (ParenExpr 0xa6002a8 <line:51:4, col:61> '<dependent type>'
      (BinaryOperator 0xa600290 <col:5, col:60> '<dependent type>' '+'
        (ParenExpr 0xa600260 <col:5, col:56> '<dependent type>'
          (BinaryOperator 0xa600248 <col:6, col:55> '<dependent type>' '<<'
            (ParenExpr 0xa600218 <col:6, col:50> '<dependent type>'
              (BinaryOperator 0xa600200 <col:7, col:49> '<dependent type>' '-'
                (ParenExpr 0xa6001d0 <col:7, col:45> '<dependent type>'
                  (BinaryOperator 0xa6001b8 <col:8, col:44> '<dependent type>' '<<'
                    (CStyleCastExpr 0xa600018 <col:8, col:13> '_Value' <Dependent>
                      (IntegerLiteral 0xa5ffff8 <col:13> 'int' 1))
                    (ParenExpr 0xa6001a0 <col:18, col:44> '<dependent type>'
                      (BinaryOperator 0xa600188 <line:44:3, line:51:43> '<dependent type>' '-'
                        (ParenExpr 0xa600158 <line:44:3, col:54> '<dependent type>'
                          (BinaryOperator 0xa600140 <col:4, line:42:45> '<dependent type>' '-'
                            (BinaryOperator 0xa600078 <line:44:4, <built-in>:17:22> 'unsigned int' '*'
                              (UnaryExprOrTypeTraitExpr 0xa600038 </usr/include/c++/4.6/ext/numeric_traits.h:44:4, col:14> 'unsigned int' sizeof '_Value')
                              (ImplicitCastExpr 0xa600068 <<built-in>:17:22> 'unsigned int' <IntegralCast>
                                (IntegerLiteral 0xa600050 <col:22> 'int' 8)))
                            (ParenExpr 0xa600128 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> '<dependent type>'
                              (BinaryOperator 0xa600110 <col:32, col:44> '<dependent type>' '<'
                                (CStyleCastExpr 0xa6000e0 <col:32, col:40> '_Value' <Dependent>
                                  (ParenExpr 0xa6000c0 <col:37, col:40> 'int'
                                    (UnaryOperator 0xa6000a8 <col:38, col:39> 'int' prefix '-'
                                      (IntegerLiteral 0xa600090 <col:39> 'int' 1))))
                                (IntegerLiteral 0xa6000f8 <col:44> 'int' 0)))))
                        (IntegerLiteral 0xa600170 <line:51:43> 'int' 1)))))
                (IntegerLiteral 0xa6001e8 <col:49> 'int' 1)))
            (IntegerLiteral 0xa600230 <col:55> 'int' 1)))
        (IntegerLiteral 0xa600278 <col:60> 'int' 1)))
    (UnaryOperator 0xa6002f8 <col:65, col:71> '<dependent type>' prefix '~'
      (CStyleCastExpr 0xa6002e0 <col:66, col:71> '_Value' <Dependent>
        (IntegerLiteral 0xa6002c0 <col:71> 'int' 0)))))
;
        static const bool __is_signed = (ParenExpr 0xa600420 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> '<dependent type>'
  (BinaryOperator 0xa600408 <col:32, col:44> '<dependent type>' '<'
    (CStyleCastExpr 0xa6003d8 <col:32, col:40> '_Value' <Dependent>
      (ParenExpr 0xa6003b8 <col:37, col:40> 'int'
        (UnaryOperator 0xa6003a0 <col:38, col:39> 'int' prefix '-'
          (IntegerLiteral 0xa600388 <col:39> 'int' 1))))
    (IntegerLiteral 0xa6003f0 <col:44> 'int' 0)))
;
        static const int __digits = (ParenExpr 0xa603d50 </usr/include/c++/4.6/ext/numeric_traits.h:44:3, col:54> '<dependent type>'
  (BinaryOperator 0xa603d38 <col:4, line:42:45> '<dependent type>' '-'
    (BinaryOperator 0xa603c70 <line:44:4, <built-in>:17:22> 'unsigned int' '*'
      (UnaryExprOrTypeTraitExpr 0xa603c30 </usr/include/c++/4.6/ext/numeric_traits.h:44:4, col:14> 'unsigned int' sizeof '_Value')
      (ImplicitCastExpr 0xa603c60 <<built-in>:17:22> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa603c48 <col:22> 'int' 8)))
    (ParenExpr 0xa603d20 </usr/include/c++/4.6/ext/numeric_traits.h:42:31, col:45> '<dependent type>'
      (BinaryOperator 0xa603d08 <col:32, col:44> '<dependent type>' '<'
        (CStyleCastExpr 0xa603cd8 <col:32, col:40> '_Value' <Dependent>
          (ParenExpr 0xa603cb8 <col:37, col:40> 'int'
            (UnaryOperator 0xa603ca0 <col:38, col:39> 'int' prefix '-'
              (IntegerLiteral 0xa603c88 <col:39> 'int' 1))))
        (IntegerLiteral 0xa603cf0 <col:44> 'int' 0)))))
;
    };
    static const _Value __min;
    static const _Value __max;
    static const bool __is_signed;
    static const int __digits;
    template <typename _Value = int> struct __numeric_traits_floating
template <typename _Value> struct __numeric_traits_floating {
        struct __numeric_traits_floating;
        static const int __max_digits10 = (ImplicitCastExpr 0xa604f70 </usr/include/c++/4.6/ext/numeric_traits.h:88:3, line:89:38> 'const int' <IntegralCast>
  (ParenExpr 0xa604f58 <line:88:3, line:89:38> 'long'
    (BinaryOperator 0xa604f40 <line:88:4, line:89:34> 'long' '+'
      (ImplicitCastExpr 0xa604f30 <line:88:4> 'long' <IntegralCast>
        (IntegerLiteral 0xa604888 <col:4> 'int' 2))
      (BinaryOperator 0xa604f18 <line:84:3, line:89:34> 'long' '/'
        (BinaryOperator 0xa604ed8 <line:84:3, line:89:27> 'long' '*'
          (ImplicitCastExpr 0xa604ec8 <line:84:3, line:85:60> 'long' <IntegralCast>
            (ParenExpr 0xa604e98 <line:84:3, line:85:60> 'int'
              (ConditionalOperator 0xa604e78 <line:84:4, <built-in>:85:27> 'int'
                (DependentScopeDeclRefExpr 0xa604a30 </usr/include/c++/4.6/ext/numeric_traits.h:84:4, col:33> '<dependent type>' lvalue)
                (IntegerLiteral 0xa604a58 <<built-in>:59:26> 'int' 24)
                (ConditionalOperator 0xa604e58 </usr/include/c++/4.6/ext/numeric_traits.h:85:6, <built-in>:85:27> 'int'
                  (DependentScopeDeclRefExpr 0xa604bd8 </usr/include/c++/4.6/ext/numeric_traits.h:85:6, col:36> '<dependent type>' lvalue)
                  (IntegerLiteral 0xa604c00 <<built-in>:72:26> 'int' 53)
                  (IntegerLiteral 0xa604e40 <line:85:27> 'int' 64)))))
          (IntegerLiteral 0xa604eb0 </usr/include/c++/4.6/ext/numeric_traits.h:89:27> 'long' 643))
        (ImplicitCastExpr 0xa604f08 <col:34> 'long' <IntegralCast>
          (IntegerLiteral 0xa604ef0 <col:34> 'int' 2136))))))
;
        static const bool __is_signed = (CXXBoolLiteralExpr 0xa604fc8 </usr/include/c++/4.6/ext/numeric_traits.h:105:39> '_Bool' true)
;
        static const int __digits10 = (ParenExpr 0xa605340 </usr/include/c++/4.6/ext/numeric_traits.h:84:3, line:85:60> 'int'
  (ConditionalOperator 0xa605320 <line:84:4, <built-in>:81:22> 'int'
    (DependentScopeDeclRefExpr 0xa605150 </usr/include/c++/4.6/ext/numeric_traits.h:84:4, col:33> '<dependent type>' lvalue)
    (IntegerLiteral 0xa605178 <<built-in>:55:21> 'int' 6)
    (ConditionalOperator 0xa605300 </usr/include/c++/4.6/ext/numeric_traits.h:85:6, <built-in>:81:22> 'int'
      (DependentScopeDeclRefExpr 0xa6052a8 </usr/include/c++/4.6/ext/numeric_traits.h:85:6, col:36> '<dependent type>' lvalue)
      (IntegerLiteral 0xa6052d0 <<built-in>:68:21> 'int' 15)
      (IntegerLiteral 0xa6052e8 <line:81:22> 'int' 18))))
;
        static const int __max_exponent10 = (ParenExpr 0xa6056c0 </usr/include/c++/4.6/ext/numeric_traits.h:84:3, line:85:60> 'int'
  (ConditionalOperator 0xa6056a0 <line:84:4, <built-in>:86:29> 'int'
    (DependentScopeDeclRefExpr 0xa6054d0 </usr/include/c++/4.6/ext/numeric_traits.h:84:4, col:33> '<dependent type>' lvalue)
    (IntegerLiteral 0xa6054f8 <<built-in>:60:28> 'int' 38)
    (ConditionalOperator 0xa605680 </usr/include/c++/4.6/ext/numeric_traits.h:85:6, <built-in>:86:29> 'int'
      (DependentScopeDeclRefExpr 0xa605628 </usr/include/c++/4.6/ext/numeric_traits.h:85:6, col:36> '<dependent type>' lvalue)
      (IntegerLiteral 0xa605650 <<built-in>:73:28> 'int' 308)
      (IntegerLiteral 0xa605668 <line:86:29> 'int' 4932))))
;
    };
    static const int __max_digits10;
    static const bool __is_signed;
    static const int __digits10;
    static const int __max_exponent10;
    template <typename _Value = int> struct __numeric_traits : public typename __conditional_type<std::__is_integer<int>::__value, __numeric_traits_integer<int>, __numeric_traits_floating<int> >::__type {
        struct __numeric_traits;
    }
template <typename _Value> struct __numeric_traits : public __conditional_type<std::__is_integer<_Value>::__value, __numeric_traits_integer<_Value>, __numeric_traits_floating<_Value> >::__type {
        struct __numeric_traits;
    };
}
namespace std {
    template <typename _Tp = std::basic_string<char>> inline std::basic_string<char> *__addressof(std::basic_string<char> &__r) (CompoundStmt 0xa9cd4d8 </usr/include/c++/4.6/bits/move.h:44:5, line:47:5>
  (ReturnStmt 0xa9cd4c8 <line:45:7, line:46:66>
    (CXXReinterpretCastExpr 0xa9cd4b0 <line:45:14, line:46:66> 'class std::basic_string<char> *' reinterpret_cast<class std::basic_string<char> *> <BitCast>
      (UnaryOperator 0xa9cd498 <col:3, col:65> 'char *' prefix '&'
        (CXXConstCastExpr 0xa9cd480 <col:4, col:65> 'char' lvalue const_cast<char &> <NoOp>
          (CXXReinterpretCastExpr 0xa9cd468 <col:22, col:64> 'const volatile char' lvalue reinterpret_cast<const volatile char &> <LValueBitCast>
            (DeclRefExpr 0xa9cd434 <col:61> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue ParmVar 0xa9ccad0 '__r' 'class std::basic_string<char> &')))))))

template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> inline std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *__addressof(std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__r) (CompoundStmt 0xa9df010 </usr/include/c++/4.6/bits/move.h:44:5, line:47:5>
  (ReturnStmt 0xa9df000 <line:45:7, line:46:66>
    (CXXReinterpretCastExpr 0xa9defe8 <line:45:14, line:46:66> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' reinterpret_cast<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *> <BitCast>
      (UnaryOperator 0xa9defd0 <col:3, col:65> 'char *' prefix '&'
        (CXXConstCastExpr 0xa9defb8 <col:4, col:65> 'char' lvalue const_cast<char &> <NoOp>
          (CXXReinterpretCastExpr 0xa9defa0 <col:22, col:64> 'const volatile char' lvalue reinterpret_cast<const volatile char &> <LValueBitCast>
            (DeclRefExpr 0xa9def84 <col:61> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9dd4f0 '__r' 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))))))

template <typename _Tp> inline _Tp *__addressof(_Tp &__r) (CompoundStmt 0xa606ad0 </usr/include/c++/4.6/bits/move.h:44:5, line:47:5>
  (ReturnStmt 0xa606ac0 <line:45:7, line:46:66>
    (CXXReinterpretCastExpr 0xa606aa8 <line:45:14, line:46:66> '_Tp *' reinterpret_cast<_Tp *> <Dependent>
      (UnaryOperator 0xa606a80 <col:3, col:65> 'char *' prefix '&'
        (CXXConstCastExpr 0xa606a68 <col:4, col:65> 'char' lvalue const_cast<char &> <NoOp>
          (CXXReinterpretCastExpr 0xa606a08 <col:22, col:64> 'const volatile char' lvalue reinterpret_cast<const volatile char &> <Dependent>
            (DeclRefExpr 0xa6069bc <col:61> '_Tp' lvalue ParmVar 0xa606870 '__r' '_Tp &')))))))

;
}
namespace std {
    template <typename _Tp> inline void swap(_Tp &__a, _Tp &__b) (CompoundStmt 0xa60b6a8 </usr/include/c++/4.6/bits/move.h:123:5, line:130:5>
  (DeclStmt 0xa606e28 <line:127:7, col:37>
    0xa606dc0 "_Tp __tmp =
      (ParenExpr 0xa606e10 <line:105:30, col:36> '_Tp' lvalue
        (DeclRefExpr 0xa606df4 <line:127:33> '_Tp' lvalue ParmVar 0xa606c30 '__a' '_Tp &'))")
  (BinaryOperator 0xa606e80 <line:128:7, line:105:36> '<dependent type>' '='
    (DeclRefExpr 0xa606e38 <line:128:7> '_Tp' lvalue ParmVar 0xa606c30 '__a' '_Tp &')
    (ParenExpr 0xa606e68 <line:105:30, col:36> '_Tp' lvalue
      (DeclRefExpr 0xa606e50 <line:128:27> '_Tp' lvalue ParmVar 0xa606c80 '__b' '_Tp &')))
  (BinaryOperator 0xa60b690 <line:129:7, line:105:36> '<dependent type>' '='
    (DeclRefExpr 0xa606e98 <line:129:7> '_Tp' lvalue ParmVar 0xa606c80 '__b' '_Tp &')
    (ParenExpr 0xa606ec8 <line:105:30, col:36> '_Tp' lvalue
      (DeclRefExpr 0xa606eb0 <line:129:27> '_Tp' lvalue Var 0xa606dc0 '__tmp' '_Tp'))))

;
    template <typename _Tp, size_t _Nm> inline void swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) (CompoundStmt 0xa60bcc0 </usr/include/c++/4.6/bits/move.h:137:5, line:140:5>
  (ForStmt 0xa60bc98 <line:138:7, line:139:25>
    (DeclStmt 0xa60bb10 <line:138:12, col:26>
      0xa60bab0 "size_t __n =
        (ImplicitCastExpr 0xa60bb00 <col:25> 'size_t':'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa60bae8 <col:25> 'int' 0))")
    <<<NULL>>>
    (BinaryOperator 0xa60bb60 <col:28, col:34> '_Bool' '<'
      (ImplicitCastExpr 0xa60bb50 <col:28> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa60bb20 <col:28> 'size_t':'unsigned int' lvalue Var 0xa60bab0 '__n' 'size_t':'unsigned int'))
      (DeclRefExpr 0xa60bb38 <col:34> 'size_t':'unsigned int' NonTypeTemplateParm 0xa60b740 '_Nm' 'size_t':'unsigned int'))
    (UnaryOperator 0xa60bb90 <col:39, col:41> 'size_t':'unsigned int' lvalue prefix '++'
      (DeclRefExpr 0xa60bb78 <col:41> 'size_t':'unsigned int' lvalue Var 0xa60bab0 '__n' 'size_t':'unsigned int'))
    (CallExpr 0xa60bc70 <line:139:2, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa60bba8 <col:2> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ba70 0xa606d80)
      (ArraySubscriptExpr 0xa60bc10 <col:7, col:14> '<dependent type>' lvalue
        (DeclRefExpr 0xa60bbe0 <col:7> '_Tp [_Nm]':'_Tp [_Nm]' lvalue ParmVar 0xa60b890 '__a' '_Tp (&)[_Nm]')
        (DeclRefExpr 0xa60bbf8 <col:11> 'size_t':'unsigned int' lvalue Var 0xa60bab0 '__n' 'size_t':'unsigned int'))
      (ArraySubscriptExpr 0xa60bc58 <col:17, col:24> '<dependent type>' lvalue
        (DeclRefExpr 0xa60bc24 <col:17> '_Tp [_Nm]':'_Tp [_Nm]' lvalue ParmVar 0xa60b970 '__b' '_Tp (&)[_Nm]')
        (DeclRefExpr 0xa60bc3c <col:21> 'size_t':'unsigned int' lvalue Var 0xa60bab0 '__n' 'size_t':'unsigned int')))))

;
}
namespace std {
    template <class _T1 = const std::basic_string<char>, class _T2 = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> struct pair {
        struct pair;
        typedef const std::basic_string<char> first_type;
        typedef std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > second_type;
        const std::basic_string<char> first;
        std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > second;
        pair();
        pair(const const std::basic_string<char> &__a, const std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &__b) : first((DeclRefExpr 0xa9e92c8 </usr/include/c++/4.6/bits/stl_pair.h:104:15> 'const const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ParmVar 0xaa2a040 '__a' 'const const class std::basic_string<char> &')
), second((DeclRefExpr 0xa9e93e8 </usr/include/c++/4.6/bits/stl_pair.h:104:28> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xaa2a0b0 '__b' 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > &')
) (CompoundStmt 0xa60cec0 </usr/include/c++/4.6/bits/stl_pair.h:104:33, col:35>)


        template <class _U1 = const std::basic_string<char>, class _U2 = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> pair(const pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__p)template <class _U1, class _U2> pair(const pair<_U1, _U2> &__p);
        inline void ~pair() (CompoundStmt 0xa9def10 </usr/include/c++/4.6/bits/stl_pair.h:87:12>)


        inline pair(const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &) : first((MemberExpr 0xaa39320 </usr/include/c++/4.6/bits/stl_pair.h:87:12> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue .first 0xaa29e30
  (DeclRefExpr 0xaa39308 <col:12> 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9e1690 '' 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &'))
), second((MemberExpr 0xaa39394 </usr/include/c++/4.6/bits/stl_pair.h:87:12> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue .second 0xaa29e70
  (DeclRefExpr 0xaa3937c <col:12> 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9e1690 '' 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &'))
) (CompoundStmt 0xaa39400 </usr/include/c++/4.6/bits/stl_pair.h:87:12>)


    }
template <class _T1 = std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, class _T2 = std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> struct pair
template <class _T1 = std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, class _T2 = std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> struct pair
template <class _T1 = std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, class _T2 = bool> struct pair {
        struct pair;
        typedef std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > first_type;
        typedef bool second_type;
        std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > first;
        bool second;
        pair();
        pair(const std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &__a, const bool &__b) : first((DeclRefExpr 0xaa3ec44 </usr/include/c++/4.6/bits/stl_pair.h:104:15> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xaa2cfc0 '__a' 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &')
), second((ImplicitCastExpr 0xaa3ee48 </usr/include/c++/4.6/bits/stl_pair.h:104:28> '_Bool':'_Bool' <LValueToRValue>
  (DeclRefExpr 0xaa3ed68 <col:28> 'const _Bool':'const _Bool' lvalue ParmVar 0xaa2d030 '__b' 'const _Bool &'))
) (CompoundStmt 0xa60cec0 </usr/include/c++/4.6/bits/stl_pair.h:104:33, col:35>)


        template <class _U1 = std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, class _U2 = bool> pair(const pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, bool> &__p)template <class _U1, class _U2> pair(const pair<_U1, _U2> &__p);
        inline pair(const std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, bool> &) throw() : first((MemberExpr 0xaa3d33c </usr/include/c++/4.6/bits/stl_pair.h:87:12> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue .first 0xaa2cdb0
  (DeclRefExpr 0xaa3d324 <col:12> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' lvalue ParmVar 0xaa3cfb0 '' 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool> &'))
), second((ImplicitCastExpr 0xaa3d3d8 </usr/include/c++/4.6/bits/stl_pair.h:87:12> '_Bool':'_Bool' <LValueToRValue>
  (MemberExpr 0xaa3d3b4 <col:12> 'const _Bool':'const _Bool' lvalue .second 0xaa2cdf0
    (DeclRefExpr 0xaa3d39c <col:12> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' lvalue ParmVar 0xaa3cfb0 '' 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool> &')))
) (CompoundStmt 0xaa3d408 </usr/include/c++/4.6/bits/stl_pair.h:87:12>)


    }
template <class _T1, class _T2> struct pair {
        struct pair;
        typedef _T1 first_type;
        typedef _T2 second_type;
        _T1 first;
        _T2 second;
        pair<_T1, _T2>() : first(), second() (CompoundStmt 0xa60ce00 </usr/include/c++/4.6/bits/stl_pair.h:100:27, col:29>)


        pair<_T1, _T2>(const _T1 &__a, const _T2 &__b) : first((DeclRefExpr 0xa60ce10 </usr/include/c++/4.6/bits/stl_pair.h:104:15> 'const _T1' lvalue ParmVar 0xa60c260 '__a' 'const _T1 &')
), second((DeclRefExpr 0xa60ce68 </usr/include/c++/4.6/bits/stl_pair.h:104:28> 'const _T2' lvalue ParmVar 0xa60c2f0 '__b' 'const _T2 &')
) (CompoundStmt 0xa60cec0 </usr/include/c++/4.6/bits/stl_pair.h:104:33, col:35>)


        template <class _U1, class _U2> pair<_T1, _T2>(const pair<_U1, _U2> &__p) : first((CXXDependentScopeMemberExpr 0xa60cee8 </usr/include/c++/4.6/bits/stl_pair.h:109:10, col:14> '<dependent type>' lvalue
  (DeclRefExpr 0xa60ced0 <col:10> 'const pair<_U1, _U2>' lvalue ParmVar 0xa60cc50 '__p' 'const pair<_U1, _U2> &'))
), second((CXXDependentScopeMemberExpr 0xa60cf70 </usr/include/c++/4.6/bits/stl_pair.h:109:29, col:33> '<dependent type>' lvalue
  (DeclRefExpr 0xa60cf58 <col:29> 'const pair<_U1, _U2>' lvalue ParmVar 0xa60cc50 '__p' 'const pair<_U1, _U2> &'))
) (CompoundStmt 0xa60cff0 </usr/include/c++/4.6/bits/stl_pair.h:109:41, col:43>)

;
    };
    template <class _T1, class _T2> inline bool operator==(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y) (CompoundStmt 0xa60d6c8 </usr/include/c++/4.6/bits/stl_pair.h:202:5, col:66>
  (ReturnStmt 0xa60d6b8 <col:7, col:58>
    (BinaryOperator 0xa60d6a0 <col:14, col:58> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa60d578 <col:14, col:31> '<dependent type>'
        (UnresolvedLookupExpr 0xa60d540 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470)
        (CXXDependentScopeMemberExpr 0xa60d4b8 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa60d4a0 <col:14> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d200 '__x' 'const pair<_T1, _T2> &'))
        (CXXDependentScopeMemberExpr 0xa60d508 <col:27, col:31> '<dependent type>' lvalue
          (DeclRefExpr 0xa60d4ec <col:27> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d370 '__y' 'const pair<_T1, _T2> &')))
      (CXXOperatorCallExpr 0xa60d678 <col:40, col:58> '<dependent type>'
        (UnresolvedLookupExpr 0xa60d640 <col:51, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470)
        (CXXDependentScopeMemberExpr 0xa60d5b8 <col:40, col:44> '<dependent type>' lvalue
          (DeclRefExpr 0xa60d59c <col:40> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d200 '__x' 'const pair<_T1, _T2> &'))
        (CXXDependentScopeMemberExpr 0xa60d608 <col:54, col:58> '<dependent type>' lvalue
          (DeclRefExpr 0xa60d5ec <col:54> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d370 '__y' 'const pair<_T1, _T2> &'))))))

;
    template <class _T1, class _T2> inline bool operator<(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y) (CompoundStmt 0xa60e0e0 </usr/include/c++/4.6/bits/stl_pair.h:208:5, line:209:65>
  (ReturnStmt 0xa60e0d0 <line:208:7, line:209:62>
    (BinaryOperator 0xa60e0b8 <line:208:14, line:209:62> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa60de30 <line:208:14, col:30> '<dependent type>'
        (UnresolvedLookupExpr 0xa60dbe0 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10)
        (CXXDependentScopeMemberExpr 0xa60db58 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa60db40 <col:14> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d8c0 '__x' 'const pair<_T1, _T2> &'))
        (CXXDependentScopeMemberExpr 0xa60dba8 <col:26, col:30> '<dependent type>' lvalue
          (DeclRefExpr 0xa60db8c <col:26> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60da30 '__y' 'const pair<_T1, _T2> &')))
      (ParenExpr 0xa60e0a0 <line:209:10, col:62> '<dependent type>'
        (BinaryOperator 0xa60e088 <col:11, col:56> '<dependent type>' '&&'
          (UnaryOperator 0xa60df70 <col:11, col:34> '<dependent type>' prefix '!'
            (ParenExpr 0xa60df58 <col:12, col:34> '<dependent type>'
              (CXXOperatorCallExpr 0xa60df30 <col:13, col:29> '<dependent type>'
                (UnresolvedLookupExpr 0xa60def8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10)
                (CXXDependentScopeMemberExpr 0xa60de70 <col:13, col:17> '<dependent type>' lvalue
                  (DeclRefExpr 0xa60de54 <col:13> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60da30 '__y' 'const pair<_T1, _T2> &'))
                (CXXDependentScopeMemberExpr 0xa60dec0 <col:25, col:29> '<dependent type>' lvalue
                  (DeclRefExpr 0xa60dea4 <col:25> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d8c0 '__x' 'const pair<_T1, _T2> &')))))
          (CXXOperatorCallExpr 0xa60e060 <col:39, col:56> '<dependent type>'
            (UnresolvedLookupExpr 0xa60e028 <col:50, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10)
            (CXXDependentScopeMemberExpr 0xa60dfa0 <col:39, col:43> '<dependent type>' lvalue
              (DeclRefExpr 0xa60df84 <col:39> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60d8c0 '__x' 'const pair<_T1, _T2> &'))
            (CXXDependentScopeMemberExpr 0xa60dff0 <col:52, col:56> '<dependent type>' lvalue
              (DeclRefExpr 0xa60dfd4 <col:52> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60da30 '__y' 'const pair<_T1, _T2> &'))))))))

;
    template <class _T1, class _T2> inline bool operator!=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y) (CompoundStmt 0xa60e630 </usr/include/c++/4.6/bits/stl_pair.h:215:5, col:29>
  (ReturnStmt 0xa60e620 <col:7, col:26>
    (UnaryOperator 0xa60e608 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa60e5f0 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa60e5c8 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa60e590 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470)
          (DeclRefExpr 0xa60e560 <col:16> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60e2e0 '__x' 'const pair<_T1, _T2> &')
          (DeclRefExpr 0xa60e578 <col:23> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60e450 '__y' 'const pair<_T1, _T2> &'))))))

;
    template <class _T1, class _T2> inline bool operator>(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y) (CompoundStmt 0xa60eb50 </usr/include/c++/4.6/bits/stl_pair.h:221:5, col:25>
  (ReturnStmt 0xa60eb40 <col:7, col:20>
    (CXXOperatorCallExpr 0xa60eb18 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa60eae0 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10)
      (DeclRefExpr 0xa60eab0 <col:14> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60e9a0 '__y' 'const pair<_T1, _T2> &')
      (DeclRefExpr 0xa60eac8 <col:20> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60e830 '__x' 'const pair<_T1, _T2> &'))))

;
    template <class _T1, class _T2> inline bool operator<=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y) (CompoundStmt 0xa60f4f0 </usr/include/c++/4.6/bits/stl_pair.h:227:5, col:28>
  (ReturnStmt 0xa60f4e0 <col:7, col:25>
    (UnaryOperator 0xa60f4c8 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa60f4b0 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa60f488 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa60f450 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10)
          (DeclRefExpr 0xa60f420 <col:16> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60f310 '__y' 'const pair<_T1, _T2> &')
          (DeclRefExpr 0xa60f438 <col:22> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60ed50 '__x' 'const pair<_T1, _T2> &'))))))

;
    template <class _T1, class _T2> inline bool operator>=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y) (CompoundStmt 0xa60fa40 </usr/include/c++/4.6/bits/stl_pair.h:233:5, col:28>
  (ReturnStmt 0xa60fa30 <col:7, col:25>
    (UnaryOperator 0xa60fa18 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa60fa00 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa60f9d8 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa60f9a0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10)
          (DeclRefExpr 0xa60f970 <col:16> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60f6f0 '__x' 'const pair<_T1, _T2> &')
          (DeclRefExpr 0xa60f988 <col:22> 'const pair<_T1, _T2>' lvalue ParmVar 0xa60f860 '__y' 'const pair<_T1, _T2> &'))))))

;
    template <class _T1, class _T2> inline pair<_T1, _T2> make_pair(_T1 __x, _T2 __y) (CompoundStmt 0xa60fef8 </usr/include/c++/4.6/bits/stl_pair.h:273:5, col:40>
  (ReturnStmt 0xa60fee8 <col:7, col:37>
    (CXXUnresolvedConstructExpr 0xa60fec8 <col:14, col:37> 'pair<_T1, _T2>'
      (DeclRefExpr 0xa60fe98 <col:29> '_T1' lvalue ParmVar 0xa60fbf0 '__x' '_T1')
      (DeclRefExpr 0xa60feb0 <col:34> '_T2' lvalue ParmVar 0xa60fc30 '__y' '_T2'))))

;
}
namespace std {
    struct input_iterator_tag {
        struct input_iterator_tag;
    };
    struct output_iterator_tag {
        struct output_iterator_tag;
    };
    struct forward_iterator_tag : public std::input_iterator_tag {
        struct forward_iterator_tag;
    };
    struct bidirectional_iterator_tag : public std::forward_iterator_tag {
        struct bidirectional_iterator_tag;
    };
    struct random_access_iterator_tag : public std::bidirectional_iterator_tag {
        struct random_access_iterator_tag;
    };
    template <typename _Category = std::random_access_iterator_tag, typename _Tp = bool, typename _Distance = int, typename _Pointer = std::_Bit_reference *, typename _Reference = std::_Bit_reference> struct iterator {
        struct iterator;
        typedef std::random_access_iterator_tag iterator_category;
        typedef bool value_type;
        typedef int difference_type;
        typedef std::_Bit_reference *pointer;
        typedef std::_Bit_reference reference;
    }
template <typename _Category = std::random_access_iterator_tag, typename _Tp = bool, typename _Distance = int, typename _Pointer = bool *, typename _Reference = bool &> struct iterator {
        struct iterator;
        typedef std::random_access_iterator_tag iterator_category;
        typedef bool value_type;
        typedef int difference_type;
        typedef bool *pointer;
        typedef bool &reference;
        inline iterator() throw() (CompoundStmt 0xa6b91f0 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:118:12>)


        inline iterator(const std::iterator<std::random_access_iterator_tag, bool, int, bool *, bool &> &) throw() (CompoundStmt 0xa6bbb80 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:118:12>)


    }
template <typename _Category = std::output_iterator_tag, typename _Tp = void, typename _Distance = void, typename _Pointer = void, typename _Reference = void> struct iterator {
        struct iterator;
        typedef std::output_iterator_tag iterator_category;
        typedef void value_type;
        typedef void difference_type;
        typedef void pointer;
        typedef void reference;
    }
template <typename _Category = std::random_access_iterator_tag, typename _Tp = bool, typename _Distance = int, typename _Pointer = const bool *, typename _Reference = bool> struct iterator {
        struct iterator;
        typedef std::random_access_iterator_tag iterator_category;
        typedef bool value_type;
        typedef int difference_type;
        typedef const bool *pointer;
        typedef bool reference;
    }
template <typename _Category, typename _Tp, typename _Distance = ptrdiff_t, typename _Pointer = _Tp *, typename _Reference = _Tp &> struct iterator {
        struct iterator;
        typedef _Category iterator_category;
        typedef _Tp value_type;
        typedef _Distance difference_type;
        typedef _Pointer pointer;
        typedef _Reference reference;
    };
    template <typename _Iterator = std::_Bit_iterator> struct iterator_traits {
        struct iterator_traits;
        typedef typename _Bit_iterator::iterator_category iterator_category;
        typedef typename _Bit_iterator::value_type value_type;
        typedef typename _Bit_iterator::difference_type difference_type;
        typedef typename _Bit_iterator::pointer pointer;
        typedef typename _Bit_iterator::reference reference;
    }
template <typename _Iterator = std::_Bit_const_iterator> struct iterator_traits {
        struct iterator_traits;
        typedef typename _Bit_const_iterator::iterator_category iterator_category;
        typedef typename _Bit_const_iterator::value_type value_type;
        typedef typename _Bit_const_iterator::difference_type difference_type;
        typedef typename _Bit_const_iterator::pointer pointer;
        typedef typename _Bit_const_iterator::reference reference;
    }
template <typename _Iterator = __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct iterator_traits {
        struct iterator_traits;
        typedef typename __normal_iterator<const basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::iterator_category iterator_category;
        typedef typename __normal_iterator<const basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::value_type value_type;
        typedef typename __normal_iterator<const basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::difference_type difference_type;
        typedef typename __normal_iterator<const basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::pointer pointer;
        typedef typename __normal_iterator<const basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::reference reference;
    }
template <typename _Iterator = std::basic_string<char> *> struct iterator_traits {
        struct iterator_traits;
        typedef std::random_access_iterator_tag iterator_category;
        typedef std::basic_string<char> value_type;
        typedef ptrdiff_t difference_type;
        typedef std::basic_string<char> *pointer;
        typedef std::basic_string<char> &reference;
    }
template <typename _Iterator = const std::basic_string<char> *> struct iterator_traits {
        struct iterator_traits;
        typedef std::random_access_iterator_tag iterator_category;
        typedef std::basic_string<char> value_type;
        typedef ptrdiff_t difference_type;
        typedef const std::basic_string<char> *pointer;
        typedef const std::basic_string<char> &reference;
    }
template <typename _Iterator> struct iterator_traits {
        struct iterator_traits;
        typedef typename _Iterator::iterator_category iterator_category;
        typedef typename _Iterator::value_type value_type;
        typedef typename _Iterator::difference_type difference_type;
        typedef typename _Iterator::pointer pointer;
        typedef typename _Iterator::reference reference;
    };
    struct iterator_traits {
        struct iterator_traits;
        typedef std::random_access_iterator_tag iterator_category;
        typedef _Tp value_type;
        typedef ptrdiff_t difference_type;
        typedef _Tp *pointer;
        typedef _Tp &reference;
    };
    struct iterator_traits {
        struct iterator_traits;
        typedef std::random_access_iterator_tag iterator_category;
        typedef _Tp value_type;
        typedef ptrdiff_t difference_type;
        typedef const _Tp *pointer;
        typedef const _Tp &reference;
    };
    template <typename _Iter> inline typename iterator_traits<_Iter>::iterator_category __iterator_category(const _Iter &) (CompoundStmt 0xa616ab0 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:202:5, col:68>
  (ReturnStmt 0xa616aa0 <col:7, col:65>
    (CXXUnresolvedConstructExpr 0xa616a88 <col:14, col:65> 'typename iterator_traits<_Iter>::iterator_category')))

;
    template <typename _Iterator = std::basic_string<char> *, bool _HasBase = false> struct _Iter_base {
        struct _Iter_base;
        typedef std::basic_string<char> *iterator_type;
        static iterator_type _S_base(std::basic_string<char> *__it) (CompoundStmt 0xa9b1328 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:213:7, col:22>
  (ReturnStmt 0xa9b1318 <col:9, col:16>
    (ImplicitCastExpr 0xa9b1308 <col:16> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9b12ec <col:16> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b0890 '__it' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))


    }
template <typename _Iterator = unsigned long *, bool _HasBase = false> struct _Iter_base {
        struct _Iter_base;
        typedef unsigned long *iterator_type;
        static iterator_type _S_base(unsigned long *__it) (CompoundStmt 0xa9a6698 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:213:7, col:22>
  (ReturnStmt 0xa9a6688 <col:9, col:16>
    (ImplicitCastExpr 0xa9a6678 <col:16> 'unsigned long *':'unsigned long *' <LValueToRValue>
      (DeclRefExpr 0xa9a665c <col:16> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xaa2ba40 '__it' 'unsigned long *':'unsigned long *'))))


    }
template <typename _Iterator, bool _HasBase> struct _Iter_base {
        struct _Iter_base;
        typedef _Iterator iterator_type;
        static iterator_type _S_base(_Iterator __it) (CompoundStmt 0xa617618 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:213:7, col:22>
  (ReturnStmt 0xa617608 <col:9, col:16>
    (DeclRefExpr 0xa6175f0 <col:16> '_Iterator' lvalue ParmVar 0xa6174d0 '__it' '_Iterator')))


    };
    struct _Iter_base {
        struct _Iter_base;
        typedef typename _Iterator::iterator_type iterator_type;
        static iterator_type _S_base(_Iterator __it) (CompoundStmt 0xa617c40 </usr/include/c++/4.6/bits/stl_iterator_base_types.h:221:7, col:29>
  (ReturnStmt 0xa617c30 <col:9, col:26>
    (CallExpr 0xa617c10 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa617bd8 <col:16, col:21> '<dependent type>' lvalue
        (DeclRefExpr 0xa617bc0 <col:16> '_Iterator' lvalue ParmVar 0xa617aa0 '__it' '_Iterator')))))


    };
}
namespace std {
    template <typename _InputIterator> inline typename iterator_traits<_InputIterator>::difference_type __distance(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6182d8 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:74:5, line:85:5>
  (DeclStmt 0xa618180 <line:78:7, col:72>
    0xa618130 "typename iterator_traits<_InputIterator>::difference_type __n =
      (IntegerLiteral 0xa618168 <col:71> 'int' 0)")
  (WhileStmt 0xa618298 <line:79:7, line:83:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6181f8 <line:79:14, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa6181c0 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530)
      (DeclRefExpr 0xa618190 <col:14> '_InputIterator' lvalue ParmVar 0xa617e60 '__first' '_InputIterator')
      (DeclRefExpr 0xa6181a8 <col:25> '_InputIterator' lvalue ParmVar 0xa617ea0 '__last' '_InputIterator'))
    (CompoundStmt 0xa618280 <line:80:2, line:83:2>
      (UnaryOperator 0xa618238 <line:81:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa61821c <col:6> '_InputIterator' lvalue ParmVar 0xa617e60 '__first' '_InputIterator'))
      (UnaryOperator 0xa618268 <line:82:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa61824c <col:6> 'typename iterator_traits<_InputIterator>::difference_type' lvalue Var 0xa618130 '__n' 'typename iterator_traits<_InputIterator>::difference_type'))))
  (ReturnStmt 0xa6182c8 <line:84:7, col:14>
    (DeclRefExpr 0xa6182ac <col:14> 'typename iterator_traits<_InputIterator>::difference_type' lvalue Var 0xa618130 '__n' 'typename iterator_traits<_InputIterator>::difference_type')))

;
    template <typename _RandomAccessIterator> inline typename iterator_traits<_RandomAccessIterator>::difference_type __distance(_RandomAccessIterator __first, _RandomAccessIterator __last, std::random_access_iterator_tag) (CompoundStmt 0xa61b920 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:91:5, line:96:5>
  (ReturnStmt 0xa61b910 <line:95:7, col:23>
    (BinaryOperator 0xa61b8f8 <col:14, col:23> '<dependent type>' '-'
      (DeclRefExpr 0xa61b8c4 <col:14> '_RandomAccessIterator' lvalue ParmVar 0xa61b720 '__last' '_RandomAccessIterator')
      (DeclRefExpr 0xa61b8dc <col:23> '_RandomAccessIterator' lvalue ParmVar 0xa61b6e0 '__first' '_RandomAccessIterator'))))

;
    template <typename _InputIterator> inline typename iterator_traits<_InputIterator>::difference_type distance(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa61bd40 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:113:5, line:117:5>
  (ReturnStmt 0xa61bd30 <line:115:7, line:116:42>
    (CallExpr 0xa61bd08 <line:115:14, line:116:42> '<dependent type>'
      (UnresolvedLookupExpr 0xa61bc18 <line:115:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa618010 0xa61b890)
      (DeclRefExpr 0xa61bc50 <col:30> '_InputIterator' lvalue ParmVar 0xa61ba70 '__first' '_InputIterator')
      (DeclRefExpr 0xa61bc68 <col:39> '_InputIterator' lvalue ParmVar 0xa61bab0 '__last' '_InputIterator')
      (CallExpr 0xa61bce8 <line:116:9, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa61bc98 <col:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa616970)
        (DeclRefExpr 0xa61bccc <col:34> '_InputIterator' lvalue ParmVar 0xa61ba70 '__first' '_InputIterator')))))

;
    template <typename _InputIterator, typename _Distance> inline void __advance(_InputIterator &__i, _Distance __n, std::input_iterator_tag) (CompoundStmt 0xa61c0a8 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:122:5, line:127:5>
  (WhileStmt 0xa61c090 <line:125:7, line:126:4>
    <<<NULL>>>
    (UnaryOperator 0xa61c048 <line:125:14, col:17> '<dependent type>' postfix '--'
      (DeclRefExpr 0xa61c014 <col:14> '_Distance' lvalue ParmVar 0xa61be80 '__n' '_Distance'))
    (UnaryOperator 0xa61c078 <line:126:2, col:4> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa61c05c <col:4> '_InputIterator' lvalue ParmVar 0xa61be40 '__i' '_InputIterator &'))))

;
    template <typename _BidirectionalIterator, typename _Distance> inline void __advance(_BidirectionalIterator &__i, _Distance __n, std::bidirectional_iterator_tag) (CompoundStmt 0xa61c548 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:133:5, line:143:5>
  (IfStmt 0xa61c528 <line:137:7, line:142:6>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa61c3e0 <line:137:11, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa61c3a8 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80)
      (DeclRefExpr 0xa61c374 <col:11> '_Distance' lvalue ParmVar 0xa61c1e0 '__n' '_Distance')
      (IntegerLiteral 0xa61c390 <col:17> 'int' 0))
    (WhileStmt 0xa61c480 <line:138:9, line:139:6>
      <<<NULL>>>
      (UnaryOperator 0xa61c438 <line:138:16, col:19> '<dependent type>' postfix '--'
        (DeclRefExpr 0xa61c404 <col:16> '_Distance' lvalue ParmVar 0xa61c1e0 '__n' '_Distance'))
      (UnaryOperator 0xa61c468 <line:139:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa61c44c <col:6> '_BidirectionalIterator' lvalue ParmVar 0xa61c1a0 '__i' '_BidirectionalIterator &')))
    (WhileStmt 0xa61c510 <line:141:9, line:142:6>
      <<<NULL>>>
      (UnaryOperator 0xa61c4c8 <line:141:16, col:19> '<dependent type>' postfix '++'
        (DeclRefExpr 0xa61c494 <col:16> '_Distance' lvalue ParmVar 0xa61c1e0 '__n' '_Distance'))
      (UnaryOperator 0xa61c4f8 <line:142:4, col:6> '<dependent type>' prefix '--'
        (DeclRefExpr 0xa61c4dc <col:6> '_BidirectionalIterator' lvalue ParmVar 0xa61c1a0 '__i' '_BidirectionalIterator &')))))

;
    template <typename _RandomAccessIterator, typename _Distance> inline void __advance(_RandomAccessIterator &__i, _Distance __n, std::random_access_iterator_tag) (CompoundStmt 0xa61d2c8 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:149:5, line:154:5>
  (CompoundAssignOperator 0xa61d2a8 <line:153:7, col:14> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (DeclRefExpr 0xa61d274 <col:7> '_RandomAccessIterator' lvalue ParmVar 0xa61d0a0 '__i' '_RandomAccessIterator &')
    (DeclRefExpr 0xa61d28c <col:14> '_Distance' lvalue ParmVar 0xa61d0e0 '__n' '_Distance')))

;
    template <typename _InputIterator, typename _Distance> inline void advance(_InputIterator &__i, _Distance __n) (CompoundStmt 0xa61d7c8 </usr/include/c++/4.6/bits/stl_iterator_base_funcs.h:171:5, line:175:5>
  (DeclStmt 0xa61d670 <line:173:7, col:74>
    0xa61d620 "typename iterator_traits<_InputIterator>::difference_type __d =
      (DeclRefExpr 0xa61d654 <col:71> '_Distance' lvalue ParmVar 0xa61d400 '__n' '_Distance')")
  (CallExpr 0xa61d7a0 <line:174:7, col:61> '<dependent type>'
    (UnresolvedLookupExpr 0xa61d6a8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bfe0 0xa61c340 0xa61d240)
    (DeclRefExpr 0xa61d6e4 <col:22> '_InputIterator' lvalue ParmVar 0xa61d3c0 '__i' '_InputIterator &')
    (DeclRefExpr 0xa61d6fc <col:27> 'typename iterator_traits<_InputIterator>::difference_type' lvalue Var 0xa61d620 '__d' 'typename iterator_traits<_InputIterator>::difference_type')
    (CallExpr 0xa61d780 <col:32, col:60> '<dependent type>'
      (UnresolvedLookupExpr 0xa61d730 <col:32, col:37> '<overloaded function type>' lvalue (no ADL) = '1' 0xa616970)
      (DeclRefExpr 0xa61d764 <col:57> '_InputIterator' lvalue ParmVar 0xa61d3c0 '__i' '_InputIterator &'))))

;
}
namespace std {
    template <typename _Iterator = std::_Bit_iterator> class reverse_iterator : public iterator<typename iterator_traits<_Bit_iterator>::iterator_category, typename iterator_traits<_Bit_iterator>::value_type, typename iterator_traits<_Bit_iterator>::difference_type, typename iterator_traits<_Bit_iterator>::pointer, typename iterator_traits<_Bit_iterator>::reference> {
        class reverse_iterator;
    protected:
    protected:
        std::_Bit_iterator current;
        typedef iterator_traits<std::_Bit_iterator> __traits_type;
    public:
    public:
        typedef std::_Bit_iterator iterator_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::pointer pointer;
        typedef typename __traits_type::reference reference;
        reverse_iterator();
        reverse_iterator(iterator_type __x);
        reverse_iterator(const std::reverse_iterator<std::_Bit_iterator> &__x);
        template <typename _Iter = std::_Bit_iterator> reverse_iterator(const reverse_iterator<std::_Bit_iterator> &__x)template <typename _Iter> reverse_iterator(const reverse_iterator<_Iter> &__x);
        iterator_type base() const;
        reference operator*() const;
        pointer operator->() const;
        std::reverse_iterator<std::_Bit_iterator> &operator++();
        std::reverse_iterator<std::_Bit_iterator> operator++(int);
        std::reverse_iterator<std::_Bit_iterator> &operator--();
        std::reverse_iterator<std::_Bit_iterator> operator--(int);
        std::reverse_iterator<std::_Bit_iterator> operator+(difference_type __n) const;
        std::reverse_iterator<std::_Bit_iterator> &operator+=(difference_type __n);
        std::reverse_iterator<std::_Bit_iterator> operator-(difference_type __n) const;
        std::reverse_iterator<std::_Bit_iterator> &operator-=(difference_type __n);
        reference operator[](difference_type __n) const;
    }
template <typename _Iterator = __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >> class reverse_iterator
template <typename _Iterator = std::_Bit_const_iterator> class reverse_iterator : public iterator<typename iterator_traits<_Bit_const_iterator>::iterator_category, typename iterator_traits<_Bit_const_iterator>::value_type, typename iterator_traits<_Bit_const_iterator>::difference_type, typename iterator_traits<_Bit_const_iterator>::pointer, typename iterator_traits<_Bit_const_iterator>::reference> {
        class reverse_iterator;
    protected:
    protected:
        std::_Bit_const_iterator current;
        typedef iterator_traits<std::_Bit_const_iterator> __traits_type;
    public:
    public:
        typedef std::_Bit_const_iterator iterator_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::pointer pointer;
        typedef typename __traits_type::reference reference;
        reverse_iterator();
        reverse_iterator(iterator_type __x);
        reverse_iterator(const std::reverse_iterator<std::_Bit_const_iterator> &__x);
        template <typename _Iter = std::_Bit_const_iterator> reverse_iterator(const reverse_iterator<std::_Bit_const_iterator> &__x)template <typename _Iter> reverse_iterator(const reverse_iterator<_Iter> &__x);
        iterator_type base() const;
        reference operator*() const;
        pointer operator->() const;
        std::reverse_iterator<std::_Bit_const_iterator> &operator++();
        std::reverse_iterator<std::_Bit_const_iterator> operator++(int);
        std::reverse_iterator<std::_Bit_const_iterator> &operator--();
        std::reverse_iterator<std::_Bit_const_iterator> operator--(int);
        std::reverse_iterator<std::_Bit_const_iterator> operator+(difference_type __n) const;
        std::reverse_iterator<std::_Bit_const_iterator> &operator+=(difference_type __n);
        std::reverse_iterator<std::_Bit_const_iterator> operator-(difference_type __n) const;
        std::reverse_iterator<std::_Bit_const_iterator> &operator-=(difference_type __n);
        reference operator[](difference_type __n) const;
    }
template <typename _Iterator = __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class reverse_iterator
template <typename _Iterator = __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class reverse_iterator
template <typename _Iterator = __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >> class reverse_iterator
template <typename _Iterator = std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class reverse_iterator
template <typename _Iterator = __gnu_cxx::__normal_iterator<const wchar_t *, std::basic_string<wchar_t> >> class reverse_iterator
template <typename _Iterator = __gnu_cxx::__normal_iterator<wchar_t *, std::basic_string<wchar_t> >> class reverse_iterator
template <typename _Iterator = std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class reverse_iterator
template <typename _Iterator> class reverse_iterator : public iterator<typename iterator_traits<_Iterator>::iterator_category, typename iterator_traits<_Iterator>::value_type, typename iterator_traits<_Iterator>::difference_type, typename iterator_traits<_Iterator>::pointer, typename iterator_traits<_Iterator>::reference> {
        class reverse_iterator;
    protected:
    protected:
        _Iterator current;
        typedef iterator_traits<_Iterator> __traits_type;
    public:
    public:
        typedef _Iterator iterator_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::pointer pointer;
        typedef typename __traits_type::reference reference;
        reverse_iterator<_Iterator>() : current() (CompoundStmt 0xa622080 </usr/include/c++/4.6/bits/stl_iterator.h:121:38, col:40>)


        reverse_iterator<_Iterator>(iterator_type __x) : current((DeclRefExpr 0xa622090 </usr/include/c++/4.6/bits/stl_iterator.h:127:53> 'iterator_type':'_Iterator' lvalue ParmVar 0xa620230 '__x' 'iterator_type':'_Iterator')
) (CompoundStmt 0xa6220f0 </usr/include/c++/4.6/bits/stl_iterator.h:127:58, col:60>)


        reverse_iterator<_Iterator>(const reverse_iterator<_Iterator> &__x) : current((CXXDependentScopeMemberExpr 0xa622118 </usr/include/c++/4.6/bits/stl_iterator.h:133:17, col:21> '<dependent type>' lvalue
  (DeclRefExpr 0xa622100 <col:17> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa620370 '__x' 'const reverse_iterator<_Iterator> &'))
) (CompoundStmt 0xa622190 </usr/include/c++/4.6/bits/stl_iterator.h:133:30, col:32>)


        template <typename _Iter> reverse_iterator<_Iterator>(const reverse_iterator<_Iter> &__x) : current((CallExpr 0xa6221f0 </usr/include/c++/4.6/bits/stl_iterator.h:141:12, col:21> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa6221b8 <col:12, col:16> '<dependent type>' lvalue
    (DeclRefExpr 0xa6221a0 <col:12> 'const reverse_iterator<_Iter>' lvalue ParmVar 0xa6205d0 '__x' 'const reverse_iterator<_Iter> &')))
) (CompoundStmt 0xa622250 </usr/include/c++/4.6/bits/stl_iterator.h:141:24, col:26>)

;
        iterator_type base() const (CompoundStmt 0xa6222d8 </usr/include/c++/4.6/bits/stl_iterator.h:148:7, col:25>
  (ReturnStmt 0xa6222c8 <col:9, col:16>
    (MemberExpr 0xa6222a4 <col:16> 'const _Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa622278 <col:16> 'const reverse_iterator<_Iterator> *' this))))


        reference operator*() const (CompoundStmt 0xa6223d0 </usr/include/c++/4.6/bits/stl_iterator.h:157:7, line:160:7>
  (DeclStmt 0xa622368 <line:158:2, col:27>
    0xa622300 "_Iterator __tmp =
      (MemberExpr 0xa622348 <col:20> 'const _Iterator' lvalue ->current 0xa61fe10
        (CXXThisExpr 0xa622338 <col:20> 'const reverse_iterator<_Iterator> *' this))")
  (ReturnStmt 0xa6223c0 <line:159:2, col:12>
    (UnaryOperator 0xa6223a8 <col:9, col:12> '<dependent type>' prefix '*'
      (UnaryOperator 0xa622390 <col:10, col:12> '<dependent type>' prefix '--'
        (DeclRefExpr 0xa622378 <col:12> '_Iterator' lvalue Var 0xa622300 '__tmp' '_Iterator')))))


        pointer operator->() const (CompoundStmt 0xa622478 </usr/include/c++/4.6/bits/stl_iterator.h:169:7, col:32>
  (ReturnStmt 0xa622468 <col:9, col:29>
    (UnaryOperator 0xa622450 <col:16, col:29> '<dependent type>' prefix '&'
      (ParenExpr 0xa622438 <col:17, col:29> '<dependent type>'
        (CallExpr 0xa622418 <col:18, col:28> '<dependent type>'
          (MemberExpr 0xa6223f8 <col:18, col:26> '<bound member function type>' ->operator* 0xa620820
            (CXXThisExpr 0xa6223e8 <col:18> 'const reverse_iterator<_Iterator> *' this)))))))


        reverse_iterator<_Iterator> &operator++() (CompoundStmt 0xa622510 </usr/include/c++/4.6/bits/stl_iterator.h:178:7, line:181:7>
  (UnaryOperator 0xa6224c0 <line:179:2, col:4> '<dependent type>' prefix '--'
    (MemberExpr 0xa6224a0 <col:4> '_Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa622490 <col:4> 'reverse_iterator<_Iterator> *' this)))
  (ReturnStmt 0xa622500 <line:180:2, col:10>
    (UnaryOperator 0xa6224e8 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa6224d8 <col:10> 'reverse_iterator<_Iterator> *' this))))


        reverse_iterator<_Iterator> operator++(int) (CompoundStmt 0xa622610 </usr/include/c++/4.6/bits/stl_iterator.h:190:7, line:194:7>
  (DeclStmt 0xa622590 <line:191:2, col:32>
    0xa622530 "reverse_iterator<_Iterator> __tmp =
      (UnaryOperator 0xa622578 <col:27, col:28> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa622568 <col:28> 'reverse_iterator<_Iterator> *' this))")
  (UnaryOperator 0xa6225d0 <line:192:2, col:4> '<dependent type>' prefix '--'
    (MemberExpr 0xa6225b0 <col:4> '_Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa6225a0 <col:4> 'reverse_iterator<_Iterator> *' this)))
  (ReturnStmt 0xa622600 <line:193:2, col:9>
    (DeclRefExpr 0xa6225e4 <col:9> 'reverse_iterator<_Iterator>' lvalue Var 0xa622530 '__tmp' 'reverse_iterator<_Iterator>')))


        reverse_iterator<_Iterator> &operator--() (CompoundStmt 0xa6226b0 </usr/include/c++/4.6/bits/stl_iterator.h:203:7, line:206:7>
  (UnaryOperator 0xa622660 <line:204:2, col:4> '<dependent type>' prefix '++'
    (MemberExpr 0xa622640 <col:4> '_Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa622630 <col:4> 'reverse_iterator<_Iterator> *' this)))
  (ReturnStmt 0xa6226a0 <line:205:2, col:10>
    (UnaryOperator 0xa622688 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa622678 <col:10> 'reverse_iterator<_Iterator> *' this))))


        reverse_iterator<_Iterator> operator--(int) (CompoundStmt 0xa6227b0 </usr/include/c++/4.6/bits/stl_iterator.h:215:7, line:219:7>
  (DeclStmt 0xa622730 <line:216:2, col:32>
    0xa6226d0 "reverse_iterator<_Iterator> __tmp =
      (UnaryOperator 0xa622718 <col:27, col:28> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa622708 <col:28> 'reverse_iterator<_Iterator> *' this))")
  (UnaryOperator 0xa622770 <line:217:2, col:4> '<dependent type>' prefix '++'
    (MemberExpr 0xa622750 <col:4> '_Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa622740 <col:4> 'reverse_iterator<_Iterator> *' this)))
  (ReturnStmt 0xa6227a0 <line:218:2, col:9>
    (DeclRefExpr 0xa622784 <col:9> 'reverse_iterator<_Iterator>' lvalue Var 0xa6226d0 '__tmp' 'reverse_iterator<_Iterator>')))


        reverse_iterator<_Iterator> operator+(difference_type __n) const (CompoundStmt 0xa622868 </usr/include/c++/4.6/bits/stl_iterator.h:228:7, col:49>
  (ReturnStmt 0xa622858 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa622838 <col:16, col:46> 'reverse_iterator<_Iterator>'
      (BinaryOperator 0xa622820 <col:33, col:43> '<dependent type>' '-'
        (MemberExpr 0xa6227e8 <col:33> 'const _Iterator' lvalue ->current 0xa61fe10
          (CXXThisExpr 0xa6227d8 <col:33> 'const reverse_iterator<_Iterator> *' this))
        (DeclRefExpr 0xa622808 <col:43> 'difference_type':'typename __traits_type::difference_type' lvalue ParmVar 0xa621b90 '__n' 'difference_type':'typename __traits_type::difference_type')))))


        reverse_iterator<_Iterator> &operator+=(difference_type __n) (CompoundStmt 0xa622920 </usr/include/c++/4.6/bits/stl_iterator.h:237:7, line:240:7>
  (CompoundAssignOperator 0xa6228c8 <line:238:2, col:13> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (MemberExpr 0xa622890 <col:2> '_Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa622880 <col:2> 'reverse_iterator<_Iterator> *' this))
    (DeclRefExpr 0xa6228b0 <col:13> 'difference_type':'typename __traits_type::difference_type' lvalue ParmVar 0xa621ca0 '__n' 'difference_type':'typename __traits_type::difference_type'))
  (ReturnStmt 0xa622910 <line:239:2, col:10>
    (UnaryOperator 0xa6228f8 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa6228e8 <col:10> 'reverse_iterator<_Iterator> *' this))))


        reverse_iterator<_Iterator> operator-(difference_type __n) const (CompoundStmt 0xa6229d0 </usr/include/c++/4.6/bits/stl_iterator.h:249:7, col:49>
  (ReturnStmt 0xa6229c0 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa6229a0 <col:16, col:46> 'reverse_iterator<_Iterator>'
      (BinaryOperator 0xa622988 <col:33, col:43> '<dependent type>' '+'
        (MemberExpr 0xa622950 <col:33> 'const _Iterator' lvalue ->current 0xa61fe10
          (CXXThisExpr 0xa622940 <col:33> 'const reverse_iterator<_Iterator> *' this))
        (DeclRefExpr 0xa622970 <col:43> 'difference_type':'typename __traits_type::difference_type' lvalue ParmVar 0xa621db0 '__n' 'difference_type':'typename __traits_type::difference_type')))))


        reverse_iterator<_Iterator> &operator-=(difference_type __n) (CompoundStmt 0xa622a88 </usr/include/c++/4.6/bits/stl_iterator.h:258:7, line:261:7>
  (CompoundAssignOperator 0xa622a30 <line:259:2, col:13> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (MemberExpr 0xa6229f8 <col:2> '_Iterator' lvalue ->current 0xa61fe10
      (CXXThisExpr 0xa6229e8 <col:2> 'reverse_iterator<_Iterator> *' this))
    (DeclRefExpr 0xa622a18 <col:13> 'difference_type':'typename __traits_type::difference_type' lvalue ParmVar 0xa621e70 '__n' 'difference_type':'typename __traits_type::difference_type'))
  (ReturnStmt 0xa622a78 <line:260:2, col:10>
    (UnaryOperator 0xa622a60 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa622a50 <col:10> 'reverse_iterator<_Iterator> *' this))))


        reference operator[](difference_type __n) const (CompoundStmt 0xa624e18 </usr/include/c++/4.6/bits/stl_iterator.h:270:7, col:32>
  (ReturnStmt 0xa624e08 <col:9, col:29>
    (UnaryOperator 0xa624df0 <col:16, col:29> '<dependent type>' prefix '*'
      (ParenExpr 0xa624dd8 <col:17, col:29> '<dependent type>'
        (BinaryOperator 0xa624dc0 <col:18, col:26> '<dependent type>' '+'
          (UnaryOperator 0xa622ab0 <col:18, col:19> '<dependent type>' prefix '*'
            (CXXThisExpr 0xa622aa0 <col:19> 'const reverse_iterator<_Iterator> *' this))
          (DeclRefExpr 0xa622ac4 <col:26> 'difference_type':'typename __traits_type::difference_type' lvalue ParmVar 0xa621f40 '__n' 'difference_type':'typename __traits_type::difference_type'))))))


    };
    template <typename _Iterator> inline bool operator==(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa6252f0 </usr/include/c++/4.6/bits/stl_iterator.h:287:5, col:40>
  (ReturnStmt 0xa6252e0 <col:7, col:37>
    (CXXOperatorCallExpr 0xa6252b8 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa625280 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa625170 0xa60d470)
      (CallExpr 0xa6251f0 <col:14, col:23> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6251b8 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa6251a0 <col:14> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa624f70 '__x' 'const reverse_iterator<_Iterator> &')))
      (CallExpr 0xa625260 <col:28, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa625228 <col:28, col:32> '<dependent type>' lvalue
          (DeclRefExpr 0xa62520c <col:28> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa625070 '__y' 'const reverse_iterator<_Iterator> &'))))))

;
    template <typename _Iterator> inline bool operator<(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa625790 </usr/include/c++/4.6/bits/stl_iterator.h:293:5, col:39>
  (ReturnStmt 0xa625780 <col:7, col:36>
    (CXXOperatorCallExpr 0xa625758 <col:14, col:36> '<dependent type>'
      (UnresolvedLookupExpr 0xa625720 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa625610 0xa60db10)
      (CallExpr 0xa625690 <col:14, col:23> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa625658 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa625640 <col:14> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa625530 '__y' 'const reverse_iterator<_Iterator> &')))
      (CallExpr 0xa625700 <col:27, col:36> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6256c8 <col:27, col:31> '<dependent type>' lvalue
          (DeclRefExpr 0xa6256ac <col:27> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa625430 '__x' 'const reverse_iterator<_Iterator> &'))))))

;
    template <typename _Iterator> inline bool operator!=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa625bb0 </usr/include/c++/4.6/bits/stl_iterator.h:299:5, col:29>
  (ReturnStmt 0xa625ba0 <col:7, col:26>
    (UnaryOperator 0xa625b88 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa625b70 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa625b48 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa625b10 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa625170 0xa60d470)
          (DeclRefExpr 0xa625ae0 <col:16> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa6258d0 '__x' 'const reverse_iterator<_Iterator> &')
          (DeclRefExpr 0xa625af8 <col:23> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa6259d0 '__y' 'const reverse_iterator<_Iterator> &'))))))

;
    template <typename _Iterator> inline bool operator>(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa625fc0 </usr/include/c++/4.6/bits/stl_iterator.h:305:5, col:25>
  (ReturnStmt 0xa625fb0 <col:7, col:20>
    (CXXOperatorCallExpr 0xa625f88 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa625f50 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa625610 0xa60db10)
      (DeclRefExpr 0xa625f20 <col:14> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa625e10 '__y' 'const reverse_iterator<_Iterator> &')
      (DeclRefExpr 0xa625f38 <col:20> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa625cf0 '__x' 'const reverse_iterator<_Iterator> &'))))

;
    template <typename _Iterator> inline bool operator<=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa6263e0 </usr/include/c++/4.6/bits/stl_iterator.h:311:5, col:28>
  (ReturnStmt 0xa6263d0 <col:7, col:25>
    (UnaryOperator 0xa6263b8 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa6263a0 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa626378 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa626340 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa625610 0xa60db10)
          (DeclRefExpr 0xa626310 <col:16> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa626200 '__y' 'const reverse_iterator<_Iterator> &')
          (DeclRefExpr 0xa626328 <col:22> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa626100 '__x' 'const reverse_iterator<_Iterator> &'))))))

;
    template <typename _Iterator> inline bool operator>=(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa626800 </usr/include/c++/4.6/bits/stl_iterator.h:317:5, col:28>
  (ReturnStmt 0xa6267f0 <col:7, col:25>
    (UnaryOperator 0xa6267d8 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa6267c0 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa626798 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa626760 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa625610 0xa60db10)
          (DeclRefExpr 0xa626730 <col:16> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa626520 '__x' 'const reverse_iterator<_Iterator> &')
          (DeclRefExpr 0xa626748 <col:22> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa626620 '__y' 'const reverse_iterator<_Iterator> &'))))))

;
    template <typename _Iterator> inline typename reverse_iterator<_Iterator>::difference_type operator-(const reverse_iterator<_Iterator> &__x, const reverse_iterator<_Iterator> &__y) (CompoundStmt 0xa626de0 </usr/include/c++/4.6/bits/stl_iterator.h:323:5, col:39>
  (ReturnStmt 0xa626dd0 <col:7, col:36>
    (CXXOperatorCallExpr 0xa626d98 <col:14, col:36> '<dependent type>'
      (UnresolvedLookupExpr 0xa626d60 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50)
      (CallExpr 0xa626cd0 <col:14, col:23> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa626c98 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa626c80 <col:14> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa626b40 '__y' 'const reverse_iterator<_Iterator> &')))
      (CallExpr 0xa626d40 <col:27, col:36> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa626d08 <col:27, col:31> '<dependent type>' lvalue
          (DeclRefExpr 0xa626cec <col:27> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa626a40 '__x' 'const reverse_iterator<_Iterator> &'))))))

;
    template <typename _Iterator> inline reverse_iterator<_Iterator> operator+(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator> &__x) (CompoundStmt 0xa6273e8 </usr/include/c++/4.6/bits/stl_iterator.h:329:5, col:61>
  (ReturnStmt 0xa6273d8 <col:7, col:58>
    (CXXUnresolvedConstructExpr 0xa6273b8 <col:14, col:58> 'reverse_iterator<_Iterator>'
      (CXXOperatorCallExpr 0xa627390 <col:42, col:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa627358 <col:53, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50)
        (CallExpr 0xa627320 <col:42, col:51> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa6272e8 <col:42, col:46> '<dependent type>' lvalue
            (DeclRefExpr 0xa6272d0 <col:42> 'const reverse_iterator<_Iterator>' lvalue ParmVar 0xa6270d0 '__x' 'const reverse_iterator<_Iterator> &')))
        (DeclRefExpr 0xa62733c <col:55> 'typename reverse_iterator<_Iterator>::difference_type' lvalue ParmVar 0xa626fd0 '__n' 'typename reverse_iterator<_Iterator>::difference_type')))))

;
    template <typename _IteratorL, typename _IteratorR> inline bool operator==(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa627958 </usr/include/c++/4.6/bits/stl_iterator.h:337:5, col:40>
  (ReturnStmt 0xa627948 <col:7, col:37>
    (CXXOperatorCallExpr 0xa627920 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa6278e0 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6277d0 0xa625170 0xa60d470)
      (CallExpr 0xa627850 <col:14, col:23> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa627818 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa627800 <col:14> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa627580 '__x' 'const reverse_iterator<_IteratorL> &')))
      (CallExpr 0xa6278c0 <col:28, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa627888 <col:28, col:32> '<dependent type>' lvalue
          (DeclRefExpr 0xa62786c <col:28> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa6276d0 '__y' 'const reverse_iterator<_IteratorR> &'))))))

;
    template <typename _IteratorL, typename _IteratorR> inline bool operator<(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa627e70 </usr/include/c++/4.6/bits/stl_iterator.h:343:5, col:39>
  (ReturnStmt 0xa627e60 <col:7, col:36>
    (CXXOperatorCallExpr 0xa627e38 <col:14, col:36> '<dependent type>'
      (UnresolvedLookupExpr 0xa627df8 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa627cd0 0xa625610 0xa60db10)
      (CallExpr 0xa627d50 <col:14, col:23> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa627d18 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa627d00 <col:14> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa627bf0 '__y' 'const reverse_iterator<_IteratorR> &')))
      (CallExpr 0xa627dd8 <col:27, col:36> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa627d88 <col:27, col:31> '<dependent type>' lvalue
          (DeclRefExpr 0xa627d6c <col:27> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa627af0 '__x' 'const reverse_iterator<_IteratorL> &'))))))

;
    template <typename _IteratorL, typename _IteratorR> inline bool operator!=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa6282f8 </usr/include/c++/4.6/bits/stl_iterator.h:349:5, col:29>
  (ReturnStmt 0xa6282e8 <col:7, col:26>
    (UnaryOperator 0xa6282d0 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa6282b8 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa628290 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa628250 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6277d0 0xa625170 0xa60d470)
          (DeclRefExpr 0xa628220 <col:16> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa628010 '__x' 'const reverse_iterator<_IteratorL> &')
          (DeclRefExpr 0xa628238 <col:23> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa628110 '__y' 'const reverse_iterator<_IteratorR> &'))))))

;
    template <typename _IteratorL, typename _IteratorR> inline bool operator>(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa628748 </usr/include/c++/4.6/bits/stl_iterator.h:355:5, col:25>
  (ReturnStmt 0xa628738 <col:7, col:20>
    (CXXOperatorCallExpr 0xa628710 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa6286d0 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa627cd0 0xa625610 0xa60db10)
      (DeclRefExpr 0xa6286a0 <col:14> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa628590 '__y' 'const reverse_iterator<_IteratorR> &')
      (DeclRefExpr 0xa6286b8 <col:20> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa628490 '__x' 'const reverse_iterator<_IteratorL> &'))))

;
    template <typename _IteratorL, typename _IteratorR> inline bool operator<=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa628bc8 </usr/include/c++/4.6/bits/stl_iterator.h:361:5, col:28>
  (ReturnStmt 0xa628bb8 <col:7, col:25>
    (UnaryOperator 0xa628ba0 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa628b88 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa628b60 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa628b20 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa627cd0 0xa625610 0xa60db10)
          (DeclRefExpr 0xa628af0 <col:16> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa6289e0 '__y' 'const reverse_iterator<_IteratorR> &')
          (DeclRefExpr 0xa628b08 <col:22> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa6288e0 '__x' 'const reverse_iterator<_IteratorL> &'))))))

;
    template <typename _IteratorL, typename _IteratorR> inline bool operator>=(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa629678 </usr/include/c++/4.6/bits/stl_iterator.h:367:5, col:28>
  (ReturnStmt 0xa629668 <col:7, col:25>
    (UnaryOperator 0xa629650 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa629638 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa629610 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa6295d0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa627cd0 0xa625610 0xa60db10)
          (DeclRefExpr 0xa6295a0 <col:16> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa628d60 '__x' 'const reverse_iterator<_IteratorL> &')
          (DeclRefExpr 0xa6295b8 <col:22> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa629490 '__y' 'const reverse_iterator<_IteratorR> &'))))))

;
    template <typename _IteratorL, typename _IteratorR> inline typename reverse_iterator<_IteratorL>::difference_type operator-(const reverse_iterator<_IteratorL> &__x, const reverse_iterator<_IteratorR> &__y) (CompoundStmt 0xa629c70 </usr/include/c++/4.6/bits/stl_iterator.h:381:5, col:39>
  (ReturnStmt 0xa629c60 <col:7, col:36>
    (CXXOperatorCallExpr 0xa629c38 <col:14, col:36> '<dependent type>'
      (UnresolvedLookupExpr 0xa629c00 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa629af0 0xa626c50)
      (CallExpr 0xa629b70 <col:14, col:23> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa629b38 <col:14, col:18> '<dependent type>' lvalue
          (DeclRefExpr 0xa629b20 <col:14> 'const reverse_iterator<_IteratorR>' lvalue ParmVar 0xa6299e0 '__y' 'const reverse_iterator<_IteratorR> &')))
      (CallExpr 0xa629be0 <col:27, col:36> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa629ba8 <col:27, col:31> '<dependent type>' lvalue
          (DeclRefExpr 0xa629b8c <col:27> 'const reverse_iterator<_IteratorL>' lvalue ParmVar 0xa6298e0 '__x' 'const reverse_iterator<_IteratorL> &'))))))

;
    template <typename _Container> class back_insert_iterator : public iterator<std::output_iterator_tag, void, void, void, void> {
        class back_insert_iterator;
    protected:
    protected:
        _Container *container;
    public:
    public:
        typedef _Container container_type;
        back_insert_iterator<_Container>(_Container &__x) : container((UnaryOperator 0xa62b210 </usr/include/c++/4.6/bits/stl_iterator.h:408:57, col:58> '<dependent type>' prefix '&'
  (DeclRefExpr 0xa62b1f4 <col:58> '_Container' lvalue ParmVar 0xa62ad10 '__x' '_Container &'))
) (CompoundStmt 0xa62b270 </usr/include/c++/4.6/bits/stl_iterator.h:408:63, col:65>)


        back_insert_iterator<_Container> &operator=(typename _Container::const_reference __value) (CompoundStmt 0xa62b370 </usr/include/c++/4.6/bits/stl_iterator.h:424:7, line:427:7>
  (CallExpr 0xa62b318 <line:425:2, col:30> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa62b2c8 <col:2, col:13> '<dependent type>' lvalue
      (MemberExpr 0xa62b2a8 <col:2> '_Container *' lvalue ->container 0xa62ac30
        (CXXThisExpr 0xa62b298 <col:2> 'back_insert_iterator<_Container> *' this)))
    (DeclRefExpr 0xa62b2fc <col:23> 'typename _Container::const_reference' lvalue ParmVar 0xa62aec0 '__value' 'typename _Container::const_reference'))
  (ReturnStmt 0xa62b360 <line:426:2, col:10>
    (UnaryOperator 0xa62b348 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62b338 <col:10> 'back_insert_iterator<_Container> *' this))))


        back_insert_iterator<_Container> &operator*() (CompoundStmt 0xa62b3c0 </usr/include/c++/4.6/bits/stl_iterator.h:447:7, col:23>
  (ReturnStmt 0xa62b3b0 <col:9, col:17>
    (UnaryOperator 0xa62b398 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62b388 <col:17> 'back_insert_iterator<_Container> *' this))))


        back_insert_iterator<_Container> &operator++() (CompoundStmt 0xa62b410 </usr/include/c++/4.6/bits/stl_iterator.h:452:7, col:23>
  (ReturnStmt 0xa62b400 <col:9, col:17>
    (UnaryOperator 0xa62b3e8 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62b3d8 <col:17> 'back_insert_iterator<_Container> *' this))))


        back_insert_iterator<_Container> operator++(int) (CompoundStmt 0xa62b460 </usr/include/c++/4.6/bits/stl_iterator.h:457:7, col:23>
  (ReturnStmt 0xa62b450 <col:9, col:17>
    (UnaryOperator 0xa62b438 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62b428 <col:17> 'back_insert_iterator<_Container> *' this))))


    };
    template <typename _Container> inline back_insert_iterator<_Container> back_inserter(_Container &__x) (CompoundStmt 0xa62b7c8 </usr/include/c++/4.6/bits/stl_iterator.h:474:5, col:53>
  (ReturnStmt 0xa62b7b8 <col:7, col:50>
    (CXXUnresolvedConstructExpr 0xa62b798 <col:14, col:50> 'back_insert_iterator<_Container>'
      (DeclRefExpr 0xa62b780 <col:47> '_Container' lvalue ParmVar 0xa62b590 '__x' '_Container &'))))

;
    template <typename _Container> class front_insert_iterator : public iterator<std::output_iterator_tag, void, void, void, void> {
        class front_insert_iterator;
    protected:
    protected:
        _Container *container;
    public:
    public:
        typedef _Container container_type;
        front_insert_iterator<_Container>(_Container &__x) : container((UnaryOperator 0xa62ccc0 </usr/include/c++/4.6/bits/stl_iterator.h:498:67, col:68> '<dependent type>' prefix '&'
  (DeclRefExpr 0xa62cca4 <col:68> '_Container' lvalue ParmVar 0xa62c800 '__x' '_Container &'))
) (CompoundStmt 0xa62cd20 </usr/include/c++/4.6/bits/stl_iterator.h:498:73, col:75>)


        front_insert_iterator<_Container> &operator=(typename _Container::const_reference __value) (CompoundStmt 0xa62ce20 </usr/include/c++/4.6/bits/stl_iterator.h:514:7, line:517:7>
  (CallExpr 0xa62cdc8 <line:515:2, col:31> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa62cd78 <col:2, col:13> '<dependent type>' lvalue
      (MemberExpr 0xa62cd58 <col:2> '_Container *' lvalue ->container 0xa62c720
        (CXXThisExpr 0xa62cd48 <col:2> 'front_insert_iterator<_Container> *' this)))
    (DeclRefExpr 0xa62cdac <col:24> 'typename _Container::const_reference' lvalue ParmVar 0xa62c970 '__value' 'typename _Container::const_reference'))
  (ReturnStmt 0xa62ce10 <line:516:2, col:10>
    (UnaryOperator 0xa62cdf8 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62cde8 <col:10> 'front_insert_iterator<_Container> *' this))))


        front_insert_iterator<_Container> &operator*() (CompoundStmt 0xa62ce70 </usr/include/c++/4.6/bits/stl_iterator.h:537:7, col:23>
  (ReturnStmt 0xa62ce60 <col:9, col:17>
    (UnaryOperator 0xa62ce48 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ce38 <col:17> 'front_insert_iterator<_Container> *' this))))


        front_insert_iterator<_Container> &operator++() (CompoundStmt 0xa62cec0 </usr/include/c++/4.6/bits/stl_iterator.h:542:7, col:23>
  (ReturnStmt 0xa62ceb0 <col:9, col:17>
    (UnaryOperator 0xa62ce98 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ce88 <col:17> 'front_insert_iterator<_Container> *' this))))


        front_insert_iterator<_Container> operator++(int) (CompoundStmt 0xa62cf10 </usr/include/c++/4.6/bits/stl_iterator.h:547:7, col:23>
  (ReturnStmt 0xa62cf00 <col:9, col:17>
    (UnaryOperator 0xa62cee8 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ced8 <col:17> 'front_insert_iterator<_Container> *' this))))


    };
    template <typename _Container> inline front_insert_iterator<_Container> front_inserter(_Container &__x) (CompoundStmt 0xa62d278 </usr/include/c++/4.6/bits/stl_iterator.h:564:5, col:54>
  (ReturnStmt 0xa62d268 <col:7, col:51>
    (CXXUnresolvedConstructExpr 0xa62d248 <col:14, col:51> 'front_insert_iterator<_Container>'
      (DeclRefExpr 0xa62d230 <col:48> '_Container' lvalue ParmVar 0xa62d040 '__x' '_Container &'))))

;
    template <typename _Container> class insert_iterator : public iterator<std::output_iterator_tag, void, void, void, void> {
        class insert_iterator;
    protected:
    protected:
        _Container *container;
        typename _Container::iterator iter;
    public:
    public:
        typedef _Container container_type;
        insert_iterator<_Container>(_Container &__x, typename _Container::iterator __i) : container((UnaryOperator 0xa62e9b0 </usr/include/c++/4.6/bits/stl_iterator.h:597:19, col:20> '<dependent type>' prefix '&'
  (DeclRefExpr 0xa62e994 <col:20> '_Container' lvalue ParmVar 0xa62e460 '__x' '_Container &'))
), iter((DeclRefExpr 0xa62ea08 </usr/include/c++/4.6/bits/stl_iterator.h:597:31> 'typename _Container::iterator' lvalue ParmVar 0xa62e4e0 '__i' 'typename _Container::iterator')
) (CompoundStmt 0xa62ea60 </usr/include/c++/4.6/bits/stl_iterator.h:597:36, col:37>)


        insert_iterator<_Container> &operator=(typename _Container::const_reference __value) (CompoundStmt 0xa62ec28 </usr/include/c++/4.6/bits/stl_iterator.h:625:7, line:629:7>
  (BinaryOperator 0xa62eb90 <line:626:2, col:40> '<dependent type>' '='
    (MemberExpr 0xa62ea98 <col:2> 'typename _Container::iterator' lvalue ->iter 0xa62e380
      (CXXThisExpr 0xa62ea88 <col:2> 'insert_iterator<_Container> *' this))
    (CallExpr 0xa62eb68 <col:9, col:40> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa62eae8 <col:9, col:20> '<dependent type>' lvalue
        (MemberExpr 0xa62eac8 <col:9> '_Container *' lvalue ->container 0xa62d6a0
          (CXXThisExpr 0xa62eab8 <col:9> 'insert_iterator<_Container> *' this)))
      (MemberExpr 0xa62eb30 <col:27> 'typename _Container::iterator' lvalue ->iter 0xa62e380
        (CXXThisExpr 0xa62eb20 <col:27> 'insert_iterator<_Container> *' this))
      (DeclRefExpr 0xa62eb50 <col:33> 'typename _Container::const_reference' lvalue ParmVar 0xa62e660 '__value' 'typename _Container::const_reference')))
  (UnaryOperator 0xa62ebd8 <line:627:2, col:4> '<dependent type>' prefix '++'
    (MemberExpr 0xa62ebb8 <col:4> 'typename _Container::iterator' lvalue ->iter 0xa62e380
      (CXXThisExpr 0xa62eba8 <col:4> 'insert_iterator<_Container> *' this)))
  (ReturnStmt 0xa62ec18 <line:628:2, col:10>
    (UnaryOperator 0xa62ec00 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ebf0 <col:10> 'insert_iterator<_Container> *' this))))


        insert_iterator<_Container> &operator*() (CompoundStmt 0xa62ec80 </usr/include/c++/4.6/bits/stl_iterator.h:651:7, col:23>
  (ReturnStmt 0xa62ec70 <col:9, col:17>
    (UnaryOperator 0xa62ec58 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ec48 <col:17> 'insert_iterator<_Container> *' this))))


        insert_iterator<_Container> &operator++() (CompoundStmt 0xa62ecd0 </usr/include/c++/4.6/bits/stl_iterator.h:656:7, col:23>
  (ReturnStmt 0xa62ecc0 <col:9, col:17>
    (UnaryOperator 0xa62eca8 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ec98 <col:17> 'insert_iterator<_Container> *' this))))


        insert_iterator<_Container> &operator++(int) (CompoundStmt 0xa62ed20 </usr/include/c++/4.6/bits/stl_iterator.h:661:7, col:23>
  (ReturnStmt 0xa62ed10 <col:9, col:17>
    (UnaryOperator 0xa62ecf8 <col:16, col:17> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa62ece8 <col:17> 'insert_iterator<_Container> *' this))))


    };
    template <typename _Container, typename _Iterator> inline insert_iterator<_Container> inserter(_Container &__x, _Iterator __i) (CompoundStmt 0xa62f1d0 </usr/include/c++/4.6/bits/stl_iterator.h:678:5, line:681:5>
  (ReturnStmt 0xa62f1c0 <line:679:7, line:680:41>
    (CXXUnresolvedConstructExpr 0xa62f1a0 <line:679:14, line:680:41> 'insert_iterator<_Container>'
      (DeclRefExpr 0xa62f0f0 <line:679:42> '_Container' lvalue ParmVar 0xa62eeb0 '__x' '_Container &')
      (CXXUnresolvedConstructExpr 0xa62f180 <line:680:7, col:40> 'typename _Container::iterator'
        (DeclRefExpr 0xa62f164 <col:37> '_Iterator' lvalue ParmVar 0xa62eef0 '__i' '_Iterator')))))

;
}
namespace __gnu_cxx {
    using std::iterator_traits;
    ;
    using std::iterator;
    ;
    template <typename _Iterator = wchar_t *, typename _Container = std::basic_string<wchar_t>> class __normal_iterator
template <typename _Iterator = const wchar_t *, typename _Container = std::basic_string<wchar_t>> class __normal_iterator
template <typename _Iterator = std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> class __normal_iterator {
        class __normal_iterator;
    protected:
    protected:
        std::basic_string<char> *_M_current;
        typedef iterator_traits<std::basic_string<char> *> __traits_type;
    public:
    public:
        typedef std::basic_string<char> *iterator_type;
        typedef typename __traits_type::iterator_category iterator_category;
        typedef typename __traits_type::value_type value_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::reference reference;
        typedef typename __traits_type::pointer pointer;
        __normal_iterator();
        __normal_iterator(std::basic_string<char> *const &__i) : _M_current((ImplicitCastExpr 0xa9ca8a8 </usr/include/c++/4.6/bits/stl_iterator.h:720:60> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
  (DeclRefExpr 0xa9ca7bc <col:60> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ParmVar 0xa9a8160 '__i' 'class std::basic_string<char> *const &'))
) (CompoundStmt 0xa6319d0 </usr/include/c++/4.6/bits/stl_iterator.h:720:65, col:67>)


        template <typename _Iter = std::basic_string<char> *> __normal_iterator(const __normal_iterator<std::basic_string<char> *, typename __enable_if<(std::__are_same<basic_string<char> *, typename vector<basic_string<char>, allocator<basic_string<char> > >::pointer>::__value), vector<basic_string<char>, allocator<basic_string<char> > > >::__type> &__i)template <typename _Iter> __normal_iterator(const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename vector<basic_string<char>, allocator<basic_string<char> > >::pointer>::__value), vector<basic_string<char>, allocator<basic_string<char> > > >::__type> &__i);
        reference operator*() const (CompoundStmt 0xa9b3980 </usr/include/c++/4.6/bits/stl_iterator.h:733:7, col:29>
  (ReturnStmt 0xa9b3970 <col:9, col:17>
    (UnaryOperator 0xa9b3958 <col:16, col:17> 'class std::basic_string<char>' lvalue prefix '*'
      (ImplicitCastExpr 0xa9b3948 <col:17> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9b3928 <col:17> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ->_M_current 0xa9a7440
          (CXXThisExpr 0xa9b3848 <col:17> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))))


        pointer operator->() const;
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator++();
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator++(int);
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator--();
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator--(int);
        reference operator[](const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator+=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator+(const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator-=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator-(const difference_type &__n) const (CompoundStmt 0xa9d77a0 </usr/include/c++/4.6/bits/stl_iterator.h:781:7, col:53>
  (ReturnStmt 0xa9d7790 <col:9, col:50>
    (CXXConstructExpr 0xa9d7768 <col:16, col:50> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9d7758 <col:16, col:50> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9d7748 <col:16, col:50> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9d76d0 <col:16, col:50> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' functional cast to class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > <ConstructorConversion>
            (CXXConstructExpr 0xa9d76a8 <col:16, col:47> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (class std::basic_string<char> *const &)'
              (MaterializeTemporaryExpr 0xa9d7698 <col:34, col:47> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
                (BinaryOperator 0xa9d7680 <col:34, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' '-'
                  (ImplicitCastExpr 0xa9d7660 <col:34> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                    (MemberExpr 0xa9d7628 <col:34> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ->_M_current 0xa9a7440
                      (CXXThisExpr 0xa9d7550 <col:34> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this)))
                  (ImplicitCastExpr 0xa9d7670 <col:47> 'difference_type':'int' <LValueToRValue>
                    (DeclRefExpr 0xa9d7648 <col:47> 'const difference_type':'const int' lvalue ParmVar 0xa9aa0f0 '__n' 'const difference_type &')))))))))))


        std::basic_string<char> *const &base() const (CompoundStmt 0xa9afe98 </usr/include/c++/4.6/bits/stl_iterator.h:785:7, col:28>
  (ReturnStmt 0xa9afe88 <col:9, col:16>
    (MemberExpr 0xa9afe64 <col:16> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ->_M_current 0xa9a7440
      (CXXThisExpr 0xa9afd70 <col:16> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))


        inline __normal_iterator(const __gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &) throw() : _M_current((ImplicitCastExpr 0xa9aad30 </usr/include/c++/4.6/bits/stl_iterator.h:702:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
  (MemberExpr 0xa9aad04 <col:11> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue ._M_current 0xa9a7440
    (DeclRefExpr 0xa9aacec <col:11> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9aa380 '' 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))
) (CompoundStmt 0xa9aad60 </usr/include/c++/4.6/bits/stl_iterator.h:702:11>)


    }
template <typename _Iterator = const char *, typename _Container = std::basic_string<char>> class __normal_iterator
template <typename _Iterator = const std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> class __normal_iterator {
        class __normal_iterator;
    protected:
    protected:
        const std::basic_string<char> *_M_current;
        typedef iterator_traits<const std::basic_string<char> *> __traits_type;
    public:
    public:
        typedef const std::basic_string<char> *iterator_type;
        typedef typename __traits_type::iterator_category iterator_category;
        typedef typename __traits_type::value_type value_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::reference reference;
        typedef typename __traits_type::pointer pointer;
        __normal_iterator();
        __normal_iterator(const std::basic_string<char> *const &__i) : _M_current((ImplicitCastExpr 0xa9d66b8 </usr/include/c++/4.6/bits/stl_iterator.h:720:60> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
  (DeclRefExpr 0xa9d65cc <col:60> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ParmVar 0xa9d2bd0 '__i' 'const class std::basic_string<char> *const &'))
) (CompoundStmt 0xa6319d0 </usr/include/c++/4.6/bits/stl_iterator.h:720:65, col:67>)


        template <typename _Iter> __normal_iterator(const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename vector<basic_string<char>, allocator<basic_string<char> > >::pointer>::__value), vector<basic_string<char>, allocator<basic_string<char> > > >::__type> &__i);
        reference operator*() const (CompoundStmt 0xa9edfb0 </usr/include/c++/4.6/bits/stl_iterator.h:733:7, col:29>
  (ReturnStmt 0xa9edfa0 <col:9, col:17>
    (UnaryOperator 0xa9edf88 <col:16, col:17> 'const class std::basic_string<char>' lvalue prefix '*'
      (ImplicitCastExpr 0xa9edf78 <col:17> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9edf58 <col:17> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ->_M_current 0xa9d1db0
          (CXXThisExpr 0xa9ede80 <col:17> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))))


        pointer operator->() const;
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator++() (CompoundStmt 0xa9ede68 </usr/include/c++/4.6/bits/stl_iterator.h:741:7, line:744:7>
  (UnaryOperator 0xa9ede18 <line:742:2, col:4> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' lvalue prefix '++'
    (MemberExpr 0xa9eddf8 <col:4> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' lvalue ->_M_current 0xa9d1db0
      (CXXThisExpr 0xa9edd18 <col:4> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this)))
  (ReturnStmt 0xa9ede58 <line:743:2, col:10>
    (UnaryOperator 0xa9ede40 <col:9, col:10> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue prefix '*'
      (CXXThisExpr 0xa9ede30 <col:10> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))


        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator++(int);
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator--();
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator--(int);
        reference operator[](const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator+=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator+(const difference_type &__n) const;
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &operator-=(const difference_type &__n);
        __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > operator-(const difference_type &__n) const;
        const std::basic_string<char> *const &base() const (CompoundStmt 0xa9d6ef8 </usr/include/c++/4.6/bits/stl_iterator.h:785:7, col:28>
  (ReturnStmt 0xa9d6ee8 <col:9, col:16>
    (MemberExpr 0xa9d6ec4 <col:16> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ->_M_current 0xa9d1db0
      (CXXThisExpr 0xa9d6dd0 <col:16> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' this))))


        inline __normal_iterator(const __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &) throw() : _M_current((ImplicitCastExpr 0xa9d6540 </usr/include/c++/4.6/bits/stl_iterator.h:702:11> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
  (MemberExpr 0xa9d6514 <col:11> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue ._M_current 0xa9d1db0
    (DeclRefExpr 0xa9d64fc <col:11> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9d5720 '' 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))
) (CompoundStmt 0xa9d6570 </usr/include/c++/4.6/bits/stl_iterator.h:702:11>)


    }
template <typename _Iterator = char *, typename _Container = std::basic_string<char>> class __normal_iterator
template <typename _Iterator, typename _Container> class __normal_iterator {
        class __normal_iterator;
    protected:
    protected:
        _Iterator _M_current;
        typedef iterator_traits<_Iterator> __traits_type;
    public:
    public:
        typedef _Iterator iterator_type;
        typedef typename __traits_type::iterator_category iterator_category;
        typedef typename __traits_type::value_type value_type;
        typedef typename __traits_type::difference_type difference_type;
        typedef typename __traits_type::reference reference;
        typedef typename __traits_type::pointer pointer;
        __normal_iterator<_Iterator, _Container>() : _M_current((CXXUnresolvedConstructExpr 0xa631908 </usr/include/c++/4.6/bits/stl_iterator.h:717:59, col:69> '_Iterator')
) (CompoundStmt 0xa631960 </usr/include/c++/4.6/bits/stl_iterator.h:717:72, col:74>)


        __normal_iterator<_Iterator, _Container>(const _Iterator &__i) : _M_current((DeclRefExpr 0xa631970 </usr/include/c++/4.6/bits/stl_iterator.h:720:60> 'const _Iterator' lvalue ParmVar 0xa6304f0 '__i' 'const _Iterator &')
) (CompoundStmt 0xa6319d0 </usr/include/c++/4.6/bits/stl_iterator.h:720:65, col:67>)


        template <typename _Iter> __normal_iterator<_Iterator, _Container>(const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename _Container::pointer>::__value), _Container>::__type> &__i) : _M_current((CallExpr 0xa631a30 </usr/include/c++/4.6/bits/stl_iterator.h:728:22, col:31> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa6319f8 <col:22, col:26> '<dependent type>' lvalue
    (DeclRefExpr 0xa6319e0 <col:22> 'const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename _Container::pointer>::__value), _Container>::__type>' lvalue ParmVar 0xa630c10 '__i' 'const __normal_iterator<_Iter, typename __enable_if<(std::__are_same<_Iter, typename _Container::pointer>::__value), _Container>::__type> &')))
) (CompoundStmt 0xa631a90 </usr/include/c++/4.6/bits/stl_iterator.h:728:34, col:36>)

;
        reference operator*() const (CompoundStmt 0xa631b30 </usr/include/c++/4.6/bits/stl_iterator.h:733:7, col:29>
  (ReturnStmt 0xa631b20 <col:9, col:17>
    (UnaryOperator 0xa631b08 <col:16, col:17> '<dependent type>' prefix '*'
      (MemberExpr 0xa631ae4 <col:17> 'const _Iterator' lvalue ->_M_current 0xa62ffa0
        (CXXThisExpr 0xa631ab8 <col:17> 'const __normal_iterator<_Iterator, _Container> *' this)))))


        pointer operator->() const (CompoundStmt 0xa631b88 </usr/include/c++/4.6/bits/stl_iterator.h:737:7, col:28>
  (ReturnStmt 0xa631b78 <col:9, col:16>
    (MemberExpr 0xa631b58 <col:16> 'const _Iterator' lvalue ->_M_current 0xa62ffa0
      (CXXThisExpr 0xa631b48 <col:16> 'const __normal_iterator<_Iterator, _Container> *' this))))


        __normal_iterator<_Iterator, _Container> &operator++() (CompoundStmt 0xa631c20 </usr/include/c++/4.6/bits/stl_iterator.h:741:7, line:744:7>
  (UnaryOperator 0xa631bd0 <line:742:2, col:4> '<dependent type>' prefix '++'
    (MemberExpr 0xa631bb0 <col:4> '_Iterator' lvalue ->_M_current 0xa62ffa0
      (CXXThisExpr 0xa631ba0 <col:4> '__normal_iterator<_Iterator, _Container> *' this)))
  (ReturnStmt 0xa631c10 <line:743:2, col:10>
    (UnaryOperator 0xa631bf8 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa631be8 <col:10> '__normal_iterator<_Iterator, _Container> *' this))))


        __normal_iterator<_Iterator, _Container> operator++(int) (CompoundStmt 0xa631cd0 </usr/include/c++/4.6/bits/stl_iterator.h:748:7, col:49>
  (ReturnStmt 0xa631cc0 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa631ca0 <col:16, col:46> '__normal_iterator<_Iterator, _Container>'
      (UnaryOperator 0xa631c88 <col:34, col:44> '<dependent type>' postfix '++'
        (MemberExpr 0xa631c50 <col:34> '_Iterator' lvalue ->_M_current 0xa62ffa0
          (CXXThisExpr 0xa631c40 <col:34> '__normal_iterator<_Iterator, _Container> *' this))))))


        __normal_iterator<_Iterator, _Container> &operator--() (CompoundStmt 0xa631d68 </usr/include/c++/4.6/bits/stl_iterator.h:753:7, line:756:7>
  (UnaryOperator 0xa631d18 <line:754:2, col:4> '<dependent type>' prefix '--'
    (MemberExpr 0xa631cf8 <col:4> '_Iterator' lvalue ->_M_current 0xa62ffa0
      (CXXThisExpr 0xa631ce8 <col:4> '__normal_iterator<_Iterator, _Container> *' this)))
  (ReturnStmt 0xa631d58 <line:755:2, col:10>
    (UnaryOperator 0xa631d40 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa631d30 <col:10> '__normal_iterator<_Iterator, _Container> *' this))))


        __normal_iterator<_Iterator, _Container> operator--(int) (CompoundStmt 0xa6334d8 </usr/include/c++/4.6/bits/stl_iterator.h:760:7, col:49>
  (ReturnStmt 0xa6334c8 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa631de8 <col:16, col:46> '__normal_iterator<_Iterator, _Container>'
      (UnaryOperator 0xa631dd0 <col:34, col:44> '<dependent type>' postfix '--'
        (MemberExpr 0xa631d98 <col:34> '_Iterator' lvalue ->_M_current 0xa62ffa0
          (CXXThisExpr 0xa631d88 <col:34> '__normal_iterator<_Iterator, _Container> *' this))))))


        reference operator[](const difference_type &__n) const (CompoundStmt 0xa633560 </usr/include/c++/4.6/bits/stl_iterator.h:765:7, col:33>
  (ReturnStmt 0xa633550 <col:9, col:30>
    (ArraySubscriptExpr 0xa633538 <col:16, col:30> '<dependent type>' lvalue
      (MemberExpr 0xa633500 <col:16> 'const _Iterator' lvalue ->_M_current 0xa62ffa0
        (CXXThisExpr 0xa6334f0 <col:16> 'const __normal_iterator<_Iterator, _Container> *' this))
      (DeclRefExpr 0xa633520 <col:27> 'const difference_type':'const typename __traits_type::difference_type' lvalue ParmVar 0xa631350 '__n' 'const difference_type &'))))


        __normal_iterator<_Iterator, _Container> &operator+=(const difference_type &__n) (CompoundStmt 0xa633618 </usr/include/c++/4.6/bits/stl_iterator.h:769:7, col:42>
  (CompoundAssignOperator 0xa6335c0 <col:9, col:23> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (MemberExpr 0xa633588 <col:9> '_Iterator' lvalue ->_M_current 0xa62ffa0
      (CXXThisExpr 0xa633578 <col:9> '__normal_iterator<_Iterator, _Container> *' this))
    (DeclRefExpr 0xa6335a8 <col:23> 'const difference_type':'const typename __traits_type::difference_type' lvalue ParmVar 0xa631470 '__n' 'const difference_type &'))
  (ReturnStmt 0xa633608 <col:28, col:36>
    (UnaryOperator 0xa6335f0 <col:35, col:36> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa6335e0 <col:36> '__normal_iterator<_Iterator, _Container> *' this))))


        __normal_iterator<_Iterator, _Container> operator+(const difference_type &__n) const (CompoundStmt 0xa6336c8 </usr/include/c++/4.6/bits/stl_iterator.h:773:7, col:53>
  (ReturnStmt 0xa6336b8 <col:9, col:50>
    (CXXUnresolvedConstructExpr 0xa633698 <col:16, col:50> '__normal_iterator<_Iterator, _Container>'
      (BinaryOperator 0xa633680 <col:34, col:47> '<dependent type>' '+'
        (MemberExpr 0xa633648 <col:34> 'const _Iterator' lvalue ->_M_current 0xa62ffa0
          (CXXThisExpr 0xa633638 <col:34> 'const __normal_iterator<_Iterator, _Container> *' this))
        (DeclRefExpr 0xa633668 <col:47> 'const difference_type':'const typename __traits_type::difference_type' lvalue ParmVar 0xa631590 '__n' 'const difference_type &')))))


        __normal_iterator<_Iterator, _Container> &operator-=(const difference_type &__n) (CompoundStmt 0xa633780 </usr/include/c++/4.6/bits/stl_iterator.h:777:7, col:42>
  (CompoundAssignOperator 0xa633728 <col:9, col:23> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (MemberExpr 0xa6336f0 <col:9> '_Iterator' lvalue ->_M_current 0xa62ffa0
      (CXXThisExpr 0xa6336e0 <col:9> '__normal_iterator<_Iterator, _Container> *' this))
    (DeclRefExpr 0xa633710 <col:23> 'const difference_type':'const typename __traits_type::difference_type' lvalue ParmVar 0xa6316b0 '__n' 'const difference_type &'))
  (ReturnStmt 0xa633770 <col:28, col:36>
    (UnaryOperator 0xa633758 <col:35, col:36> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa633748 <col:36> '__normal_iterator<_Iterator, _Container> *' this))))


        __normal_iterator<_Iterator, _Container> operator-(const difference_type &__n) const (CompoundStmt 0xa633830 </usr/include/c++/4.6/bits/stl_iterator.h:781:7, col:53>
  (ReturnStmt 0xa633820 <col:9, col:50>
    (CXXUnresolvedConstructExpr 0xa633800 <col:16, col:50> '__normal_iterator<_Iterator, _Container>'
      (BinaryOperator 0xa6337e8 <col:34, col:47> '<dependent type>' '-'
        (MemberExpr 0xa6337b0 <col:34> 'const _Iterator' lvalue ->_M_current 0xa62ffa0
          (CXXThisExpr 0xa6337a0 <col:34> 'const __normal_iterator<_Iterator, _Container> *' this))
        (DeclRefExpr 0xa6337d0 <col:47> 'const difference_type':'const typename __traits_type::difference_type' lvalue ParmVar 0xa631790 '__n' 'const difference_type &')))))


        const _Iterator &base() const (CompoundStmt 0xa633888 </usr/include/c++/4.6/bits/stl_iterator.h:785:7, col:28>
  (ReturnStmt 0xa633878 <col:9, col:16>
    (MemberExpr 0xa633858 <col:16> 'const _Iterator' lvalue ->_M_current 0xa62ffa0
      (CXXThisExpr 0xa633848 <col:16> 'const __normal_iterator<_Iterator, _Container> *' this))))


    };
    template <typename _IteratorL = const std::basic_string<char> *, typename _IteratorR = const std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> inline bool operator==(const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__lhs, const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__rhs)template <typename _IteratorL, typename _IteratorR, typename _Container> inline bool operator==(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa633fa0 </usr/include/c++/4.6/bits/stl_iterator.h:801:5, col:44>
  (ReturnStmt 0xa633f90 <col:7, col:41>
    (CXXOperatorCallExpr 0xa633f68 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa633f30 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa633e20)
      (CallExpr 0xa633ea0 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa633e68 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa633e50 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa633b40 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa633f10 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa633ed8 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa633ebc <col:30> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa633d20 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator = const std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> inline bool operator==(const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__lhs, const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__rhs) (CompoundStmt 0xa9d6db8 </usr/include/c++/4.6/bits/stl_iterator.h:807:5, col:44>
  (ReturnStmt 0xa9d6da8 <col:7, col:41>
    (BinaryOperator 0xa9d6d90 <col:14, col:41> '_Bool' '=='
      (ImplicitCastExpr 0xa9d6d70 <col:14, col:25> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
        (CXXMemberCallExpr 0xa9d6ce0 <col:14, col:25> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue
          (MemberExpr 0xa9d6cc0 <col:14, col:20> '<bound member function type>' .base 0xa9d4a70
            (DeclRefExpr 0xa9d6ca8 <col:14> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9d5040 '__lhs' 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &'))))
      (ImplicitCastExpr 0xa9d6d80 <col:30, col:41> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
        (CXXMemberCallExpr 0xa9d6d50 <col:30, col:41> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue
          (MemberExpr 0xa9d6d2c <col:30, col:36> '<bound member function type>' .base 0xa9d4a70
            (DeclRefExpr 0xa9d6d14 <col:30> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9d5130 '__rhs' 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))))))

template <typename _Iterator, typename _Container> inline bool operator==(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa6324c0 </usr/include/c++/4.6/bits/stl_iterator.h:807:5, col:44>
  (ReturnStmt 0xa6324b0 <col:7, col:41>
    (CXXOperatorCallExpr 0xa632488 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa632450 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa634430 0xa633e20)
      (CallExpr 0xa6323c0 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa634478 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa634460 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa6341c0 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa632430 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6323f8 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa6323dc <col:30> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa634330 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _IteratorL = const std::basic_string<char> *, typename _IteratorR = const std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> inline bool operator!=(const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__lhs, const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__rhs)template <typename _IteratorL, typename _IteratorR, typename _Container> inline bool operator!=(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa632ae0 </usr/include/c++/4.6/bits/stl_iterator.h:813:5, col:44>
  (ReturnStmt 0xa632ad0 <col:7, col:41>
    (CXXOperatorCallExpr 0xa632aa8 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa632a70 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa632960)
      (CallExpr 0xa6329e0 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6329a8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa632990 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa632710 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa632a50 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa632a18 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa6329fc <col:30> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa632880 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator = const std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> inline bool operator!=(const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__lhs, const __normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__rhs) (CompoundStmt 0xa9edd00 </usr/include/c++/4.6/bits/stl_iterator.h:819:5, col:44>
  (ReturnStmt 0xa9edcf0 <col:7, col:41>
    (BinaryOperator 0xa9edcd8 <col:14, col:41> '_Bool' '!='
      (ImplicitCastExpr 0xa9edcb8 <col:14, col:25> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
        (CXXMemberCallExpr 0xa9edc40 <col:14, col:25> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue
          (MemberExpr 0xa9edc20 <col:14, col:20> '<bound member function type>' .base 0xa9d4a70
            (DeclRefExpr 0xa9edc08 <col:14> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ed310 '__lhs' 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &'))))
      (ImplicitCastExpr 0xa9edcc8 <col:30, col:41> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <LValueToRValue>
        (CXXMemberCallExpr 0xa9edc98 <col:30, col:41> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue
          (MemberExpr 0xa9edc74 <col:30, col:36> '<bound member function type>' .base 0xa9d4a70
            (DeclRefExpr 0xa9edc5c <col:30> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ed400 '__rhs' 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))))))

template <typename _Iterator, typename _Container> inline bool operator!=(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa6330b0 </usr/include/c++/4.6/bits/stl_iterator.h:819:5, col:44>
  (ReturnStmt 0xa6330a0 <col:7, col:41>
    (CXXOperatorCallExpr 0xa633078 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa633040 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa632f30 0xa632960)
      (CallExpr 0xa632fb0 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa632f78 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa632f60 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa632ce0 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa633020 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa632fe8 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa632fcc <col:30> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa632e50 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _IteratorL, typename _IteratorR, typename _Container> inline bool operator<(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa635640 </usr/include/c++/4.6/bits/stl_iterator.h:826:5, col:43>
  (ReturnStmt 0xa635630 <col:7, col:40>
    (CXXOperatorCallExpr 0xa635608 <col:14, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa6355d0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6354c0)
      (CallExpr 0xa635540 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa635508 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa6354f0 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa633300 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa6355b0 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa635578 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa63555c <col:29> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa6353e0 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator, typename _Container> inline bool operator<(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa635c10 </usr/include/c++/4.6/bits/stl_iterator.h:832:5, col:43>
  (ReturnStmt 0xa635c00 <col:7, col:40>
    (CXXOperatorCallExpr 0xa635bd8 <col:14, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa635ba0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa635a90 0xa6354c0)
      (CallExpr 0xa635b10 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa635ad8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa635ac0 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa635840 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa635b80 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa635b48 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa635b2c <col:29> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa6359b0 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _IteratorL, typename _IteratorR, typename _Container> inline bool operator>(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa636230 </usr/include/c++/4.6/bits/stl_iterator.h:838:5, col:43>
  (ReturnStmt 0xa636220 <col:7, col:40>
    (CXXOperatorCallExpr 0xa6361f8 <col:14, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa6361c0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6360b0)
      (CallExpr 0xa636130 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6360f8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa6360e0 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa635e60 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa6361a0 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa636168 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa63614c <col:29> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa635fd0 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator, typename _Container> inline bool operator>(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa5e8360 </usr/include/c++/4.6/bits/stl_iterator.h:844:5, col:43>
  (ReturnStmt 0xa5e8350 <col:7, col:40>
    (CXXOperatorCallExpr 0xa5e8328 <col:14, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa5e82f0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa5e81e0 0xa6360b0)
      (CallExpr 0xa5e8260 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa5e8228 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa5e8210 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa5e7f90 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa5e82d0 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa5e8298 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa5e827c <col:29> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa5e8100 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _IteratorL, typename _IteratorR, typename _Container> inline bool operator<=(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa5e8980 </usr/include/c++/4.6/bits/stl_iterator.h:850:5, col:44>
  (ReturnStmt 0xa5e8970 <col:7, col:41>
    (CXXOperatorCallExpr 0xa5e8948 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa5e8910 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa5e8800)
      (CallExpr 0xa5e8880 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa5e8848 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa5e8830 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa5e85b0 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa5e88f0 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa5e88b8 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa5e889c <col:30> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa5e8720 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator, typename _Container> inline bool operator<=(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa63a828 </usr/include/c++/4.6/bits/stl_iterator.h:856:5, col:44>
  (ReturnStmt 0xa63a818 <col:7, col:41>
    (CXXOperatorCallExpr 0xa63a7f0 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa63a7b8 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa5e8dd0 0xa5e8800)
      (CallExpr 0xa63a728 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa5e8e18 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa5e8e00 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa5e8b80 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa63a798 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63a760 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa63a744 <col:30> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa5e8cf0 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _IteratorL, typename _IteratorR, typename _Container> inline bool operator>=(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa63ae40 </usr/include/c++/4.6/bits/stl_iterator.h:862:5, col:44>
  (ReturnStmt 0xa63ae30 <col:7, col:41>
    (CXXOperatorCallExpr 0xa63ae08 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa63add0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63acc0)
      (CallExpr 0xa63ad40 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63ad08 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa63acf0 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa63aa70 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa63adb0 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63ad78 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa63ad5c <col:30> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa63abe0 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator, typename _Container> inline bool operator>=(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa63b410 </usr/include/c++/4.6/bits/stl_iterator.h:868:5, col:44>
  (ReturnStmt 0xa63b400 <col:7, col:41>
    (CXXOperatorCallExpr 0xa63b3d8 <col:14, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa63b3a0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63b290 0xa63acc0)
      (CallExpr 0xa63b310 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63b2d8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa63b2c0 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa63b040 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa63b380 <col:30, col:41> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63b348 <col:30, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa63b32c <col:30> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa63b1b0 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _IteratorL = std::basic_string<char> *, typename _IteratorR = std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> inline typename __normal_iterator<basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::difference_type operator-(const __normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__lhs, const __normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__rhs)template <typename _IteratorL, typename _IteratorR, typename _Container> inline typename __normal_iterator<_IteratorL, _Container>::difference_type operator-(const __normal_iterator<_IteratorL, _Container> &__lhs, const __normal_iterator<_IteratorR, _Container> &__rhs) (CompoundStmt 0xa63bc00 </usr/include/c++/4.6/bits/stl_iterator.h:886:5, col:43>
  (ReturnStmt 0xa63bbf0 <col:7, col:40>
    (CXXOperatorCallExpr 0xa63bbc8 <col:14, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa63bb90 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63ba80)
      (CallExpr 0xa63bb00 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63bac8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa63bab0 <col:14> 'const __normal_iterator<_IteratorL, _Container>' lvalue ParmVar 0xa63b800 '__lhs' 'const __normal_iterator<_IteratorL, _Container> &')))
      (CallExpr 0xa63bb70 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63bb38 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa63bb1c <col:29> 'const __normal_iterator<_IteratorR, _Container>' lvalue ParmVar 0xa63b970 '__rhs' 'const __normal_iterator<_IteratorR, _Container> &'))))))

;
    template <typename _Iterator = std::basic_string<char> *, typename _Container = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >> inline typename __normal_iterator<basic_string<char> *, vector<basic_string<char>, allocator<basic_string<char> > > >::difference_type operator-(const __normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__lhs, const __normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__rhs) (CompoundStmt 0xa9caa10 </usr/include/c++/4.6/bits/stl_iterator.h:892:5, col:43>
  (ReturnStmt 0xa9caa00 <col:7, col:40>
    (BinaryOperator 0xa9ca9e8 <col:14, col:40> 'int' '-'
      (ImplicitCastExpr 0xa9ca9c8 <col:14, col:25> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (CXXMemberCallExpr 0xa9ca950 <col:14, col:25> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
          (MemberExpr 0xa9ca930 <col:14, col:20> '<bound member function type>' .base 0xa9aa200
            (DeclRefExpr 0xa9ca918 <col:14> 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ac980 '__lhs' 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &'))))
      (ImplicitCastExpr 0xa9ca9d8 <col:29, col:40> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (CXXMemberCallExpr 0xa9ca9a8 <col:29, col:40> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
          (MemberExpr 0xa9ca984 <col:29, col:35> '<bound member function type>' .base 0xa9aa200
            (DeclRefExpr 0xa9ca96c <col:29> 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9aca70 '__rhs' 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))))))

template <typename _Iterator, typename _Container> inline typename __normal_iterator<_Iterator, _Container>::difference_type operator-(const __normal_iterator<_Iterator, _Container> &__lhs, const __normal_iterator<_Iterator, _Container> &__rhs) (CompoundStmt 0xa63c350 </usr/include/c++/4.6/bits/stl_iterator.h:892:5, col:43>
  (ReturnStmt 0xa63c340 <col:7, col:40>
    (CXXOperatorCallExpr 0xa63c318 <col:14, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa63c2e0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63c1d0 0xa63ba80)
      (CallExpr 0xa63c250 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63c218 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa63c200 <col:14> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa63bf50 '__lhs' 'const __normal_iterator<_Iterator, _Container> &')))
      (CallExpr 0xa63c2c0 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa63c288 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa63c26c <col:29> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa63c0c0 '__rhs' 'const __normal_iterator<_Iterator, _Container> &'))))))

;
    template <typename _Iterator, typename _Container> inline __normal_iterator<_Iterator, _Container> operator+(typename __normal_iterator<_Iterator, _Container>::difference_type __n, const __normal_iterator<_Iterator, _Container> &__i) (CompoundStmt 0xa63cd40 </usr/include/c++/4.6/bits/stl_iterator.h:898:5, col:74>
  (ReturnStmt 0xa63cd30 <col:7, col:71>
    (CXXUnresolvedConstructExpr 0xa63cd10 <col:14, col:71> '__normal_iterator<_Iterator, _Container>'
      (CXXOperatorCallExpr 0xa63cce8 <col:55, col:68> '<dependent type>'
        (UnresolvedLookupExpr 0xa63ccb0 <col:66, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63caf0)
        (CallExpr 0xa63cc78 <col:55, col:64> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa63cc40 <col:55, col:59> '<dependent type>' lvalue
            (DeclRefExpr 0xa63cc28 <col:55> 'const __normal_iterator<_Iterator, _Container>' lvalue ParmVar 0xa63c9c0 '__i' 'const __normal_iterator<_Iterator, _Container> &')))
        (DeclRefExpr 0xa63cc94 <col:68> 'typename __normal_iterator<_Iterator, _Container>::difference_type' lvalue ParmVar 0xa63c640 '__n' 'typename __normal_iterator<_Iterator, _Container>::difference_type')))))

;
}
namespace std {
    namespace __debug {
    }
}
namespace __gnu_debug {
    using namespace std::__debug;
}
namespace std {
    template <bool _BoolType = true> struct __iter_swap {
        struct __iter_swap;
        template <typename _ForwardIterator1, typename _ForwardIterator2> static void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) (CompoundStmt 0xa6409d0 </usr/include/c++/4.6/bits/stl_algobase.h:101:9, line:103:9>
  (CallExpr 0xa6409a8 <line:102:11, col:26> '<dependent type>'
    (UnresolvedLookupExpr 0xa640910 <col:11> '<overloaded function type>' lvalue (ADL) = '1' 0xa606d80 0xa60ba70)
    (UnaryOperator 0xa640960 <col:16, col:17> '<dependent type>' prefix '*'
      (DeclRefExpr 0xa640948 <col:17> '_ForwardIterator1' lvalue ParmVar 0xa640790 '__a' '_ForwardIterator1'))
    (UnaryOperator 0xa640990 <col:22, col:23> '<dependent type>' prefix '*'
      (DeclRefExpr 0xa640974 <col:23> '_ForwardIterator2' lvalue ParmVar 0xa6407d0 '__b' '_ForwardIterator2'))))

;
    }
template <bool _BoolType> struct __iter_swap {
        struct __iter_swap;
        template <typename _ForwardIterator1, typename _ForwardIterator2> static void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) (CompoundStmt 0xa63d748 </usr/include/c++/4.6/bits/stl_algobase.h:86:9, line:92:2>
  (DeclStmt 0xa63d580 <line:87:11, line:88:24>
    0xa63d550 "typedef typename iterator_traits<_ForwardIterator1>::value_type _ValueType1")
  (DeclStmt 0xa63d630 <line:89:11, col:50>
    0xa63d5b0 "_ValueType1 __tmp =
      (ParenExpr 0xa63d618 </usr/include/c++/4.6/bits/move.h:105:30, col:36> '<dependent type>'
        (UnaryOperator 0xa63d600 </usr/include/c++/4.6/bits/stl_algobase.h:89:45, col:46> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa63d5e4 <col:46> '_ForwardIterator1' lvalue ParmVar 0xa63d280 '__a' '_ForwardIterator1')))")
  (BinaryOperator 0xa63d6b8 <line:90:11, /usr/include/c++/4.6/bits/move.h:105:36> '<dependent type>' '='
    (UnaryOperator 0xa63d658 </usr/include/c++/4.6/bits/stl_algobase.h:90:11, col:12> '<dependent type>' prefix '*'
      (DeclRefExpr 0xa63d640 <col:12> '_ForwardIterator1' lvalue ParmVar 0xa63d280 '__a' '_ForwardIterator1'))
    (ParenExpr 0xa63d6a0 </usr/include/c++/4.6/bits/move.h:105:30, col:36> '<dependent type>'
      (UnaryOperator 0xa63d688 </usr/include/c++/4.6/bits/stl_algobase.h:90:32, col:33> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa63d66c <col:33> '_ForwardIterator2' lvalue ParmVar 0xa63d2c0 '__b' '_ForwardIterator2'))))
  (BinaryOperator 0xa63d730 <line:91:11, /usr/include/c++/4.6/bits/move.h:105:36> '<dependent type>' '='
    (UnaryOperator 0xa63d6e8 </usr/include/c++/4.6/bits/stl_algobase.h:91:11, col:12> '<dependent type>' prefix '*'
      (DeclRefExpr 0xa63d6d0 <col:12> '_ForwardIterator2' lvalue ParmVar 0xa63d2c0 '__b' '_ForwardIterator2'))
    (ParenExpr 0xa63d718 </usr/include/c++/4.6/bits/move.h:105:30, col:36> '_ValueType1':'typename iterator_traits<_ForwardIterator1>::value_type' lvalue
      (DeclRefExpr 0xa63d6fc </usr/include/c++/4.6/bits/stl_algobase.h:91:32> '_ValueType1':'typename iterator_traits<_ForwardIterator1>::value_type' lvalue Var 0xa63d5b0 '__tmp' '_ValueType1':'typename iterator_traits<_ForwardIterator1>::value_type'))))

;
    };
    struct __iter_swap {
        struct __iter_swap;
        template <typename _ForwardIterator1, typename _ForwardIterator2> static void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) (CompoundStmt 0xa6409d0 </usr/include/c++/4.6/bits/stl_algobase.h:101:9, line:103:9>
  (CallExpr 0xa6409a8 <line:102:11, col:26> '<dependent type>'
    (UnresolvedLookupExpr 0xa640910 <col:11> '<overloaded function type>' lvalue (ADL) = '1' 0xa606d80 0xa60ba70)
    (UnaryOperator 0xa640960 <col:16, col:17> '<dependent type>' prefix '*'
      (DeclRefExpr 0xa640948 <col:17> '_ForwardIterator1' lvalue ParmVar 0xa640790 '__a' '_ForwardIterator1'))
    (UnaryOperator 0xa640990 <col:22, col:23> '<dependent type>' prefix '*'
      (DeclRefExpr 0xa640974 <col:23> '_ForwardIterator2' lvalue ParmVar 0xa6407d0 '__b' '_ForwardIterator2'))))

;
    };
    template <typename _ForwardIterator1, typename _ForwardIterator2> inline void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) (CompoundStmt 0xa642ed8 </usr/include/c++/4.6/bits/stl_algobase.h:119:5, line:143:5>
  (DeclStmt 0xa640d20 <line:120:7, line:121:13>
    0xa640cf0 "typedef typename iterator_traits<_ForwardIterator1>::value_type _ValueType1")
  (DeclStmt 0xa640eb0 <line:122:7, line:123:13>
    0xa640e80 "typedef typename iterator_traits<_ForwardIterator2>::value_type _ValueType2")
  (DeclStmt 0xa640fe0 <line:135:7, line:136:17>
    0xa640fb0 "typedef typename iterator_traits<_ForwardIterator1>::reference _ReferenceType1")
  (DeclStmt 0xa641130 <line:137:7, line:138:17>
    0xa641100 "typedef typename iterator_traits<_ForwardIterator2>::reference _ReferenceType2")
  (CallExpr 0xa642eb0 <line:139:7, line:142:20> '<dependent type>'
    (DependentScopeDeclRefExpr 0xa642e58 <line:139:7, line:142:2> '<dependent type>' lvalue)
    (DeclRefExpr 0xa642e7c <col:12> '_ForwardIterator1' lvalue ParmVar 0xa640ab0 '__a' '_ForwardIterator1')
    (DeclRefExpr 0xa642e94 <col:17> '_ForwardIterator2' lvalue ParmVar 0xa640af0 '__b' '_ForwardIterator2')))

;
    template <typename _ForwardIterator1, typename _ForwardIterator2> _ForwardIterator2 swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2) (CompoundStmt 0xa6433c0 </usr/include/c++/4.6/bits/stl_algobase.h:161:5, line:172:5>
  (NullStmt 0xa643198 <line:167:56>)
  (ForStmt 0xa643370 <line:169:7, line:170:35>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa643218 <line:169:14, col:26> '<dependent type>'
      (UnresolvedLookupExpr 0xa6431d8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa6431a4 <col:14> '_ForwardIterator1' lvalue ParmVar 0xa642fc0 '__first1' '_ForwardIterator1')
      (DeclRefExpr 0xa6431bc <col:26> '_ForwardIterator1' lvalue ParmVar 0xa643000 '__last1' '_ForwardIterator1'))
    (BinaryOperator 0xa6432a0 <col:35, col:49> '<dependent type>' ','
      (UnaryOperator 0xa643258 <col:35, col:37> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa64323c <col:37> '_ForwardIterator1' lvalue ParmVar 0xa642fc0 '__first1' '_ForwardIterator1'))
      (UnaryOperator 0xa643288 <col:47, col:49> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa64326c <col:49> '_ForwardIterator2' lvalue ParmVar 0xa643040 '__first2' '_ForwardIterator2')))
    (CallExpr 0xa643348 <line:170:2, col:35> '<dependent type>'
      (UnresolvedLookupExpr 0xa6432e0 <col:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa640bd0)
      (DeclRefExpr 0xa643314 <col:17> '_ForwardIterator1' lvalue ParmVar 0xa642fc0 '__first1' '_ForwardIterator1')
      (DeclRefExpr 0xa64332c <col:27> '_ForwardIterator2' lvalue ParmVar 0xa643040 '__first2' '_ForwardIterator2')))
  (ReturnStmt 0xa6433b0 <line:171:7, col:14>
    (DeclRefExpr 0xa643394 <col:14> '_ForwardIterator2' lvalue ParmVar 0xa643040 '__first2' '_ForwardIterator2')))

;
    template <typename _Tp = unsigned int> inline const unsigned int &min(const unsigned int &__a, const unsigned int &__b) (CompoundStmt 0xa9e85f0 </usr/include/c++/4.6/bits/stl_algobase.h:188:5, line:195:5>
  (IfStmt 0xa9e85a8 <line:192:7, line:193:9>
    <<<NULL>>>
    (BinaryOperator 0xa9e8568 <line:192:11, col:17> '_Bool' '<'
      (ImplicitCastExpr 0xa9e8548 <col:11> 'unsigned int':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9e8514 <col:11> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa65fd20 '__b' 'const unsigned int &'))
      (ImplicitCastExpr 0xa9e8558 <col:17> 'unsigned int':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9e852c <col:17> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa65fcd0 '__a' 'const unsigned int &')))
    (ReturnStmt 0xa9e8598 <line:193:2, col:9>
      (DeclRefExpr 0xa9e8580 <col:9> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa65fd20 '__b' 'const unsigned int &'))
    <<<NULL>>>)
  (ReturnStmt 0xa9e85e0 <line:194:7, col:14>
    (DeclRefExpr 0xa9e85c4 <col:14> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa65fcd0 '__a' 'const unsigned int &')))

template <typename _Tp> inline const _Tp &min(const _Tp &__a, const _Tp &__b) (CompoundStmt 0xa6436f8 </usr/include/c++/4.6/bits/stl_algobase.h:188:5, line:195:5>
  (IfStmt 0xa6436b0 <line:192:7, line:193:9>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa643660 <line:192:11, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa643620 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
      (DeclRefExpr 0xa6435f0 <col:11> 'const _Tp' lvalue ParmVar 0xa6434c0 '__b' 'const _Tp &')
      (DeclRefExpr 0xa643608 <col:17> 'const _Tp' lvalue ParmVar 0xa643470 '__a' 'const _Tp &'))
    (ReturnStmt 0xa6436a0 <line:193:2, col:9>
      (DeclRefExpr 0xa643684 <col:9> 'const _Tp' lvalue ParmVar 0xa6434c0 '__b' 'const _Tp &'))
    <<<NULL>>>)
  (ReturnStmt 0xa6436e8 <line:194:7, col:14>
    (DeclRefExpr 0xa6436cc <col:14> 'const _Tp' lvalue ParmVar 0xa643470 '__a' 'const _Tp &')))

;
    template <typename _Tp = unsigned int> inline const unsigned int &max(const unsigned int &__a, const unsigned int &__b) (CompoundStmt 0xa9ca548 </usr/include/c++/4.6/bits/stl_algobase.h:211:5, line:218:5>
  (IfStmt 0xa9ca500 <line:215:7, line:216:9>
    <<<NULL>>>
    (BinaryOperator 0xa9ca4c0 <line:215:11, col:17> '_Bool' '<'
      (ImplicitCastExpr 0xa9ca4a0 <col:11> 'unsigned int':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9ca46c <col:11> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa9b40c0 '__a' 'const unsigned int &'))
      (ImplicitCastExpr 0xa9ca4b0 <col:17> 'unsigned int':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9ca484 <col:17> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa9b4110 '__b' 'const unsigned int &')))
    (ReturnStmt 0xa9ca4f0 <line:216:2, col:9>
      (DeclRefExpr 0xa9ca4d8 <col:9> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa9b4110 '__b' 'const unsigned int &'))
    <<<NULL>>>)
  (ReturnStmt 0xa9ca538 <line:217:7, col:14>
    (DeclRefExpr 0xa9ca51c <col:14> 'const unsigned int':'const unsigned int' lvalue ParmVar 0xa9b40c0 '__a' 'const unsigned int &')))

template <typename _Tp> inline const _Tp &max(const _Tp &__a, const _Tp &__b) (CompoundStmt 0xa643a08 </usr/include/c++/4.6/bits/stl_algobase.h:211:5, line:218:5>
  (IfStmt 0xa6439c0 <line:215:7, line:216:9>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa643970 <line:215:11, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa643930 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
      (DeclRefExpr 0xa643900 <col:11> 'const _Tp' lvalue ParmVar 0xa6437a0 '__a' 'const _Tp &')
      (DeclRefExpr 0xa643918 <col:17> 'const _Tp' lvalue ParmVar 0xa6437f0 '__b' 'const _Tp &'))
    (ReturnStmt 0xa6439b0 <line:216:2, col:9>
      (DeclRefExpr 0xa643994 <col:9> 'const _Tp' lvalue ParmVar 0xa6437f0 '__b' 'const _Tp &'))
    <<<NULL>>>)
  (ReturnStmt 0xa6439f8 <line:217:7, col:14>
    (DeclRefExpr 0xa6439dc <col:14> 'const _Tp' lvalue ParmVar 0xa6437a0 '__a' 'const _Tp &')))

;
    template <typename _Tp, typename _Compare> inline const _Tp &min(const _Tp &__a, const _Tp &__b, _Compare __comp) (CompoundStmt 0xa644448 </usr/include/c++/4.6/bits/stl_algobase.h:234:5, line:239:5>
  (IfStmt 0xa644400 <line:236:7, line:237:9>
    <<<NULL>>>
    (CallExpr 0xa6443b0 <line:236:11, col:26> '<dependent type>'
      (DeclRefExpr 0xa644364 <col:11> '_Compare' lvalue ParmVar 0xa643b90 '__comp' '_Compare')
      (DeclRefExpr 0xa64437c <col:18> 'const _Tp' lvalue ParmVar 0xa643b50 '__b' 'const _Tp &')
      (DeclRefExpr 0xa644394 <col:23> 'const _Tp' lvalue ParmVar 0xa643b00 '__a' 'const _Tp &'))
    (ReturnStmt 0xa6443f0 <line:237:2, col:9>
      (DeclRefExpr 0xa6443d4 <col:9> 'const _Tp' lvalue ParmVar 0xa643b50 '__b' 'const _Tp &'))
    <<<NULL>>>)
  (ReturnStmt 0xa644438 <line:238:7, col:14>
    (DeclRefExpr 0xa64441c <col:14> 'const _Tp' lvalue ParmVar 0xa643b00 '__a' 'const _Tp &')))

;
    template <typename _Tp, typename _Compare> inline const _Tp &max(const _Tp &__a, const _Tp &__b, _Compare __comp) (CompoundStmt 0xa6447d8 </usr/include/c++/4.6/bits/stl_algobase.h:255:5, line:260:5>
  (IfStmt 0xa644790 <line:257:7, line:258:9>
    <<<NULL>>>
    (CallExpr 0xa644740 <line:257:11, col:26> '<dependent type>'
      (DeclRefExpr 0xa6446f4 <col:11> '_Compare' lvalue ParmVar 0xa6445d0 '__comp' '_Compare')
      (DeclRefExpr 0xa64470c <col:18> 'const _Tp' lvalue ParmVar 0xa644540 '__a' 'const _Tp &')
      (DeclRefExpr 0xa644724 <col:23> 'const _Tp' lvalue ParmVar 0xa644590 '__b' 'const _Tp &'))
    (ReturnStmt 0xa644780 <line:258:2, col:9>
      (DeclRefExpr 0xa644764 <col:9> 'const _Tp' lvalue ParmVar 0xa644590 '__b' 'const _Tp &'))
    <<<NULL>>>)
  (ReturnStmt 0xa6447c8 <line:259:7, col:14>
    (DeclRefExpr 0xa6447ac <col:14> 'const _Tp' lvalue ParmVar 0xa644540 '__a' 'const _Tp &')))

;
    template <typename _Iterator = unsigned long *> struct _Niter_base :  _Iter_base<unsigned long *, __is_normal_iterator<unsigned long *>::__value> {
        struct _Niter_base;
    }
template <typename _Iterator = std::basic_string<char> *> struct _Niter_base :  _Iter_base<std::basic_string<char> *, __is_normal_iterator<basic_string<char> *>::__value> {
        struct _Niter_base;
    }
template <typename _Iterator> struct _Niter_base :  _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value> {
        struct _Niter_base;
    };
    template <typename _Iterator = unsigned long *> inline typename _Niter_base<unsigned long *>::iterator_type __niter_base(unsigned long *__it) (CompoundStmt 0xa9a6648 </usr/include/c++/4.6/bits/stl_algobase.h:272:5, col:58>
  (ReturnStmt 0xa9a6638 <col:7, col:55>
    (CallExpr 0xa9a6608 <col:14, col:55> 'iterator_type':'unsigned long *'
      (ImplicitCastExpr 0xa9a65f8 <col:14, col:43> 'iterator_type (*)(unsigned long *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9a659c <col:14, col:43> 'iterator_type (unsigned long *)' lvalue CXXMethod 0xa9a4200 '_S_base' 'iterator_type (unsigned long *)'))
      (ImplicitCastExpr 0xa9a6628 <col:51> 'unsigned long *':'unsigned long *' <LValueToRValue>
        (DeclRefExpr 0xa9a65bc <col:51> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa9a4310 '__it' 'unsigned long *':'unsigned long *')))))

template <typename _Iterator = std::basic_string<char> *> inline typename _Niter_base<basic_string<char> *>::iterator_type __niter_base(std::basic_string<char> *__it) (CompoundStmt 0xa9b2358 </usr/include/c++/4.6/bits/stl_algobase.h:272:5, col:58>
  (ReturnStmt 0xa9b2348 <col:7, col:55>
    (CallExpr 0xa9b2318 <col:14, col:55> 'iterator_type':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9b2308 <col:14, col:43> 'iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9b22cc <col:14, col:43> 'iterator_type (class std::basic_string<char> *)' lvalue CXXMethod 0xa9b0930 '_S_base' 'iterator_type (class std::basic_string<char> *)'))
      (ImplicitCastExpr 0xa9b2338 <col:51> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9b22ec <col:51> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b1a50 '__it' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <typename _Iterator> inline typename _Niter_base<_Iterator>::iterator_type __niter_base(_Iterator __it) (CompoundStmt 0xa645060 </usr/include/c++/4.6/bits/stl_algobase.h:272:5, col:58>
  (ReturnStmt 0xa645050 <col:7, col:55>
    (CallExpr 0xa645030 <col:14, col:55> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa644ff0 <col:14, col:43> '<dependent type>' lvalue)
      (DeclRefExpr 0xa645014 <col:51> '_Iterator' lvalue ParmVar 0xa644df0 '__it' '_Iterator'))))

;
    template <typename _Iterator = std::basic_string<char> *> struct _Miter_base :  _Iter_base<std::basic_string<char> *, __is_move_iterator<basic_string<char> *>::__value> {
        struct _Miter_base;
    }
template <typename _Iterator> struct _Miter_base :  _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value> {
        struct _Miter_base;
    };
    template <typename _Iterator = std::basic_string<char> *> inline typename _Miter_base<basic_string<char> *>::iterator_type __miter_base(std::basic_string<char> *__it) (CompoundStmt 0xa9b12d8 </usr/include/c++/4.6/bits/stl_algobase.h:283:5, col:58>
  (ReturnStmt 0xa9b12c8 <col:7, col:55>
    (CallExpr 0xa9b1298 <col:14, col:55> 'iterator_type':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9b1288 <col:14, col:43> 'iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9b122c <col:14, col:43> 'iterator_type (class std::basic_string<char> *)' lvalue CXXMethod 0xa9b0930 '_S_base' 'iterator_type (class std::basic_string<char> *)'))
      (ImplicitCastExpr 0xa9b12b8 <col:51> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9b124c <col:51> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b0a40 '__it' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <typename _Iterator> inline typename _Miter_base<_Iterator>::iterator_type __miter_base(_Iterator __it) (CompoundStmt 0xa645f20 </usr/include/c++/4.6/bits/stl_algobase.h:283:5, col:58>
  (ReturnStmt 0xa645f10 <col:7, col:55>
    (CallExpr 0xa645ef0 <col:14, col:55> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa645eb0 <col:14, col:43> '<dependent type>' lvalue)
      (DeclRefExpr 0xa645ed4 <col:51> '_Iterator' lvalue ParmVar 0xa645cb0 '__it' '_Iterator'))))

;
    template <bool = false, bool = false, typename  = std::random_access_iterator_tag> struct __copy_move {
        struct __copy_move;
        template <typename _II, typename _OI> static _OI __copy_m(_II __first, _II __last, _OI __result) (CompoundStmt 0xa647f88 </usr/include/c++/4.6/bits/stl_algobase.h:325:9, line:334:2>
  (DeclStmt 0xa647b50 <line:326:4, col:68>
    0xa647b20 "typedef typename iterator_traits<_II>::difference_type _Distance")
  (ForStmt 0xa647f38 <line:327:4, line:332:6>
    (DeclStmt 0xa647c48 <line:327:8, col:40>
      0xa647b80 "_Distance __n =
        (CXXOperatorCallExpr 0xa647c20 <col:24, col:33> '<dependent type>'
          (UnresolvedLookupExpr 0xa647be8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
          (DeclRefExpr 0xa647bb4 <col:24> '_II' lvalue ParmVar 0xa6478b0 '__last' '_II')
          (DeclRefExpr 0xa647bcc <col:33> '_II' lvalue ParmVar 0xa647870 '__first' '_II'))")
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa647cc8 <col:42, col:48> '<dependent type>'
      (UnresolvedLookupExpr 0xa647c88 <col:46, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa647c58 <col:42> '_Distance':'typename iterator_traits<_II>::difference_type' lvalue Var 0xa647b80 '__n' '_Distance':'typename iterator_traits<_II>::difference_type')
      (IntegerLiteral 0xa647c70 <col:48> 'int' 0))
    (UnaryOperator 0xa647d08 <col:51, col:53> '<dependent type>' prefix '--'
      (DeclRefExpr 0xa647cec <col:53> '_Distance':'typename iterator_traits<_II>::difference_type' lvalue Var 0xa647b80 '__n' '_Distance':'typename iterator_traits<_II>::difference_type'))
    (CompoundStmt 0xa647f18 <line:328:6, line:332:6>
      (BinaryOperator 0xa647ea0 <line:329:8, col:21> '<dependent type>' '='
        (UnaryOperator 0xa647d38 <col:8, col:9> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa647d1c <col:9> '_OI' lvalue ParmVar 0xa6478f0 '__result' '_OI'))
        (UnaryOperator 0xa647d68 <col:20, col:21> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa647d4c <col:21> '_II' lvalue ParmVar 0xa647870 '__first' '_II')))
      (UnaryOperator 0xa647ed0 <line:330:8, col:10> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa647eb8 <col:10> '_II' lvalue ParmVar 0xa647870 '__first' '_II'))
      (UnaryOperator 0xa647f00 <line:331:8, col:10> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa647ee4 <col:10> '_OI' lvalue ParmVar 0xa6478f0 '__result' '_OI'))))
  (ReturnStmt 0xa647f78 <line:333:4, col:11>
    (DeclRefExpr 0xa647f5c <col:11> '_OI' lvalue ParmVar 0xa6478f0 '__result' '_OI')))

;
        inline std::__copy_move<false, false, std::random_access_iterator_tag> &operator=(const std::__copy_move<false, false, std::random_access_iterator_tag> &) throw();
    }
template <bool, bool, typename > struct __copy_move {
        struct __copy_move;
        template <typename _II, typename _OI> static _OI __copy_m(_II __first, _II __last, _OI __result) (CompoundStmt 0xa646738 </usr/include/c++/4.6/bits/stl_algobase.h:297:9, line:301:2>
  (ForStmt 0xa6466e8 <line:298:4, line:299:19>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6465d0 <line:298:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa646590 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa646560 <col:11> '_II' lvalue ParmVar 0xa646370 '__first' '_II')
      (DeclRefExpr 0xa646578 <col:22> '_II' lvalue ParmVar 0xa6463b0 '__last' '_II'))
    (BinaryOperator 0xa646658 <col:30, col:44> '<dependent type>' ','
      (UnaryOperator 0xa646610 <col:30, col:32> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6465f4 <col:32> '_OI' lvalue ParmVar 0xa6463f0 '__result' '_OI'))
      (UnaryOperator 0xa646640 <col:42, col:44> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa646624 <col:44> '_II' lvalue ParmVar 0xa646370 '__first' '_II')))
    (BinaryOperator 0xa6466d0 <line:299:6, col:19> '<dependent type>' '='
      (UnaryOperator 0xa646688 <col:6, col:7> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa646670 <col:7> '_OI' lvalue ParmVar 0xa6463f0 '__result' '_OI'))
      (UnaryOperator 0xa6466b8 <col:18, col:19> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa64669c <col:19> '_II' lvalue ParmVar 0xa646370 '__first' '_II'))))
  (ReturnStmt 0xa646728 <line:300:4, col:11>
    (DeclRefExpr 0xa64670c <col:11> '_OI' lvalue ParmVar 0xa6463f0 '__result' '_OI')))

;
    };
    struct __copy_move {
        struct __copy_move;
        template <typename _II, typename _OI> static _OI __copy_m(_II __first, _II __last, _OI __result) (CompoundStmt 0xa647f88 </usr/include/c++/4.6/bits/stl_algobase.h:325:9, line:334:2>
  (DeclStmt 0xa647b50 <line:326:4, col:68>
    0xa647b20 "typedef typename iterator_traits<_II>::difference_type _Distance")
  (ForStmt 0xa647f38 <line:327:4, line:332:6>
    (DeclStmt 0xa647c48 <line:327:8, col:40>
      0xa647b80 "_Distance __n =
        (CXXOperatorCallExpr 0xa647c20 <col:24, col:33> '<dependent type>'
          (UnresolvedLookupExpr 0xa647be8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
          (DeclRefExpr 0xa647bb4 <col:24> '_II' lvalue ParmVar 0xa6478b0 '__last' '_II')
          (DeclRefExpr 0xa647bcc <col:33> '_II' lvalue ParmVar 0xa647870 '__first' '_II'))")
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa647cc8 <col:42, col:48> '<dependent type>'
      (UnresolvedLookupExpr 0xa647c88 <col:46, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa647c58 <col:42> '_Distance':'typename iterator_traits<_II>::difference_type' lvalue Var 0xa647b80 '__n' '_Distance':'typename iterator_traits<_II>::difference_type')
      (IntegerLiteral 0xa647c70 <col:48> 'int' 0))
    (UnaryOperator 0xa647d08 <col:51, col:53> '<dependent type>' prefix '--'
      (DeclRefExpr 0xa647cec <col:53> '_Distance':'typename iterator_traits<_II>::difference_type' lvalue Var 0xa647b80 '__n' '_Distance':'typename iterator_traits<_II>::difference_type'))
    (CompoundStmt 0xa647f18 <line:328:6, line:332:6>
      (BinaryOperator 0xa647ea0 <line:329:8, col:21> '<dependent type>' '='
        (UnaryOperator 0xa647d38 <col:8, col:9> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa647d1c <col:9> '_OI' lvalue ParmVar 0xa6478f0 '__result' '_OI'))
        (UnaryOperator 0xa647d68 <col:20, col:21> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa647d4c <col:21> '_II' lvalue ParmVar 0xa647870 '__first' '_II')))
      (UnaryOperator 0xa647ed0 <line:330:8, col:10> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa647eb8 <col:10> '_II' lvalue ParmVar 0xa647870 '__first' '_II'))
      (UnaryOperator 0xa647f00 <line:331:8, col:10> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa647ee4 <col:10> '_OI' lvalue ParmVar 0xa6478f0 '__result' '_OI'))))
  (ReturnStmt 0xa647f78 <line:333:4, col:11>
    (DeclRefExpr 0xa647f5c <col:11> '_OI' lvalue ParmVar 0xa6478f0 '__result' '_OI')))

;
        inline std::__copy_move<false, false, std::random_access_iterator_tag> &operator=(const std::__copy_move<false, false, std::random_access_iterator_tag> &) throw();
    };
    struct __copy_move {
        struct __copy_move;
        template <typename _Tp> static _Tp *__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) (CompoundStmt 0xa649228 </usr/include/c++/4.6/bits/stl_algobase.h:363:9, line:368:2>
  (DeclStmt 0xa648ed8 <line:364:4, col:43>
    0xa648e10 "const ptrdiff_t _Num =
      (CXXOperatorCallExpr 0xa648eb0 <col:27, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa648e78 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa648e44 <col:27> 'const _Tp *' lvalue ParmVar 0xa6484d0 '__last' 'const _Tp *')
        (DeclRefExpr 0xa648e5c <col:36> 'const _Tp *' lvalue ParmVar 0xa648480 '__first' 'const _Tp *'))")
  (IfStmt 0xa649168 <line:365:4, line:366:61>
    <<<NULL>>>
    (ImplicitCastExpr 0xa648f10 <line:365:8> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa648f00 <col:8> 'ptrdiff_t':'int' <LValueToRValue>
        (DeclRefExpr 0xa648ee8 <col:8> 'const ptrdiff_t':'const int' lvalue Var 0xa648e10 '_Num' 'const ptrdiff_t':'const int')))
    (CallExpr 0xa649140 <line:366:6, col:61> '<dependent type>'
      (DeclRefExpr 0xa649084 <col:6> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)')
      (DeclRefExpr 0xa64909c <col:24> '_Tp *' lvalue ParmVar 0xa648560 '__result' '_Tp *')
      (DeclRefExpr 0xa6490b4 <col:34> 'const _Tp *' lvalue ParmVar 0xa648480 '__first' 'const _Tp *')
      (BinaryOperator 0xa649128 <col:43, col:57> 'unsigned int' '*'
        (UnaryExprOrTypeTraitExpr 0xa6490d8 <col:43, col:53> 'unsigned int' sizeof '_Tp')
        (ImplicitCastExpr 0xa649118 <col:57> 'unsigned int' <IntegralCast>
          (ImplicitCastExpr 0xa649108 <col:57> 'ptrdiff_t':'int' <LValueToRValue>
            (DeclRefExpr 0xa6490f0 <col:57> 'const ptrdiff_t':'const int' lvalue Var 0xa648e10 '_Num' 'const ptrdiff_t':'const int')))))
    <<<NULL>>>)
  (ReturnStmt 0xa649218 <line:367:4, col:22>
    (CXXOperatorCallExpr 0xa6491f0 <col:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa6491b8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (DeclRefExpr 0xa649184 <col:11> '_Tp *' lvalue ParmVar 0xa648560 '__result' '_Tp *')
      (DeclRefExpr 0xa64919c <col:22> 'const ptrdiff_t':'const int' lvalue Var 0xa648e10 '_Num' 'const ptrdiff_t':'const int'))))

;
    };
    template <bool _IsMove, typename _II, typename _OI> inline _OI __copy_move_a(_II __first, _II __last, _OI __result) (CompoundStmt 0xa64a308 </usr/include/c++/4.6/bits/stl_algobase.h:374:5, line:385:5>
  (DeclStmt 0xa649640 <line:375:7, col:68>
    0xa649610 "typedef typename iterator_traits<_II>::value_type _ValueTypeI")
  (DeclStmt 0xa6497d0 <line:376:7, col:68>
    0xa6497a0 "typedef typename iterator_traits<_OI>::value_type _ValueTypeO")
  (DeclStmt 0xa649920 <line:377:7, col:73>
    0xa6498f0 "typedef typename iterator_traits<_II>::iterator_category _Category")
  (DeclStmt 0xa64a060 <line:378:7, line:381:58>
    0xa649940 "const bool __simple =
      (ParenExpr 0xa64a048 <line:378:29, line:381:57> '<dependent type>'
        (BinaryOperator 0xa649d80 <line:378:30, line:381:50> '<dependent type>' '&&'
          (BinaryOperator 0xa649bd8 <line:378:30, line:380:45> '<dependent type>' '&&'
            (BinaryOperator 0xa649ab8 <line:378:30, line:379:45> '<dependent type>' '&&'
              (UnaryTypeTraitExpr 0xa649998 <line:378:30, col:54> '_Bool')
              (DependentScopeDeclRefExpr 0xa649a90 <line:379:26, col:45> '<dependent type>' lvalue))
            (DependentScopeDeclRefExpr 0xa649bb0 <line:380:26, col:45> '<dependent type>' lvalue))
          (DependentScopeDeclRefExpr 0xa649d58 <line:381:12, col:50> '<dependent type>' lvalue)))")
  (ReturnStmt 0xa64a2f8 <line:383:7, line:384:70>
    (CallExpr 0xa64a2d0 <line:383:14, line:384:70> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa64a260 <line:383:14, line:384:36> '<dependent type>' lvalue)
      (DeclRefExpr 0xa64a284 <col:45> '_II' lvalue ParmVar 0xa649350 '__first' '_II')
      (DeclRefExpr 0xa64a29c <col:54> '_II' lvalue ParmVar 0xa649390 '__last' '_II')
      (DeclRefExpr 0xa64a2b4 <col:62> '_OI' lvalue ParmVar 0xa6493d0 '__result' '_OI'))))

;
    template <typename _CharT = wchar_t> struct char_traits {
        struct char_traits;
        typedef wchar_t char_type;
        typedef wint_t int_type;
        typedef streamoff off_type;
        typedef wstreampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723ce8 </usr/include/c++/4.6/bits/char_traits.h:315:7, col:22>
  (BinaryOperator 0xa723cd0 <col:9, col:16> 'char_type':'wchar_t' lvalue '='
    (DeclRefExpr 0xa723c90 <col:9> 'char_type':'wchar_t' lvalue ParmVar 0xa722950 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa723cc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
      (DeclRefExpr 0xa723ca8 <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7229c0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723d78 </usr/include/c++/4.6/bits/char_traits.h:319:7, col:30>
  (ReturnStmt 0xa723d68 <col:9, col:24>
    (BinaryOperator 0xa723d50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa723d30 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723cfc <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ae0 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723d40 <col:24> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d14 <col:24> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722b30 '__c2' 'const char_type &')))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723e08 </usr/include/c++/4.6/bits/char_traits.h:323:7, col:29>
  (ReturnStmt 0xa723df8 <col:9, col:23>
    (BinaryOperator 0xa723de0 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa723dc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d8c <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722c50 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723dd0 <col:23> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723da4 <col:23> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ca0 '__c2' 'const char_type &')))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa723f70 </usr/include/c++/4.6/bits/char_traits.h:327:7, col:42>
  (ReturnStmt 0xa723f60 <col:9, col:39>
    (CallExpr 0xa723f08 <col:16, col:39> 'int'
      (ImplicitCastExpr 0xa723ef8 <col:16> 'int (*)(const wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723e9c <col:16> 'int (const wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b450 'wmemcmp' 'int (const wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa7134b0 'wmemcmp')))
      (ImplicitCastExpr 0xa723f30 <col:24> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e54 <col:24> 'const char_type *' lvalue ParmVar 0xa722da0 '__s1' 'const char_type *'))
      (ImplicitCastExpr 0xa723f40 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e6c <col:30> 'const char_type *' lvalue ParmVar 0xa722df0 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa723f50 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa723e84 <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa722e30 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa724518 </usr/include/c++/4.6/bits/char_traits.h:331:7, col:29>
  (ReturnStmt 0xa724508 <col:9, col:26>
    (CallExpr 0xa7244d8 <col:16, col:26> 'size_t':'unsigned int'
      (ImplicitCastExpr 0xa7244c8 <col:16> 'size_t (*)(const wchar_t *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723fd4 <col:16> 'size_t (const wchar_t *) throw()' lvalue Function 0xa70ad90 'wcslen' 'size_t (const wchar_t *) throw()' (UsingShadow 0xa712f00 'wcslen')))
      (ImplicitCastExpr 0xa7244f8 <col:23> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723fbc <col:23> 'const char_type *' lvalue ParmVar 0xa722f40 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa724658 </usr/include/c++/4.6/bits/char_traits.h:335:7, col:40>
  (ReturnStmt 0xa724648 <col:9, col:37>
    (ImplicitCastExpr 0xa724638 <col:16, col:37> 'const char_type *' <NoOp>
      (CallExpr 0xa7245e0 <col:16, col:37> 'wchar_t *'
        (ImplicitCastExpr 0xa7245d0 <col:16> 'wchar_t *(*)(const wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7245b0 <col:16> 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b2a0 'wmemchr' 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713910 'wmemchr')))
        (ImplicitCastExpr 0xa724608 <col:24> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa724568 <col:24> 'const char_type *' lvalue ParmVar 0xa723040 '__s' 'const char_type *'))
        (ImplicitCastExpr 0xa724618 <col:29> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724580 <col:29> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7230d0 '__a' 'const char_type &'))
        (ImplicitCastExpr 0xa724628 <col:34> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724598 <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723080 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7247c0 </usr/include/c++/4.6/bits/char_traits.h:339:7, col:43>
  (ReturnStmt 0xa7247b0 <col:9, col:40>
    (CallExpr 0xa724758 <col:16, col:40> 'wchar_t *'
      (ImplicitCastExpr 0xa724748 <col:16> 'wchar_t *(*)(wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7246ec <col:16> 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b7a0 'wmemmove' 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa713590 'wmemmove')))
      (ImplicitCastExpr 0xa724780 <col:25> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246a4 <col:25> 'char_type *' lvalue ParmVar 0xa723230 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa724790 <col:31> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246bc <col:31> 'const char_type *' lvalue ParmVar 0xa723280 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7247a0 <col:37> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7246d4 <col:37> 'size_t':'unsigned int' lvalue ParmVar 0xa7232c0 '__n' 'size_t':'unsigned int')))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa724900 </usr/include/c++/4.6/bits/char_traits.h:343:7, col:42>
  (ReturnStmt 0xa7248f0 <col:9, col:39>
    (CallExpr 0xa724898 <col:16, col:39> 'wchar_t *'
      (ImplicitCastExpr 0xa724888 <col:16> 'wchar_t *(*)(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724854 <col:16> 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' lvalue Function 0xa70b600 'wmemcpy' 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' (UsingShadow 0xa713520 'wmemcpy')))
      (ImplicitCastExpr 0xa7248c0 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72480c <col:24> 'char_type *' lvalue ParmVar 0xa7233d0 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa7248d0 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa724824 <col:30> 'const char_type *' lvalue ParmVar 0xa723420 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7248e0 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72483c <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa723460 '__n' 'size_t':'unsigned int')))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa724a60 </usr/include/c++/4.6/bits/char_traits.h:347:7, col:40>
  (ReturnStmt 0xa724a50 <col:9, col:37>
    (CallExpr 0xa7249f8 <col:16, col:37> 'wchar_t *'
      (ImplicitCastExpr 0xa7249e8 <col:16> 'wchar_t *(*)(wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724994 <col:16> 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b960 'wmemset' 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713600 'wmemset')))
      (ImplicitCastExpr 0xa724a20 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72494c <col:24> 'char_type *' lvalue ParmVar 0xa723540 '__s' 'char_type *'))
      (ImplicitCastExpr 0xa724a30 <col:29> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa724964 <col:29> 'char_type':'wchar_t' lvalue ParmVar 0xa7235c0 '__a' 'char_type':'wchar_t'))
      (ImplicitCastExpr 0xa724a40 <col:34> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72497c <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723580 '__n' 'size_t':'unsigned int')))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa724ae0 </usr/include/c++/4.6/bits/char_traits.h:351:7, col:32>
  (ReturnStmt 0xa724ad0 <col:9, col:29>
    (CXXFunctionalCastExpr 0xa724ab8 <col:16, col:29> 'char_type':'wchar_t' functional cast to char_type <NoOp>
      (ImplicitCastExpr 0xa724aa8 <col:26> 'char_type':'wchar_t' <IntegralCast>
        (ImplicitCastExpr 0xa724a98 <col:26> 'int_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724a80 <col:26> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723730 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa724b60 </usr/include/c++/4.6/bits/char_traits.h:355:7, col:31>
  (ReturnStmt 0xa724b50 <col:9, col:28>
    (CXXFunctionalCastExpr 0xa724b38 <col:16, col:28> 'int_type':'unsigned int' functional cast to int_type <NoOp>
      (ImplicitCastExpr 0xa724b28 <col:25> 'int_type':'unsigned int' <IntegralCast>
        (ImplicitCastExpr 0xa724b18 <col:25> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724b00 <col:25> 'const char_type':'const wchar_t' lvalue ParmVar 0xa723850 '__c' 'const char_type &'))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa724bf0 </usr/include/c++/4.6/bits/char_traits.h:359:7, col:30>
  (ReturnStmt 0xa724be0 <col:9, col:24>
    (BinaryOperator 0xa724bc8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa724ba8 <col:16> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b74 <col:16> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723970 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa724bb8 <col:24> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b8c <col:24> 'const int_type':'const unsigned int' lvalue ParmVar 0xa7239c0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa724c68 </usr/include/c++/4.6/bits/char_traits.h:363:7, col:45>
  (ReturnStmt 0xa724c58 <col:9, col:42>
    (CXXStaticCastExpr 0xa724c40 <col:16, col:42> 'int_type':'unsigned int' static_cast<int_type> <NoOp>
      (ParenExpr 0xa724c20 </usr/include/wchar.h:119:15, col:27> 'unsigned int'
        (IntegerLiteral 0xa724c08 <col:16> 'unsigned int' 4294967295)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa724e40 </usr/include/c++/4.6/bits/char_traits.h:367:7, col:51>
  (ReturnStmt 0xa724e30 <col:9, col:46>
    (ConditionalOperator 0xa724e10 <col:16, col:46> 'unsigned int'
      (CallExpr 0xa724d88 <col:16, col:38> '_Bool'
        (ImplicitCastExpr 0xa724d78 <col:16> '_Bool (*)(const int_type &, const int_type &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa724c7c <col:16> '_Bool (const int_type &, const int_type &)' lvalue CXXMethod 0xa723a60 'eq_int_type' '_Bool (const int_type &, const int_type &)'))
        (DeclRefExpr 0xa724c94 <col:28> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')
        (MaterializeTemporaryExpr 0xa724db0 <col:33, col:37> 'const int_type':'const unsigned int' lvalue
          (CallExpr 0xa724d18 <col:33, col:37> 'int_type':'unsigned int'
            (ImplicitCastExpr 0xa724d08 <col:33> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa724cac <col:33> 'int_type (void)' lvalue CXXMethod 0xa723b00 'eof' 'int_type (void)')))))
      (ImplicitCastExpr 0xa724e00 <col:42> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa724dc0 <col:42> 'int' 0))
      (ImplicitCastExpr 0xa724df0 <col:46> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724dd8 <col:46> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')))))


    }
template <typename _CharT = char> struct char_traits {
        struct char_traits;
        typedef char char_type;
        typedef int int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fbc8 </usr/include/c++/4.6/bits/char_traits.h:244:7, col:22>
  (BinaryOperator 0xa71fbb0 <col:9, col:16> 'char_type':'char' lvalue '='
    (DeclRefExpr 0xa71fb70 <col:9> 'char_type':'char' lvalue ParmVar 0xa71e830 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa71fba0 <col:16> 'char_type':'char' <LValueToRValue>
      (DeclRefExpr 0xa71fb88 <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e8a0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fc78 </usr/include/c++/4.6/bits/char_traits.h:248:7, col:30>
  (ReturnStmt 0xa71fc68 <col:9, col:24>
    (BinaryOperator 0xa71fc50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa71fc20 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc10 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbdc <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e9c0 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fc40 <col:24> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc30 <col:24> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbf4 <col:24> 'const char_type':'const char' lvalue ParmVar 0xa71ea10 '__c2' 'const char_type &'))))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fd28 </usr/include/c++/4.6/bits/char_traits.h:252:7, col:29>
  (ReturnStmt 0xa71fd18 <col:9, col:23>
    (BinaryOperator 0xa71fd00 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa71fcd0 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fcc0 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fc8c <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71eb30 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fcf0 <col:23> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fce0 <col:23> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fca4 <col:23> 'const char_type':'const char' lvalue ParmVar 0xa71eb80 '__c2' 'const char_type &'))))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa71fe50 </usr/include/c++/4.6/bits/char_traits.h:256:7, col:51>
  (ReturnStmt 0xa71fe40 <col:9, col:48>
    (CallExpr 0xa71fdc8 <col:16, col:48> 'int'
      (ImplicitCastExpr 0xa71fdb8 <col:16> 'int (*)(const void *, const void *, unsigned int)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71fd3c <col:16> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)'))
      (ImplicitCastExpr 0xa71fe00 <col:33> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fdf0 <col:33> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd54 <col:33> 'const char_type *' lvalue ParmVar 0xa71ec80 '__s1' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe20 <col:39> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fe10 <col:39> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd6c <col:39> 'const char_type *' lvalue ParmVar 0xa71ecd0 '__s2' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe30 <col:45> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71fd84 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa71ed10 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa71ffe8 </usr/include/c++/4.6/bits/char_traits.h:260:7, col:39>
  (ReturnStmt 0xa71ffd8 <col:9, col:36>
    (CallExpr 0xa71ffa8 <col:16, col:36> 'unsigned int'
      (ImplicitCastExpr 0xa71ff98 <col:16> 'unsigned int (*)(const char *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71ff44 <col:16> 'unsigned int (const char *)' lvalue Function 0xa71fe70 '__builtin_strlen' 'unsigned int (const char *)'))
      (ImplicitCastExpr 0xa71ffc8 <col:33> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa71ff5c <col:33> 'const char_type *' lvalue ParmVar 0xa71ee20 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa7202a8 </usr/include/c++/4.6/bits/char_traits.h:264:7, col:80>
  (ReturnStmt 0xa720298 <col:9, col:77>
    (CXXStaticCastExpr 0xa720280 <col:16, col:77> 'const char_type *' static_cast<const char_type *> <BitCast>
      (CallExpr 0xa7201f8 <col:46, col:76> 'void *'
        (ImplicitCastExpr 0xa7201e8 <col:46> 'void *(*)(const void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720164 <col:46> 'void *(const void *, int, unsigned int)' lvalue Function 0xa720000 '__builtin_memchr' 'void *(const void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa720230 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720220 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72017c <col:63> 'const char_type *' lvalue ParmVar 0xa71ef20 '__s' 'const char_type *')))
        (ImplicitCastExpr 0xa720250 <col:68> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa720240 <col:68> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa720194 <col:68> 'const char_type':'const char' lvalue ParmVar 0xa71efb0 '__a' 'const char_type &')))
        (ImplicitCastExpr 0xa720260 <col:73> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7201ac <col:73> 'size_t':'unsigned int' lvalue ParmVar 0xa71ef60 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7203f8 </usr/include/c++/4.6/bits/char_traits.h:268:7, col:77>
  (ReturnStmt 0xa7203e8 <col:9, col:74>
    (CXXStaticCastExpr 0xa7203d0 <col:16, col:74> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa720348 <col:40, col:73> 'void *'
        (ImplicitCastExpr 0xa720338 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7202bc <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa720380 <col:58> 'void *' <BitCast>
          (ImplicitCastExpr 0xa720370 <col:58> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202d4 <col:58> 'char_type *' lvalue ParmVar 0xa71f110 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa7203a0 <col:64> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720390 <col:64> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202ec <col:64> 'const char_type *' lvalue ParmVar 0xa71f160 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa7203b0 <col:70> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa720304 <col:70> 'size_t':'unsigned int' lvalue ParmVar 0xa71f1a0 '__n' 'size_t':'unsigned int'))))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7220c8 </usr/include/c++/4.6/bits/char_traits.h:272:7, col:76>
  (ReturnStmt 0xa7220b8 <col:9, col:73>
    (CXXStaticCastExpr 0xa7220a0 <col:16, col:73> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722018 <col:40, col:72> 'void *'
        (ImplicitCastExpr 0xa722008 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720574 <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa720410 '__builtin_memcpy' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa722050 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722040 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72058c <col:57> 'char_type *' lvalue ParmVar 0xa71f2b0 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa722070 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa722060 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7205a4 <col:63> 'const char_type *' lvalue ParmVar 0xa71f300 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa722080 <col:69> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7205bc <col:69> 'size_t':'unsigned int' lvalue ParmVar 0xa71f340 '__n' 'size_t':'unsigned int'))))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa722218 </usr/include/c++/4.6/bits/char_traits.h:276:7, col:74>
  (ReturnStmt 0xa722208 <col:9, col:71>
    (CXXStaticCastExpr 0xa7221f0 <col:16, col:71> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722168 <col:40, col:70> 'void *'
        (ImplicitCastExpr 0xa722158 <col:40> 'void *(*)(void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7220dc <col:40> 'void *(void *, int, unsigned int)' lvalue Function 0xa655240 '__builtin_memset' 'void *(void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa7221a0 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722190 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7220f4 <col:57> 'char_type *' lvalue ParmVar 0xa71f420 '__s' 'char_type *')))
        (ImplicitCastExpr 0xa7221c0 <col:62> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa7221b0 <col:62> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa72210c <col:62> 'char_type':'char' lvalue ParmVar 0xa71f4a0 '__a' 'char_type':'char')))
        (ImplicitCastExpr 0xa7221d0 <col:67> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa722124 <col:67> 'size_t':'unsigned int' lvalue ParmVar 0xa71f460 '__n' 'size_t':'unsigned int'))))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa722298 </usr/include/c++/4.6/bits/char_traits.h:280:7, col:45>
  (ReturnStmt 0xa722288 <col:9, col:42>
    (CXXStaticCastExpr 0xa722270 <col:16, col:42> 'char_type':'char' static_cast<char_type> <NoOp>
      (ImplicitCastExpr 0xa722260 <col:39> 'char_type':'char' <IntegralCast>
        (ImplicitCastExpr 0xa722250 <col:39> 'int_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa72222c <col:39> 'const int_type':'const int' lvalue ParmVar 0xa71f610 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa722350 </usr/include/c++/4.6/bits/char_traits.h:286:7, col:72>
  (ReturnStmt 0xa722340 <col:9, col:69>
    (CXXStaticCastExpr 0xa722328 <col:16, col:69> 'int_type':'int' static_cast<int_type> <NoOp>
      (ImplicitCastExpr 0xa722318 <col:38, col:68> 'int_type':'int' <IntegralCast>
        (CXXStaticCastExpr 0xa7222f8 <col:38, col:68> 'unsigned char' static_cast<unsigned char> <NoOp>
          (ImplicitCastExpr 0xa7222e8 <col:65> 'unsigned char' <IntegralCast>
            (ImplicitCastExpr 0xa7222d8 <col:65> 'char_type':'char' <LValueToRValue>
              (DeclRefExpr 0xa7222ac <col:65> 'const char_type':'const char' lvalue ParmVar 0xa71f730 '__c' 'const char_type &'))))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa7223e0 </usr/include/c++/4.6/bits/char_traits.h:290:7, col:30>
  (ReturnStmt 0xa7223d0 <col:9, col:24>
    (BinaryOperator 0xa7223b8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa722398 <col:16> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722364 <col:16> 'const int_type':'const int' lvalue ParmVar 0xa71f850 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa7223a8 <col:24> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa72237c <col:24> 'const int_type':'const int' lvalue ParmVar 0xa71f8a0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa722458 </usr/include/c++/4.6/bits/char_traits.h:294:7, col:59>
  (ReturnStmt 0xa722448 <col:9, col:56>
    (CXXStaticCastExpr 0xa722430 <col:16, col:56> 'int_type':'int' static_cast<int_type> <NoOp>
      (UnaryOperator 0xa722410 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:1149:28, col:29> 'int' prefix '-'
        (IntegerLiteral 0xa7223f8 <col:29> 'int' 1)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa7225b8 </usr/include/c++/4.6/bits/char_traits.h:298:7, col:42>
  (ReturnStmt 0xa7225a8 <col:9, col:37>
    (ConditionalOperator 0xa722588 <col:16, col:37> 'int'
      (ParenExpr 0xa722530 <col:16, col:29> '_Bool'
        (BinaryOperator 0xa722518 <col:17, col:28> '_Bool' '=='
          (ImplicitCastExpr 0xa722508 <col:17> 'int_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa72246c <col:17> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &'))
          (CallExpr 0xa7224e8 <col:24, col:28> 'int_type':'int'
            (ImplicitCastExpr 0xa7224d8 <col:24> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa722484 <col:24> 'int_type (void)' lvalue CXXMethod 0xa71f9e0 'eof' 'int_type (void)')))))
      (IntegerLiteral 0xa722548 <col:33> 'int' 0)
      (ImplicitCastExpr 0xa722578 <col:37> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722560 <col:37> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &')))))


    }
template <typename _CharT> struct char_traits;
    template <typename _CharT, typename _Traits> class istreambuf_iterator;
    template <typename _CharT, typename _Traits> class ostreambuf_iterator;
    template <bool _IsMove, typename _CharT> typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator<_CharT, char_traits<_CharT> >);
    template <bool _IsMove, typename _CharT> typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator<_CharT, char_traits<_CharT> >);
    template <bool _IsMove, typename _CharT> typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, _CharT *>::__type __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >, istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT *);
    template <bool _IsMove, typename _II, typename _OI> inline _OI __copy_move_a2(_II __first, _II __last, _OI __result) (CompoundStmt 0xa64d048 </usr/include/c++/4.6/bits/stl_algobase.h:419:5, line:423:5>
  (ReturnStmt 0xa64d038 <line:420:7, line:422:39>
    (CXXUnresolvedConstructExpr 0xa64d018 <line:420:14, line:422:39> '_OI'
      (CallExpr 0xa64cff0 <line:420:18, line:422:38> '<dependent type>'
        (UnresolvedLookupExpr 0xa64cdf0 <line:420:18, col:44> '<dependent type>' lvalue (no ADL) = '1' 0xa6494f0)
        (CallExpr 0xa64cec0 <col:46, col:71> '<dependent type>'
          (UnresolvedLookupExpr 0xa64ce70 <col:46, col:51> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa64cea4 <col:64> '_II' lvalue ParmVar 0xa64cc00 '__first' '_II'))
        (CallExpr 0xa64cf48 <line:421:11, col:35> '<dependent type>'
          (UnresolvedLookupExpr 0xa64cef8 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa64cf2c <col:29> '_II' lvalue ParmVar 0xa64cc40 '__last' '_II'))
        (CallExpr 0xa64cfd0 <line:422:11, col:37> '<dependent type>'
          (UnresolvedLookupExpr 0xa64cf80 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa64cfb4 <col:29> '_OI' lvalue ParmVar 0xa64cc80 '__result' '_OI'))))))

;
    template <typename _II = unsigned long *, typename _OI = unsigned long *> inline unsigned long *copy(unsigned long *__first, unsigned long *__last, unsigned long *__result)template <typename _II = std::_Bit_const_iterator, typename _OI = std::_Bit_iterator> inline std::_Bit_iterator copy(std::_Bit_const_iterator __first, std::_Bit_const_iterator __last, std::_Bit_iterator __result)template <typename _II, typename _OI> inline _OI copy(_II __first, _II __last, _OI __result) (CompoundStmt 0xa64d5e8 </usr/include/c++/4.6/bits/stl_algobase.h:445:5, line:455:5>
  (NullStmt 0xa64d2c8 <line:450:54>)
  (ReturnStmt 0xa64d5d8 <line:452:7, line:454:18>
    (ParenExpr 0xa64d5c0 <line:452:14, line:454:18> '<dependent type>'
      (CallExpr 0xa64d598 <line:452:15, line:454:17> '<dependent type>'
        (UnresolvedLookupExpr 0xa64d3f8 <line:452:15, col:67> '<dependent type>' lvalue (no ADL) = '1' 0xa64b940 0xa64c190 0xa64cac0 0xa64cd70)
        (CallExpr 0xa64d4d8 <line:453:9, col:34> '<dependent type>'
          (UnresolvedLookupExpr 0xa64d488 <col:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa645dc0)
          (DeclRefExpr 0xa64d4bc <col:27> '_II' lvalue ParmVar 0xa64d120 '__first' '_II'))
        (CallExpr 0xa64d560 <col:37, col:61> '<dependent type>'
          (UnresolvedLookupExpr 0xa64d510 <col:37, col:42> '<overloaded function type>' lvalue (no ADL) = '1' 0xa645dc0)
          (DeclRefExpr 0xa64d544 <col:55> '_II' lvalue ParmVar 0xa64d160 '__last' '_II'))
        (DeclRefExpr 0xa64d580 <line:454:9> '_OI' lvalue ParmVar 0xa64d1a0 '__result' '_OI')))))

;
    template <bool = false, bool = false, typename  = std::random_access_iterator_tag> struct __copy_move_backward {
        struct __copy_move_backward;
        template <typename _BI1 = std::basic_string<char> *, typename _BI2 = std::basic_string<char> *> static std::basic_string<char> *__copy_move_b(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9b3828 </usr/include/c++/4.6/bits/stl_algobase.h:528:9, line:533:2>
  (DeclStmt 0xa9b3528 <line:529:4, col:55>
    0xa9b34f0 "typename iterator_traits<basic_string<char> *>::difference_type __n")
  (ForStmt 0xa9b37c8 <line:530:4, line:531:23>
    (BinaryOperator 0xa9b35f0 <line:530:9, col:24> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue '='
      (DeclRefExpr 0xa9b3538 <col:9> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue Var 0xa9b34f0 '__n' 'typename iterator_traits<class basic_string<char> *>::difference_type':'int')
      (BinaryOperator 0xa9b35d8 <col:15, col:24> 'int' '-'
        (ImplicitCastExpr 0xa9b35b8 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9b3588 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b31d0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
        (ImplicitCastExpr 0xa9b35c8 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9b35a0 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b3190 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
    <<<NULL>>>
    (BinaryOperator 0xa9b3670 <col:33, col:39> '_Bool' '>'
      (ImplicitCastExpr 0xa9b3660 <col:33> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa9b3644 <col:33> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue Var 0xa9b34f0 '__n' 'typename iterator_traits<class basic_string<char> *>::difference_type':'int'))
      (IntegerLiteral 0xa64fc30 <col:39> 'int' 0))
    (UnaryOperator 0xa9b36a0 <col:42, col:44> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue prefix '--'
      (DeclRefExpr 0xa9b3688 <col:44> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue Var 0xa9b34f0 '__n' 'typename iterator_traits<class basic_string<char> *>::difference_type':'int'))
    (CXXOperatorCallExpr 0xa9b37a0 <line:531:6, col:23> 'class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa9b3790 <col:18, <invalid sloc>> 'class std::basic_string<char> &(*)(const class std::basic_string<char> &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9b3778 <col:18, <invalid sloc>> 'class std::basic_string<char> &(const class std::basic_string<char> &)' lvalue CXXMethod 0xa8412f0 'operator=' 'class std::basic_string<char> &(const class std::basic_string<char> &)'))
      (UnaryOperator 0xa9b36f8 <col:6, col:9> 'class std::basic_string<char>' lvalue prefix '*'
        (ImplicitCastExpr 0xa9b36e8 <col:7, col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (UnaryOperator 0xa9b36d0 <col:7, col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '--'
            (DeclRefExpr 0xa9b36b4 <col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b3210 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
      (ImplicitCastExpr 0xa9b3768 <col:20, col:23> 'const class std::basic_string<char>' lvalue <NoOp>
        (UnaryOperator 0xa9b3750 <col:20, col:23> 'class std::basic_string<char>' lvalue prefix '*'
          (ImplicitCastExpr 0xa9b3740 <col:21, col:23> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (UnaryOperator 0xa9b3728 <col:21, col:23> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '--'
              (DeclRefExpr 0xa9b370c <col:23> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b31d0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))))
  (ReturnStmt 0xa9b3818 <line:532:4, col:11>
    (ImplicitCastExpr 0xa9b3808 <col:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9b37ec <col:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b3210 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))

template <typename _BI1, typename _BI2> static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) (CompoundStmt 0xa650d08 </usr/include/c++/4.6/bits/stl_algobase.h:528:9, line:533:2>
  (DeclStmt 0xa64fa28 <line:529:4, col:55>
    0xa64f9f0 "typename iterator_traits<_BI1>::difference_type __n")
  (ForStmt 0xa650cb8 <line:530:4, line:531:23>
    (BinaryOperator 0xa64fc00 <line:530:9, col:24> '<dependent type>' '='
      (DeclRefExpr 0xa64fa38 <col:9> 'typename iterator_traits<_BI1>::difference_type' lvalue Var 0xa64f9f0 '__n' 'typename iterator_traits<_BI1>::difference_type')
      (CXXOperatorCallExpr 0xa64fab8 <col:15, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa64fa80 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa64fa50 <col:15> '_BI1' lvalue ParmVar 0xa64f780 '__last' '_BI1')
        (DeclRefExpr 0xa64fa68 <col:24> '_BI1' lvalue ParmVar 0xa64f740 '__first' '_BI1')))
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa64fc88 <col:33, col:39> '<dependent type>'
      (UnresolvedLookupExpr 0xa64fc48 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa64fc18 <col:33> 'typename iterator_traits<_BI1>::difference_type' lvalue Var 0xa64f9f0 '__n' 'typename iterator_traits<_BI1>::difference_type')
      (IntegerLiteral 0xa64fc30 <col:39> 'int' 0))
    (UnaryOperator 0xa64fcc8 <col:42, col:44> '<dependent type>' prefix '--'
      (DeclRefExpr 0xa64fcac <col:44> 'typename iterator_traits<_BI1>::difference_type' lvalue Var 0xa64f9f0 '__n' 'typename iterator_traits<_BI1>::difference_type'))
    (BinaryOperator 0xa650ca0 <line:531:6, col:23> '<dependent type>' '='
      (UnaryOperator 0xa64fd10 <col:6, col:9> '<dependent type>' prefix '*'
        (UnaryOperator 0xa64fcf8 <col:7, col:9> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa64fcdc <col:9> '_BI2' lvalue ParmVar 0xa64f7c0 '__result' '_BI2')))
      (UnaryOperator 0xa650c88 <col:20, col:23> '<dependent type>' prefix '*'
        (UnaryOperator 0xa650c70 <col:21, col:23> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa64fd24 <col:23> '_BI1' lvalue ParmVar 0xa64f780 '__last' '_BI1')))))
  (ReturnStmt 0xa650cf8 <line:532:4, col:11>
    (DeclRefExpr 0xa650cdc <col:11> '_BI2' lvalue ParmVar 0xa64f7c0 '__result' '_BI2')))

;
        inline std::__copy_move_backward<false, false, std::random_access_iterator_tag> &operator=(const std::__copy_move_backward<false, false, std::random_access_iterator_tag> &) throw();
    }
template <bool, bool, typename > struct __copy_move_backward {
        struct __copy_move_backward;
        template <typename _BI1, typename _BI2> static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) (CompoundStmt 0xa64f3d0 </usr/include/c++/4.6/bits/stl_algobase.h:500:9, line:504:2>
  (WhileStmt 0xa64f390 <line:501:4, line:502:23>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa64f2c0 <line:501:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa64f280 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa64f250 <col:11> '_BI1' lvalue ParmVar 0xa64f090 '__first' '_BI1')
      (DeclRefExpr 0xa64f268 <col:22> '_BI1' lvalue ParmVar 0xa64f0d0 '__last' '_BI1'))
    (BinaryOperator 0xa64f378 <line:502:6, col:23> '<dependent type>' '='
      (UnaryOperator 0xa64f318 <col:6, col:9> '<dependent type>' prefix '*'
        (UnaryOperator 0xa64f300 <col:7, col:9> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa64f2e4 <col:9> '_BI2' lvalue ParmVar 0xa64f110 '__result' '_BI2')))
      (UnaryOperator 0xa64f360 <col:20, col:23> '<dependent type>' prefix '*'
        (UnaryOperator 0xa64f348 <col:21, col:23> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa64f32c <col:23> '_BI1' lvalue ParmVar 0xa64f0d0 '__last' '_BI1')))))
  (ReturnStmt 0xa64f3c0 <line:503:4, col:11>
    (DeclRefExpr 0xa64f3a4 <col:11> '_BI2' lvalue ParmVar 0xa64f110 '__result' '_BI2')))

;
    };
    struct __copy_move_backward {
        struct __copy_move_backward;
        template <typename _BI1 = std::basic_string<char> *, typename _BI2 = std::basic_string<char> *> static std::basic_string<char> *__copy_move_b(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9b3828 </usr/include/c++/4.6/bits/stl_algobase.h:528:9, line:533:2>
  (DeclStmt 0xa9b3528 <line:529:4, col:55>
    0xa9b34f0 "typename iterator_traits<basic_string<char> *>::difference_type __n")
  (ForStmt 0xa9b37c8 <line:530:4, line:531:23>
    (BinaryOperator 0xa9b35f0 <line:530:9, col:24> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue '='
      (DeclRefExpr 0xa9b3538 <col:9> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue Var 0xa9b34f0 '__n' 'typename iterator_traits<class basic_string<char> *>::difference_type':'int')
      (BinaryOperator 0xa9b35d8 <col:15, col:24> 'int' '-'
        (ImplicitCastExpr 0xa9b35b8 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9b3588 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b31d0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
        (ImplicitCastExpr 0xa9b35c8 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9b35a0 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b3190 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
    <<<NULL>>>
    (BinaryOperator 0xa9b3670 <col:33, col:39> '_Bool' '>'
      (ImplicitCastExpr 0xa9b3660 <col:33> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa9b3644 <col:33> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue Var 0xa9b34f0 '__n' 'typename iterator_traits<class basic_string<char> *>::difference_type':'int'))
      (IntegerLiteral 0xa64fc30 <col:39> 'int' 0))
    (UnaryOperator 0xa9b36a0 <col:42, col:44> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue prefix '--'
      (DeclRefExpr 0xa9b3688 <col:44> 'typename iterator_traits<class basic_string<char> *>::difference_type':'int' lvalue Var 0xa9b34f0 '__n' 'typename iterator_traits<class basic_string<char> *>::difference_type':'int'))
    (CXXOperatorCallExpr 0xa9b37a0 <line:531:6, col:23> 'class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa9b3790 <col:18, <invalid sloc>> 'class std::basic_string<char> &(*)(const class std::basic_string<char> &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9b3778 <col:18, <invalid sloc>> 'class std::basic_string<char> &(const class std::basic_string<char> &)' lvalue CXXMethod 0xa8412f0 'operator=' 'class std::basic_string<char> &(const class std::basic_string<char> &)'))
      (UnaryOperator 0xa9b36f8 <col:6, col:9> 'class std::basic_string<char>' lvalue prefix '*'
        (ImplicitCastExpr 0xa9b36e8 <col:7, col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (UnaryOperator 0xa9b36d0 <col:7, col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '--'
            (DeclRefExpr 0xa9b36b4 <col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b3210 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
      (ImplicitCastExpr 0xa9b3768 <col:20, col:23> 'const class std::basic_string<char>' lvalue <NoOp>
        (UnaryOperator 0xa9b3750 <col:20, col:23> 'class std::basic_string<char>' lvalue prefix '*'
          (ImplicitCastExpr 0xa9b3740 <col:21, col:23> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (UnaryOperator 0xa9b3728 <col:21, col:23> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '--'
              (DeclRefExpr 0xa9b370c <col:23> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b31d0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))))
  (ReturnStmt 0xa9b3818 <line:532:4, col:11>
    (ImplicitCastExpr 0xa9b3808 <col:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9b37ec <col:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b3210 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))

template <typename _BI1, typename _BI2> static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) (CompoundStmt 0xa650d08 </usr/include/c++/4.6/bits/stl_algobase.h:528:9, line:533:2>
  (DeclStmt 0xa64fa28 <line:529:4, col:55>
    0xa64f9f0 "typename iterator_traits<_BI1>::difference_type __n")
  (ForStmt 0xa650cb8 <line:530:4, line:531:23>
    (BinaryOperator 0xa64fc00 <line:530:9, col:24> '<dependent type>' '='
      (DeclRefExpr 0xa64fa38 <col:9> 'typename iterator_traits<_BI1>::difference_type' lvalue Var 0xa64f9f0 '__n' 'typename iterator_traits<_BI1>::difference_type')
      (CXXOperatorCallExpr 0xa64fab8 <col:15, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa64fa80 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa64fa50 <col:15> '_BI1' lvalue ParmVar 0xa64f780 '__last' '_BI1')
        (DeclRefExpr 0xa64fa68 <col:24> '_BI1' lvalue ParmVar 0xa64f740 '__first' '_BI1')))
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa64fc88 <col:33, col:39> '<dependent type>'
      (UnresolvedLookupExpr 0xa64fc48 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa64fc18 <col:33> 'typename iterator_traits<_BI1>::difference_type' lvalue Var 0xa64f9f0 '__n' 'typename iterator_traits<_BI1>::difference_type')
      (IntegerLiteral 0xa64fc30 <col:39> 'int' 0))
    (UnaryOperator 0xa64fcc8 <col:42, col:44> '<dependent type>' prefix '--'
      (DeclRefExpr 0xa64fcac <col:44> 'typename iterator_traits<_BI1>::difference_type' lvalue Var 0xa64f9f0 '__n' 'typename iterator_traits<_BI1>::difference_type'))
    (BinaryOperator 0xa650ca0 <line:531:6, col:23> '<dependent type>' '='
      (UnaryOperator 0xa64fd10 <col:6, col:9> '<dependent type>' prefix '*'
        (UnaryOperator 0xa64fcf8 <col:7, col:9> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa64fcdc <col:9> '_BI2' lvalue ParmVar 0xa64f7c0 '__result' '_BI2')))
      (UnaryOperator 0xa650c88 <col:20, col:23> '<dependent type>' prefix '*'
        (UnaryOperator 0xa650c70 <col:21, col:23> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa64fd24 <col:23> '_BI1' lvalue ParmVar 0xa64f780 '__last' '_BI1')))))
  (ReturnStmt 0xa650cf8 <line:532:4, col:11>
    (DeclRefExpr 0xa650cdc <col:11> '_BI2' lvalue ParmVar 0xa64f7c0 '__result' '_BI2')))

;
        inline std::__copy_move_backward<false, false, std::random_access_iterator_tag> &operator=(const std::__copy_move_backward<false, false, std::random_access_iterator_tag> &) throw();
    };
    struct __copy_move_backward {
        struct __copy_move_backward;
        template <typename _Tp> static _Tp *__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) (CompoundStmt 0xa651718 </usr/include/c++/4.6/bits/stl_algobase.h:558:9, line:563:2>
  (DeclStmt 0xa6514b8 <line:559:4, col:43>
    0xa6513f0 "const ptrdiff_t _Num =
      (CXXOperatorCallExpr 0xa651490 <col:27, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa651458 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa651424 <col:27> 'const _Tp *' lvalue ParmVar 0xa651230 '__last' 'const _Tp *')
        (DeclRefExpr 0xa65143c <col:36> 'const _Tp *' lvalue ParmVar 0xa6511e0 '__first' 'const _Tp *'))")
  (IfStmt 0xa651658 <line:560:4, line:561:68>
    <<<NULL>>>
    (ImplicitCastExpr 0xa6514f0 <line:560:8> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa6514e0 <col:8> 'ptrdiff_t':'int' <LValueToRValue>
        (DeclRefExpr 0xa6514c8 <col:8> 'const ptrdiff_t':'const int' lvalue Var 0xa6513f0 '_Num' 'const ptrdiff_t':'const int')))
    (CallExpr 0xa651630 <line:561:6, col:68> '<dependent type>'
      (DeclRefExpr 0xa6514fc <col:6> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)')
      (CXXOperatorCallExpr 0xa651580 <col:24, col:35> '<dependent type>'
        (UnresolvedLookupExpr 0xa651548 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa651514 <col:24> '_Tp *' lvalue ParmVar 0xa6512a0 '__result' '_Tp *')
        (DeclRefExpr 0xa65152c <col:35> 'const ptrdiff_t':'const int' lvalue Var 0xa6513f0 '_Num' 'const ptrdiff_t':'const int'))
      (DeclRefExpr 0xa6515a4 <col:41> 'const _Tp *' lvalue ParmVar 0xa6511e0 '__first' 'const _Tp *')
      (BinaryOperator 0xa651618 <col:50, col:64> 'unsigned int' '*'
        (UnaryExprOrTypeTraitExpr 0xa6515c8 <col:50, col:60> 'unsigned int' sizeof '_Tp')
        (ImplicitCastExpr 0xa651608 <col:64> 'unsigned int' <IntegralCast>
          (ImplicitCastExpr 0xa6515f8 <col:64> 'ptrdiff_t':'int' <LValueToRValue>
            (DeclRefExpr 0xa6515e0 <col:64> 'const ptrdiff_t':'const int' lvalue Var 0xa6513f0 '_Num' 'const ptrdiff_t':'const int')))))
    <<<NULL>>>)
  (ReturnStmt 0xa651708 <line:562:4, col:22>
    (CXXOperatorCallExpr 0xa6516e0 <col:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa6516a8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
      (DeclRefExpr 0xa651674 <col:11> '_Tp *' lvalue ParmVar 0xa6512a0 '__result' '_Tp *')
      (DeclRefExpr 0xa65168c <col:22> 'const ptrdiff_t':'const int' lvalue Var 0xa6513f0 '_Num' 'const ptrdiff_t':'const int'))))

;
    };
    template <bool _IsMove = false, typename _BI1 = std::basic_string<char> *, typename _BI2 = std::basic_string<char> *> inline std::basic_string<char> *__copy_move_backward_a(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9b3420 </usr/include/c++/4.6/bits/stl_algobase.h:569:5, line:582:5>
  (DeclStmt 0xa9b2450 <line:570:7, col:69>
    0xa9b2420 "typedef typename iterator_traits<class basic_string<char> *>::value_type _ValueType1")
  (DeclStmt 0xa9b2540 <line:571:7, col:69>
    0xa9b2510 "typedef typename iterator_traits<class basic_string<char> *>::value_type _ValueType2")
  (DeclStmt 0xa9b2630 <line:572:7, col:74>
    0xa9b2600 "typedef typename iterator_traits<class basic_string<char> *>::iterator_category _Category")
  (DeclStmt 0xa9b2ef0 <line:573:7, line:576:58>
    0xa9b2640 "const bool __simple =
      (ParenExpr 0xa9b2ed8 <line:573:29, line:576:57> '_Bool'
        (BinaryOperator 0xa9b2ec0 <line:573:30, line:576:50> '_Bool' '&&'
          (BinaryOperator 0xa9b2ae8 <line:573:30, line:575:46> '_Bool' '&&'
            (BinaryOperator 0xa9b2a30 <line:573:30, line:574:46> '_Bool' '&&'
              (UnaryTypeTraitExpr 0xa9b2698 <line:573:30, col:54> '_Bool')
              (ImplicitCastExpr 0xa9b2a20 <line:574:26, col:46> '_Bool' <IntegralToBoolean>
                (DeclRefExpr 0xa9b29fc <col:26, col:46> 'enum std::__is_pointer<class std::basic_string<char> *>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:299:7>' EnumConstant 0xa9b2980 '__value' 'enum std::__is_pointer<class std::basic_string<char> *>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:299:7>')))
            (ImplicitCastExpr 0xa9b2ad8 <line:575:26, col:46> '_Bool' <IntegralToBoolean>
              (DeclRefExpr 0xa9b2ab4 <col:26, col:46> 'enum std::__is_pointer<class std::basic_string<char> *>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:299:7>' EnumConstant 0xa9b2980 '__value' 'enum std::__is_pointer<class std::basic_string<char> *>::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:299:7>')))
          (ImplicitCastExpr 0xa9b2eb0 <line:576:12, col:50> '_Bool' <IntegralToBoolean>
            (DeclRefExpr 0xa9b2e8c <col:12, col:50> 'enum std::__are_same<class std::basic_string<char>, class std::basic_string<char> >::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:113:7>' EnumConstant 0xa9b2e10 '__value' 'enum std::__are_same<class std::basic_string<char>, class std::basic_string<char> >::<anonymous at /usr/include/c++/4.6/bits/cpp_type_traits.h:113:7>'))))")
  (ReturnStmt 0xa9b3410 <line:578:7, line:581:18>
    (CallExpr 0xa9b33b8 <line:578:14, line:581:18> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9b33a8 <line:578:14, line:579:45> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9b3364 <line:578:14, line:579:45> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' lvalue CXXMethod 0xa9b32a0 '__copy_move_b' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa64f8b0 '__copy_move_b')))
      (ImplicitCastExpr 0xa9b33e0 <col:59> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9b3084 <col:59> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b1f80 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9b33f0 <line:580:10> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9b309c <col:10> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b1fc0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9b3400 <line:581:10> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9b30b4 <col:10> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b2000 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <bool _IsMove, typename _BI1, typename _BI2> inline _BI2 __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) (CompoundStmt 0xa652898 </usr/include/c++/4.6/bits/stl_algobase.h:569:5, line:582:5>
  (DeclStmt 0xa651b00 <line:570:7, col:69>
    0xa651ad0 "typedef typename iterator_traits<_BI1>::value_type _ValueType1")
  (DeclStmt 0xa651c30 <line:571:7, col:69>
    0xa651c00 "typedef typename iterator_traits<_BI2>::value_type _ValueType2")
  (DeclStmt 0xa652210 <line:572:7, col:74>
    0xa6521e0 "typedef typename iterator_traits<_BI1>::iterator_category _Category")
  (DeclStmt 0xa6525f0 <line:573:7, line:576:58>
    0xa652230 "const bool __simple =
      (ParenExpr 0xa6525d8 <line:573:29, line:576:57> '<dependent type>'
        (BinaryOperator 0xa6525c0 <line:573:30, line:576:50> '<dependent type>' '&&'
          (BinaryOperator 0xa652468 <line:573:30, line:575:46> '<dependent type>' '&&'
            (BinaryOperator 0xa652378 <line:573:30, line:574:46> '<dependent type>' '&&'
              (UnaryTypeTraitExpr 0xa652288 <line:573:30, col:54> '_Bool')
              (DependentScopeDeclRefExpr 0xa652350 <line:574:26, col:46> '<dependent type>' lvalue))
            (DependentScopeDeclRefExpr 0xa652440 <line:575:26, col:46> '<dependent type>' lvalue))
          (DependentScopeDeclRefExpr 0xa652598 <line:576:12, col:50> '<dependent type>' lvalue)))")
  (ReturnStmt 0xa652888 <line:578:7, line:581:18>
    (CallExpr 0xa652860 <line:578:14, line:581:18> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa6527f0 <line:578:14, line:579:45> '<dependent type>' lvalue)
      (DeclRefExpr 0xa652814 <col:59> '_BI1' lvalue ParmVar 0xa651840 '__first' '_BI1')
      (DeclRefExpr 0xa65282c <line:580:10> '_BI1' lvalue ParmVar 0xa651880 '__last' '_BI1')
      (DeclRefExpr 0xa652844 <line:581:10> '_BI2' lvalue ParmVar 0xa6518c0 '__result' '_BI2'))))

;
    template <bool _IsMove = false, typename _BI1 = std::basic_string<char> *, typename _BI2 = std::basic_string<char> *> inline std::basic_string<char> *__copy_move_backward_a2(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9b2238 </usr/include/c++/4.6/bits/stl_algobase.h:587:5, line:591:5>
  (ReturnStmt 0xa9b2228 <line:588:7, line:590:34>
    (CXXFunctionalCastExpr 0xa9b2210 <line:588:14, line:590:34> 'class std::basic_string<char> *':'class std::basic_string<char> *' functional cast to class std::basic_string<char> * <NoOp>
      (CallExpr 0xa9b21e8 <line:588:19, line:590:33> 'class std::basic_string<char> *':'class std::basic_string<char> *'
        (ImplicitCastExpr 0xa9b21d8 <line:588:19, col:54> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9b2168 <col:19, col:54> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9b2090 '__copy_move_backward_a' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa6519b0 '__copy_move_backward_a')))
        (CallExpr 0xa9b1bc8 <line:589:6, col:31> 'typename _Niter_base<class basic_string<char> *>::iterator_type':'class std::basic_string<char> *'
          (ImplicitCastExpr 0xa9b1bb8 <col:6, col:11> 'typename _Niter_base<class basic_string<char> *>::iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9b1b78 <col:6, col:11> 'typename _Niter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' lvalue Function 0xa9b1ad0 '__niter_base' 'typename _Niter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' (FunctionTemplate 0xa644f00 '__niter_base')))
          (ImplicitCastExpr 0xa9b1be8 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9b140c <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b0ed0 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (CallExpr 0xa9b1cb0 <col:34, col:58> 'typename _Niter_base<class basic_string<char> *>::iterator_type':'class std::basic_string<char> *'
          (ImplicitCastExpr 0xa9b1ca0 <col:34, col:39> 'typename _Niter_base<class basic_string<char> *>::iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9b1c78 <col:34, col:39> 'typename _Niter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' lvalue Function 0xa9b1ad0 '__niter_base' 'typename _Niter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' (FunctionTemplate 0xa644f00 '__niter_base')))
          (ImplicitCastExpr 0xa9b1cd0 <col:52> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9b1c2c <col:52> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b0f10 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (CallExpr 0xa9b1d98 <line:590:6, col:32> 'typename _Niter_base<class basic_string<char> *>::iterator_type':'class std::basic_string<char> *'
          (ImplicitCastExpr 0xa9b1d88 <col:6, col:11> 'typename _Niter_base<class basic_string<char> *>::iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9b1d60 <col:6, col:11> 'typename _Niter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' lvalue Function 0xa9b1ad0 '__niter_base' 'typename _Niter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' (FunctionTemplate 0xa644f00 '__niter_base')))
          (ImplicitCastExpr 0xa9b1db8 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9b1d14 <col:24> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9b0f50 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))))

template <bool _IsMove, typename _BI1, typename _BI2> inline _BI2 __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) (CompoundStmt 0xa652e18 </usr/include/c++/4.6/bits/stl_algobase.h:587:5, line:591:5>
  (ReturnStmt 0xa652e08 <line:588:7, line:590:34>
    (CXXUnresolvedConstructExpr 0xa652de8 <line:588:14, line:590:34> '_BI2'
      (CallExpr 0xa652dc0 <line:588:19, line:590:33> '<dependent type>'
        (UnresolvedLookupExpr 0xa652bc0 <line:588:19, col:54> '<dependent type>' lvalue (no ADL) = '1' 0xa6519b0)
        (CallExpr 0xa652c90 <line:589:6, col:31> '<dependent type>'
          (UnresolvedLookupExpr 0xa652c40 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa652c74 <col:24> '_BI1' lvalue ParmVar 0xa6529d0 '__first' '_BI1'))
        (CallExpr 0xa652d18 <col:34, col:58> '<dependent type>'
          (UnresolvedLookupExpr 0xa652cc8 <col:34, col:39> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa652cfc <col:52> '_BI1' lvalue ParmVar 0xa652a10 '__last' '_BI1'))
        (CallExpr 0xa652da0 <line:590:6, col:32> '<dependent type>'
          (UnresolvedLookupExpr 0xa652d50 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa652d84 <col:24> '_BI2' lvalue ParmVar 0xa652a50 '__result' '_BI2'))))))

;
    template <typename _BI1 = std::basic_string<char> *, typename _BI2 = std::basic_string<char> *> inline std::basic_string<char> *copy_backward(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9b1198 </usr/include/c++/4.6/bits/stl_algobase.h:614:5, line:626:5>
  (NullStmt 0xa653098 <line:621:54>)
  (ReturnStmt 0xa9b1188 <line:623:7, line:625:18>
    (ParenExpr 0xa9b1170 <line:623:14, line:625:18> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (CallExpr 0xa9b1138 <line:623:15, line:625:17> 'class std::basic_string<char> *':'class std::basic_string<char> *'
        (ImplicitCastExpr 0xa9b1128 <line:623:15, col:77> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9b10b8 <col:15, col:77> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9b0fe0 '__copy_move_backward_a2' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa652b40 '__copy_move_backward_a2')))
        (CallExpr 0xa9b0bd8 <line:624:9, col:34> 'typename _Miter_base<class basic_string<char> *>::iterator_type':'class std::basic_string<char> *'
          (ImplicitCastExpr 0xa9b0bc8 <col:9, col:14> 'typename _Miter_base<class basic_string<char> *>::iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9b0b68 <col:9, col:14> 'typename _Miter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' lvalue Function 0xa9b0ac0 '__miter_base' 'typename _Miter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' (FunctionTemplate 0xa645dc0 '__miter_base')))
          (ImplicitCastExpr 0xa9b0bf8 <col:27> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9b023c <col:27> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ab840 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (CallExpr 0xa9b0cc0 <col:37, col:61> 'typename _Miter_base<class basic_string<char> *>::iterator_type':'class std::basic_string<char> *'
          (ImplicitCastExpr 0xa9b0cb0 <col:37, col:42> 'typename _Miter_base<class basic_string<char> *>::iterator_type (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9b0c88 <col:37, col:42> 'typename _Miter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' lvalue Function 0xa9b0ac0 '__miter_base' 'typename _Miter_base<class basic_string<char> *>::iterator_type (class std::basic_string<char> *)' (FunctionTemplate 0xa645dc0 '__miter_base')))
          (ImplicitCastExpr 0xa9b0ce0 <col:55> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9b0c3c <col:55> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ab880 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (ImplicitCastExpr 0xa9b1160 <line:625:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9b0cec <col:9> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ab8c0 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))))

template <typename _BI1, typename _BI2> inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) (CompoundStmt 0xa653918 </usr/include/c++/4.6/bits/stl_algobase.h:614:5, line:626:5>
  (NullStmt 0xa653098 <line:621:54>)
  (ReturnStmt 0xa653908 <line:623:7, line:625:18>
    (ParenExpr 0xa6538f0 <line:623:14, line:625:18> '<dependent type>'
      (CallExpr 0xa6538c8 <line:623:15, line:625:17> '<dependent type>'
        (UnresolvedLookupExpr 0xa653738 <line:623:15, col:77> '<dependent type>' lvalue (no ADL) = '1' 0xa652b40)
        (CallExpr 0xa653808 <line:624:9, col:34> '<dependent type>'
          (UnresolvedLookupExpr 0xa6537b8 <col:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa645dc0)
          (DeclRefExpr 0xa6537ec <col:27> '_BI1' lvalue ParmVar 0xa652ef0 '__first' '_BI1'))
        (CallExpr 0xa653890 <col:37, col:61> '<dependent type>'
          (UnresolvedLookupExpr 0xa653840 <col:37, col:42> '<overloaded function type>' lvalue (no ADL) = '1' 0xa645dc0)
          (DeclRefExpr 0xa653874 <col:55> '_BI1' lvalue ParmVar 0xa652f30 '__last' '_BI1'))
        (DeclRefExpr 0xa6538b0 <line:625:9> '_BI2' lvalue ParmVar 0xa652f70 '__result' '_BI2')))))

;
    template <typename _ForwardIterator, typename _Tp> inline typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type __fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) (CompoundStmt 0xa654028 </usr/include/c++/4.6/bits/stl_algobase.h:674:5, line:677:5>
  (ForStmt 0xa654000 <line:675:7, line:676:13>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa653f48 <line:675:14, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa653f08 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa653ed4 <col:14> '_ForwardIterator' lvalue ParmVar 0xa653cc0 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa653eec <col:25> '_ForwardIterator' lvalue ParmVar 0xa653d00 '__last' '_ForwardIterator'))
    (UnaryOperator 0xa653f88 <col:33, col:35> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa653f6c <col:35> '_ForwardIterator' lvalue ParmVar 0xa653cc0 '__first' '_ForwardIterator'))
    (BinaryOperator 0xa653fe8 <line:676:2, col:13> '<dependent type>' '='
      (UnaryOperator 0xa653fb8 <col:2, col:3> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa653f9c <col:3> '_ForwardIterator' lvalue ParmVar 0xa653cc0 '__first' '_ForwardIterator'))
      (DeclRefExpr 0xa653fcc <col:13> 'const _Tp' lvalue ParmVar 0xa653d70 '__value' 'const _Tp &'))))

;
    template <typename _ForwardIterator = unsigned long *, typename _Tp = int> inline typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type __fill_a(unsigned long *__first, unsigned long *__last, const int &__value) (CompoundStmt 0xa9a68f8 </usr/include/c++/4.6/bits/stl_algobase.h:684:5, line:688:5>
  (DeclStmt 0xa9a6720 <line:685:7, col:32>
    0xa9a66c0 "const int __tmp =
      (ImplicitCastExpr 0xa9a6710 <col:25> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa9a66f4 <col:25> 'const int':'const int' lvalue ParmVar 0xa9a6300 '__value' 'const int &'))")
  (ForStmt 0xa9a68d0 <line:686:7, line:687:13>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa9a67c0 <line:686:14, col:25> '_Bool' '!='
      (ImplicitCastExpr 0xa9a67a0 <col:14> 'unsigned long *':'unsigned long *' <LValueToRValue>
        (DeclRefExpr 0xa9a676c <col:14> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa9a6250 '__first' 'unsigned long *':'unsigned long *'))
      (ImplicitCastExpr 0xa9a67b0 <col:25> 'unsigned long *':'unsigned long *' <LValueToRValue>
        (DeclRefExpr 0xa9a6784 <col:25> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa9a6290 '__last' 'unsigned long *':'unsigned long *')))
    (UnaryOperator 0xa9a67f0 <col:33, col:35> 'unsigned long *':'unsigned long *' lvalue prefix '++'
      (DeclRefExpr 0xa9a67d8 <col:35> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa9a6250 '__first' 'unsigned long *':'unsigned long *'))
    (BinaryOperator 0xa9a6880 <line:687:2, col:13> 'unsigned long' lvalue '='
      (UnaryOperator 0xa9a6830 <col:2, col:3> 'unsigned long' lvalue prefix '*'
        (ImplicitCastExpr 0xa9a6820 <col:3> 'unsigned long *':'unsigned long *' <LValueToRValue>
          (DeclRefExpr 0xa9a6804 <col:3> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa9a6250 '__first' 'unsigned long *':'unsigned long *')))
      (ImplicitCastExpr 0xa9a6870 <col:13> 'unsigned long' <IntegralCast>
        (ImplicitCastExpr 0xa9a6860 <col:13> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa9a6844 <col:13> 'const int':'const int' lvalue Var 0xa9a66c0 '__tmp' 'const int':'const int'))))))

template <typename _ForwardIterator, typename _Tp> inline typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type __fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) (CompoundStmt 0xa654c88 </usr/include/c++/4.6/bits/stl_algobase.h:684:5, line:688:5>
  (DeclStmt 0xa6545f0 <line:685:7, col:32>
    0xa6545a0 "const _Tp __tmp =
      (DeclRefExpr 0xa6545d4 <col:25> 'const _Tp' lvalue ParmVar 0xa654430 '__value' 'const _Tp &')")
  (ForStmt 0xa654c60 <line:686:7, line:687:13>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa654ba8 <line:686:14, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa654630 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa654600 <col:14> '_ForwardIterator' lvalue ParmVar 0xa654380 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa654618 <col:25> '_ForwardIterator' lvalue ParmVar 0xa6543c0 '__last' '_ForwardIterator'))
    (UnaryOperator 0xa654be8 <col:33, col:35> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa654bcc <col:35> '_ForwardIterator' lvalue ParmVar 0xa654380 '__first' '_ForwardIterator'))
    (BinaryOperator 0xa654c48 <line:687:2, col:13> '<dependent type>' '='
      (UnaryOperator 0xa654c18 <col:2, col:3> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa654bfc <col:3> '_ForwardIterator' lvalue ParmVar 0xa654380 '__first' '_ForwardIterator'))
      (DeclRefExpr 0xa654c2c <col:13> 'const _Tp' lvalue Var 0xa6545a0 '__tmp' 'const _Tp'))))

;
    template <typename _Tp> inline typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type __fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) (CompoundStmt 0xa6554d0 </usr/include/c++/4.6/bits/stl_algobase.h:695:5, line:699:5>
  (DeclStmt 0xa655230 <line:696:7, col:28>
    0xa6551e0 "const _Tp __tmp =
      (DeclRefExpr 0xa655214 <col:25> 'const _Tp' lvalue ParmVar 0xa655070 '__c' 'const _Tp &')")
  (CallExpr 0xa6554a8 <line:697:7, line:698:26> '<dependent type>'
    (DeclRefExpr 0xa6553a4 <line:697:7> 'void *(void *, int, unsigned int)' lvalue Function 0xa655240 '__builtin_memset' 'void *(void *, int, unsigned int)')
    (DeclRefExpr 0xa6553bc <col:24> '_Tp *' lvalue ParmVar 0xa654fb0 '__first' '_Tp *')
    (CXXStaticCastExpr 0xa655400 <col:33, col:65> 'unsigned char' static_cast<unsigned char> <Dependent>
      (DeclRefExpr 0xa6553d4 <col:60> 'const _Tp' lvalue Var 0xa6551e0 '__tmp' 'const _Tp'))
    (CXXOperatorCallExpr 0xa655480 <line:698:10, col:19> '<dependent type>'
      (UnresolvedLookupExpr 0xa655448 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
      (DeclRefExpr 0xa655418 <col:10> '_Tp *' lvalue ParmVar 0xa655000 '__last' '_Tp *')
      (DeclRefExpr 0xa655430 <col:19> '_Tp *' lvalue ParmVar 0xa654fb0 '__first' '_Tp *'))))

;
    template <typename _ForwardIterator = unsigned long *, typename _Tp = int> inline void fill(unsigned long *__first, unsigned long *__last, const int &__value) (CompoundStmt 0xa9a6510 </usr/include/c++/4.6/bits/stl_algobase.h:716:5, line:724:5>
  (NullStmt 0xa6557b8 <line:720:54>)
  (CallExpr 0xa9a64e8 <line:722:7, line:723:14> 'typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type':'void'
    (ImplicitCastExpr 0xa9a64d8 <line:722:7, col:12> 'typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type (*)(unsigned long *, unsigned long *, const int &)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9a6494 <col:7, col:12> 'typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type (unsigned long *, unsigned long *, const int &)' lvalue Function 0xa9a6390 '__fill_a' 'typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type (unsigned long *, unsigned long *, const int &)' (FunctionTemplate 0xa654560 '__fill_a')))
    (CallExpr 0xa9a44a8 <col:21, col:46> 'typename _Niter_base<unsigned long *>::iterator_type':'unsigned long *'
      (ImplicitCastExpr 0xa9a4498 <col:21, col:26> 'typename _Niter_base<unsigned long *>::iterator_type (*)(unsigned long *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9a4438 <col:21, col:26> 'typename _Niter_base<unsigned long *>::iterator_type (unsigned long *)' lvalue Function 0xa9a4390 '__niter_base' 'typename _Niter_base<unsigned long *>::iterator_type (unsigned long *)' (FunctionTemplate 0xa644f00 '__niter_base')))
      (ImplicitCastExpr 0xa9a44c8 <col:39> 'unsigned long *':'unsigned long *' <LValueToRValue>
        (DeclRefExpr 0xaa2b19c <col:39> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa6bf4e0 '__first' 'unsigned long *':'unsigned long *')))
    (CallExpr 0xa9a4590 <col:49, col:73> 'typename _Niter_base<unsigned long *>::iterator_type':'unsigned long *'
      (ImplicitCastExpr 0xa9a4580 <col:49, col:54> 'typename _Niter_base<unsigned long *>::iterator_type (*)(unsigned long *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9a4558 <col:49, col:54> 'typename _Niter_base<unsigned long *>::iterator_type (unsigned long *)' lvalue Function 0xa9a4390 '__niter_base' 'typename _Niter_base<unsigned long *>::iterator_type (unsigned long *)' (FunctionTemplate 0xa644f00 '__niter_base')))
      (ImplicitCastExpr 0xa9a45b0 <col:67> 'unsigned long *':'unsigned long *' <LValueToRValue>
        (DeclRefExpr 0xa9a450c <col:67> 'unsigned long *':'unsigned long *' lvalue ParmVar 0xa6bf520 '__last' 'unsigned long *':'unsigned long *')))
    (DeclRefExpr 0xa9a45bc <line:723:7> 'const int':'const int' lvalue ParmVar 0xa6bf5d0 '__value' 'const int &')))

template <typename _ForwardIterator = std::_Bit_iterator, typename _Tp = bool> inline void fill(std::_Bit_iterator __first, std::_Bit_iterator __last, const bool &__value)template <typename _ForwardIterator, typename _Tp> inline void fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) (CompoundStmt 0xa655978 </usr/include/c++/4.6/bits/stl_algobase.h:716:5, line:724:5>
  (NullStmt 0xa6557b8 <line:720:54>)
  (CallExpr 0xa655950 <line:722:7, line:723:14> '<dependent type>'
    (UnresolvedLookupExpr 0xa6557e8 <line:722:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653ea0 0xa654560 0xa6551a0)
    (CallExpr 0xa655890 <col:21, col:46> '<dependent type>'
      (UnresolvedLookupExpr 0xa655840 <col:21, col:26> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
      (DeclRefExpr 0xa655874 <col:39> '_ForwardIterator' lvalue ParmVar 0xa6555b0 '__first' '_ForwardIterator'))
    (CallExpr 0xa655918 <col:49, col:73> '<dependent type>'
      (UnresolvedLookupExpr 0xa6558c8 <col:49, col:54> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
      (DeclRefExpr 0xa6558fc <col:67> '_ForwardIterator' lvalue ParmVar 0xa6555f0 '__last' '_ForwardIterator'))
    (DeclRefExpr 0xa655938 <line:723:7> 'const _Tp' lvalue ParmVar 0xa655660 '__value' 'const _Tp &')))

;
    template <typename _OutputIterator, typename _Size, typename _Tp> inline typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type __fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) (CompoundStmt 0xa6568d0 </usr/include/c++/4.6/bits/stl_algobase.h:730:5, line:735:5>
  (ForStmt 0xa656880 <line:731:7, line:733:13>
    (DeclStmt 0xa656700 <line:731:12, col:45>
      0xa6566b0 "decltype(__n + 0) __niter =
        (DeclRefExpr 0xa6566e4 <col:42> '_Size' lvalue ParmVar 0xa6563f0 '__n' '_Size')")
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa656780 <line:732:5, col:15> '<dependent type>'
      (UnresolvedLookupExpr 0xa656740 <col:13, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa656710 <col:5> 'decltype(__n + 0)' lvalue Var 0xa6566b0 '__niter' 'decltype(__n + 0)')
      (IntegerLiteral 0xa656728 <col:15> 'int' 0))
    (BinaryOperator 0xa656808 <col:18, col:31> '<dependent type>' ','
      (UnaryOperator 0xa6567c0 <col:18, col:20> '<dependent type>' prefix '--'
        (DeclRefExpr 0xa6567a4 <col:20> 'decltype(__n + 0)' lvalue Var 0xa6566b0 '__niter' 'decltype(__n + 0)'))
      (UnaryOperator 0xa6567f0 <col:29, col:31> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6567d4 <col:31> '_OutputIterator' lvalue ParmVar 0xa6563b0 '__first' '_OutputIterator')))
    (BinaryOperator 0xa656868 <line:733:2, col:13> '<dependent type>' '='
      (UnaryOperator 0xa656838 <col:2, col:3> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa656820 <col:3> '_OutputIterator' lvalue ParmVar 0xa6563b0 '__first' '_OutputIterator'))
      (DeclRefExpr 0xa65684c <col:13> 'const _Tp' lvalue ParmVar 0xa656480 '__value' 'const _Tp &')))
  (ReturnStmt 0xa6568c0 <line:734:7, col:14>
    (DeclRefExpr 0xa6568a4 <col:14> '_OutputIterator' lvalue ParmVar 0xa6563b0 '__first' '_OutputIterator')))

;
    template <typename _OutputIterator, typename _Size, typename _Tp> inline typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type __fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) (CompoundStmt 0xa6575f8 </usr/include/c++/4.6/bits/stl_algobase.h:741:5, line:747:5>
  (DeclStmt 0xa656ef0 <line:742:7, col:32>
    0xa656ea0 "const _Tp __tmp =
      (DeclRefExpr 0xa656ed4 <col:25> 'const _Tp' lvalue ParmVar 0xa656d30 '__value' 'const _Tp &')")
  (ForStmt 0xa657180 <line:743:7, line:745:13>
    (DeclStmt 0xa657000 <line:743:12, col:45>
      0xa656fb0 "decltype(__n + 0) __niter =
        (DeclRefExpr 0xa656fe4 <col:42> '_Size' lvalue ParmVar 0xa656cc0 '__n' '_Size')")
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa657080 <line:744:5, col:15> '<dependent type>'
      (UnresolvedLookupExpr 0xa657040 <col:13, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa657010 <col:5> 'decltype(__n + 0)' lvalue Var 0xa656fb0 '__niter' 'decltype(__n + 0)')
      (IntegerLiteral 0xa657028 <col:15> 'int' 0))
    (BinaryOperator 0xa657108 <col:18, col:31> '<dependent type>' ','
      (UnaryOperator 0xa6570c0 <col:18, col:20> '<dependent type>' prefix '--'
        (DeclRefExpr 0xa6570a4 <col:20> 'decltype(__n + 0)' lvalue Var 0xa656fb0 '__niter' 'decltype(__n + 0)'))
      (UnaryOperator 0xa6570f0 <col:29, col:31> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6570d4 <col:31> '_OutputIterator' lvalue ParmVar 0xa656c80 '__first' '_OutputIterator')))
    (BinaryOperator 0xa657168 <line:745:2, col:13> '<dependent type>' '='
      (UnaryOperator 0xa657138 <col:2, col:3> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa657120 <col:3> '_OutputIterator' lvalue ParmVar 0xa656c80 '__first' '_OutputIterator'))
      (DeclRefExpr 0xa65714c <col:13> 'const _Tp' lvalue Var 0xa656ea0 '__tmp' 'const _Tp')))
  (ReturnStmt 0xa6575e8 <line:746:7, col:14>
    (DeclRefExpr 0xa6575d0 <col:14> '_OutputIterator' lvalue ParmVar 0xa656c80 '__first' '_OutputIterator')))

;
    template <typename _Size, typename _Tp> inline typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp *>::__type __fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) (CompoundStmt 0xa657dc0 </usr/include/c++/4.6/bits/stl_algobase.h:753:5, line:756:5>
  (CallExpr 0xa657cf8 <line:754:7, col:48> '<dependent type>'
    (UnresolvedLookupExpr 0xa657bf8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653ea0 0xa654560 0xa6551a0)
    (DeclRefExpr 0xa657c34 <col:21> '_Tp *' lvalue ParmVar 0xa6579c0 '__first' '_Tp *')
    (CXXOperatorCallExpr 0xa657cb8 <col:30, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa657c80 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (DeclRefExpr 0xa657c4c <col:30> '_Tp *' lvalue ParmVar 0xa6579c0 '__first' '_Tp *')
      (DeclRefExpr 0xa657c64 <col:40> '_Size' lvalue ParmVar 0xa657a00 '__n' '_Size'))
    (DeclRefExpr 0xa657cdc <col:45> 'const _Tp' lvalue ParmVar 0xa657a70 '__c' 'const _Tp &'))
  (ReturnStmt 0xa657db0 <line:755:7, col:24>
    (CXXOperatorCallExpr 0xa657d88 <col:14, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa657d50 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (DeclRefExpr 0xa657d20 <col:14> '_Tp *' lvalue ParmVar 0xa6579c0 '__first' '_Tp *')
      (DeclRefExpr 0xa657d38 <col:24> '_Size' lvalue ParmVar 0xa657a00 '__n' '_Size'))))

;
    template <typename _OI, typename _Size, typename _Tp> inline _OI fill_n(_OI __first, _Size __n, const _Tp &__value) (CompoundStmt 0xa658268 </usr/include/c++/4.6/bits/stl_algobase.h:776:5, line:781:5>
  (ReturnStmt 0xa658258 <line:780:7, col:75>
    (CXXUnresolvedConstructExpr 0xa658238 <col:14, col:75> '_OI'
      (CallExpr 0xa658210 <col:18, col:74> '<dependent type>'
        (UnresolvedLookupExpr 0xa658118 <col:18, col:23> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6565b0 0xa656e60 0xa657ba0)
        (CallExpr 0xa6581c0 <col:34, col:59> '<dependent type>'
          (UnresolvedLookupExpr 0xa658170 <col:34, col:39> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
          (DeclRefExpr 0xa6581a4 <col:52> '_OI' lvalue ParmVar 0xa657ef0 '__first' '_OI'))
        (DeclRefExpr 0xa6581e0 <col:62> '_Size' lvalue ParmVar 0xa657f30 '__n' '_Size')
        (DeclRefExpr 0xa6581f8 <col:67> 'const _Tp' lvalue ParmVar 0xa657fa0 '__value' 'const _Tp &')))))

;
    template <bool _BoolType = true> struct __equal {
        struct __equal;
        template <typename _Tp> static bool equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) (CompoundStmt 0xa659810 </usr/include/c++/4.6/bits/stl_algobase.h:803:9, line:806:2>
  (ReturnStmt 0xa659800 <line:804:4, line:805:30>
    (UnaryOperator 0xa6597e8 <line:804:11, line:805:30> '<dependent type>' prefix '!'
      (CallExpr 0xa6597c0 <line:804:12, line:805:30> '<dependent type>'
        (DeclRefExpr 0xa659694 <line:804:12> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)')
        (DeclRefExpr 0xa6596ac <col:29> 'const _Tp *' lvalue ParmVar 0xa659320 '__first1' 'const _Tp *')
        (DeclRefExpr 0xa6596c4 <col:39> 'const _Tp *' lvalue ParmVar 0xa6593c0 '__first2' 'const _Tp *')
        (BinaryOperator 0xa6597a8 <col:49, line:805:29> '<dependent type>' '*'
          (UnaryExprOrTypeTraitExpr 0xa6596e8 <line:804:49, col:59> 'unsigned int' sizeof '_Tp')
          (ParenExpr 0xa659790 <line:805:10, col:29> '<dependent type>'
            (CXXOperatorCallExpr 0xa659768 <col:11, col:21> '<dependent type>'
              (UnresolvedLookupExpr 0xa659730 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
              (DeclRefExpr 0xa659700 <col:11> 'const _Tp *' lvalue ParmVar 0xa659370 '__last1' 'const _Tp *')
              (DeclRefExpr 0xa659718 <col:21> 'const _Tp *' lvalue ParmVar 0xa659320 '__first1' 'const _Tp *'))))))))

;
    }
template <bool _BoolType> struct __equal {
        struct __equal;
        template <typename _II1, typename _II2> static bool equal(_II1 __first1, _II1 __last1, _II2 __first2) (CompoundStmt 0xa659070 </usr/include/c++/4.6/bits/stl_algobase.h:789:9, line:794:2>
  (ForStmt 0xa659028 <line:790:4, line:792:15>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa658e50 <line:790:11, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa658e10 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa658de0 <col:11> '_II1' lvalue ParmVar 0xa658bf0 '__first1' '_II1')
      (DeclRefExpr 0xa658df8 <col:23> '_II1' lvalue ParmVar 0xa658c30 '__last1' '_II1'))
    (BinaryOperator 0xa658ed8 <col:32, col:46> '<dependent type>' ','
      (UnaryOperator 0xa658e90 <col:32, col:34> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa658e74 <col:34> '_II1' lvalue ParmVar 0xa658bf0 '__first1' '_II1'))
      (UnaryOperator 0xa658ec0 <col:44, col:46> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa658ea4 <col:46> '_II2' lvalue ParmVar 0xa658c70 '__first2' '_II2')))
    (IfStmt 0xa659008 <line:791:6, line:792:15>
      <<<NULL>>>
      (UnaryOperator 0xa658fd0 <line:791:10, col:34> '<dependent type>' prefix '!'
        (ParenExpr 0xa658fb8 <col:11, col:34> '<dependent type>'
          (CXXOperatorCallExpr 0xa658f90 <col:12, col:26> '<dependent type>'
            (UnresolvedLookupExpr 0xa658f50 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0)
            (UnaryOperator 0xa658f08 <col:12, col:13> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa658ef0 <col:13> '_II1' lvalue ParmVar 0xa658bf0 '__first1' '_II1'))
            (UnaryOperator 0xa658f38 <col:25, col:26> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa658f1c <col:26> '_II2' lvalue ParmVar 0xa658c70 '__first2' '_II2')))))
      (ReturnStmt 0xa658ff8 <line:792:8, col:15>
        (CXXBoolLiteralExpr 0xa658fe8 <col:15> '_Bool' false))
      <<<NULL>>>))
  (ReturnStmt 0xa659060 <line:793:4, col:11>
    (CXXBoolLiteralExpr 0xa659050 <col:11> '_Bool' true)))

;
    };
    struct __equal {
        struct __equal;
        template <typename _Tp> static bool equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) (CompoundStmt 0xa659810 </usr/include/c++/4.6/bits/stl_algobase.h:803:9, line:806:2>
  (ReturnStmt 0xa659800 <line:804:4, line:805:30>
    (UnaryOperator 0xa6597e8 <line:804:11, line:805:30> '<dependent type>' prefix '!'
      (CallExpr 0xa6597c0 <line:804:12, line:805:30> '<dependent type>'
        (DeclRefExpr 0xa659694 <line:804:12> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)')
        (DeclRefExpr 0xa6596ac <col:29> 'const _Tp *' lvalue ParmVar 0xa659320 '__first1' 'const _Tp *')
        (DeclRefExpr 0xa6596c4 <col:39> 'const _Tp *' lvalue ParmVar 0xa6593c0 '__first2' 'const _Tp *')
        (BinaryOperator 0xa6597a8 <col:49, line:805:29> '<dependent type>' '*'
          (UnaryExprOrTypeTraitExpr 0xa6596e8 <line:804:49, col:59> 'unsigned int' sizeof '_Tp')
          (ParenExpr 0xa659790 <line:805:10, col:29> '<dependent type>'
            (CXXOperatorCallExpr 0xa659768 <col:11, col:21> '<dependent type>'
              (UnresolvedLookupExpr 0xa659730 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
              (DeclRefExpr 0xa659700 <col:11> 'const _Tp *' lvalue ParmVar 0xa659370 '__last1' 'const _Tp *')
              (DeclRefExpr 0xa659718 <col:21> 'const _Tp *' lvalue ParmVar 0xa659320 '__first1' 'const _Tp *'))))))))

;
    };
    template <typename _II1, typename _II2> inline bool __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) (CompoundStmt 0xa65b038 </usr/include/c++/4.6/bits/stl_algobase.h:812:5, line:821:5>
  (DeclStmt 0xa65a878 <line:813:7, col:69>
    0xa659bb0 "typedef typename iterator_traits<_II1>::value_type _ValueType1")
  (DeclStmt 0xa65a9a0 <line:814:7, col:69>
    0xa65a970 "typedef typename iterator_traits<_II2>::value_type _ValueType2")
  (DeclStmt 0xa65ae70 <line:815:7, line:818:58>
    0xa65a9c0 "const bool __simple =
      (ParenExpr 0xa65ae58 <line:815:29, line:818:57> '<dependent type>'
        (BinaryOperator 0xa65ae40 <line:815:30, line:818:50> '<dependent type>' '&&'
          (BinaryOperator 0xa65ace8 <line:815:30, line:817:46> '<dependent type>' '&&'
            (BinaryOperator 0xa65abf8 <line:815:30, line:816:46> '<dependent type>' '&&'
              (DependentScopeDeclRefExpr 0xa65ab00 <line:815:30, col:57> '<dependent type>' lvalue)
              (DependentScopeDeclRefExpr 0xa65abd0 <line:816:26, col:46> '<dependent type>' lvalue))
            (DependentScopeDeclRefExpr 0xa65acc0 <line:817:26, col:46> '<dependent type>' lvalue))
          (DependentScopeDeclRefExpr 0xa65ae18 <line:818:12, col:50> '<dependent type>' lvalue)))")
  (ReturnStmt 0xa65b028 <line:820:7, col:71>
    (CallExpr 0xa65b000 <col:14, col:71> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa65af90 <col:14, col:38> '<dependent type>' lvalue)
      (DeclRefExpr 0xa65afb4 <col:44> '_II1' lvalue ParmVar 0xa6598f0 '__first1' '_II1')
      (DeclRefExpr 0xa65afcc <col:54> '_II1' lvalue ParmVar 0xa659930 '__last1' '_II1')
      (DeclRefExpr 0xa65afe4 <col:63> '_II2' lvalue ParmVar 0xa659970 '__first2' '_II2'))))

;
    template <typename  = std::random_access_iterator_tag, typename  = std::random_access_iterator_tag> struct __lc_rai {
        struct __lc_rai;
        template <typename _RAI1, typename _RAI2> static _RAI1 __newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 __first2, _RAI2 __last2) (CompoundStmt 0xa65cc48 </usr/include/c++/4.6/bits/stl_algobase.h:845:9, line:851:2>
  (DeclStmt 0xa65c8e8 <line:846:4, line:847:34>
    0xa65c820 "const typename iterator_traits<_RAI1>::difference_type __diff1 =
      (CXXOperatorCallExpr 0xa65c8c0 <col:16, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa65c888 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65c854 <col:16> '_RAI1' lvalue ParmVar 0xa65c370 '__last1' '_RAI1')
        (DeclRefExpr 0xa65c86c <col:26> '_RAI1' lvalue ParmVar 0xa65c330 '__first1' '_RAI1'))")
  (DeclStmt 0xa65cac8 <line:848:4, line:849:34>
    0xa65ca00 "const typename iterator_traits<_RAI2>::difference_type __diff2 =
      (CXXOperatorCallExpr 0xa65caa0 <col:16, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa65ca68 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65ca34 <col:16> '_RAI2' lvalue ParmVar 0xa65c3f0 '__last2' '_RAI2')
        (DeclRefExpr 0xa65ca4c <col:26> '_RAI2' lvalue ParmVar 0xa65c3b0 '__first2' '_RAI2'))")
  (ReturnStmt 0xa65cc38 <line:850:4, col:52>
    (ConditionalOperator 0xa65cc18 <col:11, col:52> '<dependent type>'
      (CXXOperatorCallExpr 0xa65cb48 <col:11, col:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa65cb08 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
        (DeclRefExpr 0xa65cad8 <col:11> 'const typename iterator_traits<_RAI2>::difference_type' lvalue Var 0xa65ca00 '__diff2' 'const typename iterator_traits<_RAI2>::difference_type')
        (DeclRefExpr 0xa65caf0 <col:21> 'const typename iterator_traits<_RAI1>::difference_type' lvalue Var 0xa65c820 '__diff1' 'const typename iterator_traits<_RAI1>::difference_type'))
      (CXXOperatorCallExpr 0xa65cbd8 <col:31, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa65cba0 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
        (DeclRefExpr 0xa65cb6c <col:31> '_RAI1' lvalue ParmVar 0xa65c330 '__first1' '_RAI1')
        (DeclRefExpr 0xa65cb84 <col:42> 'const typename iterator_traits<_RAI2>::difference_type' lvalue Var 0xa65ca00 '__diff2' 'const typename iterator_traits<_RAI2>::difference_type'))
      (DeclRefExpr 0xa65cbfc <col:52> '_RAI1' lvalue ParmVar 0xa65c370 '__last1' '_RAI1'))))

;
        template <typename _RAI> static bool __cnd2(_RAI, _RAI) (CompoundStmt 0xa65cc88 </usr/include/c++/4.6/bits/stl_algobase.h:856:9, col:24>
  (ReturnStmt 0xa65cc78 <col:11, col:18>
    (CXXBoolLiteralExpr 0xa65cc68 <col:18> '_Bool' true)))

;
    }
template <typename , typename > struct __lc_rai {
        struct __lc_rai;
        template <typename _II1, typename _II2> static _II1 __newlast1(_II1, _II1 __last1, _II2, _II2) (CompoundStmt 0xa65b828 </usr/include/c++/4.6/bits/stl_algobase.h:830:9, col:27>
  (ReturnStmt 0xa65b818 <col:11, col:18>
    (DeclRefExpr 0xa65b800 <col:18> '_II1' lvalue ParmVar 0xa65b440 '__last1' '_II1')))

;
        template <typename _II> static bool __cnd2(_II __first, _II __last) (CompoundStmt 0xa65c018 </usr/include/c++/4.6/bits/stl_algobase.h:835:9, col:37>
  (ReturnStmt 0xa65c008 <col:11, col:29>
    (CXXOperatorCallExpr 0xa65bfe0 <col:18, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa65bfa0 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa65b83c <col:18> '_II' lvalue ParmVar 0xa65b680 '__first' '_II')
      (DeclRefExpr 0xa65b854 <col:29> '_II' lvalue ParmVar 0xa65b6c0 '__last' '_II'))))

;
    };
    struct __lc_rai {
        struct __lc_rai;
        template <typename _RAI1, typename _RAI2> static _RAI1 __newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 __first2, _RAI2 __last2) (CompoundStmt 0xa65cc48 </usr/include/c++/4.6/bits/stl_algobase.h:845:9, line:851:2>
  (DeclStmt 0xa65c8e8 <line:846:4, line:847:34>
    0xa65c820 "const typename iterator_traits<_RAI1>::difference_type __diff1 =
      (CXXOperatorCallExpr 0xa65c8c0 <col:16, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa65c888 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65c854 <col:16> '_RAI1' lvalue ParmVar 0xa65c370 '__last1' '_RAI1')
        (DeclRefExpr 0xa65c86c <col:26> '_RAI1' lvalue ParmVar 0xa65c330 '__first1' '_RAI1'))")
  (DeclStmt 0xa65cac8 <line:848:4, line:849:34>
    0xa65ca00 "const typename iterator_traits<_RAI2>::difference_type __diff2 =
      (CXXOperatorCallExpr 0xa65caa0 <col:16, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa65ca68 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65ca34 <col:16> '_RAI2' lvalue ParmVar 0xa65c3f0 '__last2' '_RAI2')
        (DeclRefExpr 0xa65ca4c <col:26> '_RAI2' lvalue ParmVar 0xa65c3b0 '__first2' '_RAI2'))")
  (ReturnStmt 0xa65cc38 <line:850:4, col:52>
    (ConditionalOperator 0xa65cc18 <col:11, col:52> '<dependent type>'
      (CXXOperatorCallExpr 0xa65cb48 <col:11, col:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa65cb08 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
        (DeclRefExpr 0xa65cad8 <col:11> 'const typename iterator_traits<_RAI2>::difference_type' lvalue Var 0xa65ca00 '__diff2' 'const typename iterator_traits<_RAI2>::difference_type')
        (DeclRefExpr 0xa65caf0 <col:21> 'const typename iterator_traits<_RAI1>::difference_type' lvalue Var 0xa65c820 '__diff1' 'const typename iterator_traits<_RAI1>::difference_type'))
      (CXXOperatorCallExpr 0xa65cbd8 <col:31, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa65cba0 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
        (DeclRefExpr 0xa65cb6c <col:31> '_RAI1' lvalue ParmVar 0xa65c330 '__first1' '_RAI1')
        (DeclRefExpr 0xa65cb84 <col:42> 'const typename iterator_traits<_RAI2>::difference_type' lvalue Var 0xa65ca00 '__diff2' 'const typename iterator_traits<_RAI2>::difference_type'))
      (DeclRefExpr 0xa65cbfc <col:52> '_RAI1' lvalue ParmVar 0xa65c370 '__last1' '_RAI1'))))

;
        template <typename _RAI> static bool __cnd2(_RAI, _RAI) (CompoundStmt 0xa65cc88 </usr/include/c++/4.6/bits/stl_algobase.h:856:9, col:24>
  (ReturnStmt 0xa65cc78 <col:11, col:18>
    (CXXBoolLiteralExpr 0xa65cc68 <col:18> '_Bool' true)))

;
    };
    template <bool _BoolType = true> struct __lexicographical_compare {
        struct __lexicographical_compare;
        template <typename _Tp, typename _Up> static bool __lc(const _Tp *__first1, const _Tp *__last1, const _Up *__first2, const _Up *__last2) (CompoundStmt 0xa660080 </usr/include/c++/4.6/bits/stl_algobase.h:896:2, line:902:2>
  (DeclStmt 0xa65fa08 <line:897:4, col:44>
    0xa65f940 "const size_t __len1 =
      (CXXOperatorCallExpr 0xa65f9e0 <col:26, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa65f9a8 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65f974 <col:26> 'const _Tp *' lvalue ParmVar 0xa65f700 '__last1' 'const _Tp *')
        (DeclRefExpr 0xa65f98c <col:36> 'const _Tp *' lvalue ParmVar 0xa65f6b0 '__first1' 'const _Tp *'))")
  (DeclStmt 0xa65fae8 <line:898:4, col:44>
    0xa65fa20 "const size_t __len2 =
      (CXXOperatorCallExpr 0xa65fac0 <col:26, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa65fa88 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65fa54 <col:26> 'const _Up *' lvalue ParmVar 0xa65f7c0 '__last2' 'const _Up *')
        (DeclRefExpr 0xa65fa6c <col:36> 'const _Up *' lvalue ParmVar 0xa65f770 '__first2' 'const _Up *'))")
  (DeclStmt 0xa65ff28 <line:899:4, line:900:32>
    0xa65fb10 "const int __result =
      (CallExpr 0xa65ff00 <line:899:25, line:900:31> '<dependent type>'
        (DeclRefExpr 0xa65fb44 <line:899:25> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)')
        (DeclRefExpr 0xa65fb5c <col:42> 'const _Tp *' lvalue ParmVar 0xa65f6b0 '__first1' 'const _Tp *')
        (DeclRefExpr 0xa65fb74 <col:52> 'const _Up *' lvalue ParmVar 0xa65f770 '__first2' 'const _Up *')
        (CallExpr 0xa65fed8 <line:900:7, col:30> 'const unsigned int':'const unsigned int' lvalue
          (ImplicitCastExpr 0xa65fec8 <col:7, col:12> 'const unsigned int &(*)(const unsigned int &, const unsigned int &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa65fe68 <col:7, col:12> 'const unsigned int &(const unsigned int &, const unsigned int &)' lvalue Function 0xa65fdc0 'min' 'const unsigned int &(const unsigned int &, const unsigned int &)' (FunctionTemplate 0xa6435c0 'min')))
          (DeclRefExpr 0xa65fbe0 <col:16> 'const size_t':'const unsigned int' lvalue Var 0xa65f940 '__len1' 'const size_t':'const unsigned int')
          (DeclRefExpr 0xa65fbf8 <col:24> 'const size_t':'const unsigned int' lvalue Var 0xa65fa20 '__len2' 'const size_t':'const unsigned int')))")
  (ReturnStmt 0xa660070 <line:901:4, col:51>
    (ConditionalOperator 0xa660050 <col:11, col:51> '_Bool'
      (BinaryOperator 0xa65ff78 <col:11, col:23> '_Bool' '!='
        (ImplicitCastExpr 0xa65ff68 <col:11> 'int' <LValueToRValue>
          (DeclRefExpr 0xa65ff38 <col:11> 'const int' lvalue Var 0xa65fb10 '__result' 'const int'))
        (IntegerLiteral 0xa65ff50 <col:23> 'int' 0))
      (BinaryOperator 0xa65ffd0 <col:27, col:38> '_Bool' '<'
        (ImplicitCastExpr 0xa65ffc0 <col:27> 'int' <LValueToRValue>
          (DeclRefExpr 0xa65ff90 <col:27> 'const int' lvalue Var 0xa65fb10 '__result' 'const int'))
        (IntegerLiteral 0xa65ffa8 <col:38> 'int' 0))
      (BinaryOperator 0xa660038 <col:42, col:51> '_Bool' '<'
        (ImplicitCastExpr 0xa660018 <col:42> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa65ffe8 <col:42> 'const size_t':'const unsigned int' lvalue Var 0xa65f940 '__len1' 'const size_t':'const unsigned int'))
        (ImplicitCastExpr 0xa660028 <col:51> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa660000 <col:51> 'const size_t':'const unsigned int' lvalue Var 0xa65fa20 '__len2' 'const size_t':'const unsigned int'))))))

;
    }
template <bool _BoolType> struct __lexicographical_compare {
        struct __lexicographical_compare;
        template <typename _II1, typename _II2> static bool __lc(_II1, _II1, _II2, _II2);
    };
    template <typename _II1, typename _II2> static bool __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) (CompoundStmt 0xa65f3a0 </usr/include/c++/4.6/bits/stl_algobase.h:871:7, line:887:7>
  (DeclStmt 0xa65e930 <line:872:2, col:70>
    0xa65e900 "typedef typename iterator_traits<_II1>::iterator_category _Category1")
  (DeclStmt 0xa65eac0 <line:873:2, col:70>
    0xa65ea90 "typedef typename iterator_traits<_II2>::iterator_category _Category2")
  (DeclStmt 0xa65ece0 <line:874:2, col:59>
    0xa65ecb0 "typedef std::__lc_rai<_Category1, _Category2> __rai_type")
  (BinaryOperator 0xa65ee00 <line:876:2, line:877:24> '<dependent type>' '='
    (DeclRefExpr 0xa65ecf0 <line:876:2> '_II1' lvalue ParmVar 0xa65e5e0 '__last1' '_II1')
    (CallExpr 0xa65edd0 <col:12, line:877:24> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa65ed48 <line:876:12, col:24> '<dependent type>' lvalue)
      (DeclRefExpr 0xa65ed6c <col:35> '_II1' lvalue ParmVar 0xa65e5a0 '__first1' '_II1')
      (DeclRefExpr 0xa65ed84 <col:45> '_II1' lvalue ParmVar 0xa65e5e0 '__last1' '_II1')
      (DeclRefExpr 0xa65ed9c <line:877:7> '_II2' lvalue ParmVar 0xa65e620 '__first2' '_II2')
      (DeclRefExpr 0xa65edb4 <col:17> '_II2' lvalue ParmVar 0xa65e660 '__last2' '_II2')))
  (ForStmt 0xa65f220 <line:878:2, line:885:4>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa65ef50 <line:878:9, col:68> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa65ee88 <col:9, col:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa65ee48 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
        (DeclRefExpr 0xa65ee18 <col:9> '_II1' lvalue ParmVar 0xa65e5a0 '__first1' '_II1')
        (DeclRefExpr 0xa65ee30 <col:21> '_II1' lvalue ParmVar 0xa65e5e0 '__last1' '_II1'))
      (CallExpr 0xa65ef28 <col:32, col:68> '<dependent type>'
        (DependentScopeDeclRefExpr 0xa65eed0 <col:32, col:44> '<dependent type>' lvalue)
        (DeclRefExpr 0xa65eef4 <col:51> '_II2' lvalue ParmVar 0xa65e620 '__first2' '_II2')
        (DeclRefExpr 0xa65ef0c <col:61> '_II2' lvalue ParmVar 0xa65e660 '__last2' '_II2')))
    (BinaryOperator 0xa65efc8 <line:879:7, col:21> '<dependent type>' ','
      (UnaryOperator 0xa65ef80 <col:7, col:9> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa65ef68 <col:9> '_II1' lvalue ParmVar 0xa65e5a0 '__first1' '_II1'))
      (UnaryOperator 0xa65efb0 <col:19, col:21> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa65ef94 <col:21> '_II2' lvalue ParmVar 0xa65e620 '__first2' '_II2')))
    (CompoundStmt 0xa65f208 <line:880:4, line:885:4>
      (IfStmt 0xa65f0e0 <line:881:6, line:882:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa65f080 <line:881:10, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa65f040 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
          (UnaryOperator 0xa65eff8 <col:10, col:11> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa65efe0 <col:11> '_II1' lvalue ParmVar 0xa65e5a0 '__first1' '_II1'))
          (UnaryOperator 0xa65f028 <col:22, col:23> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa65f00c <col:23> '_II2' lvalue ParmVar 0xa65e620 '__first2' '_II2')))
        (ReturnStmt 0xa65f0d0 <line:882:8, col:15>
          (CXXBoolLiteralExpr 0xa65f0c0 <col:15> '_Bool' true))
        <<<NULL>>>)
      (IfStmt 0xa65f1e8 <line:883:6, line:884:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa65f1a0 <line:883:10, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa65f160 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
          (UnaryOperator 0xa65f118 <col:10, col:11> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa65f0fc <col:11> '_II2' lvalue ParmVar 0xa65e620 '__first2' '_II2'))
          (UnaryOperator 0xa65f148 <col:22, col:23> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa65f12c <col:23> '_II1' lvalue ParmVar 0xa65e5a0 '__first1' '_II1')))
        (ReturnStmt 0xa65f1d8 <line:884:8, col:15>
          (CXXBoolLiteralExpr 0xa65f1c8 <col:15> '_Bool' false))
        <<<NULL>>>)))
  (ReturnStmt 0xa65f390 <line:886:2, col:44>
    (BinaryOperator 0xa65f378 <col:9, col:44> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa65f2b8 <col:9, col:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa65f278 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0)
        (DeclRefExpr 0xa65f244 <col:9> '_II1' lvalue ParmVar 0xa65e5a0 '__first1' '_II1')
        (DeclRefExpr 0xa65f25c <col:21> '_II1' lvalue ParmVar 0xa65e5e0 '__last1' '_II1'))
      (CXXOperatorCallExpr 0xa65f350 <col:32, col:44> '<dependent type>'
        (UnresolvedLookupExpr 0xa65f310 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
        (DeclRefExpr 0xa65f2dc <col:32> '_II2' lvalue ParmVar 0xa65e620 '__first2' '_II2')
        (DeclRefExpr 0xa65f2f4 <col:44> '_II2' lvalue ParmVar 0xa65e660 '__last2' '_II2')))))

;
    struct __lexicographical_compare {
        struct __lexicographical_compare;
        template <typename _Tp, typename _Up> static bool __lc(const _Tp *__first1, const _Tp *__last1, const _Up *__first2, const _Up *__last2) (CompoundStmt 0xa660080 </usr/include/c++/4.6/bits/stl_algobase.h:896:2, line:902:2>
  (DeclStmt 0xa65fa08 <line:897:4, col:44>
    0xa65f940 "const size_t __len1 =
      (CXXOperatorCallExpr 0xa65f9e0 <col:26, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa65f9a8 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65f974 <col:26> 'const _Tp *' lvalue ParmVar 0xa65f700 '__last1' 'const _Tp *')
        (DeclRefExpr 0xa65f98c <col:36> 'const _Tp *' lvalue ParmVar 0xa65f6b0 '__first1' 'const _Tp *'))")
  (DeclStmt 0xa65fae8 <line:898:4, col:44>
    0xa65fa20 "const size_t __len2 =
      (CXXOperatorCallExpr 0xa65fac0 <col:26, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa65fa88 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa65fa54 <col:26> 'const _Up *' lvalue ParmVar 0xa65f7c0 '__last2' 'const _Up *')
        (DeclRefExpr 0xa65fa6c <col:36> 'const _Up *' lvalue ParmVar 0xa65f770 '__first2' 'const _Up *'))")
  (DeclStmt 0xa65ff28 <line:899:4, line:900:32>
    0xa65fb10 "const int __result =
      (CallExpr 0xa65ff00 <line:899:25, line:900:31> '<dependent type>'
        (DeclRefExpr 0xa65fb44 <line:899:25> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)')
        (DeclRefExpr 0xa65fb5c <col:42> 'const _Tp *' lvalue ParmVar 0xa65f6b0 '__first1' 'const _Tp *')
        (DeclRefExpr 0xa65fb74 <col:52> 'const _Up *' lvalue ParmVar 0xa65f770 '__first2' 'const _Up *')
        (CallExpr 0xa65fed8 <line:900:7, col:30> 'const unsigned int':'const unsigned int' lvalue
          (ImplicitCastExpr 0xa65fec8 <col:7, col:12> 'const unsigned int &(*)(const unsigned int &, const unsigned int &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa65fe68 <col:7, col:12> 'const unsigned int &(const unsigned int &, const unsigned int &)' lvalue Function 0xa65fdc0 'min' 'const unsigned int &(const unsigned int &, const unsigned int &)' (FunctionTemplate 0xa6435c0 'min')))
          (DeclRefExpr 0xa65fbe0 <col:16> 'const size_t':'const unsigned int' lvalue Var 0xa65f940 '__len1' 'const size_t':'const unsigned int')
          (DeclRefExpr 0xa65fbf8 <col:24> 'const size_t':'const unsigned int' lvalue Var 0xa65fa20 '__len2' 'const size_t':'const unsigned int')))")
  (ReturnStmt 0xa660070 <line:901:4, col:51>
    (ConditionalOperator 0xa660050 <col:11, col:51> '_Bool'
      (BinaryOperator 0xa65ff78 <col:11, col:23> '_Bool' '!='
        (ImplicitCastExpr 0xa65ff68 <col:11> 'int' <LValueToRValue>
          (DeclRefExpr 0xa65ff38 <col:11> 'const int' lvalue Var 0xa65fb10 '__result' 'const int'))
        (IntegerLiteral 0xa65ff50 <col:23> 'int' 0))
      (BinaryOperator 0xa65ffd0 <col:27, col:38> '_Bool' '<'
        (ImplicitCastExpr 0xa65ffc0 <col:27> 'int' <LValueToRValue>
          (DeclRefExpr 0xa65ff90 <col:27> 'const int' lvalue Var 0xa65fb10 '__result' 'const int'))
        (IntegerLiteral 0xa65ffa8 <col:38> 'int' 0))
      (BinaryOperator 0xa660038 <col:42, col:51> '_Bool' '<'
        (ImplicitCastExpr 0xa660018 <col:42> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa65ffe8 <col:42> 'const size_t':'const unsigned int' lvalue Var 0xa65f940 '__len1' 'const size_t':'const unsigned int'))
        (ImplicitCastExpr 0xa660028 <col:51> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa660000 <col:51> 'const size_t':'const unsigned int' lvalue Var 0xa65fa20 '__len2' 'const size_t':'const unsigned int'))))))

;
    };
    template <typename _II1, typename _II2> inline bool __lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) (CompoundStmt 0xa661928 </usr/include/c++/4.6/bits/stl_algobase.h:909:5, line:921:5>
  (DeclStmt 0xa660ed0 <line:910:7, col:69>
    0xa660ea0 "typedef typename iterator_traits<_II1>::value_type _ValueType1")
  (DeclStmt 0xa661000 <line:911:7, col:69>
    0xa660fd0 "typedef typename iterator_traits<_II2>::value_type _ValueType2")
  (DeclStmt 0xa661748 <line:912:7, line:917:34>
    0xa661020 "const bool __simple =
      (ParenExpr 0xa661730 <line:913:2, line:917:33> '<dependent type>'
        (BinaryOperator 0xa661718 <line:913:3, line:917:26> '<dependent type>' '&&'
          (BinaryOperator 0xa661628 <line:913:3, line:916:26> '<dependent type>' '&&'
            (BinaryOperator 0xa661540 <line:913:3, line:915:49> '<dependent type>' '&&'
              (BinaryOperator 0xa661400 <line:913:3, line:914:49> '<dependent type>' '&&'
                (BinaryOperator 0xa6612a8 <line:913:3, col:62> '<dependent type>' '&&'
                  (DependentScopeDeclRefExpr 0xa661160 <col:3, col:27> '<dependent type>' lvalue)
                  (DependentScopeDeclRefExpr 0xa661280 <col:38, col:62> '<dependent type>' lvalue))
                (UnaryOperator 0xa6613e8 <line:914:6, col:49> '<dependent type>' prefix '!'
                  (DependentScopeDeclRefExpr 0xa6613c0 <col:7, col:49> '<dependent type>' lvalue)))
              (UnaryOperator 0xa661528 <line:915:6, col:49> '<dependent type>' prefix '!'
                (DependentScopeDeclRefExpr 0xa661500 <col:7, col:49> '<dependent type>' lvalue)))
            (DependentScopeDeclRefExpr 0xa661600 <line:916:6, col:26> '<dependent type>' lvalue))
          (DependentScopeDeclRefExpr 0xa6616f0 <line:917:6, col:26> '<dependent type>' lvalue)))")
  (ReturnStmt 0xa661918 <line:919:7, line:920:29>
    (CallExpr 0xa6618e8 <line:919:14, line:920:29> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa661860 <line:919:14, col:56> '<dependent type>' lvalue)
      (DeclRefExpr 0xa661884 <col:61> '_II1' lvalue ParmVar 0xa660ba0 '__first1' '_II1')
      (DeclRefExpr 0xa66189c <col:71> '_II1' lvalue ParmVar 0xa660be0 '__last1' '_II1')
      (DeclRefExpr 0xa6618b4 <line:920:12> '_II2' lvalue ParmVar 0xa660c20 '__first2' '_II2')
      (DeclRefExpr 0xa6618cc <col:22> '_II2' lvalue ParmVar 0xa660c60 '__last2' '_II2'))))

;
    template <typename _ForwardIterator, typename _Tp> _ForwardIterator lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val) (CompoundStmt 0xa662550 </usr/include/c++/4.6/bits/stl_algobase.h:938:5, line:966:5>
  (DeclStmt 0xa661d50 <line:939:7, line:940:12>
    0xa661d20 "typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType")
  (DeclStmt 0xa661e80 <line:941:7, line:942:15>
    0xa661e50 "typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType")
  (NullStmt 0xa661e90 <line:947:67>)
  (DeclStmt 0xa661fa0 <line:949:7, col:59>
    0xa661ec0 "_DistanceType __len =
      (CallExpr 0xa661f78 <col:29, col:58> '<dependent type>'
        (UnresolvedLookupExpr 0xa661f10 <col:29, col:34> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
        (DeclRefExpr 0xa661f44 <col:43> '_ForwardIterator' lvalue ParmVar 0xa661a10 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa661f5c <col:52> '_ForwardIterator' lvalue ParmVar 0xa661a50 '__last' '_ForwardIterator'))")
  (WhileStmt 0xa662510 <line:951:7, line:964:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa662020 <line:951:14, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa661fe0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa661fb0 <col:14> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa661ec0 '__len' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type')
      (IntegerLiteral 0xa661fc8 <col:22> 'int' 0))
    (CompoundStmt 0xa6624f0 <line:952:2, line:964:2>
      (DeclStmt 0xa6620d0 <line:953:4, col:37>
        0xa662050 "_DistanceType __half =
          (BinaryOperator 0xa6620b8 <col:27, col:36> '<dependent type>' '>>'
            (DeclRefExpr 0xa662084 <col:27> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa661ec0 '__len' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type')
            (IntegerLiteral 0xa6620a0 <col:36> 'int' 1))")
      (DeclStmt 0xa662140 <line:954:4, col:39>
        0xa6620f0 "_ForwardIterator __middle =
          (DeclRefExpr 0xa662124 <col:32> '_ForwardIterator' lvalue ParmVar 0xa661a10 '__first' '_ForwardIterator')")
      (CallExpr 0xa6621e0 <line:955:4, col:33> '<dependent type>'
        (UnresolvedLookupExpr 0xa662178 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61d500)
        (DeclRefExpr 0xa6621ac <col:17> '_ForwardIterator' lvalue Var 0xa6620f0 '__middle' '_ForwardIterator')
        (DeclRefExpr 0xa6621c4 <col:27> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa662050 '__half' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type'))
      (IfStmt 0xa6624d0 <line:956:4, line:963:14>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa662290 <line:956:8, col:20> '<dependent type>'
          (UnresolvedLookupExpr 0xa662250 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
          (UnaryOperator 0xa662220 <col:8, col:9> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa662204 <col:9> '_ForwardIterator' lvalue Var 0xa6620f0 '__middle' '_ForwardIterator'))
          (DeclRefExpr 0xa662234 <col:20> 'const _Tp' lvalue ParmVar 0xa661ae0 '__val' 'const _Tp &'))
        (CompoundStmt 0xa662468 <line:957:6, line:961:6>
          (BinaryOperator 0xa6622e8 <line:958:8, col:18> '<dependent type>' '='
            (DeclRefExpr 0xa6622b4 <col:8> '_ForwardIterator' lvalue ParmVar 0xa661a10 '__first' '_ForwardIterator')
            (DeclRefExpr 0xa6622cc <col:18> '_ForwardIterator' lvalue Var 0xa6620f0 '__middle' '_ForwardIterator'))
          (UnaryOperator 0xa662318 <line:959:8, col:10> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa662300 <col:10> '_ForwardIterator' lvalue ParmVar 0xa661a10 '__first' '_ForwardIterator'))
          (BinaryOperator 0xa662450 <line:960:8, col:33> '<dependent type>' '='
            (DeclRefExpr 0xa66232c <col:8> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa661ec0 '__len' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type')
            (CXXOperatorCallExpr 0xa662428 <col:16, col:33> '<dependent type>'
              (UnresolvedLookupExpr 0xa6623f0 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
              (CXXOperatorCallExpr 0xa6623b0 <col:16, col:24> '<dependent type>'
                (UnresolvedLookupExpr 0xa662378 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
                (DeclRefExpr 0xa662344 <col:16> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa661ec0 '__len' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type')
                (DeclRefExpr 0xa66235c <col:24> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa662050 '__half' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type'))
              (IntegerLiteral 0xa6623d8 <col:33> 'int' 1))))
        (BinaryOperator 0xa6624b8 <line:963:6, col:14> '<dependent type>' '='
          (DeclRefExpr 0xa662484 <col:6> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa661ec0 '__len' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type')
          (DeclRefExpr 0xa66249c <col:14> '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type' lvalue Var 0xa662050 '__half' '_DistanceType':'typename iterator_traits<_ForwardIterator>::difference_type')))))
  (ReturnStmt 0xa662540 <line:965:7, col:14>
    (DeclRefExpr 0xa662524 <col:14> '_ForwardIterator' lvalue ParmVar 0xa661a10 '__first' '_ForwardIterator')))

;
    template <typename _Size> inline _Size __lg(_Size __n) (CompoundStmt 0xa662970 </usr/include/c++/4.6/bits/stl_algobase.h:973:5, line:978:5>
  (DeclStmt 0xa662738 <line:974:7, col:16>
    0xa662700 "_Size __k")
  (ForStmt 0xa6628a8 <line:975:7, line:976:4>
    (BinaryOperator 0xa662778 <line:975:12, col:18> '<dependent type>' '='
      (DeclRefExpr 0xa662748 <col:12> '_Size' lvalue Var 0xa662700 '__k' '_Size')
      (IntegerLiteral 0xa662760 <col:18> 'int' 0))
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa662800 <col:21, col:28> '<dependent type>'
      (UnresolvedLookupExpr 0xa6627c0 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa662790 <col:21> '_Size' lvalue ParmVar 0xa6625e0 '__n' '_Size')
      (IntegerLiteral 0xa6627a8 <col:28> 'int' 0))
    (CompoundAssignOperator 0xa662858 <col:31, col:39> '<dependent type>' lvalue '>>=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
      (DeclRefExpr 0xa662824 <col:31> '_Size' lvalue ParmVar 0xa6625e0 '__n' '_Size')
      (IntegerLiteral 0xa662840 <col:39> 'int' 1))
    (UnaryOperator 0xa662890 <line:976:2, col:4> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa662878 <col:4> '_Size' lvalue Var 0xa662700 '__k' '_Size')))
  (ReturnStmt 0xa662960 <line:977:7, col:20>
    (CXXOperatorCallExpr 0xa662938 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa662900 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
      (DeclRefExpr 0xa6628cc <col:14> '_Size' lvalue Var 0xa662700 '__k' '_Size')
      (IntegerLiteral 0xa6628e8 <col:20> 'int' 1))))

;
    inline int __lg(int __n) (CompoundStmt 0xa663110 </usr/include/c++/4.6/bits/stl_algobase.h:982:3, col:66>
  (ReturnStmt 0xa663100 <col:5, col:63>
    (ImplicitCastExpr 0xa6630f0 <col:12, col:63> 'int' <IntegralCast>
      (BinaryOperator 0xa6630d8 <col:12, col:63> 'unsigned int' '-'
        (BinaryOperator 0xa662f20 <col:12, col:42> 'unsigned int' '-'
          (BinaryOperator 0xa662ab8 <col:12, <built-in>:17:22> 'unsigned int' '*'
            (UnaryExprOrTypeTraitExpr 0xa662a78 </usr/include/c++/4.6/bits/stl_algobase.h:982:12, col:22> 'unsigned int' sizeof 'int')
            (ImplicitCastExpr 0xa662aa8 <<built-in>:17:22> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa662a90 <col:22> 'int' 8)))
          (ImplicitCastExpr 0xa662f10 </usr/include/c++/4.6/bits/stl_algobase.h:982:42> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa662ef8 <col:42> 'int' 1)))
        (ImplicitCastExpr 0xa6630c8 <col:46, col:63> 'unsigned int' <IntegralCast>
          (CallExpr 0xa663088 <col:46, col:63> 'int'
            (ImplicitCastExpr 0xa663078 <col:46> 'int (*)(unsigned int)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa663030 <col:46> 'int (unsigned int)' lvalue Function 0xa662f40 '__builtin_clz' 'int (unsigned int)'))
            (ImplicitCastExpr 0xa6630b8 <col:60> 'unsigned int' <IntegralCast>
              (ImplicitCastExpr 0xa6630a8 <col:60> 'int' <LValueToRValue>
                (DeclRefExpr 0xa663048 <col:60> 'int' lvalue ParmVar 0xa6629a0 '__n' 'int')))))))))


    inline long __lg(long __n) (CompoundStmt 0xa6634a0 </usr/include/c++/4.6/bits/stl_algobase.h:986:3, col:67>
  (ReturnStmt 0xa663490 <col:5, col:64>
    (ImplicitCastExpr 0xa663480 <col:12, col:64> 'long' <IntegralCast>
      (BinaryOperator 0xa663468 <col:12, col:64> 'unsigned int' '-'
        (BinaryOperator 0xa663298 <col:12, col:42> 'unsigned int' '-'
          (BinaryOperator 0xa663258 <col:12, <built-in>:17:22> 'unsigned int' '*'
            (UnaryExprOrTypeTraitExpr 0xa663218 </usr/include/c++/4.6/bits/stl_algobase.h:986:12, col:23> 'unsigned int' sizeof 'long')
            (ImplicitCastExpr 0xa663248 <<built-in>:17:22> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa663230 <col:22> 'int' 8)))
          (ImplicitCastExpr 0xa663288 </usr/include/c++/4.6/bits/stl_algobase.h:986:42> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa663270 <col:42> 'int' 1)))
        (ImplicitCastExpr 0xa663458 <col:46, col:64> 'unsigned int' <IntegralCast>
          (CallExpr 0xa663418 <col:46, col:64> 'int'
            (ImplicitCastExpr 0xa663408 <col:46> 'int (*)(unsigned long)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6633c0 <col:46> 'int (unsigned long)' lvalue Function 0xa6632d0 '__builtin_clzl' 'int (unsigned long)'))
            (ImplicitCastExpr 0xa663448 <col:61> 'unsigned long' <IntegralCast>
              (ImplicitCastExpr 0xa663438 <col:61> 'long' <LValueToRValue>
                (DeclRefExpr 0xa6633d8 <col:61> 'long' lvalue ParmVar 0xa663140 '__n' 'long')))))))))


    inline long long __lg(long long __n) (CompoundStmt 0xa663830 </usr/include/c++/4.6/bits/stl_algobase.h:990:3, col:73>
  (ReturnStmt 0xa663820 <col:5, col:70>
    (ImplicitCastExpr 0xa663810 <col:12, col:70> 'long long' <IntegralCast>
      (BinaryOperator 0xa6637f8 <col:12, col:70> 'unsigned int' '-'
        (BinaryOperator 0xa663628 <col:12, col:47> 'unsigned int' '-'
          (BinaryOperator 0xa6635e8 <col:12, <built-in>:17:22> 'unsigned int' '*'
            (UnaryExprOrTypeTraitExpr 0xa6635a8 </usr/include/c++/4.6/bits/stl_algobase.h:990:12, col:28> 'unsigned int' sizeof 'long long')
            (ImplicitCastExpr 0xa6635d8 <<built-in>:17:22> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa6635c0 <col:22> 'int' 8)))
          (ImplicitCastExpr 0xa663618 </usr/include/c++/4.6/bits/stl_algobase.h:990:47> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa663600 <col:47> 'int' 1)))
        (ImplicitCastExpr 0xa6637e8 <col:51, col:70> 'unsigned int' <IntegralCast>
          (CallExpr 0xa6637a8 <col:51, col:70> 'int'
            (ImplicitCastExpr 0xa663798 <col:51> 'int (*)(unsigned long long)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa663750 <col:51> 'int (unsigned long long)' lvalue Function 0xa663660 '__builtin_clzll' 'int (unsigned long long)'))
            (ImplicitCastExpr 0xa6637d8 <col:67> 'unsigned long long' <IntegralCast>
              (ImplicitCastExpr 0xa6637c8 <col:67> 'long long' <LValueToRValue>
                (DeclRefExpr 0xa663768 <col:67> 'long long' lvalue ParmVar 0xa6634d0 '__n' 'long long')))))))))


    template <typename _II1, typename _II2> inline bool equal(_II1 __first1, _II1 __last1, _II2 __first2) (CompoundStmt 0xa663ce8 </usr/include/c++/4.6/bits/stl_algobase.h:1011:5, line:1023:5>
  (NullStmt 0xa663ab8 <line:1018:56>)
  (ReturnStmt 0xa663cd8 <line:1020:7, line:1022:37>
    (CallExpr 0xa663cb0 <line:1020:14, line:1022:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa663ae0 <line:1020:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa659a90)
      (CallExpr 0xa663b80 <col:31, col:57> '<dependent type>'
        (UnresolvedLookupExpr 0xa663b30 <col:31, col:36> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa663b64 <col:49> '_II1' lvalue ParmVar 0xa663910 '__first1' '_II1'))
      (CallExpr 0xa663c08 <line:1021:10, col:35> '<dependent type>'
        (UnresolvedLookupExpr 0xa663bb8 <col:10, col:15> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa663bec <col:28> '_II1' lvalue ParmVar 0xa663950 '__last1' '_II1'))
      (CallExpr 0xa663c90 <line:1022:10, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa663c40 <col:10, col:15> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa663c74 <col:28> '_II2' lvalue ParmVar 0xa663990 '__first2' '_II2')))))

;
    template <typename _IIter1, typename _IIter2, typename _BinaryPredicate> inline bool equal(_IIter1 __first1, _IIter1 __last1, _IIter2 __first2, _BinaryPredicate __binary_pred) (CompoundStmt 0xa664d10 </usr/include/c++/4.6/bits/stl_algobase.h:1044:5, line:1054:5>
  (NullStmt 0xa664a88 <line:1048:56>)
  (ForStmt 0xa664cc8 <line:1050:7, line:1052:11>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa664b08 <line:1050:14, col:26> '<dependent type>'
      (UnresolvedLookupExpr 0xa664ac8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa664a94 <col:14> '_IIter1' lvalue ParmVar 0xa663e10 '__first1' '_IIter1')
      (DeclRefExpr 0xa664aac <col:26> '_IIter1' lvalue ParmVar 0xa663e50 '__last1' '_IIter1'))
    (BinaryOperator 0xa664b90 <col:35, col:49> '<dependent type>' ','
      (UnaryOperator 0xa664b48 <col:35, col:37> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa664b2c <col:37> '_IIter1' lvalue ParmVar 0xa663e10 '__first1' '_IIter1'))
      (UnaryOperator 0xa664b78 <col:47, col:49> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa664b5c <col:49> '_IIter2' lvalue ParmVar 0xa663e90 '__first2' '_IIter2')))
    (IfStmt 0xa664ca8 <line:1051:2, line:1052:11>
      <<<NULL>>>
      (UnaryOperator 0xa664c70 <line:1051:6, col:47> '_Bool' prefix '!'
        (CXXUnresolvedConstructExpr 0xa664c50 <col:7, col:47> '_Bool'
          (CallExpr 0xa664c28 <col:12, col:46> '<dependent type>'
            (DeclRefExpr 0xa664bb0 <col:12> '_BinaryPredicate' lvalue ParmVar 0xa664930 '__binary_pred' '_BinaryPredicate')
            (UnaryOperator 0xa664be0 <col:26, col:27> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa664bc8 <col:27> '_IIter1' lvalue ParmVar 0xa663e10 '__first1' '_IIter1'))
            (UnaryOperator 0xa664c10 <col:37, col:38> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa664bf4 <col:38> '_IIter2' lvalue ParmVar 0xa663e90 '__first2' '_IIter2')))))
      (ReturnStmt 0xa664c98 <line:1052:4, col:11>
        (CXXBoolLiteralExpr 0xa664c88 <col:11> '_Bool' false))
      <<<NULL>>>))
  (ReturnStmt 0xa664d00 <line:1053:7, col:14>
    (CXXBoolLiteralExpr 0xa664cf0 <col:14> '_Bool' true)))

;
    template <typename _II1, typename _II2> inline bool lexicographical_compare(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) (CompoundStmt 0xa665500 </usr/include/c++/4.6/bits/stl_algobase.h:1075:5, line:1090:5>
  (DeclStmt 0xa6650f0 <line:1077:7, col:69>
    0xa6650c0 "typedef typename iterator_traits<_II1>::value_type _ValueType1")
  (DeclStmt 0xa665220 <line:1078:7, col:69>
    0xa6651f0 "typedef typename iterator_traits<_II2>::value_type _ValueType2")
  (NullStmt 0xa665230 <line:1083:56>)
  (NullStmt 0xa665240 <line:1084:56>)
  (ReturnStmt 0xa6654f0 <line:1086:7, line:1089:33>
    (CallExpr 0xa6654c0 <line:1086:14, line:1089:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa665268 <line:1086:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa660d80)
      (CallExpr 0xa665308 <col:49, col:75> '<dependent type>'
        (UnresolvedLookupExpr 0xa6652b8 <col:49, col:54> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa6652ec <col:67> '_II1' lvalue ParmVar 0xa664df0 '__first1' '_II1'))
      (CallExpr 0xa665390 <line:1087:7, col:32> '<dependent type>'
        (UnresolvedLookupExpr 0xa665340 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa665374 <col:25> '_II1' lvalue ParmVar 0xa664e30 '__last1' '_II1'))
      (CallExpr 0xa665418 <line:1088:7, col:33> '<dependent type>'
        (UnresolvedLookupExpr 0xa6653c8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa6653fc <col:25> '_II2' lvalue ParmVar 0xa664e70 '__first2' '_II2'))
      (CallExpr 0xa6654a0 <line:1089:7, col:32> '<dependent type>'
        (UnresolvedLookupExpr 0xa665450 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa644f00)
        (DeclRefExpr 0xa665484 <col:25> '_II2' lvalue ParmVar 0xa664eb0 '__last2' '_II2')))))

;
    template <typename _II1, typename _II2, typename _Compare> bool lexicographical_compare(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp) (CompoundStmt 0xa6669b8 </usr/include/c++/4.6/bits/stl_algobase.h:1109:5, line:1130:5>
  (DeclStmt 0xa666000 <line:1110:7, col:75>
    0xa665fd0 "typedef typename iterator_traits<_II1>::iterator_category _Category1")
  (DeclStmt 0xa666130 <line:1111:7, col:75>
    0xa666100 "typedef typename iterator_traits<_II2>::iterator_category _Category2")
  (DeclStmt 0xa666340 <line:1112:7, col:64>
    0xa666310 "typedef std::__lc_rai<_Category1, _Category2> __rai_type")
  (NullStmt 0xa666350 <line:1117:56>)
  (NullStmt 0xa666360 <line:1118:56>)
  (BinaryOperator 0xa666480 <line:1120:7, col:76> '<dependent type>' '='
    (DeclRefExpr 0xa66636c <col:7> '_II1' lvalue ParmVar 0xa665680 '__last1' '_II1')
    (CallExpr 0xa666450 <col:17, col:76> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa6663c8 <col:17, col:29> '<dependent type>' lvalue)
      (DeclRefExpr 0xa6663ec <col:40> '_II1' lvalue ParmVar 0xa665640 '__first1' '_II1')
      (DeclRefExpr 0xa666404 <col:50> '_II1' lvalue ParmVar 0xa665680 '__last1' '_II1')
      (DeclRefExpr 0xa66641c <col:59> '_II2' lvalue ParmVar 0xa6656c0 '__first2' '_II2')
      (DeclRefExpr 0xa666434 <col:69> '_II2' lvalue ParmVar 0xa665700 '__last2' '_II2')))
  (ForStmt 0xa666838 <line:1121:7, line:1128:2>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa6665d0 <line:1121:14, col:73> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa666508 <col:14, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa6664c8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
        (DeclRefExpr 0xa666498 <col:14> '_II1' lvalue ParmVar 0xa665640 '__first1' '_II1')
        (DeclRefExpr 0xa6664b0 <col:26> '_II1' lvalue ParmVar 0xa665680 '__last1' '_II1'))
      (CallExpr 0xa6665a8 <col:37, col:73> '<dependent type>'
        (DependentScopeDeclRefExpr 0xa666550 <col:37, col:49> '<dependent type>' lvalue)
        (DeclRefExpr 0xa666574 <col:56> '_II2' lvalue ParmVar 0xa6656c0 '__first2' '_II2')
        (DeclRefExpr 0xa66658c <col:66> '_II2' lvalue ParmVar 0xa665700 '__last2' '_II2')))
    (BinaryOperator 0xa666648 <line:1122:5, col:19> '<dependent type>' ','
      (UnaryOperator 0xa666600 <col:5, col:7> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6665e8 <col:7> '_II1' lvalue ParmVar 0xa665640 '__first1' '_II1'))
      (UnaryOperator 0xa666630 <col:17, col:19> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa666614 <col:19> '_II2' lvalue ParmVar 0xa6656c0 '__first2' '_II2')))
    (CompoundStmt 0xa666820 <line:1123:2, line:1128:2>
      (IfStmt 0xa666720 <line:1124:4, line:1125:13>
        <<<NULL>>>
        (CallExpr 0xa6666d8 <line:1124:8, col:35> '<dependent type>'
          (DeclRefExpr 0xa666660 <col:8> '_Compare' lvalue ParmVar 0xa665740 '__comp' '_Compare')
          (UnaryOperator 0xa666690 <col:15, col:16> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa666678 <col:16> '_II1' lvalue ParmVar 0xa665640 '__first1' '_II1'))
          (UnaryOperator 0xa6666c0 <col:26, col:27> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa6666a4 <col:27> '_II2' lvalue ParmVar 0xa6656c0 '__first2' '_II2')))
        (ReturnStmt 0xa666710 <line:1125:6, col:13>
          (CXXBoolLiteralExpr 0xa666700 <col:13> '_Bool' true))
        <<<NULL>>>)
      (IfStmt 0xa666800 <line:1126:4, line:1127:13>
        <<<NULL>>>
        (CallExpr 0xa6667b8 <line:1126:8, col:35> '<dependent type>'
          (DeclRefExpr 0xa66673c <col:8> '_Compare' lvalue ParmVar 0xa665740 '__comp' '_Compare')
          (UnaryOperator 0xa666770 <col:15, col:16> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa666754 <col:16> '_II2' lvalue ParmVar 0xa6656c0 '__first2' '_II2'))
          (UnaryOperator 0xa6667a0 <col:26, col:27> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa666784 <col:27> '_II1' lvalue ParmVar 0xa665640 '__first1' '_II1')))
        (ReturnStmt 0xa6667f0 <line:1127:6, col:13>
          (CXXBoolLiteralExpr 0xa6667e0 <col:13> '_Bool' false))
        <<<NULL>>>)))
  (ReturnStmt 0xa6669a8 <line:1129:7, col:49>
    (BinaryOperator 0xa666990 <col:14, col:49> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa6668d0 <col:14, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa666890 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0)
        (DeclRefExpr 0xa66685c <col:14> '_II1' lvalue ParmVar 0xa665640 '__first1' '_II1')
        (DeclRefExpr 0xa666874 <col:26> '_II1' lvalue ParmVar 0xa665680 '__last1' '_II1'))
      (CXXOperatorCallExpr 0xa666968 <col:37, col:49> '<dependent type>'
        (UnresolvedLookupExpr 0xa666928 <col:46, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
        (DeclRefExpr 0xa6668f4 <col:37> '_II2' lvalue ParmVar 0xa6656c0 '__first2' '_II2')
        (DeclRefExpr 0xa66690c <col:49> '_II2' lvalue ParmVar 0xa665700 '__last2' '_II2')))))

;
    template <typename _InputIterator1, typename _InputIterator2> pair<_InputIterator1, _InputIterator2> mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2) (CompoundStmt 0xa6670f8 </usr/include/c++/4.6/bits/stl_algobase.h:1149:5, line:1164:5>
  (NullStmt 0xa666d78 <line:1156:56>)
  (WhileStmt 0xa666f78 <line:1158:7, line:1162:9>
    <<<NULL>>>
    (BinaryOperator 0xa666ee8 <line:1158:14, col:51> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa666df8 <col:14, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa666db8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
        (DeclRefExpr 0xa666d84 <col:14> '_InputIterator1' lvalue ParmVar 0xa666b80 '__first1' '_InputIterator1')
        (DeclRefExpr 0xa666d9c <col:26> '_InputIterator1' lvalue ParmVar 0xa666bc0 '__last1' '_InputIterator1'))
      (CXXOperatorCallExpr 0xa666ec0 <col:37, col:51> '<dependent type>'
        (UnresolvedLookupExpr 0xa666e80 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0)
        (UnaryOperator 0xa666e38 <col:37, col:38> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa666e1c <col:38> '_InputIterator1' lvalue ParmVar 0xa666b80 '__first1' '_InputIterator1'))
        (UnaryOperator 0xa666e68 <col:50, col:51> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa666e4c <col:51> '_InputIterator2' lvalue ParmVar 0xa666c00 '__first2' '_InputIterator2'))))
    (CompoundStmt 0xa666f60 <line:1159:9, line:1162:9>
      (UnaryOperator 0xa666f18 <line:1160:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa666f00 <col:6> '_InputIterator1' lvalue ParmVar 0xa666b80 '__first1' '_InputIterator1'))
      (UnaryOperator 0xa666f48 <line:1161:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa666f2c <col:6> '_InputIterator2' lvalue ParmVar 0xa666c00 '__first2' '_InputIterator2'))))
  (ReturnStmt 0xa6670e8 <line:1163:7, col:71>
    (CXXUnresolvedConstructExpr 0xa6670c8 <col:14, col:71> 'pair<_InputIterator1, _InputIterator2>'
      (DeclRefExpr 0xa667098 <col:53> '_InputIterator1' lvalue ParmVar 0xa666b80 '__first1' '_InputIterator1')
      (DeclRefExpr 0xa6670b0 <col:63> '_InputIterator2' lvalue ParmVar 0xa666c00 '__first2' '_InputIterator2'))))

;
    template <typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate> pair<_InputIterator1, _InputIterator2> mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred) (CompoundStmt 0xa6678c8 </usr/include/c++/4.6/bits/stl_algobase.h:1187:5, line:1199:5>
  (NullStmt 0xa667548 <line:1191:56>)
  (WhileStmt 0xa667748 <line:1193:7, line:1197:9>
    <<<NULL>>>
    (BinaryOperator 0xa6676b8 <line:1193:14, col:77> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa6675c8 <col:14, col:26> '<dependent type>'
        (UnresolvedLookupExpr 0xa667588 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0)
        (DeclRefExpr 0xa667554 <col:14> '_InputIterator1' lvalue ParmVar 0xa667300 '__first1' '_InputIterator1')
        (DeclRefExpr 0xa66756c <col:26> '_InputIterator1' lvalue ParmVar 0xa667340 '__last1' '_InputIterator1'))
      (CXXUnresolvedConstructExpr 0xa667698 <col:37, col:77> '_Bool'
        (CallExpr 0xa667670 <col:42, col:76> '<dependent type>'
          (DeclRefExpr 0xa6675f8 <col:42> '_BinaryPredicate' lvalue ParmVar 0xa6673c0 '__binary_pred' '_BinaryPredicate')
          (UnaryOperator 0xa667628 <col:56, col:57> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa667610 <col:57> '_InputIterator1' lvalue ParmVar 0xa667300 '__first1' '_InputIterator1'))
          (UnaryOperator 0xa667658 <col:67, col:68> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa66763c <col:68> '_InputIterator2' lvalue ParmVar 0xa667380 '__first2' '_InputIterator2')))))
    (CompoundStmt 0xa667730 <line:1194:9, line:1197:9>
      (UnaryOperator 0xa6676e8 <line:1195:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6676d0 <col:6> '_InputIterator1' lvalue ParmVar 0xa667300 '__first1' '_InputIterator1'))
      (UnaryOperator 0xa667718 <line:1196:4, col:6> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6676fc <col:6> '_InputIterator2' lvalue ParmVar 0xa667380 '__first2' '_InputIterator2'))))
  (ReturnStmt 0xa6678b8 <line:1198:7, col:71>
    (CXXUnresolvedConstructExpr 0xa667898 <col:14, col:71> 'pair<_InputIterator1, _InputIterator2>'
      (DeclRefExpr 0xa667868 <col:53> '_InputIterator1' lvalue ParmVar 0xa667300 '__first1' '_InputIterator1')
      (DeclRefExpr 0xa667880 <col:63> '_InputIterator2' lvalue ParmVar 0xa667380 '__first2' '_InputIterator2'))))

;
}
extern void *__builtin_memmove(void *, const void *, unsigned int);
extern void *__builtin_memset(void *, int, unsigned int);
extern int __builtin_memcmp(const void *, const void *, unsigned int);
extern int __builtin_clz(unsigned int);
extern int __builtin_clzl(unsigned long);
extern int __builtin_clzll(unsigned long long);
extern "C++" {
    namespace std {
        class exception {
            class exception;
        public:
        public:
            exception() throw() (CompoundStmt 0xa667df0 </usr/include/c++/4.6/exception:63:25, col:27>)


            virtual void ~exception() throw();
            virtual const char *what() const throw();
            inline std::exception &operator=(const std::exception &) throw();
            inline exception(const std::exception &) throw();
        };
        class bad_exception : public std::exception {
            class bad_exception;
        public:
        public:
            bad_exception() throw() : std::exception() (CompoundStmt 0xa66f6d0 </usr/include/c++/4.6/exception:76:29, col:31>)


            virtual void ~bad_exception() throw();
            virtual const char *what() const throw();
            inline std::bad_exception &operator=(const std::bad_exception &) throw();
        };
        typedef void (*terminate_handler)();
        typedef void (*unexpected_handler)();
        terminate_handler set_terminate(terminate_handler) throw();
        void terminate() throw();
        unexpected_handler set_unexpected(unexpected_handler) throw();
        void unexpected();
        bool uncaught_exception() throw();
    }
    namespace __gnu_cxx {
        void __verbose_terminate_handler();
    }
}
extern "C++" {
    namespace std {
        class bad_alloc : public std::exception {
            class bad_alloc;
        public:
        public:
            bad_alloc() throw() : std::exception() (CompoundStmt 0xa6701e0 </usr/include/c++/4.6/new:58:25, col:27>)


            virtual void ~bad_alloc() throw();
            virtual const char *what() const throw();
            inline std::bad_alloc &operator=(const std::bad_alloc &) throw();
        };
        struct nothrow_t {
            struct nothrow_t;
            inline nothrow_t() throw();
            inline nothrow_t(const std::nothrow_t &) throw();
        };
        extern const std::nothrow_t nothrow;
        typedef void (*new_handler)();
        new_handler set_new_handler(new_handler) throw();
    }
    void *operator new(std::size_t) throw(std::bad_alloc);
    void *operator new[](std::size_t) throw(std::bad_alloc);
    void operator delete(void *) throw();
    void operator delete[](void *) throw();
    void *operator new(std::size_t, const std::nothrow_t &) throw();
    void *operator new[](std::size_t, const std::nothrow_t &) throw();
    void operator delete(void *, const std::nothrow_t &) throw();
    void operator delete[](void *, const std::nothrow_t &) throw();
    inline void *operator new(std::size_t, void *__p) throw() (CompoundStmt 0xa671b18 </usr/include/c++/4.6/new:102:59, col:73>
  (ReturnStmt 0xa671b08 <col:61, col:68>
    (ImplicitCastExpr 0xa671af8 <col:68> 'void *' <LValueToRValue>
      (DeclRefExpr 0xa671adc <col:68> 'void *' lvalue ParmVar 0xa671990 '__p' 'void *'))))


    inline void *operator new[](std::size_t, void *__p) throw() (CompoundStmt 0xa671cf8 </usr/include/c++/4.6/new:103:61, col:75>
  (ReturnStmt 0xa671ce8 <col:63, col:70>
    (ImplicitCastExpr 0xa671cd8 <col:70> 'void *' <LValueToRValue>
      (DeclRefExpr 0xa671cbc <col:70> 'void *' lvalue ParmVar 0xa671bb0 '__p' 'void *'))))


    inline void operator delete(void *, void *) throw() (CompoundStmt 0xa671ec0 </usr/include/c++/4.6/new:106:54, col:56>)


    inline void operator delete[](void *, void *) throw() (CompoundStmt 0xa672040 </usr/include/c++/4.6/new:107:54, col:56>)


}
namespace __gnu_cxx {
    using std::size_t;
    ;
    using std::ptrdiff_t;
    ;
    template <typename _Tp = wchar_t> class new_allocator {
        class new_allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef wchar_t *pointer;
        typedef const wchar_t *const_pointer;
        typedef wchar_t &reference;
        typedef const wchar_t &const_reference;
        typedef wchar_t value_type;
        template <typename _Tp1> struct rebind;
        new_allocator() throw();
        new_allocator(const __gnu_cxx::new_allocator<wchar_t> &) throw();
        template <typename _Tp1> new_allocator(const new_allocator<_Tp1> &) throw();
        void ~new_allocator() throw();
        pointer address(reference __x) const;
        const_pointer address(const_reference __x) const;
        pointer allocate(size_type __n, const void *);
        void deallocate(pointer __p, size_type);
        size_type max_size() const throw();
        void construct(pointer __p, const wchar_t &__val);
        void destroy(pointer __p);
    }
template <typename _Tp = std::basic_string<char>> class new_allocator {
        class new_allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::basic_string<char> *pointer;
        typedef const std::basic_string<char> *const_pointer;
        typedef std::basic_string<char> &reference;
        typedef const std::basic_string<char> &const_reference;
        typedef std::basic_string<char> value_type;
        template <typename _Tp1> struct rebind;
        new_allocator() throw() (CompoundStmt 0xa6737d0 </usr/include/c++/4.6/ext/new_allocator.h:69:31, col:33>)


        new_allocator(const __gnu_cxx::new_allocator<std::basic_string<char> > &) throw() (CompoundStmt 0xa6737e0 </usr/include/c++/4.6/ext/new_allocator.h:71:51, col:53>)


        template <typename _Tp1 = std::basic_string<char>> new_allocator(const new_allocator<std::basic_string<char> > &) throw()template <typename _Tp1> new_allocator(const new_allocator<_Tp1> &) throw();
        void ~new_allocator() throw() (CompoundStmt 0xa673800 </usr/include/c++/4.6/ext/new_allocator.h:76:32, col:34>)


        pointer address(reference __x) const;
        const_pointer address(const_reference __x) const;
        pointer allocate(size_type __n, const void *) (CompoundStmt 0xa9cae78 </usr/include/c++/4.6/ext/new_allocator.h:88:7, line:93:7>
  (IfStmt 0xa9cad90 <line:89:2, line:90:27>
    <<<NULL>>>
    (BinaryOperator 0xa9cad48 <line:89:6, col:27> '_Bool' '>'
      (ImplicitCastExpr 0xa9cad38 <col:6> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9cacc0 <col:6> 'size_type':'unsigned int' lvalue ParmVar 0xa957210 '__n' 'size_type':'unsigned int'))
      (CXXMemberCallExpr 0xa9cad08 <col:12, col:27> 'size_type':'unsigned int'
        (MemberExpr 0xa9cace8 <col:12, col:18> '<bound member function type>' ->max_size 0xa957540
          (ImplicitCastExpr 0xa9cad28 <col:12> 'const class __gnu_cxx::new_allocator<class std::basic_string<char> > *' <NoOp>
            (CXXThisExpr 0xa9cacd8 <col:12> 'class __gnu_cxx::new_allocator<class std::basic_string<char> > *' this)))))
    (CallExpr 0xa9cad70 <line:90:4, col:27> 'void'
      (ImplicitCastExpr 0xa9cad60 <col:4, col:9> 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa675860 <col:4, col:9> 'void (void) __attribute__((noreturn))' lvalue Function 0xa5c54a0 '__throw_bad_alloc' 'void (void) __attribute__((noreturn))')))
    <<<NULL>>>)
  (ReturnStmt 0xa9cae68 <line:92:2, col:60>
    (CXXStaticCastExpr 0xa9cae50 <col:9, col:60> 'class std::basic_string<char> *' static_cast<class std::basic_string<char> *> <BitCast>
      (CallExpr 0xa9cae30 <col:27, col:59> 'void *'
        (ImplicitCastExpr 0xa9cae20 <col:27, <invalid sloc>> 'void *(*)(std::size_t) throw(std::bad_alloc)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6759c0 <col:27, <invalid sloc>> 'void *(std::size_t) throw(std::bad_alloc)' lvalue Function 0xa6706a0 'operator new' 'void *(std::size_t) throw(std::bad_alloc)'))
        (BinaryOperator 0xa9cae08 <col:42, col:58> 'unsigned int' '*'
          (ImplicitCastExpr 0xa9cadf8 <col:42> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa9cadbc <col:42> 'size_type':'unsigned int' lvalue ParmVar 0xa957210 '__n' 'size_type':'unsigned int'))
          (UnaryExprOrTypeTraitExpr 0xa9cade0 <col:48, col:58> 'unsigned int' sizeof 'class std::basic_string<char>':'class std::basic_string<char>'))))))


        void deallocate(pointer __p, size_type) (CompoundStmt 0xa9ce778 </usr/include/c++/4.6/ext/new_allocator.h:98:7, col:33>
  (CallExpr 0xa9ce738 <col:9, col:30> 'void'
    (ImplicitCastExpr 0xa9ce728 <col:9, <invalid sloc>> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9ce704 <col:9, <invalid sloc>> 'void (void *) throw()' lvalue Function 0xa670910 'operator delete' 'void (void *) throw()'))
    (ImplicitCastExpr 0xa9ce768 <col:27> 'void *' <BitCast>
      (ImplicitCastExpr 0xa9ce758 <col:27> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ce6ec <col:27> 'pointer':'class std::basic_string<char> *' lvalue ParmVar 0xa9573f0 '__p' 'pointer':'class std::basic_string<char> *')))))


        size_type max_size() const throw() (CompoundStmt 0xa9ca418 </usr/include/c++/4.6/ext/new_allocator.h:102:7, col:42>
  (ReturnStmt 0xa9ca408 <col:9, col:39>
    (BinaryOperator 0xa9ca3f0 <col:16, col:39> 'unsigned int' '/'
      (CXXFunctionalCastExpr 0xa9ca1b8 <col:16, col:25> 'size_t':'unsigned int' functional cast to size_t <NoOp>
        (ImplicitCastExpr 0xa9ca1a8 <col:23, col:24> 'size_t':'unsigned int' <IntegralCast>
          (UnaryOperator 0xa675b60 <col:23, col:24> 'int' prefix '-'
            (IntegerLiteral 0xa675b48 <col:24> 'int' 1))))
      (UnaryExprOrTypeTraitExpr 0xa9ca1d8 <col:29, col:39> 'unsigned int' sizeof 'class std::basic_string<char>':'class std::basic_string<char>'))))


        void construct(pointer __p, const std::basic_string<char> &__val) (CompoundStmt 0xa9ab008 </usr/include/c++/4.6/ext/new_allocator.h:108:7, col:40>
  (CXXNewExpr 0xa9aafc8 <col:9, col:37> 'class std::basic_string<char> *'
    (CStyleCastExpr 0xa9aae10 <col:15, col:23> 'void *' <NoOp>
      (ImplicitCastExpr 0xa9aae00 <col:23> 'void *' <BitCast>
        (ImplicitCastExpr 0xa9aadf0 <col:23> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9aadd8 <col:23> 'pointer':'class std::basic_string<char> *' lvalue ParmVar 0xa957640 '__p' 'pointer':'class std::basic_string<char> *'))))
    (DeclRefExpr 0xa9aae28 <col:32> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ParmVar 0xa957690 '__val' 'const class std::basic_string<char> &')))


        void destroy(pointer __p) (CompoundStmt 0xa9ce350 </usr/include/c++/4.6/ext/new_allocator.h:118:28, col:43>
  (CXXMemberCallExpr 0xa9ce330 <col:30, col:40> 'void'
    (MemberExpr 0xa9ce30c <col:30, col:36> '<bound member function type>' ->~basic_string 0xa840f80
      (ImplicitCastExpr 0xa9ce300 <col:30> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ce2dc <col:30> 'pointer':'class std::basic_string<char> *' lvalue ParmVar 0xa957830 '__p' 'pointer':'class std::basic_string<char> *')))))


    }
template <typename _Tp = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class new_allocator {
        class new_allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *pointer;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *const_pointer;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &reference;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &const_reference;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > value_type;
        template <typename _Tp1> struct rebind;
        new_allocator() throw() (CompoundStmt 0xa6737d0 </usr/include/c++/4.6/ext/new_allocator.h:69:31, col:33>)


        new_allocator(const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw();
        template <typename _Tp1> new_allocator(const new_allocator<_Tp1> &) throw();
        void ~new_allocator() throw() (CompoundStmt 0xa673800 </usr/include/c++/4.6/ext/new_allocator.h:76:32, col:34>)


        pointer address(reference __x) const;
        const_pointer address(const_reference __x) const;
        pointer allocate(size_type __n, const void *) (CompoundStmt 0xaa38d68 </usr/include/c++/4.6/ext/new_allocator.h:88:7, line:93:7>
  (IfStmt 0xaa38c80 <line:89:2, line:90:27>
    <<<NULL>>>
    (BinaryOperator 0xaa38c38 <line:89:6, col:27> '_Bool' '>'
      (ImplicitCastExpr 0xaa38c28 <col:6> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xaa38b90 <col:6> 'size_type':'unsigned int' lvalue ParmVar 0xa9b7cd0 '__n' 'size_type':'unsigned int'))
      (CXXMemberCallExpr 0xaa38bd8 <col:12, col:27> 'size_type':'unsigned int'
        (MemberExpr 0xaa38bb8 <col:12, col:18> '<bound member function type>' ->max_size 0xa9b8000
          (ImplicitCastExpr 0xaa38c18 <col:12> 'const class __gnu_cxx::new_allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' <NoOp>
            (CXXThisExpr 0xaa38ba8 <col:12> 'class __gnu_cxx::new_allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
    (CallExpr 0xaa38c60 <line:90:4, col:27> 'void'
      (ImplicitCastExpr 0xaa38c50 <col:4, col:9> 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa675860 <col:4, col:9> 'void (void) __attribute__((noreturn))' lvalue Function 0xa5c54a0 '__throw_bad_alloc' 'void (void) __attribute__((noreturn))')))
    <<<NULL>>>)
  (ReturnStmt 0xaa38d58 <line:92:2, col:60>
    (CXXStaticCastExpr 0xaa38d40 <col:9, col:60> 'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *> <BitCast>
      (CallExpr 0xaa38d20 <col:27, col:59> 'void *'
        (ImplicitCastExpr 0xaa38d10 <col:27, <invalid sloc>> 'void *(*)(std::size_t) throw(std::bad_alloc)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6759c0 <col:27, <invalid sloc>> 'void *(std::size_t) throw(std::bad_alloc)' lvalue Function 0xa6706a0 'operator new' 'void *(std::size_t) throw(std::bad_alloc)'))
        (BinaryOperator 0xaa38cf8 <col:42, col:58> 'unsigned int' '*'
          (ImplicitCastExpr 0xaa38ce8 <col:42> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xaa38cac <col:42> 'size_type':'unsigned int' lvalue ParmVar 0xa9b7cd0 '__n' 'size_type':'unsigned int'))
          (UnaryExprOrTypeTraitExpr 0xaa38cd0 <col:48, col:58> 'unsigned int' sizeof 'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))))


        void deallocate(pointer __p, size_type) (CompoundStmt 0xa9df568 </usr/include/c++/4.6/ext/new_allocator.h:98:7, col:33>
  (CallExpr 0xa9df528 <col:9, col:30> 'void'
    (ImplicitCastExpr 0xa9df518 <col:9, <invalid sloc>> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9df4f4 <col:9, <invalid sloc>> 'void (void *) throw()' lvalue Function 0xa670910 'operator delete' 'void (void *) throw()'))
    (ImplicitCastExpr 0xa9df558 <col:27> 'void *' <BitCast>
      (ImplicitCastExpr 0xa9df548 <col:27> 'pointer':'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
        (DeclRefExpr 0xa9df4dc <col:27> 'pointer':'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9b7eb0 '__p' 'pointer':'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))


        size_type max_size() const throw() (CompoundStmt 0xaa39238 </usr/include/c++/4.6/ext/new_allocator.h:102:7, col:42>
  (ReturnStmt 0xaa39228 <col:9, col:39>
    (BinaryOperator 0xaa39210 <col:16, col:39> 'unsigned int' '/'
      (CXXFunctionalCastExpr 0xaa38d90 <col:16, col:25> 'size_t':'unsigned int' functional cast to size_t <NoOp>
        (ImplicitCastExpr 0xaa38d80 <col:23, col:24> 'size_t':'unsigned int' <IntegralCast>
          (UnaryOperator 0xa675b60 <col:23, col:24> 'int' prefix '-'
            (IntegerLiteral 0xa675b48 <col:24> 'int' 1))))
      (UnaryExprOrTypeTraitExpr 0xaa38db0 <col:29, col:39> 'unsigned int' sizeof 'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))


        void construct(pointer __p, const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &__val);
        void destroy(pointer __p);
    }
template <typename _Tp = char> class new_allocator {
        class new_allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef char *pointer;
        typedef const char *const_pointer;
        typedef char &reference;
        typedef const char &const_reference;
        typedef char value_type;
        template <typename _Tp1> struct rebind;
        new_allocator() throw() (CompoundStmt 0xa6737d0 </usr/include/c++/4.6/ext/new_allocator.h:69:31, col:33>)


        new_allocator(const __gnu_cxx::new_allocator<char> &) throw() (CompoundStmt 0xa6737e0 </usr/include/c++/4.6/ext/new_allocator.h:71:51, col:53>)


        template <typename _Tp1 = char> new_allocator(const new_allocator<char> &) throw()template <typename _Tp1> new_allocator(const new_allocator<_Tp1> &) throw();
        void ~new_allocator() throw() (CompoundStmt 0xa673800 </usr/include/c++/4.6/ext/new_allocator.h:76:32, col:34>)


        pointer address(reference __x) const;
        const_pointer address(const_reference __x) const;
        pointer allocate(size_type __n, const void *);
        void deallocate(pointer __p, size_type);
        size_type max_size() const throw();
        void construct(pointer __p, const char &__val);
        void destroy(pointer __p);
    }
template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class new_allocator {
        class new_allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *const_pointer;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &const_reference;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        template <typename _Tp1> struct rebind;
        new_allocator() throw() (CompoundStmt 0xa6737d0 </usr/include/c++/4.6/ext/new_allocator.h:69:31, col:33>)


        new_allocator(const __gnu_cxx::new_allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw() (CompoundStmt 0xa6737e0 </usr/include/c++/4.6/ext/new_allocator.h:71:51, col:53>)


        template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> new_allocator(const new_allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw()template <typename _Tp1> new_allocator(const new_allocator<_Tp1> &) throw();
        void ~new_allocator() throw() (CompoundStmt 0xa673800 </usr/include/c++/4.6/ext/new_allocator.h:76:32, col:34>)


        pointer address(reference __x) const;
        const_pointer address(const_reference __x) const;
        pointer allocate(size_type __n, const void *);
        void deallocate(pointer __p, size_type);
        size_type max_size() const throw();
        void construct(pointer __p, const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__val) (CompoundStmt 0xaa39478 </usr/include/c++/4.6/ext/new_allocator.h:108:7, col:40>
  (CXXNewExpr 0xaa39438 <col:9, col:37> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'
    (CStyleCastExpr 0xaa39290 <col:15, col:23> 'void *' <NoOp>
      (ImplicitCastExpr 0xaa39280 <col:23> 'void *' <BitCast>
        (ImplicitCastExpr 0xaa39270 <col:23> 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' <LValueToRValue>
          (DeclRefExpr 0xaa39258 <col:23> 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' lvalue ParmVar 0xa9c14a0 '__p' 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'))))
    (DeclRefExpr 0xaa392a8 <col:32> 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9c14f0 '__val' 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &')))


        void destroy(pointer __p) (CompoundStmt 0xa9def60 </usr/include/c++/4.6/ext/new_allocator.h:118:28, col:43>
  (CXXMemberCallExpr 0xa9def40 <col:30, col:40> 'void'
    (MemberExpr 0xa9def20 <col:30, col:36> '<bound member function type>' ->~pair 0xa9dee90
      (ImplicitCastExpr 0xa9dee80 <col:30> 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' <LValueToRValue>
        (DeclRefExpr 0xa9dee4c <col:30> 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *' lvalue ParmVar 0xa9c1690 '__p' 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *')))))


    }
template <typename _Tp> class new_allocator {
        class new_allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef _Tp *pointer;
        typedef const _Tp *const_pointer;
        typedef _Tp &reference;
        typedef const _Tp &const_reference;
        typedef _Tp value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef new_allocator<_Tp1> other;
        };
        new_allocator<_Tp>() throw() (CompoundStmt 0xa6737d0 </usr/include/c++/4.6/ext/new_allocator.h:69:31, col:33>)


        new_allocator<_Tp>(const new_allocator<_Tp> &) throw() (CompoundStmt 0xa6737e0 </usr/include/c++/4.6/ext/new_allocator.h:71:51, col:53>)


        template <typename _Tp1> new_allocator<_Tp>(const new_allocator<_Tp1> &) throw() (CompoundStmt 0xa6737f0 </usr/include/c++/4.6/ext/new_allocator.h:74:59, col:61>)

;
        void ~new_allocator<_Tp>() throw() (CompoundStmt 0xa673800 </usr/include/c++/4.6/ext/new_allocator.h:76:32, col:34>)


        pointer address(reference __x) const (CompoundStmt 0xa6738a8 </usr/include/c++/4.6/ext/new_allocator.h:79:36, col:68>
  (ReturnStmt 0xa673898 <col:38, col:65>
    (CallExpr 0xa673878 <col:45, col:65> '<dependent type>'
      (UnresolvedLookupExpr 0xa673828 <col:45, col:50> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (DeclRefExpr 0xa67385c <col:62> '_Tp' lvalue ParmVar 0xa672f60 '__x' 'reference':'_Tp &'))))


        const_pointer address(const_reference __x) const (CompoundStmt 0xa675730 </usr/include/c++/4.6/ext/new_allocator.h:82:42, col:74>
  (ReturnStmt 0xa675720 <col:44, col:71>
    (CallExpr 0xa675700 <col:51, col:71> '<dependent type>'
      (UnresolvedLookupExpr 0xa6756b0 <col:51, col:56> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (DeclRefExpr 0xa6756e4 <col:68> 'const _Tp' lvalue ParmVar 0xa6730a0 '__x' 'const_reference':'const _Tp &'))))


        pointer allocate(size_type __n, const void * = (ImplicitCastExpr 0xa6737c0 </usr/include/c++/4.6/ext/new_allocator.h:87:45> 'const void *' <NullToPointer>
  (IntegerLiteral 0xa6737a8 <col:45> 'int' 0))
) (CompoundStmt 0xa675a80 </usr/include/c++/4.6/ext/new_allocator.h:88:7, line:93:7>
  (IfStmt 0xa6758c8 <line:89:2, line:90:27>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa675818 <line:89:6, col:27> '<dependent type>'
      (UnresolvedLookupExpr 0xa6757e0 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6360b0 0xa5e81e0)
      (DeclRefExpr 0xa675744 <col:6> 'size_type':'unsigned int' lvalue ParmVar 0xa6731d0 '__n' 'size_type':'unsigned int')
      (CallExpr 0xa6757c0 <col:12, col:27> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa675788 <col:12, col:18> '<dependent type>' lvalue
          (CXXThisExpr 0xa675778 <col:12> 'new_allocator<_Tp> *' this))))
    (CallExpr 0xa6758a8 <line:90:4, col:27> 'void'
      (ImplicitCastExpr 0xa675898 <col:4, col:9> 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa675860 <col:4, col:9> 'void (void) __attribute__((noreturn))' lvalue Function 0xa5c54a0 '__throw_bad_alloc' 'void (void) __attribute__((noreturn))')))
    <<<NULL>>>)
  (ReturnStmt 0xa675a70 <line:92:2, col:60>
    (CXXStaticCastExpr 0xa675a58 <col:9, col:60> '_Tp *' static_cast<_Tp *> <Dependent>
      (CallExpr 0xa675a28 <col:27, col:59> 'void *'
        (ImplicitCastExpr 0xa675a18 <col:27, <invalid sloc>> 'void *(*)(std::size_t) throw(std::bad_alloc)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6759c0 <col:27, <invalid sloc>> 'void *(std::size_t) throw(std::bad_alloc)' lvalue Function 0xa6706a0 'operator new' 'void *(std::size_t) throw(std::bad_alloc)'))
        (BinaryOperator 0xa6759a8 <col:42, col:58> 'unsigned int' '*'
          (ImplicitCastExpr 0xa675998 <col:42> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa67595c <col:42> 'size_type':'unsigned int' lvalue ParmVar 0xa6731d0 '__n' 'size_type':'unsigned int'))
          (UnaryExprOrTypeTraitExpr 0xa675980 <col:48, col:58> 'unsigned int' sizeof '_Tp'))))))


        void deallocate(pointer __p, size_type) (CompoundStmt 0xa675b28 </usr/include/c++/4.6/ext/new_allocator.h:98:7, col:33>
  (CallExpr 0xa675b08 <col:9, col:30> '<dependent type>'
    (UnresolvedLookupExpr 0xa675ab0 <col:9, col:20> '<overloaded function type>' lvalue (no ADL) = '1' 0xa670910 0xa670fe0 0xa671e10)
    (DeclRefExpr 0xa675aec <col:27> 'pointer':'_Tp *' lvalue ParmVar 0xa673330 '__p' 'pointer':'_Tp *')))


        size_type max_size() const throw() (CompoundStmt 0xa675be8 </usr/include/c++/4.6/ext/new_allocator.h:102:7, col:42>
  (ReturnStmt 0xa675bd8 <col:9, col:39>
    (BinaryOperator 0xa675bc0 <col:16, col:39> 'unsigned int' '/'
      (CXXFunctionalCastExpr 0xa675b88 <col:16, col:25> 'size_t':'unsigned int' functional cast to size_t <NoOp>
        (ImplicitCastExpr 0xa675b78 <col:23, col:24> 'size_t':'unsigned int' <IntegralCast>
          (UnaryOperator 0xa675b60 <col:23, col:24> 'int' prefix '-'
            (IntegerLiteral 0xa675b48 <col:24> 'int' 1))))
      (UnaryExprOrTypeTraitExpr 0xa675ba8 <col:29, col:39> 'unsigned int' sizeof '_Tp'))))


        void construct(pointer __p, const _Tp &__val) (CompoundStmt 0xa675ca0 </usr/include/c++/4.6/ext/new_allocator.h:108:7, col:40>
  (CXXNewExpr 0xa675c60 <col:9, col:37> '_Tp *'
    (CStyleCastExpr 0xa675c28 <col:15, col:23> 'void *' <Dependent>
      (DeclRefExpr 0xa675bfc <col:23> 'pointer':'_Tp *' lvalue ParmVar 0xa673540 '__p' 'pointer':'_Tp *'))
    (DeclRefExpr 0xa675c40 <col:32> 'const _Tp' lvalue ParmVar 0xa673590 '__val' 'const _Tp &')))


        void destroy(pointer __p) (CompoundStmt 0xa675d28 </usr/include/c++/4.6/ext/new_allocator.h:118:28, col:43>
  (CallExpr 0xa675d08 <col:30, col:40> 'void'
    (CXXPseudoDestructorExpr 0xa675cd8 <col:30, col:36> 'void (*)(void)'
      (DeclRefExpr 0xa675cb4 <col:30> 'pointer':'_Tp *' lvalue ParmVar 0xa6736a0 '__p' 'pointer':'_Tp *'))))


    };
    template <typename _Tp> inline bool operator==(const new_allocator<_Tp> &, const new_allocator<_Tp> &) (CompoundStmt 0xa6760d0 </usr/include/c++/4.6/ext/new_allocator.h:124:5, col:20>
  (ReturnStmt 0xa6760c0 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa6760b0 <col:14> '_Bool' true)))

;
    template <typename _Tp> inline bool operator!=(const new_allocator<_Tp> &, const new_allocator<_Tp> &) (CompoundStmt 0xa676440 </usr/include/c++/4.6/ext/new_allocator.h:129:5, col:21>
  (ReturnStmt 0xa676430 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa676420 <col:14> '_Bool' false)))

;
}
namespace std {
    template <typename _Tp = wchar_t> class allocator : public __gnu_cxx::new_allocator<wchar_t> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef wchar_t *pointer;
        typedef const wchar_t *const_pointer;
        typedef wchar_t &reference;
        typedef const wchar_t &const_reference;
        typedef wchar_t value_type;
        template <typename _Tp1 = wchar_t> struct rebind {
            struct rebind;
            typedef allocator<wchar_t> other;
        }
template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<wchar_t> &__a) throw();
        template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw();
    }
template <typename _Tp = std::basic_string<char>> class allocator : public __gnu_cxx::new_allocator<basic_string<char> > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::basic_string<char> *pointer;
        typedef const std::basic_string<char> *const_pointer;
        typedef std::basic_string<char> &reference;
        typedef const std::basic_string<char> &const_reference;
        typedef std::basic_string<char> value_type;
        template <typename _Tp1 = std::basic_string<char>> struct rebind {
            struct rebind;
            typedef allocator<std::basic_string<char> > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<basic_string<char> >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::basic_string<char> > &__a) throw() : __gnu_cxx::new_allocator<basic_string<char> >((ImplicitCastExpr 0xa9eb6b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9eb408 <col:39> 'const class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa957fa0 '__a' 'const class std::allocator<class std::basic_string<char> > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::basic_string<char>> allocator(const allocator<std::basic_string<char> > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class allocator : public __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *pointer;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *const_pointer;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &reference;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &const_reference;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > value_type;
        template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__a) throw();
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = void> class allocator {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef void *pointer;
        typedef const void *const_pointer;
        typedef void value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef allocator<_Tp1> other;
        };
    }
template <typename _Tp = char> class allocator : public __gnu_cxx::new_allocator<char> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef char *pointer;
        typedef const char *const_pointer;
        typedef char &reference;
        typedef const char &const_reference;
        typedef char value_type;
        template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<char>() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<char> &__a) throw() : __gnu_cxx::new_allocator<char>((ImplicitCastExpr 0xa9d03b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<char>' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9d0104 <col:39> 'const class std::allocator<char>' lvalue ParmVar 0xa67ca40 '__a' 'const class std::allocator<char> &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = char> allocator(const allocator<char> &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class allocator : public __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *const_pointer;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &const_reference;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> struct rebind {
            struct rebind;
            typedef allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > other;
        }
template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct rebind {
            struct rebind;
            typedef allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &__a) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >((ImplicitCastExpr 0xa9dedf0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9deb4c <col:39> 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9c1e00 '__a' 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >() (CompoundStmt 0xa678290 </usr/include/c++/4.6/bits/allocator.h:113:51, col:53>)

template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> allocator(const allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp> class allocator;
    class allocator {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef void *pointer;
        typedef const void *const_pointer;
        typedef void value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef allocator<_Tp1> other;
        };
    };
    template <typename _Tp = wchar_t> class allocator : public __gnu_cxx::new_allocator<wchar_t> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef wchar_t *pointer;
        typedef const wchar_t *const_pointer;
        typedef wchar_t &reference;
        typedef const wchar_t &const_reference;
        typedef wchar_t value_type;
        template <typename _Tp1 = wchar_t> struct rebind {
            struct rebind;
            typedef allocator<wchar_t> other;
        }
template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<wchar_t> &__a) throw();
        template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw();
    }
template <typename _Tp = std::basic_string<char>> class allocator : public __gnu_cxx::new_allocator<basic_string<char> > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::basic_string<char> *pointer;
        typedef const std::basic_string<char> *const_pointer;
        typedef std::basic_string<char> &reference;
        typedef const std::basic_string<char> &const_reference;
        typedef std::basic_string<char> value_type;
        template <typename _Tp1 = std::basic_string<char>> struct rebind {
            struct rebind;
            typedef allocator<std::basic_string<char> > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<basic_string<char> >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::basic_string<char> > &__a) throw() : __gnu_cxx::new_allocator<basic_string<char> >((ImplicitCastExpr 0xa9eb6b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9eb408 <col:39> 'const class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa957fa0 '__a' 'const class std::allocator<class std::basic_string<char> > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::basic_string<char>> allocator(const allocator<std::basic_string<char> > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class allocator : public __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *pointer;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *const_pointer;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &reference;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &const_reference;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > value_type;
        template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__a) throw();
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = void> class allocator {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef void *pointer;
        typedef const void *const_pointer;
        typedef void value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef allocator<_Tp1> other;
        };
    }
template <typename _Tp = char> class allocator : public __gnu_cxx::new_allocator<char> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef char *pointer;
        typedef const char *const_pointer;
        typedef char &reference;
        typedef const char &const_reference;
        typedef char value_type;
        template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<char>() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<char> &__a) throw() : __gnu_cxx::new_allocator<char>((ImplicitCastExpr 0xa9d03b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<char>' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9d0104 <col:39> 'const class std::allocator<char>' lvalue ParmVar 0xa67ca40 '__a' 'const class std::allocator<char> &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = char> allocator(const allocator<char> &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class allocator : public __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *const_pointer;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &const_reference;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> struct rebind {
            struct rebind;
            typedef allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > other;
        }
template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct rebind {
            struct rebind;
            typedef allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &__a) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >((ImplicitCastExpr 0xa9dedf0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9deb4c <col:39> 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9c1e00 '__a' 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >() (CompoundStmt 0xa678290 </usr/include/c++/4.6/bits/allocator.h:113:51, col:53>)

template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> allocator(const allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp> class allocator : public __gnu_cxx::new_allocator<_Tp> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef _Tp *pointer;
        typedef const _Tp *const_pointer;
        typedef _Tp &reference;
        typedef const _Tp &const_reference;
        typedef _Tp value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef allocator<_Tp1> other;
        };
        allocator<_Tp>() throw() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator<_Tp>(const allocator<_Tp> &__a) throw() : __gnu_cxx::new_allocator<_Tp>((DeclRefExpr 0xa678228 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const allocator<_Tp>' lvalue ParmVar 0xa677d40 '__a' 'const allocator<_Tp> &')
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1> allocator<_Tp>(const allocator<_Tp1> &) throw() (CompoundStmt 0xa678290 </usr/include/c++/4.6/bits/allocator.h:113:51, col:53>)

;
        void ~allocator<_Tp>() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    };
    template <typename _T1, typename _T2> inline bool operator==(const allocator<_T1> &, const allocator<_T2> &) (CompoundStmt 0xa6786f0 </usr/include/c++/4.6/bits/allocator.h:123:5, col:20>
  (ReturnStmt 0xa6786e0 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa6786d0 <col:14> '_Bool' true)))

;
    template <typename _Tp> inline bool operator==(const allocator<_Tp> &, const allocator<_Tp> &) (CompoundStmt 0xa678a80 </usr/include/c++/4.6/bits/allocator.h:128:5, col:20>
  (ReturnStmt 0xa678a70 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa678a60 <col:14> '_Bool' true)))

;
    template <typename _T1, typename _T2> inline bool operator!=(const allocator<_T1> &, const allocator<_T2> &) (CompoundStmt 0xa678e50 </usr/include/c++/4.6/bits/allocator.h:133:5, col:21>
  (ReturnStmt 0xa678e40 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa678e30 <col:14> '_Bool' false)))

;
    template <typename _Tp> inline bool operator!=(const allocator<_Tp> &, const allocator<_Tp> &) (CompoundStmt 0xa6791c0 </usr/include/c++/4.6/bits/allocator.h:138:5, col:21>
  (ReturnStmt 0xa6791b0 <col:7, col:14>
    (CXXBoolLiteralExpr 0xa6791a0 <col:14> '_Bool' false)))

;
    class allocator : public __gnu_cxx::new_allocator<char> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef char *pointer;
        typedef const char *const_pointer;
        typedef char &reference;
        typedef const char &const_reference;
        typedef char value_type;
        template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<char>() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<char> &__a) throw() : __gnu_cxx::new_allocator<char>((ImplicitCastExpr 0xa9d03b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<char>' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9d0104 <col:39> 'const class std::allocator<char>' lvalue ParmVar 0xa67ca40 '__a' 'const class std::allocator<char> &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = char> allocator(const allocator<char> &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    };
    class allocator : public __gnu_cxx::new_allocator<wchar_t> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef wchar_t *pointer;
        typedef const wchar_t *const_pointer;
        typedef wchar_t &reference;
        typedef const wchar_t &const_reference;
        typedef wchar_t value_type;
        template <typename _Tp1 = wchar_t> struct rebind {
            struct rebind;
            typedef allocator<wchar_t> other;
        }
template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<wchar_t> &__a) throw();
        template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw();
    };
    template <typename _Alloc, bool = (UnaryTypeTraitExpr 0xa680b30 </usr/include/c++/4.6/bits/allocator.h:151:36, col:53> '_Bool')
> struct __alloc_swap {
        struct __alloc_swap;
        static void _S_do_it(_Alloc &, _Alloc &) (CompoundStmt 0xa680f80 </usr/include/c++/4.6/bits/allocator.h:153:46, col:48>)


    };
    struct __alloc_swap {
        struct __alloc_swap;
        static void _S_do_it(_Alloc &__one, _Alloc &__two) (CompoundStmt 0xa6815f0 </usr/include/c++/4.6/bits/allocator.h:160:7, line:164:7>
  (IfStmt 0xa6815d0 <line:162:2, line:163:21>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa681518 <line:162:6, col:15> '<dependent type>'
      (UnresolvedLookupExpr 0xa6814d0 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa679170 0xa678e00 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa6814a0 <col:6> '_Alloc' lvalue ParmVar 0xa681350 '__one' '_Alloc &')
      (DeclRefExpr 0xa6814b8 <col:15> '_Alloc' lvalue ParmVar 0xa6813a0 '__two' '_Alloc &'))
    (CallExpr 0xa6815a8 <line:163:4, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa681540 <col:4> '<overloaded function type>' lvalue (ADL) = '1' 0xa606d80 0xa60ba70)
      (DeclRefExpr 0xa681578 <col:9> '_Alloc' lvalue ParmVar 0xa681350 '__one' '_Alloc &')
      (DeclRefExpr 0xa681590 <col:16> '_Alloc' lvalue ParmVar 0xa6813a0 '__two' '_Alloc &'))
    <<<NULL>>>))


    };
    template <typename _Alloc, bool = (UnaryTypeTraitExpr 0xa681660 </usr/include/c++/4.6/bits/allocator.h:168:36, col:53> '_Bool')
> struct __alloc_neq {
        struct __alloc_neq;
        static bool _S_do_it(const _Alloc &, const _Alloc &) (CompoundStmt 0xa681af0 </usr/include/c++/4.6/bits/allocator.h:173:7, col:23>
  (ReturnStmt 0xa681ae0 <col:9, col:16>
    (CXXBoolLiteralExpr 0xa681ad0 <col:16> '_Bool' false)))


    };
    struct __alloc_neq {
        struct __alloc_neq;
        static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) (CompoundStmt 0xa6820d0 </usr/include/c++/4.6/bits/allocator.h:181:7, col:32>
  (ReturnStmt 0xa6820c0 <col:9, col:25>
    (CXXOperatorCallExpr 0xa682098 <col:16, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa682050 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa679170 0xa678e00 0xa60e530 0xa625ab0 0xa6281f0)
      (DeclRefExpr 0xa682020 <col:16> 'const _Alloc' lvalue ParmVar 0xa681ed0 '__one' 'const _Alloc &')
      (DeclRefExpr 0xa682038 <col:25> 'const _Alloc' lvalue ParmVar 0xa681f20 '__two' 'const _Alloc &'))))


    };
}
namespace std {
    template <typename _T1 = std::basic_string<char>, typename _T2 = std::basic_string<char>> inline void _Construct(std::basic_string<char> *__p, const std::basic_string<char> &__value) (CompoundStmt 0xa9cd5c8 </usr/include/c++/4.6/bits/stl_construct.h:81:5, line:85:5>
  (CXXNewExpr 0xa9cd588 <line:84:7, col:49> 'class std::basic_string<char> *'
    (CXXStaticCastExpr 0xa9cd530 <col:13, col:35> 'void *' static_cast<void *> <NoOp>
      (ImplicitCastExpr 0xa9cd520 <col:32> 'void *' <BitCast>
        (ImplicitCastExpr 0xa9cd510 <col:32> 'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9cd4f8 <col:32> 'class std::basic_string<char> *' lvalue ParmVar 0xa9ccda0 '__p' 'class std::basic_string<char> *'))))
    (DeclRefExpr 0xa9cd548 <col:42> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ParmVar 0xa9cce30 '__value' 'const class std::basic_string<char> &')))

template <typename _T1, typename _T2> inline void _Construct(_T1 *__p, const _T2 &__value) (CompoundStmt 0xa6824c0 </usr/include/c++/4.6/bits/stl_construct.h:81:5, line:85:5>
  (CXXNewExpr 0xa682480 <line:84:7, col:49> '_T1 *'
    (CXXStaticCastExpr 0xa682448 <col:13, col:35> 'void *' static_cast<void *> <Dependent>
      (DeclRefExpr 0xa682420 <col:32> '_T1 *' lvalue ParmVar 0xa682280 '__p' '_T1 *'))
    (DeclRefExpr 0xa682460 <col:42> 'const _T2' lvalue ParmVar 0xa6822f0 '__value' 'const _T2 &')))

;
    template <typename _Tp = std::basic_string<char>> inline void _Destroy(std::basic_string<char> *__pointer) (CompoundStmt 0xa9ce2c8 </usr/include/c++/4.6/bits/stl_construct.h:94:5, col:26>
  (CXXMemberCallExpr 0xa9ce2a8 <col:7, col:23> 'void'
    (MemberExpr 0xa9ce284 <col:7, col:19> '<bound member function type>' ->~basic_string 0xa840f80
      (ImplicitCastExpr 0xa9ce278 <col:7> 'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ce254 <col:7> 'class std::basic_string<char> *' lvalue ParmVar 0xa9ce060 '__pointer' 'class std::basic_string<char> *')))))

template <typename _Tp> inline void _Destroy(_Tp *__pointer) (CompoundStmt 0xa684c10 </usr/include/c++/4.6/bits/stl_construct.h:94:5, col:26>
  (CallExpr 0xa684bf0 <col:7, col:23> 'void'
    (CXXPseudoDestructorExpr 0xa684bc0 <col:7, col:19> 'void (*)(void)'
      (DeclRefExpr 0xa684b9c <col:7> '_Tp *' lvalue ParmVar 0xa682570 '__pointer' '_Tp *'))))

;
    template <bool = false> struct _Destroy_aux {
        struct _Destroy_aux;
        template <typename _ForwardIterator = std::basic_string<char> *> static void __destroy(std::basic_string<char> *__first, std::basic_string<char> *__last) (CompoundStmt 0xa9ce240 </usr/include/c++/4.6/bits/stl_construct.h:102:2, line:105:2>
  (ForStmt 0xa9ce218 <line:103:4, line:104:46>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa9cde48 <line:103:11, col:22> '_Bool' '!='
      (ImplicitCastExpr 0xa9cde28 <col:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cddf4 <col:11> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cdb70 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9cde38 <col:22> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cde0c <col:22> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cdbb0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
    (UnaryOperator 0xa9cde78 <col:30, col:32> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '++'
      (DeclRefExpr 0xa9cde60 <col:32> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cdb70 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
    (CallExpr 0xa9ce1f8 <line:104:6, col:46> 'void'
      (ImplicitCastExpr 0xa9ce1e8 <col:6, col:11> 'void (*)(class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9ce188 <col:6, col:11> 'void (class std::basic_string<char> *)' lvalue Function 0xa9ce0e0 '_Destroy' 'void (class std::basic_string<char> *)' (FunctionTemplate 0xa684b70 '_Destroy')))
      (CallExpr 0xa9cdfa0 <col:20, col:45> 'class std::basic_string<char> *'
        (ImplicitCastExpr 0xa9cdf90 <col:20, col:25> 'class std::basic_string<char> *(*)(class std::basic_string<char> &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9cdf68 <col:20, col:25> 'class std::basic_string<char> *(class std::basic_string<char> &)' lvalue Function 0xa9ccb70 '__addressof' 'class std::basic_string<char> *(class std::basic_string<char> &)' (FunctionTemplate 0xa606990 '__addressof')))
        (UnaryOperator 0xa9cdf28 <col:37, col:38> 'class std::basic_string<char>' lvalue prefix '*'
          (ImplicitCastExpr 0xa9cdf18 <col:38> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9cdefc <col:38> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cdb70 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))))

template <typename _ForwardIterator> static void __destroy(_ForwardIterator __first, _ForwardIterator __last);
    }
template <bool = true> struct _Destroy_aux {
        struct _Destroy_aux;
        template <typename _ForwardIterator> static void __destroy(_ForwardIterator, _ForwardIterator) (CompoundStmt 0xa685690 </usr/include/c++/4.6/bits/stl_construct.h:113:55, col:57>)

;
    }
template <bool> struct _Destroy_aux {
        struct _Destroy_aux;
        template <typename _ForwardIterator> static void __destroy(_ForwardIterator __first, _ForwardIterator __last) (CompoundStmt 0xa685290 </usr/include/c++/4.6/bits/stl_construct.h:102:2, line:105:2>
  (ForStmt 0xa685268 <line:103:4, line:104:46>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6850e8 <line:103:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa6850a0 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
      (DeclRefExpr 0xa685070 <col:11> '_ForwardIterator' lvalue ParmVar 0xa684ef0 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa685088 <col:22> '_ForwardIterator' lvalue ParmVar 0xa684f30 '__last' '_ForwardIterator'))
    (UnaryOperator 0xa685128 <col:30, col:32> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa68510c <col:32> '_ForwardIterator' lvalue ParmVar 0xa684ef0 '__first' '_ForwardIterator'))
    (CallExpr 0xa685248 <line:104:6, col:46> '<dependent type>'
      (UnresolvedLookupExpr 0xa685170 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70)
      (CallExpr 0xa685228 <col:20, col:45> '<dependent type>'
        (UnresolvedLookupExpr 0xa6851c0 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
        (UnaryOperator 0xa685210 <col:37, col:38> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa6851f4 <col:38> '_ForwardIterator' lvalue ParmVar 0xa684ef0 '__first' '_ForwardIterator'))))))

;
    };
    struct _Destroy_aux {
        struct _Destroy_aux;
        template <typename _ForwardIterator> static void __destroy(_ForwardIterator, _ForwardIterator) (CompoundStmt 0xa685690 </usr/include/c++/4.6/bits/stl_construct.h:113:55, col:57>)

;
    };
    template <typename _ForwardIterator = std::basic_string<char> *> inline void _Destroy(std::basic_string<char> *__first, std::basic_string<char> *__last) (CompoundStmt 0xa9cdd70 </usr/include/c++/4.6/bits/stl_construct.h:124:5, line:129:5>
  (DeclStmt 0xa9cd6c0 <line:125:7, line:126:35>
    0xa9cd690 "typedef typename iterator_traits<class basic_string<char> *>::value_type _Value_type")
  (CallExpr 0xa9cdd28 <line:127:7, line:128:27> 'void'
    (ImplicitCastExpr 0xa9cdd18 <line:127:7, line:128:2> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9cdcd0 <line:127:7, line:128:2> 'void (class std::basic_string<char> *, class std::basic_string<char> *)' lvalue CXXMethod 0xa9cdc30 '__destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa9cda60 '__destroy')))
    (ImplicitCastExpr 0xa9cdd50 <col:12> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9cdae4 <col:12> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cd190 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
    (ImplicitCastExpr 0xa9cdd60 <col:21> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9cdafc <col:21> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cd1d0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))

template <typename _ForwardIterator> inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) (CompoundStmt 0xa685b38 </usr/include/c++/4.6/bits/stl_construct.h:124:5, line:129:5>
  (DeclStmt 0xa685970 <line:125:7, line:126:35>
    0xa685940 "typedef typename iterator_traits<_ForwardIterator>::value_type _Value_type")
  (CallExpr 0xa685b10 <line:127:7, line:128:27> '<dependent type>'
    (DependentScopeDeclRefExpr 0xa685ab8 <line:127:7, line:128:2> '<dependent type>' lvalue)
    (DeclRefExpr 0xa685adc <col:12> '_ForwardIterator' lvalue ParmVar 0xa685700 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa685af4 <col:21> '_ForwardIterator' lvalue ParmVar 0xa685740 '__last' '_ForwardIterator')))

;
    template <typename _Tp = wchar_t> class allocator : public __gnu_cxx::new_allocator<wchar_t> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef wchar_t *pointer;
        typedef const wchar_t *const_pointer;
        typedef wchar_t &reference;
        typedef const wchar_t &const_reference;
        typedef wchar_t value_type;
        template <typename _Tp1 = wchar_t> struct rebind {
            struct rebind;
            typedef allocator<wchar_t> other;
        }
template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<wchar_t> &__a) throw();
        template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw();
    }
template <typename _Tp = std::basic_string<char>> class allocator : public __gnu_cxx::new_allocator<basic_string<char> > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::basic_string<char> *pointer;
        typedef const std::basic_string<char> *const_pointer;
        typedef std::basic_string<char> &reference;
        typedef const std::basic_string<char> &const_reference;
        typedef std::basic_string<char> value_type;
        template <typename _Tp1 = std::basic_string<char>> struct rebind {
            struct rebind;
            typedef allocator<std::basic_string<char> > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<basic_string<char> >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::basic_string<char> > &__a) throw() : __gnu_cxx::new_allocator<basic_string<char> >((ImplicitCastExpr 0xa9eb6b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9eb408 <col:39> 'const class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa957fa0 '__a' 'const class std::allocator<class std::basic_string<char> > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::basic_string<char>> allocator(const allocator<std::basic_string<char> > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class allocator : public __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *pointer;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *const_pointer;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &reference;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &const_reference;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > value_type;
        template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__a) throw();
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = void> class allocator {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef void *pointer;
        typedef const void *const_pointer;
        typedef void value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef allocator<_Tp1> other;
        };
    }
template <typename _Tp = char> class allocator : public __gnu_cxx::new_allocator<char> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef char *pointer;
        typedef const char *const_pointer;
        typedef char &reference;
        typedef const char &const_reference;
        typedef char value_type;
        template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<char>() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<char> &__a) throw() : __gnu_cxx::new_allocator<char>((ImplicitCastExpr 0xa9d03b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<char>' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9d0104 <col:39> 'const class std::allocator<char>' lvalue ParmVar 0xa67ca40 '__a' 'const class std::allocator<char> &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = char> allocator(const allocator<char> &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class allocator : public __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *const_pointer;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &const_reference;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> struct rebind {
            struct rebind;
            typedef allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > other;
        }
template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct rebind {
            struct rebind;
            typedef allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &__a) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >((ImplicitCastExpr 0xa9dedf0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9deb4c <col:39> 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9c1e00 '__a' 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >() (CompoundStmt 0xa678290 </usr/include/c++/4.6/bits/allocator.h:113:51, col:53>)

template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> allocator(const allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Tp> class allocator;
    template <typename _ForwardIterator = std::basic_string<char> *, typename _Allocator = std::allocator<std::basic_string<char> >> void _Destroy(std::basic_string<char> *__first, std::basic_string<char> *__last, std::allocator<std::basic_string<char> > &__alloc)template <typename _ForwardIterator, typename _Allocator> void _Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &__alloc) (CompoundStmt 0xa686100 </usr/include/c++/4.6/bits/stl_construct.h:143:5, line:146:5>
  (ForStmt 0xa6860d8 <line:144:7, line:145:44>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa685f70 <line:144:14, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa685f28 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
      (DeclRefExpr 0xa685ef4 <col:14> '_ForwardIterator' lvalue ParmVar 0xa685cf0 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa685f0c <col:25> '_ForwardIterator' lvalue ParmVar 0xa685d30 '__last' '_ForwardIterator'))
    (UnaryOperator 0xa685fb0 <col:33, col:35> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa685f94 <col:35> '_ForwardIterator' lvalue ParmVar 0xa685cf0 '__first' '_ForwardIterator'))
    (CallExpr 0xa6860b8 <line:145:2, col:44> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa685fe0 <col:2, col:10> '<dependent type>' lvalue
        (DeclRefExpr 0xa685fc4 <col:2> '_Allocator' lvalue ParmVar 0xa685da0 '__alloc' '_Allocator &'))
      (CallExpr 0xa686098 <col:18, col:43> '<dependent type>'
        (UnresolvedLookupExpr 0xa686030 <col:18, col:23> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
        (UnaryOperator 0xa686080 <col:35, col:36> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa686064 <col:36> '_ForwardIterator' lvalue ParmVar 0xa685cf0 '__first' '_ForwardIterator'))))))

;
    template <typename _ForwardIterator = std::basic_string<char> *, typename _Tp = std::basic_string<char>> inline void _Destroy(std::basic_string<char> *__first, std::basic_string<char> *__last, allocator<std::basic_string<char> > &) (CompoundStmt 0xa9ce480 </usr/include/c++/4.6/bits/stl_construct.h:152:5, line:154:5>
  (CallExpr 0xa9ce438 <line:153:7, col:31> 'void'
    (ImplicitCastExpr 0xa9ce428 <col:7> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9ce408 <col:7> 'void (class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9cd270 '_Destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa685820 '_Destroy')))
    (ImplicitCastExpr 0xa9ce460 <col:16> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9ce3a8 <col:16> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ae930 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
    (ImplicitCastExpr 0xa9ce470 <col:25> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
      (DeclRefExpr 0xa9ce3c0 <col:25> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ae970 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))

template <typename _ForwardIterator, typename _Tp> inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp> &) (CompoundStmt 0xa686530 </usr/include/c++/4.6/bits/stl_construct.h:152:5, line:154:5>
  (CallExpr 0xa686508 <line:153:7, col:31> '<dependent type>'
    (UnresolvedLookupExpr 0xa686498 <col:7> '<overloaded function type>' lvalue (ADL) = '1' 0xa686460 0xa685ec0 0xa685820 0xa684b70)
    (DeclRefExpr 0xa6864d8 <col:16> '_ForwardIterator' lvalue ParmVar 0xa6861e0 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa6864f0 <col:25> '_ForwardIterator' lvalue ParmVar 0xa686220 '__last' '_ForwardIterator')))

;
}
namespace std {
    template <bool _TrivialValueTypes = false> struct __uninitialized_copy {
        struct __uninitialized_copy;
        template <typename _InputIterator = __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename _ForwardIterator = std::basic_string<char> *> static std::basic_string<char> *__uninit_copy(__gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __first, __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __last, std::basic_string<char> *__result) (CompoundStmt 0xa9edbb0 </usr/include/c++/4.6/bits/stl_uninitialized.h:72:9, line:85:2>
  (DeclStmt 0xa9ecd50 <line:73:4, col:37>
    0xa9eccf0 "std::basic_string<char> *__cur =
      (ImplicitCastExpr 0xa9ecd40 <col:29> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ecd24 <col:29> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ec700 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))")
  (IfStmt 0xa9eda38 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:79:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa688540 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa9eda20 </usr/include/c++/4.6/bits/stl_uninitialized.h:75:6, line:79:6>
      (ForStmt 0xa9ed9c0 <line:76:8, line:77:53>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa9ed598 <line:76:15, col:26> '_Bool'
          (ImplicitCastExpr 0xa9ed588 <col:23, <invalid sloc>> '_Bool (*)(const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9ed558 <col:23, <invalid sloc>> '_Bool (const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' lvalue Function 0xa9ed480 'operator!=' '_Bool (const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)'))
          (ImplicitCastExpr 0xa9ed538 <col:15> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
            (DeclRefExpr 0xa9ecda4 <col:15> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ec680 '__first' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'))
          (ImplicitCastExpr 0xa9ed548 <col:26> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
            (DeclRefExpr 0xa9ecdbc <col:26> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ec6c0 '__last' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))
        (BinaryOperator 0xa9ed728 <col:34, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ','
          (CXXOperatorCallExpr 0xa9ed618 <col:34, col:36> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
            (ImplicitCastExpr 0xa9ed608 <<invalid sloc>> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &(*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9ed5d8 <<invalid sloc>> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &(void)' lvalue CXXMethod 0xa9d37b0 'operator++' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &(void)'))
            (DeclRefExpr 0xa9ed5bc <col:36> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ec680 '__first' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'))
          (UnaryOperator 0xa9ed650 <col:45, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '++'
            (DeclRefExpr 0xa9ed638 <col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9eccf0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (CallExpr 0xa9ed998 <line:77:3, col:53> 'void'
          (ImplicitCastExpr 0xa9ed988 <col:3, col:8> 'void (*)(class std::basic_string<char> *, const class std::basic_string<char> &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9ed960 <col:3, col:8> 'void (class std::basic_string<char> *, const class std::basic_string<char> &)' lvalue Function 0xa9cceb0 '_Construct' 'void (class std::basic_string<char> *, const class std::basic_string<char> &)' (FunctionTemplate 0xa6823f0 '_Construct')))
          (CallExpr 0xa9ed850 <col:19, col:42> 'class std::basic_string<char> *'
            (ImplicitCastExpr 0xa9ed840 <col:19, col:24> 'class std::basic_string<char> *(*)(class std::basic_string<char> &)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9ed818 <col:19, col:24> 'class std::basic_string<char> *(class std::basic_string<char> &)' lvalue Function 0xa9ccb70 '__addressof' 'class std::basic_string<char> *(class std::basic_string<char> &)' (FunctionTemplate 0xa606990 '__addressof')))
            (UnaryOperator 0xa9ed7d8 <col:36, col:37> 'class std::basic_string<char>' lvalue prefix '*'
              (ImplicitCastExpr 0xa9ed7c8 <col:37> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9ed7ac <col:37> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9eccf0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
          (CXXOperatorCallExpr 0xa9ed8f8 <col:45, col:46> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xa9ed8e8 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9ed898 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa9d34a0 'operator*' 'reference (void) const'))
            (ImplicitCastExpr 0xa9ed888 <col:46> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
              (DeclRefExpr 0xa9ed870 <col:46> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ec680 '__first' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))))
      (ReturnStmt 0xa9eda10 <line:78:8, col:15>
        (ImplicitCastExpr 0xa9eda00 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9ed9e4 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9eccf0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
    <<<NULL>>>)
  (IfStmt 0xa9edb90 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:84:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa688850 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa9edb78 </usr/include/c++/4.6/bits/stl_uninitialized.h:81:6, line:84:6>
      (CallExpr 0xa9edb30 <line:82:8, col:37> 'void'
        (ImplicitCastExpr 0xa9edb20 <col:8, col:13> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9edaf8 <col:8, col:13> 'void (class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9cd270 '_Destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa685820 '_Destroy')))
        (ImplicitCastExpr 0xa9edb58 <col:22> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9eda98 <col:22> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ec700 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
        (ImplicitCastExpr 0xa9edb68 <col:32> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9edab0 <col:32> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9eccf0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
      (NullStmt 0xa688920 <line:83:31>))
    <<<NULL>>>))

template <typename _InputIterator = std::basic_string<char> *, typename _ForwardIterator = std::basic_string<char> *> static std::basic_string<char> *__uninit_copy(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9cd408 </usr/include/c++/4.6/bits/stl_uninitialized.h:72:9, line:85:2>
  (DeclStmt 0xa9cc830 <line:73:4, col:37>
    0xa9cc7d0 "std::basic_string<char> *__cur =
      (ImplicitCastExpr 0xa9cc820 <col:29> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cc804 <col:29> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cc560 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))")
  (IfStmt 0xa9cd088 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:79:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa688540 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa9cd070 </usr/include/c++/4.6/bits/stl_uninitialized.h:75:6, line:79:6>
      (ForStmt 0xa9cd010 <line:76:8, line:77:53>
        <<<NULL>>>
        <<<NULL>>>
        (BinaryOperator 0xa9cc8d8 <line:76:15, col:26> '_Bool' '!='
          (ImplicitCastExpr 0xa9cc8b8 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9cc884 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cc4e0 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
          (ImplicitCastExpr 0xa9cc8c8 <col:26> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9cc89c <col:26> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cc520 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (BinaryOperator 0xa9cc950 <col:34, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ','
          (UnaryOperator 0xa9cc908 <col:34, col:36> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '++'
            (DeclRefExpr 0xa9cc8f0 <col:36> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cc4e0 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
          (UnaryOperator 0xa9cc938 <col:45, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue prefix '++'
            (DeclRefExpr 0xa9cc91c <col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9cc7d0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
        (CallExpr 0xa9ccfd8 <line:77:3, col:53> 'void'
          (ImplicitCastExpr 0xa9ccfc8 <col:3, col:8> 'void (*)(class std::basic_string<char> *, const class std::basic_string<char> &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9ccf68 <col:3, col:8> 'void (class std::basic_string<char> *, const class std::basic_string<char> &)' lvalue Function 0xa9cceb0 '_Construct' 'void (class std::basic_string<char> *, const class std::basic_string<char> &)' (FunctionTemplate 0xa6823f0 '_Construct')))
          (CallExpr 0xa9ccc88 <col:19, col:42> 'class std::basic_string<char> *'
            (ImplicitCastExpr 0xa9ccc78 <col:19, col:24> 'class std::basic_string<char> *(*)(class std::basic_string<char> &)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9ccc18 <col:19, col:24> 'class std::basic_string<char> *(class std::basic_string<char> &)' lvalue Function 0xa9ccb70 '__addressof' 'class std::basic_string<char> *(class std::basic_string<char> &)' (FunctionTemplate 0xa606990 '__addressof')))
            (UnaryOperator 0xa9cca00 <col:36, col:37> 'class std::basic_string<char>' lvalue prefix '*'
              (ImplicitCastExpr 0xa9cc9f0 <col:37> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9cc9d4 <col:37> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9cc7d0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
          (ImplicitCastExpr 0xa9cd000 <col:45, col:46> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue <NoOp>
            (UnaryOperator 0xa9cccd0 <col:45, col:46> 'class std::basic_string<char>' lvalue prefix '*'
              (ImplicitCastExpr 0xa9cccc0 <col:46> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9ccca8 <col:46> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cc4e0 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))))
      (ReturnStmt 0xa9cd060 <line:78:8, col:15>
        (ImplicitCastExpr 0xa9cd050 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9cd034 <col:15> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9cc7d0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *'))))
    <<<NULL>>>)
  (IfStmt 0xa9cd3e8 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:84:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa688850 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa9cd3d0 </usr/include/c++/4.6/bits/stl_uninitialized.h:81:6, line:84:6>
      (CallExpr 0xa9cd388 <line:82:8, col:37> 'void'
        (ImplicitCastExpr 0xa9cd378 <col:8, col:13> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9cd318 <col:8, col:13> 'void (class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9cd270 '_Destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa685820 '_Destroy')))
        (ImplicitCastExpr 0xa9cd3b0 <col:22> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9cd0e8 <col:22> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cc560 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
        (ImplicitCastExpr 0xa9cd3c0 <col:32> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9cd100 <col:32> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue Var 0xa9cc7d0 '__cur' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
      (NullStmt 0xa688920 <line:83:31>))
    <<<NULL>>>))

template <typename _InputIterator, typename _ForwardIterator> static _ForwardIterator __uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result);
    }
template <bool _TrivialValueTypes = true> struct __uninitialized_copy {
        struct __uninitialized_copy;
        template <typename _InputIterator, typename _ForwardIterator> static _ForwardIterator __uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result) (CompoundStmt 0xa688ee0 </usr/include/c++/4.6/bits/stl_uninitialized.h:95:9, col:56>
  (ReturnStmt 0xa688ed0 <col:11, col:53>
    (CallExpr 0xa688ea8 <col:18, col:53> '<dependent type>'
      (UnresolvedLookupExpr 0xa688e28 <col:18, col:23> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
      (DeclRefExpr 0xa688e5c <col:28> '_InputIterator' lvalue ParmVar 0xa688c50 '__first' '_InputIterator')
      (DeclRefExpr 0xa688e74 <col:37> '_InputIterator' lvalue ParmVar 0xa688c90 '__last' '_InputIterator')
      (DeclRefExpr 0xa688e8c <col:45> '_ForwardIterator' lvalue ParmVar 0xa688cd0 '__result' '_ForwardIterator'))))

;
    }
template <bool _TrivialValueTypes> struct __uninitialized_copy {
        struct __uninitialized_copy;
        template <typename _InputIterator, typename _ForwardIterator> static _ForwardIterator __uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result) (CompoundStmt 0xa688968 </usr/include/c++/4.6/bits/stl_uninitialized.h:72:9, line:85:2>
  (DeclStmt 0xa688530 <line:73:4, col:37>
    0xa6884e0 "_ForwardIterator __cur =
      (DeclRefExpr 0xa688514 <col:29> '_ForwardIterator' lvalue ParmVar 0xa6869b0 '__result' '_ForwardIterator')")
  (IfStmt 0xa688830 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:79:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa688540 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa688818 </usr/include/c++/4.6/bits/stl_uninitialized.h:75:6, line:79:6>
      (ForStmt 0xa6887c8 <line:76:8, line:77:53>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa6885c8 <line:76:15, col:26> '<dependent type>'
          (UnresolvedLookupExpr 0xa688580 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
          (DeclRefExpr 0xa688550 <col:15> '_InputIterator' lvalue ParmVar 0xa686930 '__first' '_InputIterator')
          (DeclRefExpr 0xa688568 <col:26> '_InputIterator' lvalue ParmVar 0xa686970 '__last' '_InputIterator'))
        (BinaryOperator 0xa688650 <col:34, col:47> '<dependent type>' ','
          (UnaryOperator 0xa688608 <col:34, col:36> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa6885ec <col:36> '_InputIterator' lvalue ParmVar 0xa686930 '__first' '_InputIterator'))
          (UnaryOperator 0xa688638 <col:45, col:47> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa68861c <col:47> '_ForwardIterator' lvalue Var 0xa6884e0 '__cur' '_ForwardIterator')))
        (CallExpr 0xa6887a0 <line:77:3, col:53> '<dependent type>'
          (UnresolvedLookupExpr 0xa688698 <col:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6823f0)
          (CallExpr 0xa688750 <col:19, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa6886e8 <col:19, col:24> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
            (UnaryOperator 0xa688738 <col:36, col:37> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa68871c <col:37> '_ForwardIterator' lvalue Var 0xa6884e0 '__cur' '_ForwardIterator')))
          (UnaryOperator 0xa688788 <col:45, col:46> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa688770 <col:46> '_InputIterator' lvalue ParmVar 0xa686930 '__first' '_InputIterator'))))
      (ReturnStmt 0xa688808 <line:78:8, col:15>
        (DeclRefExpr 0xa6887ec <col:15> '_ForwardIterator' lvalue Var 0xa6884e0 '__cur' '_ForwardIterator')))
    <<<NULL>>>)
  (IfStmt 0xa688948 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:84:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa688850 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa688930 </usr/include/c++/4.6/bits/stl_uninitialized.h:81:6, line:84:6>
      (CallExpr 0xa6888f8 <line:82:8, col:37> '<dependent type>'
        (UnresolvedLookupExpr 0xa688888 <col:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa6888c8 <col:22> '_ForwardIterator' lvalue ParmVar 0xa6869b0 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa6888e0 <col:32> '_ForwardIterator' lvalue Var 0xa6884e0 '__cur' '_ForwardIterator'))
      (NullStmt 0xa688920 <line:83:31>))
    <<<NULL>>>))

;
    };
    struct __uninitialized_copy {
        struct __uninitialized_copy;
        template <typename _InputIterator, typename _ForwardIterator> static _ForwardIterator __uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result) (CompoundStmt 0xa688ee0 </usr/include/c++/4.6/bits/stl_uninitialized.h:95:9, col:56>
  (ReturnStmt 0xa688ed0 <col:11, col:53>
    (CallExpr 0xa688ea8 <col:18, col:53> '<dependent type>'
      (UnresolvedLookupExpr 0xa688e28 <col:18, col:23> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
      (DeclRefExpr 0xa688e5c <col:28> '_InputIterator' lvalue ParmVar 0xa688c50 '__first' '_InputIterator')
      (DeclRefExpr 0xa688e74 <col:37> '_InputIterator' lvalue ParmVar 0xa688c90 '__last' '_InputIterator')
      (DeclRefExpr 0xa688e8c <col:45> '_ForwardIterator' lvalue ParmVar 0xa688cd0 '__result' '_ForwardIterator'))))

;
    };
    template <typename _InputIterator = __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename _ForwardIterator = std::basic_string<char> *> inline std::basic_string<char> *uninitialized_copy(__gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __first, __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __last, std::basic_string<char> *__result) (CompoundStmt 0xa9eccc8 </usr/include/c++/4.6/bits/stl_uninitialized.h:111:5, line:120:5>
  (DeclStmt 0xa9ec390 <line:112:7, line:113:13>
    0xa9ec360 "typedef typename iterator_traits<class __normal_iterator<const class basic_string<char> *, class vector<class basic_string<char>, class allocator<class basic_string<char> > > > >::value_type _ValueType1")
  (DeclStmt 0xa9ec480 <line:114:7, line:115:13>
    0xa9ec450 "typedef typename iterator_traits<class basic_string<char> *>::value_type _ValueType2")
  (ReturnStmt 0xa9eccb8 <line:117:7, line:119:41>
    (CallExpr 0xa9ec8a8 <line:117:14, line:119:41> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9ec898 <line:117:14, line:119:2> 'class std::basic_string<char> *(*)(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9ec854 <line:117:14, line:119:2> 'class std::basic_string<char> *(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *)' lvalue CXXMethod 0xa9ec790 '__uninit_copy' 'class std::basic_string<char> *(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *)' (FunctionTemplate 0xa9cc360 '__uninit_copy')))
      (CXXConstructExpr 0xa9eca90 <col:16> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()'
        (ImplicitCastExpr 0xa9eca80 <col:16> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
          (DeclRefExpr 0xa9ec5c4 <col:16> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9eb800 '__first' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))
      (CXXConstructExpr 0xa9ecc80 <col:25> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()'
        (ImplicitCastExpr 0xa9ecc70 <col:25> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
          (DeclRefExpr 0xa9ec5dc <col:25> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9eb840 '__last' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))
      (ImplicitCastExpr 0xa9ecca8 <col:33> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ec5f4 <col:33> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9eb880 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <typename _InputIterator = std::basic_string<char> *, typename _ForwardIterator = std::basic_string<char> *> inline std::basic_string<char> *uninitialized_copy(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result) (CompoundStmt 0xa9cc770 </usr/include/c++/4.6/bits/stl_uninitialized.h:111:5, line:120:5>
  (DeclStmt 0xa9cbdc0 <line:112:7, line:113:13>
    0xa9cbd90 "typedef typename iterator_traits<class basic_string<char> *>::value_type _ValueType1")
  (DeclStmt 0xa9cbeb0 <line:114:7, line:115:13>
    0xa9cbe80 "typedef typename iterator_traits<class basic_string<char> *>::value_type _ValueType2")
  (ReturnStmt 0xa9cc760 <line:117:7, line:119:41>
    (CallExpr 0xa9cc708 <line:117:14, line:119:41> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9cc6f8 <line:117:14, line:119:2> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9cc6b4 <line:117:14, line:119:2> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' lvalue CXXMethod 0xa9cc5f0 '__uninit_copy' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa9cc360 '__uninit_copy')))
      (ImplicitCastExpr 0xa9cc730 <col:16> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cc3f4 <col:16> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cba40 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9cc740 <col:25> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cc40c <col:25> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cba80 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9cc750 <col:33> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cc424 <col:33> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cbac0 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <typename _InputIterator, typename _ForwardIterator> inline _ForwardIterator uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result) (CompoundStmt 0xa6895e8 </usr/include/c++/4.6/bits/stl_uninitialized.h:111:5, line:120:5>
  (DeclStmt 0xa689280 <line:112:7, line:113:13>
    0xa689250 "typedef typename iterator_traits<_InputIterator>::value_type _ValueType1")
  (DeclStmt 0xa6893b0 <line:114:7, line:115:13>
    0xa689380 "typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType2")
  (ReturnStmt 0xa6895d8 <line:117:7, line:119:41>
    (CallExpr 0xa6895b0 <line:117:14, line:119:41> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa689540 <line:117:14, line:119:2> '<dependent type>' lvalue)
      (DeclRefExpr 0xa689564 <col:16> '_InputIterator' lvalue ParmVar 0xa688fc0 '__first' '_InputIterator')
      (DeclRefExpr 0xa68957c <col:25> '_InputIterator' lvalue ParmVar 0xa689000 '__last' '_InputIterator')
      (DeclRefExpr 0xa689594 <col:33> '_ForwardIterator' lvalue ParmVar 0xa689040 '__result' '_ForwardIterator'))))

;
    template <bool _TrivialValueType = true> struct __uninitialized_fill {
        struct __uninitialized_fill;
        template <typename _ForwardIterator, typename _Tp> static void __uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x) (CompoundStmt 0xa68b450 </usr/include/c++/4.6/bits/stl_uninitialized.h:152:9, col:44>
  (CallExpr 0xa68b428 <col:11, col:41> '<dependent type>'
    (UnresolvedLookupExpr 0xa68a468 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780)
    (DeclRefExpr 0xa68a49c <col:21> '_ForwardIterator' lvalue ParmVar 0xa68a250 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa68a4b4 <col:30> '_ForwardIterator' lvalue ParmVar 0xa68a290 '__last' '_ForwardIterator')
    (DeclRefExpr 0xa68b410 <col:38> 'const _Tp' lvalue ParmVar 0xa68a300 '__x' 'const _Tp &')))

;
    }
template <bool _TrivialValueType> struct __uninitialized_fill {
        struct __uninitialized_fill;
        template <typename _ForwardIterator, typename _Tp> static void __uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x) (CompoundStmt 0xa689f70 </usr/include/c++/4.6/bits/stl_uninitialized.h:130:9, line:142:2>
  (DeclStmt 0xa689bd0 <line:131:4, col:36>
    0xa689b80 "_ForwardIterator __cur =
      (DeclRefExpr 0xa689bb4 <col:29> '_ForwardIterator' lvalue ParmVar 0xa689930 '__first' '_ForwardIterator')")
  (IfStmt 0xa689e38 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:136:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa689be0 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa689e20 </usr/include/c++/4.6/bits/stl_uninitialized.h:133:6, line:136:6>
      (ForStmt 0xa689df8 <line:134:8, line:135:48>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa689c68 <line:134:15, col:24> '<dependent type>'
          (UnresolvedLookupExpr 0xa689c20 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
          (DeclRefExpr 0xa689bf0 <col:15> '_ForwardIterator' lvalue Var 0xa689b80 '__cur' '_ForwardIterator')
          (DeclRefExpr 0xa689c08 <col:24> '_ForwardIterator' lvalue ParmVar 0xa689970 '__last' '_ForwardIterator'))
        (UnaryOperator 0xa689ca8 <col:32, col:34> '<dependent type>' prefix '++'
          (DeclRefExpr 0xa689c8c <col:34> '_ForwardIterator' lvalue Var 0xa689b80 '__cur' '_ForwardIterator'))
        (CallExpr 0xa689dd0 <line:135:3, col:48> '<dependent type>'
          (UnresolvedLookupExpr 0xa689ce0 <col:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6823f0)
          (CallExpr 0xa689d98 <col:19, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa689d30 <col:19, col:24> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
            (UnaryOperator 0xa689d80 <col:36, col:37> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa689d64 <col:37> '_ForwardIterator' lvalue Var 0xa689b80 '__cur' '_ForwardIterator')))
          (DeclRefExpr 0xa689db8 <col:45> 'const _Tp' lvalue ParmVar 0xa689a00 '__x' 'const _Tp &'))))
    <<<NULL>>>)
  (IfStmt 0xa689f50 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:141:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa689e58 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa689f38 </usr/include/c++/4.6/bits/stl_uninitialized.h:138:6, line:141:6>
      (CallExpr 0xa689f00 <line:139:8, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa689e90 <col:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa689ed0 <col:22> '_ForwardIterator' lvalue ParmVar 0xa689930 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa689ee8 <col:31> '_ForwardIterator' lvalue Var 0xa689b80 '__cur' '_ForwardIterator'))
      (NullStmt 0xa689f28 <line:140:31>))
    <<<NULL>>>))

;
    };
    struct __uninitialized_fill {
        struct __uninitialized_fill;
        template <typename _ForwardIterator, typename _Tp> static void __uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x) (CompoundStmt 0xa68b450 </usr/include/c++/4.6/bits/stl_uninitialized.h:152:9, col:44>
  (CallExpr 0xa68b428 <col:11, col:41> '<dependent type>'
    (UnresolvedLookupExpr 0xa68a468 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780)
    (DeclRefExpr 0xa68a49c <col:21> '_ForwardIterator' lvalue ParmVar 0xa68a250 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa68a4b4 <col:30> '_ForwardIterator' lvalue ParmVar 0xa68a290 '__last' '_ForwardIterator')
    (DeclRefExpr 0xa68b410 <col:38> 'const _Tp' lvalue ParmVar 0xa68a300 '__x' 'const _Tp &')))

;
    };
    template <typename _ForwardIterator, typename _Tp> inline void uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x) (CompoundStmt 0xa68ba00 </usr/include/c++/4.6/bits/stl_uninitialized.h:168:5, line:174:5>
  (DeclStmt 0xa68b820 <line:169:7, line:170:12>
    0xa68b7f0 "typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType")
  (CallExpr 0xa68b9d8 <line:172:7, line:173:36> '<dependent type>'
    (DependentScopeDeclRefExpr 0xa68b968 <line:172:7, line:173:2> '<dependent type>' lvalue)
    (DeclRefExpr 0xa68b98c <col:16> '_ForwardIterator' lvalue ParmVar 0xa68b530 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa68b9a4 <col:25> '_ForwardIterator' lvalue ParmVar 0xa68b570 '__last' '_ForwardIterator')
    (DeclRefExpr 0xa68b9bc <col:33> 'const _Tp' lvalue ParmVar 0xa68b5e0 '__x' 'const _Tp &')))

;
    template <bool _TrivialValueType = true> struct __uninitialized_fill_n {
        struct __uninitialized_fill_n;
        template <typename _ForwardIterator, typename _Size, typename _Tp> static void __uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) (CompoundStmt 0xa68ca60 </usr/include/c++/4.6/bits/stl_uninitialized.h:206:9, col:43>
  (CallExpr 0xa68ca38 <col:11, col:40> '<dependent type>'
    (UnresolvedLookupExpr 0xa68c9b8 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6580c0)
    (DeclRefExpr 0xa68c9ec <col:23> '_ForwardIterator' lvalue ParmVar 0xa68c770 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa68ca04 <col:32> '_Size' lvalue ParmVar 0xa68c7b0 '__n' '_Size')
    (DeclRefExpr 0xa68ca1c <col:37> 'const _Tp' lvalue ParmVar 0xa68c820 '__x' 'const _Tp &')))

;
    }
template <bool _TrivialValueType> struct __uninitialized_fill_n {
        struct __uninitialized_fill_n;
        template <typename _ForwardIterator, typename _Size, typename _Tp> static void __uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) (CompoundStmt 0xa68c438 </usr/include/c++/4.6/bits/stl_uninitialized.h:184:9, line:196:2>
  (DeclStmt 0xa68c050 <line:185:4, col:36>
    0xa68c000 "_ForwardIterator __cur =
      (DeclRefExpr 0xa68c034 <col:29> '_ForwardIterator' lvalue ParmVar 0xa68bdb0 '__first' '_ForwardIterator')")
  (IfStmt 0xa68c300 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:190:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa68c060 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa68c2e8 </usr/include/c++/4.6/bits/stl_uninitialized.h:187:6, line:190:6>
      (ForStmt 0xa68c2c0 <line:188:8, line:189:48>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa68c0e0 <line:188:15, col:21> '<dependent type>'
          (UnresolvedLookupExpr 0xa68c0a0 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
          (DeclRefExpr 0xa68c070 <col:15> '_Size' lvalue ParmVar 0xa68bdf0 '__n' '_Size')
          (IntegerLiteral 0xa68c088 <col:21> 'int' 0))
        (BinaryOperator 0xa68c168 <col:24, col:33> '<dependent type>' ','
          (UnaryOperator 0xa68c120 <col:24, col:26> '<dependent type>' prefix '--'
            (DeclRefExpr 0xa68c104 <col:26> '_Size' lvalue ParmVar 0xa68bdf0 '__n' '_Size'))
          (UnaryOperator 0xa68c150 <col:31, col:33> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa68c134 <col:33> '_ForwardIterator' lvalue Var 0xa68c000 '__cur' '_ForwardIterator')))
        (CallExpr 0xa68c298 <line:189:3, col:48> '<dependent type>'
          (UnresolvedLookupExpr 0xa68c1a8 <col:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6823f0)
          (CallExpr 0xa68c260 <col:19, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa68c1f8 <col:19, col:24> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
            (UnaryOperator 0xa68c248 <col:36, col:37> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa68c22c <col:37> '_ForwardIterator' lvalue Var 0xa68c000 '__cur' '_ForwardIterator')))
          (DeclRefExpr 0xa68c280 <col:45> 'const _Tp' lvalue ParmVar 0xa68be80 '__x' 'const _Tp &'))))
    <<<NULL>>>)
  (IfStmt 0xa68c418 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:195:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa68c320 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa68c400 </usr/include/c++/4.6/bits/stl_uninitialized.h:192:6, line:195:6>
      (CallExpr 0xa68c3c8 <line:193:8, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa68c358 <col:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa68c398 <col:22> '_ForwardIterator' lvalue ParmVar 0xa68bdb0 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa68c3b0 <col:31> '_ForwardIterator' lvalue Var 0xa68c000 '__cur' '_ForwardIterator'))
      (NullStmt 0xa68c3f0 <line:194:31>))
    <<<NULL>>>))

;
    };
    struct __uninitialized_fill_n {
        struct __uninitialized_fill_n;
        template <typename _ForwardIterator, typename _Size, typename _Tp> static void __uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) (CompoundStmt 0xa68ca60 </usr/include/c++/4.6/bits/stl_uninitialized.h:206:9, col:43>
  (CallExpr 0xa68ca38 <col:11, col:40> '<dependent type>'
    (UnresolvedLookupExpr 0xa68c9b8 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6580c0)
    (DeclRefExpr 0xa68c9ec <col:23> '_ForwardIterator' lvalue ParmVar 0xa68c770 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa68ca04 <col:32> '_Size' lvalue ParmVar 0xa68c7b0 '__n' '_Size')
    (DeclRefExpr 0xa68ca1c <col:37> 'const _Tp' lvalue ParmVar 0xa68c820 '__x' 'const _Tp &')))

;
    };
    template <typename _ForwardIterator, typename _Size, typename _Tp> inline void uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) (CompoundStmt 0xa68d060 </usr/include/c++/4.6/bits/stl_uninitialized.h:221:5, line:227:5>
  (DeclStmt 0xa68ce80 <line:222:7, line:223:12>
    0xa68ce50 "typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType")
  (CallExpr 0xa68d038 <line:225:7, line:226:35> '<dependent type>'
    (DependentScopeDeclRefExpr 0xa68cfc8 <line:225:7, line:226:2> '<dependent type>' lvalue)
    (DeclRefExpr 0xa68cfec <col:18> '_ForwardIterator' lvalue ParmVar 0xa68cb90 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa68d004 <col:27> '_Size' lvalue ParmVar 0xa68cbd0 '__n' '_Size')
    (DeclRefExpr 0xa68d01c <col:32> 'const _Tp' lvalue ParmVar 0xa68cc40 '__x' 'const _Tp &')))

;
    template <typename _InputIterator = std::basic_string<char> *, typename _ForwardIterator = std::basic_string<char> *, typename _Allocator = std::allocator<std::basic_string<char> >> std::basic_string<char> *__uninitialized_copy_a(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result, std::allocator<std::basic_string<char> > &__alloc)template <typename _InputIterator = __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename _ForwardIterator = std::basic_string<char> *, typename _Allocator = std::allocator<std::basic_string<char> >> std::basic_string<char> *__uninitialized_copy_a(__gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __first, __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __last, std::basic_string<char> *__result, std::allocator<std::basic_string<char> > &__alloc)template <typename _InputIterator, typename _ForwardIterator, typename _Allocator> _ForwardIterator __uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator &__alloc) (CompoundStmt 0xa68f7d8 </usr/include/c++/4.6/bits/stl_uninitialized.h:240:5, line:253:5>
  (DeclStmt 0xa68f3a0 <line:241:7, col:40>
    0xa68f350 "_ForwardIterator __cur =
      (DeclRefExpr 0xa68f384 <col:32> '_ForwardIterator' lvalue ParmVar 0xa68d210 '__result' '_ForwardIterator')")
  (IfStmt 0xa68f688 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:247:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa68f3b0 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa68f670 </usr/include/c++/4.6/bits/stl_uninitialized.h:243:2, line:247:2>
      (ForStmt 0xa68f620 <line:244:4, line:245:58>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa68f438 <line:244:11, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa68f3f0 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
          (DeclRefExpr 0xa68f3c0 <col:11> '_InputIterator' lvalue ParmVar 0xa68d190 '__first' '_InputIterator')
          (DeclRefExpr 0xa68f3d8 <col:22> '_InputIterator' lvalue ParmVar 0xa68d1d0 '__last' '_InputIterator'))
        (BinaryOperator 0xa68f4c0 <col:30, col:43> '<dependent type>' ','
          (UnaryOperator 0xa68f478 <col:30, col:32> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa68f45c <col:32> '_InputIterator' lvalue ParmVar 0xa68d190 '__first' '_InputIterator'))
          (UnaryOperator 0xa68f4a8 <col:41, col:43> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa68f48c <col:43> '_ForwardIterator' lvalue Var 0xa68f350 '__cur' '_ForwardIterator')))
        (CallExpr 0xa68f5f8 <line:245:6, col:58> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa68f4f0 <col:6, col:14> '<dependent type>' lvalue
            (DeclRefExpr 0xa68f4d8 <col:6> '_Allocator' lvalue ParmVar 0xa68d2a0 '__alloc' '_Allocator &'))
          (CallExpr 0xa68f5a8 <col:24, col:47> '<dependent type>'
            (UnresolvedLookupExpr 0xa68f540 <col:24, col:29> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
            (UnaryOperator 0xa68f590 <col:41, col:42> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa68f574 <col:42> '_ForwardIterator' lvalue Var 0xa68f350 '__cur' '_ForwardIterator')))
          (UnaryOperator 0xa68f5e0 <col:50, col:51> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa68f5c8 <col:51> '_InputIterator' lvalue ParmVar 0xa68d190 '__first' '_InputIterator'))))
      (ReturnStmt 0xa68f660 <line:246:4, col:11>
        (DeclRefExpr 0xa68f644 <col:11> '_ForwardIterator' lvalue Var 0xa68f350 '__cur' '_ForwardIterator')))
    <<<NULL>>>)
  (IfStmt 0xa68f7b8 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:252:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa68f6a8 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa68f7a0 </usr/include/c++/4.6/bits/stl_uninitialized.h:249:2, line:252:2>
      (CallExpr 0xa68f768 <line:250:4, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa68f6e0 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa68f720 <col:18> '_ForwardIterator' lvalue ParmVar 0xa68d210 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa68f738 <col:28> '_ForwardIterator' lvalue Var 0xa68f350 '__cur' '_ForwardIterator')
        (DeclRefExpr 0xa68f750 <col:35> '_Allocator' lvalue ParmVar 0xa68d2a0 '__alloc' '_Allocator &'))
      (NullStmt 0xa68f790 <line:251:27>))
    <<<NULL>>>))

;
    template <typename _InputIterator = __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename _ForwardIterator = std::basic_string<char> *, typename _Tp = std::basic_string<char>> inline std::basic_string<char> *__uninitialized_copy_a(__gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __first, __gnu_cxx::__normal_iterator<const std::basic_string<char> *, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > __last, std::basic_string<char> *__result, allocator<std::basic_string<char> > &) (CompoundStmt 0xa9ebe98 </usr/include/c++/4.6/bits/stl_uninitialized.h:259:5, col:66>
  (ReturnStmt 0xa9ebe88 <col:7, col:63>
    (CallExpr 0xa9eba78 <col:14, col:63> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9eba68 <col:14, col:19> 'class std::basic_string<char> *(*)(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9eba08 <col:14, col:19> 'class std::basic_string<char> *(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *)' lvalue Function 0xa9eb940 'uninitialized_copy' 'class std::basic_string<char> *(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *)' (FunctionTemplate 0xa689130 'uninitialized_copy')))
      (CXXConstructExpr 0xa9ebc60 <col:38> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()'
        (ImplicitCastExpr 0xa9ebc50 <col:38> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
          (DeclRefExpr 0xa9eb744 <col:38> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ea0a0 '__first' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))
      (CXXConstructExpr 0xa9ebe50 <col:47> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()'
        (ImplicitCastExpr 0xa9ebe40 <col:47> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
          (DeclRefExpr 0xa9eb75c <col:47> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9ea0e0 '__last' 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))
      (ImplicitCastExpr 0xa9ebe78 <col:55> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9eb774 <col:55> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ea120 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <typename _InputIterator = std::basic_string<char> *, typename _ForwardIterator = std::basic_string<char> *, typename _Tp = std::basic_string<char>> inline std::basic_string<char> *__uninitialized_copy_a(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result, allocator<std::basic_string<char> > &) (CompoundStmt 0xa9cbcd0 </usr/include/c++/4.6/bits/stl_uninitialized.h:259:5, col:66>
  (ReturnStmt 0xa9cbcc0 <col:7, col:63>
    (CallExpr 0xa9cbc68 <col:14, col:63> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9cbc58 <col:14, col:19> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9cbc18 <col:14, col:19> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9cbb50 'uninitialized_copy' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa689130 'uninitialized_copy')))
      (ImplicitCastExpr 0xa9cbc90 <col:38> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cb934 <col:38> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cb570 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9cbca0 <col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cb94c <col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cb5b0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9cbcb0 <col:55> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cb964 <col:55> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9cb5f0 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *')))))

template <typename _InputIterator, typename _ForwardIterator, typename _Tp> inline _ForwardIterator __uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp> &) (CompoundStmt 0xa68fd08 </usr/include/c++/4.6/bits/stl_uninitialized.h:259:5, col:66>
  (ReturnStmt 0xa68fcf8 <col:7, col:63>
    (CallExpr 0xa68fcd0 <col:14, col:63> '<dependent type>'
      (UnresolvedLookupExpr 0xa68fc50 <col:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa689130)
      (DeclRefExpr 0xa68fc84 <col:38> '_InputIterator' lvalue ParmVar 0xa68f910 '__first' '_InputIterator')
      (DeclRefExpr 0xa68fc9c <col:47> '_InputIterator' lvalue ParmVar 0xa68f950 '__last' '_InputIterator')
      (DeclRefExpr 0xa68fcb4 <col:55> '_ForwardIterator' lvalue ParmVar 0xa68f990 '__result' '_ForwardIterator'))))

;
    template <typename _InputIterator = std::basic_string<char> *, typename _ForwardIterator = std::basic_string<char> *, typename _Allocator = std::allocator<std::basic_string<char> >> inline std::basic_string<char> *__uninitialized_move_a(std::basic_string<char> *__first, std::basic_string<char> *__last, std::basic_string<char> *__result, std::allocator<std::basic_string<char> > &__alloc) (CompoundStmt 0xa9cb8e8 </usr/include/c++/4.6/bits/stl_uninitialized.h:266:5, line:270:5>
  (ReturnStmt 0xa9cb8d8 <line:267:7, line:269:24>
    (CallExpr 0xa9cb878 <line:267:14, line:269:24> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9cb868 <line:267:14, col:19> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9cb828 <col:14, col:19> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' lvalue Function 0xa9cb750 '__uninitialized_copy_a' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa68fc00 '__uninitialized_copy_a')))
      (ImplicitCastExpr 0xa9cb8a8 </usr/include/c++/4.6/bits/stl_iterator.h:1128:44, col:50> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (ParenExpr 0xa9cb0c8 <col:44, col:50> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue
          (DeclRefExpr 0xa9cb0b0 </usr/include/c++/4.6/bits/stl_uninitialized.h:267:70> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ad6b0 '__first' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
      (ImplicitCastExpr 0xa9cb8b8 </usr/include/c++/4.6/bits/stl_iterator.h:1128:44, col:50> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (ParenExpr 0xa9cb0f8 <col:44, col:50> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue
          (DeclRefExpr 0xa9cb0dc </usr/include/c++/4.6/bits/stl_uninitialized.h:268:35> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ad6f0 '__last' 'class std::basic_string<char> *':'class std::basic_string<char> *')))
      (ImplicitCastExpr 0xa9cb8c8 <line:269:7> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9cb10c <col:7> 'class std::basic_string<char> *':'class std::basic_string<char> *' lvalue ParmVar 0xa9ad730 '__result' 'class std::basic_string<char> *':'class std::basic_string<char> *'))
      (DeclRefExpr 0xa9cb124 <col:17> 'class std::allocator<class std::basic_string<char> >':'class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa9ad7c0 '__alloc' 'class std::allocator<class std::basic_string<char> > &'))))

template <typename _InputIterator, typename _ForwardIterator, typename _Allocator> inline _ForwardIterator __uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator &__alloc) (CompoundStmt 0xa690168 </usr/include/c++/4.6/bits/stl_uninitialized.h:266:5, line:270:5>
  (ReturnStmt 0xa690158 <line:267:7, line:269:24>
    (CallExpr 0xa690128 <line:267:14, line:269:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa690060 <line:267:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
      (ParenExpr 0xa6900b0 </usr/include/c++/4.6/bits/stl_iterator.h:1128:44, col:50> '_InputIterator' lvalue
        (DeclRefExpr 0xa690098 </usr/include/c++/4.6/bits/stl_uninitialized.h:267:70> '_InputIterator' lvalue ParmVar 0xa68fe30 '__first' '_InputIterator'))
      (ParenExpr 0xa6900e0 </usr/include/c++/4.6/bits/stl_iterator.h:1128:44, col:50> '_InputIterator' lvalue
        (DeclRefExpr 0xa6900c4 </usr/include/c++/4.6/bits/stl_uninitialized.h:268:35> '_InputIterator' lvalue ParmVar 0xa68fe70 '__last' '_InputIterator'))
      (DeclRefExpr 0xa6900f4 <line:269:7> '_ForwardIterator' lvalue ParmVar 0xa68feb0 '__result' '_ForwardIterator')
      (DeclRefExpr 0xa69010c <col:17> '_Allocator' lvalue ParmVar 0xa68ff20 '__alloc' '_Allocator &'))))

;
    template <typename _ForwardIterator, typename _Tp, typename _Allocator> void __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, _Allocator &__alloc) (CompoundStmt 0xa690910 </usr/include/c++/4.6/bits/stl_uninitialized.h:276:5, line:288:5>
  (DeclStmt 0xa690560 <line:277:7, col:39>
    0xa690510 "_ForwardIterator __cur =
      (DeclRefExpr 0xa690544 <col:32> '_ForwardIterator' lvalue ParmVar 0xa690290 '__first' '_ForwardIterator')")
  (IfStmt 0xa6907c0 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:282:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa690570 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa6907a8 </usr/include/c++/4.6/bits/stl_uninitialized.h:279:2, line:282:2>
      (ForStmt 0xa690780 <line:280:4, line:281:53>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa6905f8 <line:280:11, col:20> '<dependent type>'
          (UnresolvedLookupExpr 0xa6905b0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
          (DeclRefExpr 0xa690580 <col:11> '_ForwardIterator' lvalue Var 0xa690510 '__cur' '_ForwardIterator')
          (DeclRefExpr 0xa690598 <col:20> '_ForwardIterator' lvalue ParmVar 0xa6902d0 '__last' '_ForwardIterator'))
        (UnaryOperator 0xa690638 <col:28, col:30> '<dependent type>' prefix '++'
          (DeclRefExpr 0xa69061c <col:30> '_ForwardIterator' lvalue Var 0xa690510 '__cur' '_ForwardIterator'))
        (CallExpr 0xa690758 <line:281:6, col:53> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa690668 <col:6, col:14> '<dependent type>' lvalue
            (DeclRefExpr 0xa69064c <col:6> '_Allocator' lvalue ParmVar 0xa6903b0 '__alloc' '_Allocator &'))
          (CallExpr 0xa690720 <col:24, col:47> '<dependent type>'
            (UnresolvedLookupExpr 0xa6906b8 <col:24, col:29> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
            (UnaryOperator 0xa690708 <col:41, col:42> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa6906ec <col:42> '_ForwardIterator' lvalue Var 0xa690510 '__cur' '_ForwardIterator')))
          (DeclRefExpr 0xa690740 <col:50> 'const _Tp' lvalue ParmVar 0xa690340 '__x' 'const _Tp &'))))
    <<<NULL>>>)
  (IfStmt 0xa6908f0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:287:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa6907e0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa6908d8 </usr/include/c++/4.6/bits/stl_uninitialized.h:284:2, line:287:2>
      (CallExpr 0xa6908a0 <line:285:4, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa690818 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa690858 <col:18> '_ForwardIterator' lvalue ParmVar 0xa690290 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa690870 <col:27> '_ForwardIterator' lvalue Var 0xa690510 '__cur' '_ForwardIterator')
        (DeclRefExpr 0xa690888 <col:34> '_Allocator' lvalue ParmVar 0xa6903b0 '__alloc' '_Allocator &'))
      (NullStmt 0xa6908c8 <line:286:27>))
    <<<NULL>>>))

;
    template <typename _ForwardIterator, typename _Tp, typename _Tp2> inline void __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, allocator<_Tp2> &) (CompoundStmt 0xa690e18 </usr/include/c++/4.6/bits/stl_uninitialized.h:294:5, col:54>
  (CallExpr 0xa690df0 <col:7, col:51> '<dependent type>'
    (UnresolvedLookupExpr 0xa690d70 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68b6d0)
    (DeclRefExpr 0xa690da4 <col:31> '_ForwardIterator' lvalue ParmVar 0xa690a40 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa690dbc <col:40> '_ForwardIterator' lvalue ParmVar 0xa690a80 '__last' '_ForwardIterator')
    (DeclRefExpr 0xa690dd4 <col:48> 'const _Tp' lvalue ParmVar 0xa690af0 '__x' 'const _Tp &')))

;
    template <typename _ForwardIterator, typename _Size, typename _Tp, typename _Allocator> void __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, _Allocator &__alloc) (CompoundStmt 0xa6920b0 </usr/include/c++/4.6/bits/stl_uninitialized.h:301:5, line:313:5>
  (DeclStmt 0xa691280 <line:302:7, col:39>
    0xa691230 "_ForwardIterator __cur =
      (DeclRefExpr 0xa691264 <col:32> '_ForwardIterator' lvalue ParmVar 0xa690f90 '__first' '_ForwardIterator')")
  (IfStmt 0xa691f60 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:307:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa691290 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa691f48 </usr/include/c++/4.6/bits/stl_uninitialized.h:304:2, line:307:2>
      (ForStmt 0xa691f20 <line:305:4, line:306:53>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa691310 <line:305:11, col:17> '<dependent type>'
          (UnresolvedLookupExpr 0xa6912d0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
          (DeclRefExpr 0xa6912a0 <col:11> '_Size' lvalue ParmVar 0xa690fd0 '__n' '_Size')
          (IntegerLiteral 0xa6912b8 <col:17> 'int' 0))
        (BinaryOperator 0xa691dd8 <col:20, col:29> '<dependent type>' ','
          (UnaryOperator 0xa691d90 <col:20, col:22> '<dependent type>' prefix '--'
            (DeclRefExpr 0xa691d78 <col:22> '_Size' lvalue ParmVar 0xa690fd0 '__n' '_Size'))
          (UnaryOperator 0xa691dc0 <col:27, col:29> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa691da4 <col:29> '_ForwardIterator' lvalue Var 0xa691230 '__cur' '_ForwardIterator')))
        (CallExpr 0xa691ef8 <line:306:6, col:53> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa691e08 <col:6, col:14> '<dependent type>' lvalue
            (DeclRefExpr 0xa691df0 <col:6> '_Allocator' lvalue ParmVar 0xa6910d0 '__alloc' '_Allocator &'))
          (CallExpr 0xa691ec0 <col:24, col:47> '<dependent type>'
            (UnresolvedLookupExpr 0xa691e58 <col:24, col:29> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
            (UnaryOperator 0xa691ea8 <col:41, col:42> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa691e8c <col:42> '_ForwardIterator' lvalue Var 0xa691230 '__cur' '_ForwardIterator')))
          (DeclRefExpr 0xa691ee0 <col:50> 'const _Tp' lvalue ParmVar 0xa691040 '__x' 'const _Tp &'))))
    <<<NULL>>>)
  (IfStmt 0xa692090 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:312:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa691f80 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa692078 </usr/include/c++/4.6/bits/stl_uninitialized.h:309:2, line:312:2>
      (CallExpr 0xa692040 <line:310:4, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa691fb8 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa691ff8 <col:18> '_ForwardIterator' lvalue ParmVar 0xa690f90 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa692010 <col:27> '_ForwardIterator' lvalue Var 0xa691230 '__cur' '_ForwardIterator')
        (DeclRefExpr 0xa692028 <col:34> '_Allocator' lvalue ParmVar 0xa6910d0 '__alloc' '_Allocator &'))
      (NullStmt 0xa692068 <line:311:27>))
    <<<NULL>>>))

;
    template <typename _ForwardIterator, typename _Size, typename _Tp, typename _Tp2> inline void __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, allocator<_Tp2> &) (CompoundStmt 0xa692658 </usr/include/c++/4.6/bits/stl_uninitialized.h:320:5, col:53>
  (CallExpr 0xa692630 <col:7, col:50> '<dependent type>'
    (UnresolvedLookupExpr 0xa6925b0 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68cd30)
    (DeclRefExpr 0xa6925e4 <col:33> '_ForwardIterator' lvalue ParmVar 0xa692230 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa6925fc <col:42> '_Size' lvalue ParmVar 0xa692270 '__n' '_Size')
    (DeclRefExpr 0xa692614 <col:47> 'const _Tp' lvalue ParmVar 0xa6922e0 '__x' 'const _Tp &')))

;
    template <typename _InputIterator1, typename _InputIterator2, typename _ForwardIterator, typename _Allocator> inline _ForwardIterator __uninitialized_copy_move(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator &__alloc) (CompoundStmt 0xa692e50 </usr/include/c++/4.6/bits/stl_uninitialized.h:341:5, line:354:5>
  (DeclStmt 0xa692bd8 <line:342:7, line:344:19>
    0xa692ac0 "_ForwardIterator __mid =
      (CallExpr 0xa692ba8 <line:342:32, line:344:18> '<dependent type>'
        (UnresolvedLookupExpr 0xa692b10 <line:342:32, col:37> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
        (DeclRefExpr 0xa692b48 <col:60> '_InputIterator1' lvalue ParmVar 0xa6927d0 '__first1' '_InputIterator1')
        (DeclRefExpr 0xa692b60 <col:70> '_InputIterator1' lvalue ParmVar 0xa692810 '__last1' '_InputIterator1')
        (DeclRefExpr 0xa692b78 <line:343:11> '_ForwardIterator' lvalue ParmVar 0xa6928d0 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa692b90 <line:344:11> '_Allocator' lvalue ParmVar 0xa692940 '__alloc' '_Allocator &'))")
  (IfStmt 0xa692d00 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:348:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa692be8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa692ce8 </usr/include/c++/4.6/bits/stl_uninitialized.h:346:2, line:348:2>
      (ReturnStmt 0xa692cd8 <line:347:4, col:72>
        (CallExpr 0xa692ca8 <col:11, col:72> '<dependent type>'
          (UnresolvedLookupExpr 0xa692c10 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
          (DeclRefExpr 0xa692c44 <col:39> '_InputIterator2' lvalue ParmVar 0xa692850 '__first2' '_InputIterator2')
          (DeclRefExpr 0xa692c5c <col:49> '_InputIterator2' lvalue ParmVar 0xa692890 '__last2' '_InputIterator2')
          (DeclRefExpr 0xa692c74 <col:58> '_ForwardIterator' lvalue Var 0xa692ac0 '__mid' '_ForwardIterator')
          (DeclRefExpr 0xa692c8c <col:65> '_Allocator' lvalue ParmVar 0xa692940 '__alloc' '_Allocator &'))))
    <<<NULL>>>)
  (IfStmt 0xa692e30 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:353:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa692d20 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa692e18 </usr/include/c++/4.6/bits/stl_uninitialized.h:350:2, line:353:2>
      (CallExpr 0xa692de0 <line:351:4, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa692d58 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa692d98 <col:18> '_ForwardIterator' lvalue ParmVar 0xa6928d0 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa692db0 <col:28> '_ForwardIterator' lvalue Var 0xa692ac0 '__mid' '_ForwardIterator')
        (DeclRefExpr 0xa692dc8 <col:35> '_Allocator' lvalue ParmVar 0xa692940 '__alloc' '_Allocator &'))
      (NullStmt 0xa692e08 <line:352:27>))
    <<<NULL>>>))

;
    template <typename _InputIterator1, typename _InputIterator2, typename _ForwardIterator, typename _Allocator> inline _ForwardIterator __uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator &__alloc) (CompoundStmt 0xa693620 </usr/include/c++/4.6/bits/stl_uninitialized.h:369:5, line:382:5>
  (DeclStmt 0xa6933a8 <line:370:7, line:372:19>
    0xa693290 "_ForwardIterator __mid =
      (CallExpr 0xa693378 <line:370:32, line:372:18> '<dependent type>'
        (UnresolvedLookupExpr 0xa6932e0 <line:370:32, col:37> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
        (DeclRefExpr 0xa693314 <col:60> '_InputIterator1' lvalue ParmVar 0xa692fd0 '__first1' '_InputIterator1')
        (DeclRefExpr 0xa69332c <col:70> '_InputIterator1' lvalue ParmVar 0xa693010 '__last1' '_InputIterator1')
        (DeclRefExpr 0xa693344 <line:371:11> '_ForwardIterator' lvalue ParmVar 0xa6930d0 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa69335c <line:372:11> '_Allocator' lvalue ParmVar 0xa693140 '__alloc' '_Allocator &'))")
  (IfStmt 0xa6934d0 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:376:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa6933b8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa6934b8 </usr/include/c++/4.6/bits/stl_uninitialized.h:374:2, line:376:2>
      (ReturnStmt 0xa6934a8 <line:375:4, col:72>
        (CallExpr 0xa693478 <col:11, col:72> '<dependent type>'
          (UnresolvedLookupExpr 0xa6933e0 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
          (DeclRefExpr 0xa693418 <col:39> '_InputIterator2' lvalue ParmVar 0xa693050 '__first2' '_InputIterator2')
          (DeclRefExpr 0xa693430 <col:49> '_InputIterator2' lvalue ParmVar 0xa693090 '__last2' '_InputIterator2')
          (DeclRefExpr 0xa693448 <col:58> '_ForwardIterator' lvalue Var 0xa693290 '__mid' '_ForwardIterator')
          (DeclRefExpr 0xa693460 <col:65> '_Allocator' lvalue ParmVar 0xa693140 '__alloc' '_Allocator &'))))
    <<<NULL>>>)
  (IfStmt 0xa693600 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:381:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa6934f0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa6935e8 </usr/include/c++/4.6/bits/stl_uninitialized.h:378:2, line:381:2>
      (CallExpr 0xa6935b0 <line:379:4, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa693528 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa693568 <col:18> '_ForwardIterator' lvalue ParmVar 0xa6930d0 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa693580 <col:28> '_ForwardIterator' lvalue Var 0xa693290 '__mid' '_ForwardIterator')
        (DeclRefExpr 0xa693598 <col:35> '_Allocator' lvalue ParmVar 0xa693140 '__alloc' '_Allocator &'))
      (NullStmt 0xa6935d8 <line:380:27>))
    <<<NULL>>>))

;
    template <typename _ForwardIterator, typename _Tp, typename _InputIterator, typename _Allocator> inline _ForwardIterator __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &__x, _InputIterator __first, _InputIterator __last, _Allocator &__alloc) (CompoundStmt 0xa694640 </usr/include/c++/4.6/bits/stl_uninitialized.h:393:5, line:404:5>
  (CallExpr 0xa693b70 <line:394:7, col:64> '<dependent type>'
    (UnresolvedLookupExpr 0xa693ad8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6904d0 0xa690d10)
    (DeclRefExpr 0xa693b10 <col:35> '_ForwardIterator' lvalue ParmVar 0xa6937a0 '__result' '_ForwardIterator')
    (DeclRefExpr 0xa693b28 <col:45> '_ForwardIterator' lvalue ParmVar 0xa6937e0 '__mid' '_ForwardIterator')
    (DeclRefExpr 0xa693b40 <col:52> 'const _Tp' lvalue ParmVar 0xa693850 '__x' 'const _Tp &')
    (DeclRefExpr 0xa693b58 <col:57> '_Allocator' lvalue ParmVar 0xa693940 '__alloc' '_Allocator &'))
  (IfStmt 0xa693cb8 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:398:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa693ba0 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa693ca0 </usr/include/c++/4.6/bits/stl_uninitialized.h:396:2, line:398:2>
      (ReturnStmt 0xa693c90 <line:397:4, col:70>
        (CallExpr 0xa693c60 <col:11, col:70> '<dependent type>'
          (UnresolvedLookupExpr 0xa693bc8 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
          (DeclRefExpr 0xa693bfc <col:39> '_InputIterator' lvalue ParmVar 0xa693890 '__first' '_InputIterator')
          (DeclRefExpr 0xa693c14 <col:48> '_InputIterator' lvalue ParmVar 0xa6938d0 '__last' '_InputIterator')
          (DeclRefExpr 0xa693c2c <col:56> '_ForwardIterator' lvalue ParmVar 0xa6937e0 '__mid' '_ForwardIterator')
          (DeclRefExpr 0xa693c44 <col:63> '_Allocator' lvalue ParmVar 0xa693940 '__alloc' '_Allocator &'))))
    <<<NULL>>>)
  (IfStmt 0xa694620 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:403:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa693cd8 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa694608 </usr/include/c++/4.6/bits/stl_uninitialized.h:400:2, line:403:2>
      (CallExpr 0xa6945d0 <line:401:4, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa693d10 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa693d50 <col:18> '_ForwardIterator' lvalue ParmVar 0xa6937a0 '__result' '_ForwardIterator')
        (DeclRefExpr 0xa6945a0 <col:28> '_ForwardIterator' lvalue ParmVar 0xa6937e0 '__mid' '_ForwardIterator')
        (DeclRefExpr 0xa6945b8 <col:35> '_Allocator' lvalue ParmVar 0xa693940 '__alloc' '_Allocator &'))
      (NullStmt 0xa6945f8 <line:402:27>))
    <<<NULL>>>))

;
    template <typename _InputIterator, typename _ForwardIterator, typename _Tp, typename _Allocator> inline void __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp &__x, _Allocator &__alloc) (CompoundStmt 0xa694e70 </usr/include/c++/4.6/bits/stl_uninitialized.h:416:5, line:429:5>
  (DeclStmt 0xa694bf8 <line:417:7, line:419:20>
    0xa694ae0 "_ForwardIterator __mid2 =
      (CallExpr 0xa694bc8 <line:417:33, line:419:19> '<dependent type>'
        (UnresolvedLookupExpr 0xa694b30 <line:417:33, col:38> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
        (DeclRefExpr 0xa694b64 <col:61> '_InputIterator' lvalue ParmVar 0xa6947c0 '__first1' '_InputIterator')
        (DeclRefExpr 0xa694b7c <col:71> '_InputIterator' lvalue ParmVar 0xa694800 '__last1' '_InputIterator')
        (DeclRefExpr 0xa694b94 <line:418:12> '_ForwardIterator' lvalue ParmVar 0xa694840 '__first2' '_ForwardIterator')
        (DeclRefExpr 0xa694bac <line:419:12> '_Allocator' lvalue ParmVar 0xa694960 '__alloc' '_Allocator &'))")
  (IfStmt 0xa694d20 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:423:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa694c08 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa694d08 </usr/include/c++/4.6/bits/stl_uninitialized.h:421:2, line:423:2>
      (CallExpr 0xa694cd8 <line:422:4, col:61> '<dependent type>'
        (UnresolvedLookupExpr 0xa694c40 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6904d0 0xa690d10)
        (DeclRefExpr 0xa694c78 <col:32> '_ForwardIterator' lvalue Var 0xa694ae0 '__mid2' '_ForwardIterator')
        (DeclRefExpr 0xa694c90 <col:40> '_ForwardIterator' lvalue ParmVar 0xa694880 '__last2' '_ForwardIterator')
        (DeclRefExpr 0xa694ca8 <col:49> 'const _Tp' lvalue ParmVar 0xa6948f0 '__x' 'const _Tp &')
        (DeclRefExpr 0xa694cc0 <col:54> '_Allocator' lvalue ParmVar 0xa694960 '__alloc' '_Allocator &')))
    <<<NULL>>>)
  (IfStmt 0xa694e50 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_uninitialized.h:428:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa694d40 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa694e38 </usr/include/c++/4.6/bits/stl_uninitialized.h:425:2, line:428:2>
      (CallExpr 0xa694e00 <line:426:4, col:43> '<dependent type>'
        (UnresolvedLookupExpr 0xa694d78 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (DeclRefExpr 0xa694db8 <col:18> '_ForwardIterator' lvalue ParmVar 0xa694840 '__first2' '_ForwardIterator')
        (DeclRefExpr 0xa694dd0 <col:28> '_ForwardIterator' lvalue Var 0xa694ae0 '__mid2' '_ForwardIterator')
        (DeclRefExpr 0xa694de8 <col:36> '_Allocator' lvalue ParmVar 0xa694960 '__alloc' '_Allocator &'))
      (NullStmt 0xa694e28 <line:427:27>))
    <<<NULL>>>))

;
}
namespace std {
    template <typename _Tp = std::basic_string<char>, typename _Alloc = std::allocator<std::basic_string<char> >> struct _Vector_base {
        struct _Vector_base;
        typedef typename allocator<basic_string<char> >::rebind<basic_string<char> >::other _Tp_alloc_type;
        struct _Vector_impl : public _Tp_alloc_type {
            struct _Vector_impl;
            typename _Tp_alloc_type::pointer _M_start;
            typename _Tp_alloc_type::pointer _M_finish;
            typename _Tp_alloc_type::pointer _M_end_of_storage;
            _Vector_impl() : _Tp_alloc_type(), _M_start((ImplicitCastExpr 0xa9d0d18 </usr/include/c++/4.6/bits/stl_vector.h:83:31> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <NullToPointer>
  (IntegerLiteral 0xa696468 <col:31> 'int' 0))
), _M_finish((ImplicitCastExpr 0xa9d0e18 </usr/include/c++/4.6/bits/stl_vector.h:83:45> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <NullToPointer>
  (IntegerLiteral 0xa6964b8 <col:45> 'int' 0))
), _M_end_of_storage((ImplicitCastExpr 0xa9d0f18 </usr/include/c++/4.6/bits/stl_vector.h:83:67> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <NullToPointer>
  (IntegerLiteral 0xa696508 <col:67> 'int' 0))
) (CompoundStmt 0xa696568 </usr/include/c++/4.6/bits/stl_vector.h:84:2, col:4>)


            _Vector_impl(const _Tp_alloc_type &__a) : _Tp_alloc_type((DeclRefExpr 0xa9eafa4 </usr/include/c++/4.6/bits/stl_vector.h:87:19> 'const _Tp_alloc_type':'const class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa95ce60 '__a' 'const _Tp_alloc_type &')
), _M_start((ImplicitCastExpr 0xa9eb1c8 </usr/include/c++/4.6/bits/stl_vector.h:87:34> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <NullToPointer>
  (IntegerLiteral 0xa69a7f8 <col:34> 'int' 0))
), _M_finish((ImplicitCastExpr 0xa9eb2c8 </usr/include/c++/4.6/bits/stl_vector.h:87:48> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <NullToPointer>
  (IntegerLiteral 0xa69a848 <col:48> 'int' 0))
), _M_end_of_storage((ImplicitCastExpr 0xa9eb3c8 </usr/include/c++/4.6/bits/stl_vector.h:87:70> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <NullToPointer>
  (IntegerLiteral 0xa69a898 <col:70> 'int' 0))
) (CompoundStmt 0xa69a8f8 </usr/include/c++/4.6/bits/stl_vector.h:88:2, col:4>)


            inline _Vector_impl(const std::_Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char> > >::_Vector_impl &) throw();
            inline void ~_Vector_impl() throw() (CompoundStmt 0xa9d0b30 </usr/include/c++/4.6/bits/stl_vector.h:75:14>)


        };
    public:
    public:
        typedef std::allocator<std::basic_string<char> > allocator_type;
        _Tp_alloc_type &_M_get_Tp_allocator() (CompoundStmt 0xa9cb060 </usr/include/c++/4.6/bits/stl_vector.h:96:7, col:63>
  (ReturnStmt 0xa9cb050 <col:9, col:60>
    (UnaryOperator 0xa9cb038 <col:16, col:60> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue prefix '*'
      (CXXStaticCastExpr 0xa9cb020 <col:17, col:60> '_Tp_alloc_type *' static_cast<_Tp_alloc_type *> <NoOp>
        (ImplicitCastExpr 0xa9cb010 <col:46, col:53> '_Tp_alloc_type *' <DerivedToBase (allocator)>
          (UnaryOperator 0xa9caff8 <col:46, col:53> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl *' prefix '&'
            (MemberExpr 0xa9cafb8 <col:47, col:53> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (CXXThisExpr 0xa9cafa8 <col:47> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))


        const _Tp_alloc_type &_M_get_Tp_allocator() const (CompoundStmt 0xa9ca190 </usr/include/c++/4.6/bits/stl_vector.h:100:7, col:69>
  (ReturnStmt 0xa9ca180 <col:9, col:66>
    (UnaryOperator 0xa9ca168 <col:16, col:66> 'const _Tp_alloc_type':'const class std::allocator<class std::basic_string<char> >' lvalue prefix '*'
      (CXXStaticCastExpr 0xa9ca150 <col:17, col:66> 'const _Tp_alloc_type *' static_cast<const _Tp_alloc_type *> <NoOp>
        (ImplicitCastExpr 0xa9ca140 <col:52, col:59> 'const _Tp_alloc_type *' <DerivedToBase (allocator)>
          (UnaryOperator 0xa9ca128 <col:52, col:59> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl *' prefix '&'
            (MemberExpr 0xa9ca0e8 <col:53, col:59> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (CXXThisExpr 0xa9ca0d8 <col:53> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))


        allocator_type get_allocator() const;
        _Vector_base() : _M_impl() (CompoundStmt 0xa69ac50 </usr/include/c++/4.6/bits/stl_vector.h:107:19, col:21>)


        _Vector_base(const allocator_type &__a);
        _Vector_base(size_t __n);
        _Vector_base(size_t __n, const allocator_type &__a) : _M_impl((DeclRefExpr 0xa9eab74 </usr/include/c++/4.6/bits/stl_vector.h:121:17> 'const allocator_type':'const class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa95c230 '__a' 'const allocator_type &')
) (CompoundStmt 0xa9eaf88 </usr/include/c++/4.6/bits/stl_vector.h:122:7, line:126:7>
  (BinaryOperator 0xa9ead68 <line:123:2, col:48> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
    (MemberExpr 0xa9eacd0 <col:2, col:16> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
      (MemberExpr 0xa9eacb0 <col:2, col:8> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
        (CXXThisExpr 0xa9eaca0 <col:2> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
    (CXXMemberCallExpr 0xa9ead38 <col:27, col:48> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *'
      (MemberExpr 0xa9ead00 <col:27, col:33> '<bound member function type>' ->_M_allocate 0xa95d1e0
        (CXXThisExpr 0xa9eacf0 <col:27> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))
      (ImplicitCastExpr 0xa9ead58 <col:45> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9ead20 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa95c110 '__n' 'size_t':'unsigned int'))))
  (BinaryOperator 0xa9eae30 <line:124:2, col:42> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
    (MemberExpr 0xa9eadb0 <col:2, col:16> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
      (MemberExpr 0xa9ead90 <col:2, col:8> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
        (CXXThisExpr 0xa9ead80 <col:2> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
    (ImplicitCastExpr 0xa9eae20 <col:28, col:42> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
      (MemberExpr 0xa9eae00 <col:28, col:42> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
        (MemberExpr 0xa9eade0 <col:28, col:34> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
          (CXXThisExpr 0xa9eadd0 <col:28> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
  (BinaryOperator 0xa9eaf70 <line:125:2, col:61> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
    (MemberExpr 0xa9eae78 <col:2, col:16> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_end_of_storage 0xa95cbe0
      (MemberExpr 0xa9eae58 <col:2, col:8> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
        (CXXThisExpr 0xa9eae48 <col:2> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
    (BinaryOperator 0xa9eaf58 <col:36, col:61> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' '+'
      (ImplicitCastExpr 0xa9eaf38 <col:36, col:50> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9eaf00 <col:36, col:50> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
          (MemberExpr 0xa9eaee0 <col:36, col:42> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (CXXThisExpr 0xa9eaed0 <col:36> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
      (ImplicitCastExpr 0xa9eaf48 <col:61> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9eaf20 <col:61> 'size_t':'unsigned int' lvalue ParmVar 0xa95c110 '__n' 'size_t':'unsigned int')))))


        void ~_Vector_base() (CompoundStmt 0xa9d1270 </usr/include/c++/4.6/bits/stl_vector.h:142:7, line:143:36>
  (CXXMemberCallExpr 0xa9d1228 <line:142:9, line:143:33> 'void'
    (MemberExpr 0xa9d10a8 <line:142:9> '<bound member function type>' ->_M_deallocate 0xa95d400
      (CXXThisExpr 0xa9d0fd0 <col:9> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))
    (ImplicitCastExpr 0xa9d1250 <col:23, col:37> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
      (MemberExpr 0xa9d10f8 <col:23, col:37> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
        (MemberExpr 0xa9d10d8 <col:23, col:29> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
          (CXXThisExpr 0xa9d10c8 <col:23> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
    (ImplicitCastExpr 0xa9d1260 <col:47, line:143:25> 'size_t':'unsigned int' <IntegralCast>
      (BinaryOperator 0xa9d1210 <line:142:47, line:143:25> 'int' '-'
        (ImplicitCastExpr 0xa9d11f0 <line:142:47, col:61> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9d1180 <col:47, col:61> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_end_of_storage 0xa95cbe0
            (MemberExpr 0xa9d1160 <col:47, col:53> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (CXXThisExpr 0xa9d1150 <col:47> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
        (ImplicitCastExpr 0xa9d1200 <line:143:11, col:25> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9d11d0 <col:11, col:25> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
            (MemberExpr 0xa9d11b0 <col:11, col:17> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (CXXThisExpr 0xa9d11a0 <col:11> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))


    public:
    public:
        std::_Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char> > >::_Vector_impl _M_impl;
        typename _Tp_alloc_type::pointer _M_allocate(size_t __n) (CompoundStmt 0xa9cac70 </usr/include/c++/4.6/bits/stl_vector.h:150:7, col:54>
  (ReturnStmt 0xa9cac60 <col:9, col:51>
    (ConditionalOperator 0xa9cac40 <col:16, col:51> 'pointer':'class std::basic_string<char> *'
      (BinaryOperator 0xa9caa60 <col:16, col:23> '_Bool' '!='
        (ImplicitCastExpr 0xa9caa40 <col:16> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9caa24 <col:16> 'size_t':'unsigned int' lvalue ParmVar 0xa95d140 '__n' 'size_t':'unsigned int'))
        (ImplicitCastExpr 0xa9caa50 <col:23> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa69b798 <col:23> 'int' 0)))
      (CXXMemberCallExpr 0xa9cabb0 <col:27, col:47> 'pointer':'class std::basic_string<char> *'
        (MemberExpr 0xa9cab78 <col:27, col:35> '<bound member function type>' .allocate 0xa9572f0
          (ImplicitCastExpr 0xa9cabd0 <col:27> 'class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (allocator -> new_allocator)>
            (MemberExpr 0xa9cab58 <col:27> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (CXXThisExpr 0xa9caa78 <col:27> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
        (ImplicitCastExpr 0xa9cabf8 <col:44> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9cab98 <col:44> 'size_t':'unsigned int' lvalue ParmVar 0xa95d140 '__n' 'size_t':'unsigned int'))
        (CXXDefaultArgExpr 0xa9cac18 <<invalid sloc>> 'const void *'))
      (ImplicitCastExpr 0xa9cac30 <col:51> 'pointer':'class std::basic_string<char> *' <NullToPointer>
        (IntegerLiteral 0xa69b888 <col:51> 'int' 0)))))


        void _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n) (CompoundStmt 0xa9ce698 </usr/include/c++/4.6/bits/stl_vector.h:154:7, line:157:7>
  (IfStmt 0xa9ce678 <line:155:2, line:156:31>
    <<<NULL>>>
    (ImplicitCastExpr 0xa9ce4c0 <line:155:6> '_Bool' <PointerToBoolean>
      (ImplicitCastExpr 0xa9ce4b0 <col:6> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ce494 <col:6> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ParmVar 0xa95d340 '__p' 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *')))
    (CXXMemberCallExpr 0xa9ce618 <line:156:4, col:31> 'void'
      (MemberExpr 0xa9ce5c8 <col:4, col:12> '<bound member function type>' .deallocate 0xa9574d0
        (ImplicitCastExpr 0xa9ce640 <col:4> 'class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (allocator -> new_allocator)>
          (MemberExpr 0xa9ce5a8 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (CXXThisExpr 0xa9ce4d0 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
      (ImplicitCastExpr 0xa9ce658 <col:23> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (DeclRefExpr 0xa9ce5e8 <col:23> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ParmVar 0xa95d340 '__p' 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *'))
      (ImplicitCastExpr 0xa9ce668 <col:28> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9ce600 <col:28> 'size_t':'unsigned int' lvalue ParmVar 0xa95d380 '__n' 'size_t':'unsigned int')))
    <<<NULL>>>))


        inline _Vector_base(const std::_Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char> > > &) throw();
    }
template <typename _Tp, typename _Alloc> struct _Vector_base {
        struct _Vector_base;
        typedef typename _Alloc::_Alloc::rebind<_Tp>::other _Tp_alloc_type;
        struct _Vector_impl : public _Tp_alloc_type {
            struct _Vector_impl;
            typename _Tp_alloc_type::pointer _M_start;
            typename _Tp_alloc_type::pointer _M_finish;
            typename _Tp_alloc_type::pointer _M_end_of_storage;
            _Vector_impl() : _Tp_alloc_type(), _M_start((IntegerLiteral 0xa696468 </usr/include/c++/4.6/bits/stl_vector.h:83:31> 'int' 0)
), _M_finish((IntegerLiteral 0xa6964b8 </usr/include/c++/4.6/bits/stl_vector.h:83:45> 'int' 0)
), _M_end_of_storage((IntegerLiteral 0xa696508 </usr/include/c++/4.6/bits/stl_vector.h:83:67> 'int' 0)
) (CompoundStmt 0xa696568 </usr/include/c++/4.6/bits/stl_vector.h:84:2, col:4>)


            _Vector_impl(const _Tp_alloc_type &__a) : _Tp_alloc_type((DeclRefExpr 0xa696578 </usr/include/c++/4.6/bits/stl_vector.h:87:19> 'const _Tp_alloc_type':'const typename _Alloc::_Alloc::rebind<_Tp>::other' lvalue ParmVar 0xa6957f0 '__a' 'const _Tp_alloc_type &')
), _M_start((IntegerLiteral 0xa69a7f8 </usr/include/c++/4.6/bits/stl_vector.h:87:34> 'int' 0)
), _M_finish((IntegerLiteral 0xa69a848 </usr/include/c++/4.6/bits/stl_vector.h:87:48> 'int' 0)
), _M_end_of_storage((IntegerLiteral 0xa69a898 </usr/include/c++/4.6/bits/stl_vector.h:87:70> 'int' 0)
) (CompoundStmt 0xa69a8f8 </usr/include/c++/4.6/bits/stl_vector.h:88:2, col:4>)


        };
    public:
    public:
        typedef _Alloc allocator_type;
        _Tp_alloc_type &_M_get_Tp_allocator() (CompoundStmt 0xa69aa18 </usr/include/c++/4.6/bits/stl_vector.h:96:7, col:63>
  (ReturnStmt 0xa69aa08 <col:9, col:60>
    (UnaryOperator 0xa69a9f0 <col:16, col:60> '<dependent type>' prefix '*'
      (CXXStaticCastExpr 0xa69a9d8 <col:17, col:60> '_Tp_alloc_type *' static_cast<_Tp_alloc_type *> <Dependent>
        (UnaryOperator 0xa69a970 <col:46, col:53> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa69a938 <col:47, col:53> '<dependent type>' lvalue
            (CXXThisExpr 0xa69a928 <col:47> '_Vector_base<_Tp, _Alloc> *' this)))))))


        const _Tp_alloc_type &_M_get_Tp_allocator() const (CompoundStmt 0xa69ab38 </usr/include/c++/4.6/bits/stl_vector.h:100:7, col:69>
  (ReturnStmt 0xa69ab28 <col:9, col:66>
    (UnaryOperator 0xa69ab10 <col:16, col:66> '<dependent type>' prefix '*'
      (CXXStaticCastExpr 0xa69aaf8 <col:17, col:66> 'const _Tp_alloc_type *' static_cast<const _Tp_alloc_type *> <Dependent>
        (UnaryOperator 0xa69aa90 <col:52, col:59> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa69aa58 <col:53, col:59> '<dependent type>' lvalue
            (CXXThisExpr 0xa69aa48 <col:53> 'const _Vector_base<_Tp, _Alloc> *' this)))))))


        allocator_type get_allocator() const (CompoundStmt 0xa69abf8 </usr/include/c++/4.6/bits/stl_vector.h:104:7, col:55>
  (ReturnStmt 0xa69abe8 <col:9, col:52>
    (CXXUnresolvedConstructExpr 0xa69abc8 <col:16, col:52> 'allocator_type':'_Alloc'
      (CallExpr 0xa69aba8 <col:31, col:51> '<dependent type>'
        (UnresolvedMemberExpr 0xa69ab68 <col:31> '<bound member function type>' lvalue)))))


        _Vector_base<_Tp, _Alloc>() : _M_impl() (CompoundStmt 0xa69ac50 </usr/include/c++/4.6/bits/stl_vector.h:107:19, col:21>)


        _Vector_base<_Tp, _Alloc>(const allocator_type &__a) : _M_impl((DeclRefExpr 0xa69ac60 </usr/include/c++/4.6/bits/stl_vector.h:110:17> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa695cb0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa69acc0 </usr/include/c++/4.6/bits/stl_vector.h:110:22, col:24>)


        _Vector_base<_Tp, _Alloc>(size_t __n) : _M_impl() (CompoundStmt 0xa69b0d0 </usr/include/c++/4.6/bits/stl_vector.h:114:7, line:118:7>
  (BinaryOperator 0xa69ae10 <line:115:2, col:48> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa69ad58 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69ad20 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa69ad10 <col:2> '_Vector_base<_Tp, _Alloc> *' this)))
    (CallExpr 0xa69adf0 <col:27, col:48> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa69ada0 <col:27, col:33> '<dependent type>' lvalue
        (CXXThisExpr 0xa69ad90 <col:27> '_Vector_base<_Tp, _Alloc> *' this))
      (DeclRefExpr 0xa69add4 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa695dd0 '__n' 'size_t':'unsigned int')))
  (BinaryOperator 0xa69af28 <line:116:2, col:42> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa69ae70 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69ae38 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa69ae28 <col:2> '_Vector_base<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa69aef0 <col:28, col:42> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69aeb8 <col:28, col:34> '<dependent type>' lvalue
        (CXXThisExpr 0xa69aea8 <col:28> '_Vector_base<_Tp, _Alloc> *' this))))
  (BinaryOperator 0xa69b0b8 <line:117:2, col:61> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa69af88 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69af50 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa69af40 <col:2> '_Vector_base<_Tp, _Alloc> *' this)))
    (CXXOperatorCallExpr 0xa69b090 <col:36, col:61> '<dependent type>'
      (UnresolvedLookupExpr 0xa69b058 <col:59, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (CXXDependentScopeMemberExpr 0xa69b008 <col:36, col:50> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa69afd0 <col:36, col:42> '<dependent type>' lvalue
          (CXXThisExpr 0xa69afc0 <col:36> '_Vector_base<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa69b03c <col:61> 'size_t':'unsigned int' lvalue ParmVar 0xa695dd0 '__n' 'size_t':'unsigned int'))))


        _Vector_base<_Tp, _Alloc>(size_t __n, const allocator_type &__a) : _M_impl((DeclRefExpr 0xa69b0ec </usr/include/c++/4.6/bits/stl_vector.h:121:17> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa695f20 '__a' 'const allocator_type &')
) (CompoundStmt 0xa69b510 </usr/include/c++/4.6/bits/stl_vector.h:122:7, line:126:7>
  (BinaryOperator 0xa69b250 <line:123:2, col:48> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa69b198 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69b160 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa69b150 <col:2> '_Vector_base<_Tp, _Alloc> *' this)))
    (CallExpr 0xa69b230 <col:27, col:48> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa69b1e0 <col:27, col:33> '<dependent type>' lvalue
        (CXXThisExpr 0xa69b1d0 <col:27> '_Vector_base<_Tp, _Alloc> *' this))
      (DeclRefExpr 0xa69b214 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa695ed0 '__n' 'size_t':'unsigned int')))
  (BinaryOperator 0xa69b368 <line:124:2, col:42> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa69b2b0 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69b278 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa69b268 <col:2> '_Vector_base<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa69b330 <col:28, col:42> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69b2f8 <col:28, col:34> '<dependent type>' lvalue
        (CXXThisExpr 0xa69b2e8 <col:28> '_Vector_base<_Tp, _Alloc> *' this))))
  (BinaryOperator 0xa69b4f8 <line:125:2, col:61> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa69b3c8 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69b390 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa69b380 <col:2> '_Vector_base<_Tp, _Alloc> *' this)))
    (CXXOperatorCallExpr 0xa69b4d0 <col:36, col:61> '<dependent type>'
      (UnresolvedLookupExpr 0xa69b498 <col:59, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (CXXDependentScopeMemberExpr 0xa69b448 <col:36, col:50> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa69b410 <col:36, col:42> '<dependent type>' lvalue
          (CXXThisExpr 0xa69b400 <col:36> '_Vector_base<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa69b47c <col:61> 'size_t':'unsigned int' lvalue ParmVar 0xa695ed0 '__n' 'size_t':'unsigned int'))))


        void ~_Vector_base<_Tp, _Alloc>() (CompoundStmt 0xa69b768 </usr/include/c++/4.6/bits/stl_vector.h:142:7, line:143:36>
  (CallExpr 0xa69b740 <line:142:9, line:143:33> '<dependent type>'
    (MemberExpr 0xa69b540 <line:142:9> '<bound member function type>' ->_M_deallocate 0xa6963c0
      (CXXThisExpr 0xa69b530 <col:9> '_Vector_base<_Tp, _Alloc> *' this))
    (CXXDependentScopeMemberExpr 0xa69b5a8 <col:23, col:37> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa69b570 <col:23, col:29> '<dependent type>' lvalue
        (CXXThisExpr 0xa69b560 <col:23> '_Vector_base<_Tp, _Alloc> *' this)))
    (CXXOperatorCallExpr 0xa69b718 <col:47, line:143:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa69b6e0 <col:9, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
      (CXXDependentScopeMemberExpr 0xa69b628 <line:142:47, col:61> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa69b5f0 <col:47, col:53> '<dependent type>' lvalue
          (CXXThisExpr 0xa69b5e0 <col:47> '_Vector_base<_Tp, _Alloc> *' this)))
      (CXXDependentScopeMemberExpr 0xa69b6a8 <line:143:11, col:25> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa69b670 <col:11, col:17> '<dependent type>' lvalue
          (CXXThisExpr 0xa69b660 <col:11> '_Vector_base<_Tp, _Alloc> *' this))))))


    public:
    public:
        std::_Vector_base::_Vector_impl _M_impl;
        typename _Tp_alloc_type::pointer _M_allocate(size_t __n) (CompoundStmt 0xa69b8d0 </usr/include/c++/4.6/bits/stl_vector.h:150:7, col:54>
  (ReturnStmt 0xa69b8c0 <col:9, col:51>
    (ConditionalOperator 0xa69b8a0 <col:16, col:51> '<dependent type>'
      (BinaryOperator 0xa69b7d0 <col:16, col:23> '_Bool' '!='
        (ImplicitCastExpr 0xa69b7b0 <col:16> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa69b77c <col:16> 'size_t':'unsigned int' lvalue ParmVar 0xa696180 '__n' 'size_t':'unsigned int'))
        (ImplicitCastExpr 0xa69b7c0 <col:23> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa69b798 <col:23> 'int' 0)))
      (CallExpr 0xa69b868 <col:27, col:47> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa69b818 <col:27, col:35> '<dependent type>' lvalue
          (MemberExpr 0xa69b7f8 <col:27> 'struct std::_Vector_base::_Vector_impl' lvalue ->_M_impl 0xa696120
            (CXXThisExpr 0xa69b7e8 <col:27> '_Vector_base<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa69b84c <col:44> 'size_t':'unsigned int' lvalue ParmVar 0xa696180 '__n' 'size_t':'unsigned int'))
      (IntegerLiteral 0xa69b888 <col:51> 'int' 0))))


        void _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n) (CompoundStmt 0xa69b9e0 </usr/include/c++/4.6/bits/stl_vector.h:154:7, line:157:7>
  (IfStmt 0xa69b9c0 <line:155:2, line:156:31>
    <<<NULL>>>
    (DeclRefExpr 0xa69b8e4 <line:155:6> 'typename _Tp_alloc_type::pointer' lvalue ParmVar 0xa6962e0 '__p' 'typename _Tp_alloc_type::pointer')
    (CallExpr 0xa69b998 <line:156:4, col:31> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa69b930 <col:4, col:12> '<dependent type>' lvalue
        (MemberExpr 0xa69b910 <col:4> 'struct std::_Vector_base::_Vector_impl' lvalue ->_M_impl 0xa696120
          (CXXThisExpr 0xa69b900 <col:4> '_Vector_base<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa69b964 <col:23> 'typename _Tp_alloc_type::pointer' lvalue ParmVar 0xa6962e0 '__p' 'typename _Tp_alloc_type::pointer')
      (DeclRefExpr 0xa69b97c <col:28> 'size_t':'unsigned int' lvalue ParmVar 0xa696320 '__n' 'size_t':'unsigned int'))
    <<<NULL>>>))


    };
    template <typename _Tp = std::basic_string<char>, typename _Alloc = std::allocator<std::basic_string<char> >> class vector : protected _Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char> > > {
        class vector;
        typedef typename allocator<basic_string<char> >::value_type _Alloc_value_type;
        typedef _Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char> > > _Base;
        typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
    public:
    public:
        typedef std::basic_string<char> value_type;
        typedef typename _Tp_alloc_type::pointer pointer;
        typedef typename _Tp_alloc_type::const_pointer const_pointer;
        typedef typename _Tp_alloc_type::reference reference;
        typedef typename _Tp_alloc_type::const_reference const_reference;
        typedef __gnu_cxx::__normal_iterator<pointer, vector<basic_string<char>, allocator<basic_string<char> > > > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, vector<basic_string<char>, allocator<basic_string<char> > > > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::allocator<std::basic_string<char> > allocator_type;
    protected:
    protected:
        using _Base::_M_allocate;
        ;
        using _Base::_M_deallocate;
        ;
        using _Base::_M_impl;
        ;
        using _Base::_M_get_Tp_allocator;
        ;
        ;
    public:
    public:
        vector() : _Base() (CompoundStmt 0xa6a8cc0 </usr/include/c++/4.6/bits/stl_vector.h:218:17, col:19>)


        vector(const allocator_type &__a);
        vector(size_type __n, const value_type &__value, const allocator_type &__a);
        vector(const std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &__x) : _Base((CXXMemberCallExpr 0xa9e9548 </usr/include/c++/4.6/bits/stl_vector.h:279:15, col:24> 'size_type':'unsigned int'
  (MemberExpr 0xa9e9528 <col:15, col:19> '<bound member function type>' .size 0xa9613f0
    (DeclRefExpr 0xa9e9510 <col:15> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa95f900 '__x' 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > &')))
, (CXXMemberCallExpr 0xa9e9628 </usr/include/c++/4.6/bits/stl_vector.h:279:27, col:51> 'const _Tp_alloc_type':'const class std::allocator<class std::basic_string<char> >' lvalue
  (MemberExpr 0xa9e95f8 <col:27, col:31> '<bound member function type>' ._M_get_Tp_allocator 0xa958ca0
    (ImplicitCastExpr 0xa9e9648 <col:27> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue <UncheckedDerivedToBase (_Vector_base)>
      (DeclRefExpr 0xa9e9564 <col:27> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa95f900 '__x' 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > &'))))
) (CompoundStmt 0xa9eab60 </usr/include/c++/4.6/bits/stl_vector.h:280:7, line:284:7>
  (BinaryOperator 0xa9eab48 <line:280:9, line:283:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
    (MemberExpr 0xa9e97cc <line:280:9, col:23> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
      (MemberExpr 0xa9e97a0 <col:9, col:15> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
        (ImplicitCastExpr 0xa9e9790 <col:9> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
          (CXXThisExpr 0xa9e9780 <col:9> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
    (CallExpr 0xa9ea3a8 <line:281:4, line:283:32> 'class std::basic_string<char> *':'class std::basic_string<char> *'
      (ImplicitCastExpr 0xa9ea398 <line:281:4, col:9> 'class std::basic_string<char> *(*)(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9ea338 <col:4, col:9> 'class std::basic_string<char> *(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' lvalue Function 0xa9ea260 '__uninitialized_copy_a' 'class std::basic_string<char> *(class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa68fc00 '__uninitialized_copy_a')))
      (CXXConstructExpr 0xa9ea760 <col:32, col:42> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
        (MaterializeTemporaryExpr 0xa9ea750 <col:32, col:42> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
          (ImplicitCastExpr 0xa9ea740 <col:32, col:42> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
            (CXXMemberCallExpr 0xa9e98a0 <col:32, col:42> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
              (MemberExpr 0xa9e9880 <col:32, col:36> '<bound member function type>' .begin 0xa960b00
                (DeclRefExpr 0xa9e9828 <col:32> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa95f900 '__x' 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > &'))))))
      (CXXConstructExpr 0xa9eab10 <col:45, col:53> 'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
        (MaterializeTemporaryExpr 0xa9eab00 <col:45, col:53> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
          (ImplicitCastExpr 0xa9eaaf0 <col:45, col:53> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
            (CXXMemberCallExpr 0xa9e9938 <col:45, col:53> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
              (MemberExpr 0xa9e9914 <col:45, col:49> '<bound member function type>' .end 0xa960da0
                (DeclRefExpr 0xa9e98bc <col:45> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa95f900 '__x' 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > &'))))))
      (ImplicitCastExpr 0xa9eab38 <line:282:11, col:25> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9e99a4 <col:11, col:25> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
          (MemberExpr 0xa9e9978 <col:11, col:17> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9e9968 <col:11> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9e9958 <col:11> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
      (CXXMemberCallExpr 0xa9e9cd8 <line:283:11, col:31> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue
        (MemberExpr 0xa9e9ca8 <col:11> '<bound member function type>' ->_M_get_Tp_allocator 0xa958af0
          (ImplicitCastExpr 0xa9e9cf8 <col:11> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
            (CXXThisExpr 0xa9e9c98 <col:11> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))))


        template <typename _InputIterator> vector(_InputIterator __first, _InputIterator __last, const allocator_type &__a);
        void ~vector() (CompoundStmt 0xa9d1838 </usr/include/c++/4.6/bits/stl_vector.h:350:7, line:351:33>
  (CallExpr 0xa9d17f0 <line:350:9, line:351:30> 'void'
    (ImplicitCastExpr 0xa9d17e0 <line:350:9, col:14> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9d17b8 <col:9, col:14> 'void (class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' lvalue Function 0xa9aead0 '_Destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa686460 '_Destroy')))
    (ImplicitCastExpr 0xa9d1818 <col:23, col:37> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
      (MemberExpr 0xa9d1314 <col:23, col:37> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
        (MemberExpr 0xa9d12e8 <col:23, col:29> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
          (ImplicitCastExpr 0xa9d12d8 <col:23> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
            (CXXThisExpr 0xa9d12c8 <col:23> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
    (ImplicitCastExpr 0xa9d1828 <col:47, col:61> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
      (MemberExpr 0xa9d1384 <col:47, col:61> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
        (MemberExpr 0xa9d1358 <col:47, col:53> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
          (ImplicitCastExpr 0xa9d1348 <col:47> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
            (CXXThisExpr 0xa9d1338 <col:47> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
    (CXXMemberCallExpr 0xa9d16e8 <line:351:9, col:29> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue
      (MemberExpr 0xa9d16b8 <col:9> '<bound member function type>' ->_M_get_Tp_allocator 0xa958af0
        (ImplicitCastExpr 0xa9d1708 <col:9> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
          (CXXThisExpr 0xa9d16a8 <col:9> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))


        std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &operator=(const std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &__x);
        void assign(size_type __n, const value_type &__val);
        template <typename _InputIterator> void assign(_InputIterator __first, _InputIterator __last);
        using _Base::get_allocator;
        ;
        iterator begin() (CompoundStmt 0xa9ca7a8 </usr/include/c++/4.6/bits/stl_vector.h:464:7, col:50>
  (ReturnStmt 0xa9ca798 <col:9, col:47>
    (CXXConstructExpr 0xa9ca770 <col:16, col:47> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9ca760 <col:16, col:47> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9ca750 <col:16, col:47> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9ca6d8 <col:16, col:47> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xa9ca6b0 <col:16, col:39> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (class std::basic_string<char> *const &)'
              (ImplicitCastExpr 0xa9ca6a0 <col:25, col:39> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue <NoOp>
                (MemberExpr 0xa9ca67c <col:25, col:39> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
                  (MemberExpr 0xa9ca650 <col:25, col:31> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                    (ImplicitCastExpr 0xa9ca640 <col:25> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                      (CXXThisExpr 0xa9ca630 <col:25> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))))))


        const_iterator begin() const (CompoundStmt 0xa9d65b8 </usr/include/c++/4.6/bits/stl_vector.h:473:7, col:56>
  (ReturnStmt 0xa9d65a8 <col:9, col:53>
    (CXXConstructExpr 0xa9d6580 <col:16, col:53> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9d64f0 <col:16, col:53> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9d64e0 <col:16, col:53> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9d6168 <col:16, col:53> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' functional cast to const_iterator <ConstructorConversion>
            (CXXConstructExpr 0xa9d6140 <col:16, col:45> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class std::basic_string<char> *const &)'
              (MaterializeTemporaryExpr 0xa9d6130 <col:31, col:45> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue
                (ImplicitCastExpr 0xa9d6120 <col:31, col:45> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <NoOp>
                  (ImplicitCastExpr 0xa9d6110 <col:31, col:45> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
                    (MemberExpr 0xa9d60ec <col:31, col:45> 'const typename _Tp_alloc_type::pointer':'class std::basic_string<char> *const' lvalue ._M_start 0xa95c9a0
                      (MemberExpr 0xa9d60c0 <col:31, col:37> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                        (ImplicitCastExpr 0xa9d60b0 <col:31> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                          (CXXThisExpr 0xa9d60a0 <col:31> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))))))))


        iterator end() (CompoundStmt 0xa9ce9d8 </usr/include/c++/4.6/bits/stl_vector.h:482:7, col:51>
  (ReturnStmt 0xa9ce9c8 <col:9, col:48>
    (CXXConstructExpr 0xa9ce9a0 <col:16, col:48> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9ce990 <col:16, col:48> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9ce980 <col:16, col:48> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9ce908 <col:16, col:48> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xa9ce8e0 <col:16, col:39> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (class std::basic_string<char> *const &)'
              (ImplicitCastExpr 0xa9ce8d0 <col:25, col:39> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue <NoOp>
                (MemberExpr 0xa9ce8ac <col:25, col:39> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
                  (MemberExpr 0xa9ce880 <col:25, col:31> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                    (ImplicitCastExpr 0xa9ce870 <col:25> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                      (CXXThisExpr 0xa9ce860 <col:25> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))))))


        const_iterator end() const (CompoundStmt 0xa9d6c58 </usr/include/c++/4.6/bits/stl_vector.h:491:7, col:57>
  (ReturnStmt 0xa9d6c48 <col:9, col:54>
    (CXXConstructExpr 0xa9d6c20 <col:16, col:54> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9d6c10 <col:16, col:54> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9d6c00 <col:16, col:54> 'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9d6888 <col:16, col:54> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' functional cast to const_iterator <ConstructorConversion>
            (CXXConstructExpr 0xa9d6860 <col:16, col:45> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class std::basic_string<char> *const &)'
              (MaterializeTemporaryExpr 0xa9d6850 <col:31, col:45> 'const class std::basic_string<char> *const':'const class std::basic_string<char> *const' lvalue
                (ImplicitCastExpr 0xa9d6840 <col:31, col:45> 'const class std::basic_string<char> *':'const class std::basic_string<char> *' <NoOp>
                  (ImplicitCastExpr 0xa9d6830 <col:31, col:45> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
                    (MemberExpr 0xa9d680c <col:31, col:45> 'const typename _Tp_alloc_type::pointer':'class std::basic_string<char> *const' lvalue ._M_finish 0xa95cac0
                      (MemberExpr 0xa9d67e0 <col:31, col:37> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                        (ImplicitCastExpr 0xa9d67d0 <col:31> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                          (CXXThisExpr 0xa9d67c0 <col:31> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))))))))


        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
        size_type size() const (CompoundStmt 0xa9a6ab8 </usr/include/c++/4.6/bits/stl_vector.h:571:7, col:77>
  (ReturnStmt 0xa9a6aa8 <col:9, col:74>
    (CXXFunctionalCastExpr 0xa9a6a90 <col:16, col:74> 'size_type':'unsigned int' functional cast to size_type <NoOp>
      (ImplicitCastExpr 0xa9a6a80 <col:26, col:66> 'size_type':'unsigned int' <IntegralCast>
        (BinaryOperator 0xa9a6a68 <col:26, col:66> 'int' '-'
          (ImplicitCastExpr 0xa9a6a48 <col:26, col:40> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
            (MemberExpr 0xa9a69b4 <col:26, col:40> 'const typename _Tp_alloc_type::pointer':'class std::basic_string<char> *const' lvalue ._M_finish 0xa95cac0
              (MemberExpr 0xa9a6988 <col:26, col:32> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                (ImplicitCastExpr 0xa9a6978 <col:26> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                  (CXXThisExpr 0xa9a6948 <col:26> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
          (ImplicitCastExpr 0xa9a6a58 <col:52, col:66> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
            (MemberExpr 0xa9a6a24 <col:52, col:66> 'const typename _Tp_alloc_type::pointer':'class std::basic_string<char> *const' lvalue ._M_start 0xa95c9a0
              (MemberExpr 0xa9a69f8 <col:52, col:58> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                (ImplicitCastExpr 0xa9a69e8 <col:52> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                  (CXXThisExpr 0xa9a69d8 <col:52> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))))


        size_type max_size() const (CompoundStmt 0xa9c9fa8 </usr/include/c++/4.6/bits/stl_vector.h:576:7, col:50>
  (ReturnStmt 0xa9c9f98 <col:9, col:47>
    (CXXMemberCallExpr 0xa9c9f48 <col:16, col:47> 'size_type':'unsigned int'
      (MemberExpr 0xa9c9f28 <col:16, col:38> '<bound member function type>' .max_size 0xa957540
        (ImplicitCastExpr 0xa9c9f88 <col:16, col:36> 'const class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (new_allocator)>
          (CXXMemberCallExpr 0xa9c9ed8 <col:16, col:36> 'const _Tp_alloc_type':'const class std::allocator<class std::basic_string<char> >' lvalue
            (MemberExpr 0xa9c9ea8 <col:16> '<bound member function type>' ->_M_get_Tp_allocator 0xa958ca0
              (ImplicitCastExpr 0xa9c9f18 <col:16> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9c9e98 <col:16> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))))))


        void resize(size_type __new_size, value_type __x);
        size_type capacity() const;
        bool empty() const (CompoundStmt 0xa9d5fb0 </usr/include/c++/4.6/bits/stl_vector.h:660:7, col:34>
  (ReturnStmt 0xa9d5fa0 <col:9, col:31>
    (CXXOperatorCallExpr 0xa9d5f78 <col:16, col:31> '_Bool'
      (ImplicitCastExpr 0xa9d5f68 <col:24, <invalid sloc>> '_Bool (*)(const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d5f10 <col:24, <invalid sloc>> '_Bool (const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' lvalue Function 0xa9d51d0 'operator==' '_Bool (const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)'))
      (MaterializeTemporaryExpr 0xa9d5d30 <col:16, col:22> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9d5d20 <col:16, col:22> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXMemberCallExpr 0xa9d1c68 <col:16, col:22> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
            (MemberExpr 0xa9d1c48 <col:16> '<bound member function type>' ->begin 0xa960b00
              (CXXThisExpr 0xa9d1c38 <col:16> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
      (MaterializeTemporaryExpr 0xa9d5f00 <col:27, col:31> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9d5ef0 <col:27, col:31> 'const __normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
          (CXXMemberCallExpr 0xa9d4ea8 <col:27, col:31> 'const_iterator':'class __gnu_cxx::__normal_iterator<const class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
            (MemberExpr 0xa9d4e88 <col:27> '<bound member function type>' ->end 0xa960da0
              (CXXThisExpr 0xa9d4e78 <col:27> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))


        void reserve(size_type __n);
        reference operator[](size_type __n) (CompoundStmt 0xa9d8cf8 </usr/include/c++/4.6/bits/stl_vector.h:696:7, col:49>
  (ReturnStmt 0xa9d8ce8 <col:9, col:46>
    (UnaryOperator 0xa9d8cd0 <col:16, col:46> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue prefix '*'
      (ParenExpr 0xa9d8cb8 <col:17, col:46> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *'
        (BinaryOperator 0xa9d8ca0 <col:18, col:43> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' '+'
          (ImplicitCastExpr 0xa9d8c80 <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
            (MemberExpr 0xa9d8c44 <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
              (MemberExpr 0xa9d8c18 <col:18, col:24> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                (ImplicitCastExpr 0xa9d8c08 <col:18> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                  (CXXThisExpr 0xa9d8bf8 <col:18> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
          (ImplicitCastExpr 0xa9d8c90 <col:43> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa9d8c64 <col:43> 'size_type':'unsigned int' lvalue ParmVar 0xa961960 '__n' 'size_type':'unsigned int')))))))


        const_reference operator[](size_type __n) const (CompoundStmt 0xa9d9370 </usr/include/c++/4.6/bits/stl_vector.h:711:7, col:49>
  (ReturnStmt 0xa9d9360 <col:9, col:46>
    (ImplicitCastExpr 0xa9d9350 <col:16, col:46> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue <NoOp>
      (UnaryOperator 0xa9d9338 <col:16, col:46> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue prefix '*'
        (ParenExpr 0xa9d9320 <col:17, col:46> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *'
          (BinaryOperator 0xa9d9308 <col:18, col:43> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' '+'
            (ImplicitCastExpr 0xa9d92e8 <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
              (MemberExpr 0xa9d92ac <col:18, col:32> 'const typename _Tp_alloc_type::pointer':'class std::basic_string<char> *const' lvalue ._M_start 0xa95c9a0
                (MemberExpr 0xa9d9280 <col:18, col:24> 'const struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                  (ImplicitCastExpr 0xa9d9270 <col:18> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9d9260 <col:18> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
            (ImplicitCastExpr 0xa9d92f8 <col:43> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9d92cc <col:43> 'size_type':'unsigned int' lvalue ParmVar 0xa961b50 '__n' 'size_type':'unsigned int'))))))))


    protected:
    protected:
        void _M_range_check(size_type __n) const (CompoundStmt 0xa9d8ba8 </usr/include/c++/4.6/bits/stl_vector.h:717:7, line:720:7>
  (IfStmt 0xa9d8b88 <line:718:2, line:719:54>
    <<<NULL>>>
    (BinaryOperator 0xa9d8b30 <line:718:6, col:24> '_Bool' '>='
      (ImplicitCastExpr 0xa9d8b20 <col:6> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9d8ab4 <col:6> 'size_type':'unsigned int' lvalue ParmVar 0xa961ca0 '__n' 'size_type':'unsigned int'))
      (CXXMemberCallExpr 0xa9d8b00 <col:13, col:24> 'size_type':'unsigned int'
        (MemberExpr 0xa9d8ae0 <col:13, col:19> '<bound member function type>' ->size 0xa9613f0
          (CXXThisExpr 0xa9d8ad0 <col:13> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
    (CallExpr 0xa9d8b58 <line:719:4, col:54> 'void'
      (ImplicitCastExpr 0xa9d8b48 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6ac41c <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa9d8b78 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa6ac408 <col:24, col:30> 'const char [23]' lvalue
          (StringLiteral 0xa6ac3d0 </usr/include/c++/4.6/bits/stl_vector.h:719:29> 'const char [23]' lvalue "vector::_M_range_check"))))
    <<<NULL>>>))


    public:
    public:
        reference at(size_type __n) (CompoundStmt 0xa9d8a60 </usr/include/c++/4.6/bits/stl_vector.h:736:7, line:739:7>
  (CXXMemberCallExpr 0xa9d8920 <line:737:2, col:20> 'void'
    (MemberExpr 0xa9d88e8 <col:2> '<bound member function type>' ->_M_range_check 0xa961ce0
      (ImplicitCastExpr 0xa9d8940 <col:2> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <NoOp>
        (CXXThisExpr 0xa9d8808 <col:2> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
    (ImplicitCastExpr 0xa9d8950 <col:17> 'size_type':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa9d8908 <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa961e60 '__n' 'size_type':'unsigned int')))
  (ReturnStmt 0xa9d8a50 <line:738:2, col:20>
    (CXXOperatorCallExpr 0xa9d8a28 <col:9, col:20> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa9d8a18 <col:9, col:20> 'reference (*)(size_type)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d89c8 <col:9, col:20> 'reference (size_type)' lvalue CXXMethod 0xa961a00 'operator[]' 'reference (size_type)'))
      (ParenExpr 0xa9d8988 <col:9, col:15> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue
        (UnaryOperator 0xa9d8970 <col:10, col:11> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue prefix '*'
          (CXXThisExpr 0xa9d8960 <col:11> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
      (ImplicitCastExpr 0xa9d89b8 <col:17> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9d899c <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa961e60 '__n' 'size_type':'unsigned int')))))


        const_reference at(size_type __n) const (CompoundStmt 0xa9d9210 </usr/include/c++/4.6/bits/stl_vector.h:754:7, line:757:7>
  (CXXMemberCallExpr 0xa9d90e0 <line:755:2, col:20> 'void'
    (MemberExpr 0xa9d90a8 <col:2> '<bound member function type>' ->_M_range_check 0xa961ce0
      (CXXThisExpr 0xa9d8fc8 <col:2> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))
    (ImplicitCastExpr 0xa9d9100 <col:17> 'size_type':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa9d90c8 <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa961ff0 '__n' 'size_type':'unsigned int')))
  (ReturnStmt 0xa9d9200 <line:756:2, col:20>
    (CXXOperatorCallExpr 0xa9d91d8 <col:9, col:20> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa9d91c8 <col:9, col:20> 'const_reference (*)(size_type) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d9178 <col:9, col:20> 'const_reference (size_type) const' lvalue CXXMethod 0xa961bf0 'operator[]' 'const_reference (size_type) const'))
      (ParenExpr 0xa9d9138 <col:9, col:15> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue
        (UnaryOperator 0xa9d9120 <col:10, col:11> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue prefix '*'
          (CXXThisExpr 0xa9d9110 <col:11> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
      (ImplicitCastExpr 0xa9d9168 <col:17> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9d914c <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa961ff0 '__n' 'size_type':'unsigned int')))))


        reference front();
        const_reference front() const;
        reference back() (CompoundStmt 0xa9d7460 </usr/include/c++/4.6/bits/stl_vector.h:781:7, col:30>
  (ReturnStmt 0xa9d7450 <col:9, col:27>
    (CXXOperatorCallExpr 0xa9d7430 <col:16, col:27> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa9d7420 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d7408 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa9a8c10 'operator*' 'reference (void) const'))
      (ImplicitCastExpr 0xa9d73f8 <col:17, col:27> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
        (ParenExpr 0xa9d73e0 <col:17, col:27> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
          (CXXOperatorCallExpr 0xa9d73b8 <col:18, col:26> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
            (ImplicitCastExpr 0xa9d73a8 <col:24, <invalid sloc>> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > (*)(const difference_type &) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9d7358 <col:24, <invalid sloc>> 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > (const difference_type &) const' lvalue CXXMethod 0xa9aa140 'operator-' 'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > (const difference_type &) const'))
            (ImplicitCastExpr 0xa9d7348 <col:18, col:22> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
              (CXXMemberCallExpr 0xa9d7318 <col:18, col:22> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
                (MemberExpr 0xa9d72f8 <col:18> '<bound member function type>' ->end 0xa960c50
                  (CXXThisExpr 0xa9d72e8 <col:18> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
            (MaterializeTemporaryExpr 0xa9d7338 <col:26> 'const difference_type':'const int' lvalue
              (IntegerLiteral 0xa6ac8a0 <col:26> 'int' 1))))))))


        const_reference back() const;
        pointer data();
        const_pointer data() const;
        void push_back(const value_type &__x) (CompoundStmt 0xa9aadb8 </usr/include/c++/4.6/bits/stl_vector.h:827:7, line:835:7>
  (IfStmt 0xa9aad98 <line:828:2, line:834:28>
    <<<NULL>>>
    (BinaryOperator 0xa9a6c18 <line:828:6, col:47> '_Bool' '!='
      (ImplicitCastExpr 0xa9a6bf8 <col:6, col:20> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9a6b64 <col:6, col:20> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
          (MemberExpr 0xa9a6b38 <col:6, col:12> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9a6b28 <col:6> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9a6b18 <col:6> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
      (ImplicitCastExpr 0xa9a6c08 <col:33, col:47> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9a6bd4 <col:33, col:47> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_end_of_storage 0xa95cbe0
          (MemberExpr 0xa9a6ba8 <col:33, col:39> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9a6b98 <col:33> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9a6b88 <col:33> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
    (CompoundStmt 0xa9a6e18 <line:829:4, line:832:4>
      (CXXMemberCallExpr 0xa9a6d28 <line:830:6, col:58> 'void'
        (MemberExpr 0xa9a6c7c <col:6, col:20> '<bound member function type>' .construct 0xa957730
          (ImplicitCastExpr 0xa9a6d68 <col:6, col:12> 'class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (allocator -> new_allocator)>
            (MemberExpr 0xa9a6c50 <col:6, col:12> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9a6c40 <col:6> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9a6c30 <col:6> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (ImplicitCastExpr 0xa9a6d80 <col:30, col:44> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9a6cec <col:30, col:44> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
            (MemberExpr 0xa9a6cc0 <col:30, col:36> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9a6cb0 <col:30> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9a6ca0 <col:30> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (DeclRefExpr 0xa9a6d0c <col:55> 'const value_type':'const class std::basic_string<char>' lvalue ParmVar 0xa962a70 '__x' 'const value_type &'))
      (UnaryOperator 0xa9a6e00 <line:831:6, col:22> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue prefix '++'
        (MemberExpr 0xa9a6ddc <col:8, col:22> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
          (MemberExpr 0xa9a6db0 <col:8, col:14> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9a6da0 <col:8> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9a6d90 <col:8> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
    (CXXMemberCallExpr 0xa9aa280 <line:834:4, col:28> 'void'
      (MemberExpr 0xa9a6f08 <col:4> '<bound member function type>' ->_M_insert_aux 0xa967740
        (CXXThisExpr 0xa9a6e30 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))
      (CXXConstructExpr 0xa9aad70 <col:18, col:22> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) throw()' elidable
        (MaterializeTemporaryExpr 0xa9aace0 <col:18, col:22> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
          (ImplicitCastExpr 0xa9aacd0 <col:18, col:22> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
            (CXXMemberCallExpr 0xa9a72f8 <col:18, col:22> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
              (MemberExpr 0xa9a72d8 <col:18> '<bound member function type>' ->end 0xa960c50
                (CXXThisExpr 0xa9a72c8 <col:18> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
      (DeclRefExpr 0xa9aa268 <col:25> 'const value_type':'const class std::basic_string<char>' lvalue ParmVar 0xa962a70 '__x' 'const value_type &'))))


        void pop_back();
        iterator insert(iterator __position, const value_type &__x);
        void insert(iterator __position, size_type __n, const value_type &__x);
        template <typename _InputIterator> void insert(iterator __position, _InputIterator __first, _InputIterator __last);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        void swap(std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > &__x);
        void clear();
    protected:
    protected:
        template <typename _ForwardIterator> pointer _M_allocate_and_copy(size_type __n, _ForwardIterator __first, _ForwardIterator __last);
        template <typename _Integer> void _M_initialize_dispatch(_Integer __n, _Integer __value, std::__true_type);
        template <typename _InputIterator> void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type);
        template <typename _InputIterator> void _M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag);
        template <typename _ForwardIterator> void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
        void _M_fill_initialize(size_type __n, const value_type &__value);
        template <typename _Integer> void _M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type);
        template <typename _InputIterator> void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type);
        template <typename _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag);
        template <typename _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
        void _M_fill_assign(size_type __n, const value_type &__val);
        template <typename _Integer> void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, std::__true_type);
        template <typename _InputIterator> void _M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator __last, std::__false_type);
        template <typename _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag);
        template <typename _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
        void _M_fill_insert(iterator __pos, size_type __n, const value_type &__x);
        void _M_insert_aux(iterator __position, const value_type &__x) (CompoundStmt 0xa9afd58 </usr/include/c++/4.6/bits/vector.tcc:303:5, line:373:5>
  (IfStmt 0xa9afd38 <line:304:7, line:372:2>
    <<<NULL>>>
    (BinaryOperator 0xa9ab168 <line:304:11, col:52> '_Bool' '!='
      (ImplicitCastExpr 0xa9ab148 <col:11, col:25> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9ab0b4 <col:11, col:25> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
          (MemberExpr 0xa9ab088 <col:11, col:17> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9ab078 <col:11> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9ab068 <col:11> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
      (ImplicitCastExpr 0xa9ab158 <col:38, col:52> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
        (MemberExpr 0xa9ab124 <col:38, col:52> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_end_of_storage 0xa95cbe0
          (MemberExpr 0xa9ab0f8 <col:38, col:44> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9ab0e8 <col:38> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9ab0d8 <col:38> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
    (CompoundStmt 0xa9abc10 <line:305:2, line:321:2>
      (CXXMemberCallExpr 0xa9ab380 <line:306:4, line:308:14> 'void'
        (MemberExpr 0xa9ab1cc <line:306:4, col:18> '<bound member function type>' .construct 0xa957730
          (ImplicitCastExpr 0xa9ab3a8 <col:4, col:10> 'class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (allocator -> new_allocator)>
            (MemberExpr 0xa9ab1a0 <col:4, col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9ab190 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9ab180 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (ImplicitCastExpr 0xa9ab3c0 <col:28, col:42> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9ab23c <col:28, col:42> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
            (MemberExpr 0xa9ab210 <col:28, col:34> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9ab200 <col:28> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9ab1f0 <col:28> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (ImplicitCastExpr 0xa9ab3d0 </usr/include/c++/4.6/bits/move.h:105:30, col:36> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue <NoOp>
          (ParenExpr 0xa9ab368 <col:30, col:36> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue
            (UnaryOperator 0xa9ab350 </usr/include/c++/4.6/bits/vector.tcc:307:21, line:308:12> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue prefix '*'
              (ParenExpr 0xa9ab338 <line:307:22, line:308:12> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *'
                (BinaryOperator 0xa9ab320 <line:307:23, line:308:11> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' '-'
                  (ImplicitCastExpr 0xa9ab310 <line:307:23, col:37> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
                    (MemberExpr 0xa9ab2ec <col:23, col:37> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
                      (MemberExpr 0xa9ab2c0 <col:23, col:29> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                        (ImplicitCastExpr 0xa9ab2b0 <col:23> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                          (CXXThisExpr 0xa9ab2a0 <col:23> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
                  (IntegerLiteral 0xa6f4c48 <line:308:11> 'int' 1)))))))
      (UnaryOperator 0xa9ab450 <line:309:4, col:20> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue prefix '++'
        (MemberExpr 0xa9ab42c <col:6, col:20> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
          (MemberExpr 0xa9ab400 <col:6, col:12> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9ab3f0 <col:6> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9ab3e0 <col:6> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
      (DeclStmt 0xa9ab508 <line:311:4, col:22>
        0xa9ab490 "std::basic_string<char> __x_copy =
          (CXXConstructExpr 0xa9ab4e0 <col:19> 'class std::basic_string<char>':'class std::basic_string<char>''void (const class std::basic_string<char> &)'
            (DeclRefExpr 0xa9ab4c4 <col:19> 'const value_type':'const class std::basic_string<char>' lvalue ParmVar 0xa9676a0 '__x' 'const value_type &'))")
      (CallExpr 0xa9abab8 </usr/include/c++/4.6/bits/stl_algobase.h:666:48, col:80> 'class std::basic_string<char> *':'class std::basic_string<char> *'
        (ImplicitCastExpr 0xa9abaa8 <col:48, col:53> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9aba48 <col:48, col:53> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' lvalue Function 0xa9ab980 'copy_backward' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *)' (FunctionTemplate 0xa653060 'copy_backward')))
        (ImplicitCastExpr 0xa9abae0 </usr/include/c++/4.6/bits/vector.tcc:313:28, col:44> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
          (CXXMemberCallExpr 0xa9ab588 <col:28, col:44> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
            (MemberExpr 0xa9ab564 <col:28, col:39> '<bound member function type>' .base 0xa9aa200
              (ImplicitCastExpr 0xa9ab5c8 <col:28> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
                (DeclRefExpr 0xa9ab54c <col:28> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa967580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))))
        (BinaryOperator 0xa9ab698 <line:314:7, col:33> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' '-'
          (ImplicitCastExpr 0xa9ab688 <col:7, col:21> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
            (MemberExpr 0xa9ab664 <col:7, col:21> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
              (MemberExpr 0xa9ab638 <col:7, col:13> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                (ImplicitCastExpr 0xa9ab628 <col:7> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                  (CXXThisExpr 0xa9ab618 <col:7> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
          (IntegerLiteral 0xa6f4f90 <col:33> 'int' 2))
        (BinaryOperator 0xa9ab770 <line:315:7, col:33> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' '-'
          (ImplicitCastExpr 0xa9ab760 <col:7, col:21> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
            (MemberExpr 0xa9ab73c <col:7, col:21> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
              (MemberExpr 0xa9ab710 <col:7, col:13> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                (ImplicitCastExpr 0xa9ab700 <col:7> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                  (CXXThisExpr 0xa9ab6f0 <col:7> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
          (IntegerLiteral 0xa6f5090 <col:33> 'int' 1)))
      (CXXOperatorCallExpr 0xa9abbe8 <line:317:4, col:18> 'class std::basic_string<char>' lvalue
        (ImplicitCastExpr 0xa9abbd8 <col:16, <invalid sloc>> 'class std::basic_string<char> &(*)(const class std::basic_string<char> &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9abbc0 <col:16, <invalid sloc>> 'class std::basic_string<char> &(const class std::basic_string<char> &)' lvalue CXXMethod 0xa8412f0 'operator=' 'class std::basic_string<char> &(const class std::basic_string<char> &)'))
        (CXXOperatorCallExpr 0xa9abb78 <col:4, col:5> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue
          (ImplicitCastExpr 0xa9abb68 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9abb18 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa9a8c10 'operator*' 'reference (void) const'))
          (ImplicitCastExpr 0xa9abb08 <col:5> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
            (DeclRefExpr 0xa9abaec <col:5> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa967580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))
        (ImplicitCastExpr 0xa9abbb0 <col:18> 'const class std::basic_string<char>' lvalue <NoOp>
          (DeclRefExpr 0xa9abb98 <col:18> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue Var 0xa9ab490 '__x_copy' 'class std::basic_string<char>':'class std::basic_string<char>'))))
    (CompoundStmt 0xa9afcf8 <line:323:2, line:372:2>
      (DeclStmt 0xa9abde8 <line:324:4, line:325:57>
        0xa9abc40 "const size_type __len =
          (CXXMemberCallExpr 0xa9abda0 <col:6, col:56> 'size_type':'unsigned int'
            (MemberExpr 0xa9abd58 <col:6> '<bound member function type>' ->_M_check_len 0xa967830
              (ImplicitCastExpr 0xa9abdc8 <col:6> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <NoOp>
                (CXXThisExpr 0xa9abc78 <col:6> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
            (CXXFunctionalCastExpr 0xa9abd88 <col:19, col:30> 'size_type':'unsigned int' functional cast to size_type <NoOp>
              (ImplicitCastExpr 0xa9abd78 <col:29> 'size_type':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa6f5240 <col:29> 'int' 1)))
            (ImplicitCastExpr 0xa9abdd8 <col:33> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa6f52c0 <col:33> 'const char [22]' lvalue "vector::_M_insert_aux")))")
      (DeclStmt 0xa9accb0 <line:326:4, col:57>
        0xa9abe00 "const size_type __elems_before =
          (ImplicitCastExpr 0xa9acca0 <col:37, col:56> 'const size_type':'const unsigned int' <IntegralCast>
            (CXXOperatorCallExpr 0xa9acc78 <col:37, col:56> 'typename __normal_iterator<class basic_string<char> *, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::difference_type':'int'
              (ImplicitCastExpr 0xa9acc68 <col:48, <invalid sloc>> 'typename __normal_iterator<class basic_string<char> *, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::difference_type (*)(const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9acc18 <col:48, <invalid sloc>> 'typename __normal_iterator<class basic_string<char> *, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::difference_type (const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' lvalue Function 0xa9acb00 'operator-' 'typename __normal_iterator<class basic_string<char> *, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::difference_type (const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &, const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)'))
              (ImplicitCastExpr 0xa9acbb8 <col:37> 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
                (DeclRefExpr 0xa9abe74 <col:37> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa967580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'))
              (MaterializeTemporaryExpr 0xa9acc08 <col:50, col:56> 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                (ImplicitCastExpr 0xa9acbf8 <col:50, col:56> 'const __normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
                  (CXXMemberCallExpr 0xa9ac278 <col:50, col:56> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >'
                    (MemberExpr 0xa9ac258 <col:50> '<bound member function type>' ->begin 0xa960970
                      (CXXThisExpr 0xa9ac248 <col:50> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))))")
      (DeclStmt 0xa9ace60 <line:327:4, col:49>
        0xa9acd90 "pointer __new_start =
          (CXXMemberCallExpr 0xa9ace20 <col:24, col:47> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *'
            (MemberExpr 0xa9acdd8 <col:24, col:30> '<bound member function type>' ->_M_allocate 0xa95d1e0
              (ImplicitCastExpr 0xa9ace40 <col:24> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9acdc8 <col:24> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
            (ImplicitCastExpr 0xa9ace50 <col:42> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9ace04 <col:42> 'const size_type':'const unsigned int' lvalue Var 0xa9abc40 '__len' 'const size_type':'const unsigned int')))")
      (DeclStmt 0xa9acfa0 <line:328:4, col:37>
        0xa9acf40 "pointer __new_finish =
          (ImplicitCastExpr 0xa9acf90 <col:25> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9acf74 <col:25> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))")
      (IfStmt 0xa9ae038 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/vector.tcc:354:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa6f55f0 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
        (CompoundStmt 0xa9ae010 </usr/include/c++/4.6/bits/vector.tcc:330:6, line:354:6>
          (CXXMemberCallExpr 0xa9ad0e0 <line:335:8, line:339:35> 'void'
            (MemberExpr 0xa9acffc <line:335:8, col:22> '<bound member function type>' .construct 0xa957730
              (ImplicitCastExpr 0xa9ad108 <col:8, col:14> 'class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (allocator -> new_allocator)>
                (MemberExpr 0xa9acfd0 <col:8, col:14> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                  (ImplicitCastExpr 0xa9acfc0 <col:8> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9acfb0 <col:8> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
            (BinaryOperator 0xa9ad0b0 <col:32, col:46> 'pointer':'class std::basic_string<char> *' '+'
              (ImplicitCastExpr 0xa9ad090 <col:32> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9ad05c <col:32> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))
              (ImplicitCastExpr 0xa9ad0a0 <col:46> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa9ad074 <col:46> 'const size_type':'const unsigned int' lvalue Var 0xa9abe00 '__elems_before' 'const size_type':'const unsigned int')))
            (DeclRefExpr 0xa9ad0c8 <line:339:32> 'const value_type':'const class std::basic_string<char>' lvalue ParmVar 0xa9676a0 '__x' 'const value_type &'))
          (BinaryOperator 0xa9ad148 <line:341:8, col:23> 'pointer':'class std::basic_string<char> *' lvalue '='
            (DeclRefExpr 0xa9ad11c <col:8> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *')
            (ImplicitCastExpr 0xa9ad138 <col:23> 'pointer':'class std::basic_string<char> *' <NullToPointer>
              (IntegerLiteral 0xa6f5770 <col:23> 'int' 0)))
          (BinaryOperator 0xa9ada28 <line:343:8, line:346:31> 'pointer':'class std::basic_string<char> *' lvalue '='
            (DeclRefExpr 0xa9ad160 <line:343:8> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *')
            (CallExpr 0xa9ad9c8 <line:344:3, line:346:31> 'class std::basic_string<char> *':'class std::basic_string<char> *'
              (ImplicitCastExpr 0xa9ad9b8 <line:344:3, col:8> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, class std::allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9ad958 <col:3, col:8> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, class std::allocator<class std::basic_string<char> > &)' lvalue Function 0xa9ad880 '__uninitialized_move_a' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, class std::allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa690010 '__uninitialized_move_a')))
              (ImplicitCastExpr 0xa9ad9f8 <col:31, col:45> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
                (MemberExpr 0xa9ad1fc <col:31, col:45> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
                  (MemberExpr 0xa9ad1d0 <col:31, col:37> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                    (ImplicitCastExpr 0xa9ad1c0 <col:31> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                      (CXXThisExpr 0xa9ad1b0 <col:31> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
              (ImplicitCastExpr 0xa9ada08 <line:345:10, col:26> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                (CXXMemberCallExpr 0xa9ad258 <col:10, col:26> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
                  (MemberExpr 0xa9ad234 <col:10, col:21> '<bound member function type>' .base 0xa9aa200
                    (ImplicitCastExpr 0xa9ad278 <col:10> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
                      (DeclRefExpr 0xa9ad21c <col:10> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa967580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))))
              (ImplicitCastExpr 0xa9ada18 <col:29> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9ad284 <col:29> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))
              (CXXMemberCallExpr 0xa9ad5a8 <line:346:10, col:30> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue
                (MemberExpr 0xa9ad578 <col:10> '<bound member function type>' ->_M_get_Tp_allocator 0xa958af0
                  (ImplicitCastExpr 0xa9ad5c8 <col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9ad568 <col:10> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
          (UnaryOperator 0xa9ada58 <line:347:8, col:10> 'pointer':'class std::basic_string<char> *' lvalue prefix '++'
            (DeclRefExpr 0xa9ada40 <col:10> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *'))
          (BinaryOperator 0xa9adff8 <line:349:8, line:353:31> 'pointer':'class std::basic_string<char> *' lvalue '='
            (DeclRefExpr 0xa9ada6c <line:349:8> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *')
            (CallExpr 0xa9adf98 <line:350:3, line:353:31> 'class std::basic_string<char> *':'class std::basic_string<char> *'
              (ImplicitCastExpr 0xa9adf88 <line:350:3, col:8> 'class std::basic_string<char> *(*)(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, class std::allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9adf60 <col:3, col:8> 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, class std::allocator<class std::basic_string<char> > &)' lvalue Function 0xa9ad880 '__uninitialized_move_a' 'class std::basic_string<char> *(class std::basic_string<char> *, class std::basic_string<char> *, class std::basic_string<char> *, class std::allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa690010 '__uninitialized_move_a')))
              (ImplicitCastExpr 0xa9adfc8 <col:31, col:47> 'class std::basic_string<char> *':'class std::basic_string<char> *' <LValueToRValue>
                (CXXMemberCallExpr 0xa9adaf8 <col:31, col:47> 'class std::basic_string<char> *const':'class std::basic_string<char> *const' lvalue
                  (MemberExpr 0xa9adad4 <col:31, col:42> '<bound member function type>' .base 0xa9aa200
                    (ImplicitCastExpr 0xa9adb18 <col:31> 'const class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue <NoOp>
                      (DeclRefExpr 0xa9adabc <col:31> 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa967580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<class std::basic_string<char> *, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >')))))
              (ImplicitCastExpr 0xa9adfd8 <line:351:10, col:24> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
                (MemberExpr 0xa9adb74 <col:10, col:24> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
                  (MemberExpr 0xa9adb48 <col:10, col:16> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                    (ImplicitCastExpr 0xa9adb38 <col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                      (CXXThisExpr 0xa9adb28 <col:10> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
              (ImplicitCastExpr 0xa9adfe8 <line:352:10> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9adb94 <col:10> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *'))
              (CXXMemberCallExpr 0xa9adeb8 <line:353:10, col:30> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue
                (MemberExpr 0xa9ade88 <col:10> '<bound member function type>' ->_M_get_Tp_allocator 0xa958af0
                  (ImplicitCastExpr 0xa9aded8 <col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9ade78 <col:10> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))))
        <<<NULL>>>)
      (IfStmt 0xa9aefe0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/vector.tcc:363:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa6f5c38 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa9aefc0 </usr/include/c++/4.6/bits/vector.tcc:356:6, line:363:6>
          (IfStmt 0xa9aec50 <line:357:8, line:360:65>
            <<<NULL>>>
            (UnaryOperator 0xa9ae090 <line:357:12, col:13> '_Bool' prefix '!'
              (ImplicitCastExpr 0xa9ae080 <col:13> '_Bool' <PointerToBoolean>
                (ImplicitCastExpr 0xa9ae070 <col:13> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                  (DeclRefExpr 0xa9ae054 <col:13> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *'))))
            (CXXMemberCallExpr 0xa9ae1c0 <line:358:3, col:53> 'void'
              (MemberExpr 0xa9ae0f4 <col:3, col:17> '<bound member function type>' .destroy 0xa9578d0
                (ImplicitCastExpr 0xa9ae1e0 <col:3, col:9> 'class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <UncheckedDerivedToBase (allocator -> new_allocator)>
                  (MemberExpr 0xa9ae0c8 <col:3, col:9> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                    (ImplicitCastExpr 0xa9ae0b8 <col:3> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                      (CXXThisExpr 0xa9ae0a8 <col:3> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
              (BinaryOperator 0xa9ae1a8 <col:25, col:39> 'pointer':'class std::basic_string<char> *' '+'
                (ImplicitCastExpr 0xa9ae188 <col:25> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                  (DeclRefExpr 0xa9ae154 <col:25> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))
                (ImplicitCastExpr 0xa9ae198 <col:39> 'size_type':'unsigned int' <LValueToRValue>
                  (DeclRefExpr 0xa9ae16c <col:39> 'const size_type':'const unsigned int' lvalue Var 0xa9abe00 '__elems_before' 'const size_type':'const unsigned int'))))
            (CallExpr 0xa9aec08 <line:360:3, col:65> 'void'
              (ImplicitCastExpr 0xa9aebf8 <col:3, col:8> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9aeb98 <col:3, col:8> 'void (class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' lvalue Function 0xa9aead0 '_Destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa686460 '_Destroy')))
              (ImplicitCastExpr 0xa9aec30 <col:17> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9ae238 <col:17> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))
              (ImplicitCastExpr 0xa9aec40 <col:30> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
                (DeclRefExpr 0xa9ae250 <col:30> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *'))
              (CXXMemberCallExpr 0xa9ae578 <col:44, col:64> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue
                (MemberExpr 0xa9ae548 <col:44> '<bound member function type>' ->_M_get_Tp_allocator 0xa958af0
                  (ImplicitCastExpr 0xa9ae598 <col:44> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9ae538 <col:44> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
          (CXXMemberCallExpr 0xa9aef68 <line:361:8, col:40> 'void'
            (MemberExpr 0xa9aef08 <col:8> '<bound member function type>' ->_M_deallocate 0xa95d400
              (ImplicitCastExpr 0xa9aef90 <col:8> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9aeef8 <col:8> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
            (ImplicitCastExpr 0xa9aefa0 <col:22> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
              (DeclRefExpr 0xa9aef34 <col:22> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))
            (ImplicitCastExpr 0xa9aefb0 <col:35> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9aef4c <col:35> 'const size_type':'const unsigned int' lvalue Var 0xa9abc40 '__len' 'const size_type':'const unsigned int')))
          (NullStmt 0xa6f5f80 <line:362:31>))
        <<<NULL>>>)
      (CallExpr 0xa9af530 <line:364:4, line:365:25> 'void'
        (ImplicitCastExpr 0xa9af520 <line:364:4, col:9> 'void (*)(class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9af4f8 <col:4, col:9> 'void (class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' lvalue Function 0xa9aead0 '_Destroy' 'void (class std::basic_string<char> *, class std::basic_string<char> *, allocator<class std::basic_string<char> > &)' (FunctionTemplate 0xa686460 '_Destroy')))
        (ImplicitCastExpr 0xa9af558 <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9af08c <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
            (MemberExpr 0xa9af060 <col:18, col:24> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9af050 <col:18> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9af040 <col:18> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (ImplicitCastExpr 0xa9af568 <col:42, col:56> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9af0fc <col:42, col:56> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
            (MemberExpr 0xa9af0d0 <col:42, col:48> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9af0c0 <col:42> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9af0b0 <col:42> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (CXXMemberCallExpr 0xa9af428 <line:365:4, col:24> '_Tp_alloc_type':'class std::allocator<class std::basic_string<char> >' lvalue
          (MemberExpr 0xa9af3f8 <col:4> '<bound member function type>' ->_M_get_Tp_allocator 0xa958af0
            (ImplicitCastExpr 0xa9af448 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9af3e8 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
      (CXXMemberCallExpr 0xa9afa10 <line:366:4, line:368:28> 'void'
        (MemberExpr 0xa9af818 <line:366:4> '<bound member function type>' ->_M_deallocate 0xa95d400
          (ImplicitCastExpr 0xa9afa38 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
            (CXXThisExpr 0xa9af808 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
        (ImplicitCastExpr 0xa9afa48 <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
          (MemberExpr 0xa9af894 <col:18, col:32> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
            (MemberExpr 0xa9af868 <col:18, col:24> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
              (ImplicitCastExpr 0xa9af858 <col:18> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                (CXXThisExpr 0xa9af848 <col:18> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
        (ImplicitCastExpr 0xa9afa58 <line:367:4, line:368:20> 'size_t':'unsigned int' <IntegralCast>
          (BinaryOperator 0xa9af9f8 <line:367:4, line:368:20> 'int' '-'
            (ImplicitCastExpr 0xa9af9d8 <line:367:4, col:18> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
              (MemberExpr 0xa9af944 <col:4, col:18> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_end_of_storage 0xa95cbe0
                (MemberExpr 0xa9af918 <col:4, col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                  (ImplicitCastExpr 0xa9af908 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9af8f8 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))))
            (ImplicitCastExpr 0xa9af9e8 <line:368:6, col:20> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' <LValueToRValue>
              (MemberExpr 0xa9af9b4 <col:6, col:20> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
                (MemberExpr 0xa9af988 <col:6, col:12> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
                  (ImplicitCastExpr 0xa9af978 <col:6> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
                    (CXXThisExpr 0xa9af968 <col:6> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))))
      (BinaryOperator 0xa9afb00 <line:369:4, col:29> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
        (MemberExpr 0xa9afab4 <col:4, col:18> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_start 0xa95c9a0
          (MemberExpr 0xa9afa88 <col:4, col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9afa78 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9afa68 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
        (ImplicitCastExpr 0xa9afaf0 <col:29> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9afad4 <col:29> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *')))
      (BinaryOperator 0xa9afbb0 <line:370:4, col:30> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
        (MemberExpr 0xa9afb64 <col:4, col:18> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_finish 0xa95cac0
          (MemberExpr 0xa9afb38 <col:4, col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9afb28 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9afb18 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
        (ImplicitCastExpr 0xa9afba0 <col:30> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
          (DeclRefExpr 0xa9afb84 <col:30> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acf40 '__new_finish' 'pointer':'class std::basic_string<char> *')))
      (BinaryOperator 0xa9afce0 <line:371:4, col:52> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue '='
        (MemberExpr 0xa9afc14 <col:4, col:18> 'typename _Tp_alloc_type::pointer':'class std::basic_string<char> *' lvalue ._M_end_of_storage 0xa95cbe0
          (MemberExpr 0xa9afbe8 <col:4, col:10> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >::_Vector_impl' lvalue ->_M_impl 0xa95d030
            (ImplicitCastExpr 0xa9afbd8 <col:4> 'struct std::_Vector_base<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' <UncheckedDerivedToBase (_Vector_base)>
              (CXXThisExpr 0xa9afbc8 <col:4> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
        (BinaryOperator 0xa9afcc8 <col:38, col:52> 'pointer':'class std::basic_string<char> *' '+'
          (ImplicitCastExpr 0xa9afca8 <col:38> 'pointer':'class std::basic_string<char> *' <LValueToRValue>
            (DeclRefExpr 0xa9afc74 <col:38> 'pointer':'class std::basic_string<char> *' lvalue Var 0xa9acd90 '__new_start' 'pointer':'class std::basic_string<char> *'))
          (ImplicitCastExpr 0xa9afcb8 <col:52> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa9afc8c <col:52> 'const size_type':'const unsigned int' lvalue Var 0xa9abc40 '__len' 'const size_type':'const unsigned int')))))))


        size_type _M_check_len(size_type __n, const char *__s) const (CompoundStmt 0xa9c9bb0 </usr/include/c++/4.6/bits/stl_vector.h:1240:7, line:1246:7>
  (IfStmt 0xa9b3d10 <line:1241:2, line:1242:33>
    <<<NULL>>>
    (BinaryOperator 0xa9b3c88 <line:1241:6, col:28> '_Bool' '<'
      (BinaryOperator 0xa9b3c48 <col:6, col:24> 'unsigned int' '-'
        (CXXMemberCallExpr 0xa9b3b08 <col:6, col:15> 'size_type':'unsigned int'
          (MemberExpr 0xa9b3ae8 <col:6> '<bound member function type>' ->max_size 0xa961460
            (CXXThisExpr 0xa9b3a10 <col:6> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
        (CXXMemberCallExpr 0xa9b3c28 <col:19, col:24> 'size_type':'unsigned int'
          (MemberExpr 0xa9b3c08 <col:19> '<bound member function type>' ->size 0xa9613f0
            (CXXThisExpr 0xa9b3b28 <col:19> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
      (ImplicitCastExpr 0xa9b3c78 <col:28> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9b3c60 <col:28> 'size_type':'unsigned int' lvalue ParmVar 0xa9677b0 '__n' 'size_type':'unsigned int')))
    (CallExpr 0xa9b3ce0 <line:1242:4, col:33> 'void'
      (ImplicitCastExpr 0xa9b3cd0 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6b24bc <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa9b3d00 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <LValueToRValue>
        (ParenExpr 0xa9b3cb8 <col:24, col:30> 'const char *' lvalue
          (DeclRefExpr 0xa9b3ca0 </usr/include/c++/4.6/bits/stl_vector.h:1242:29> 'const char *' lvalue ParmVar 0xa9677f0 '__s' 'const char *'))))
    <<<NULL>>>)
  (DeclStmt 0xa9c9698 <line:1244:2, col:56>
    0xa9b3d30 "const size_type __len =
      (BinaryOperator 0xa9c9680 <col:26, col:55> 'unsigned int' '+'
        (CXXMemberCallExpr 0xa9b3e98 <col:26, col:31> 'size_type':'unsigned int'
          (MemberExpr 0xa9b3e78 <col:26> '<bound member function type>' ->size 0xa9613f0
            (CXXThisExpr 0xa9b3da0 <col:26> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
        (ImplicitCastExpr 0xa9c9670 <col:35, col:55> 'unsigned int':'unsigned int' <LValueToRValue>
          (CallExpr 0xa9c9628 <col:35, col:55> 'const unsigned int':'const unsigned int' lvalue
            (ImplicitCastExpr 0xa9c9618 <col:35, col:40> 'const unsigned int &(*)(const unsigned int &, const unsigned int &)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9c95d8 <col:35, col:40> 'const unsigned int &(const unsigned int &, const unsigned int &)' lvalue Function 0xa9b4190 'max' 'const unsigned int &(const unsigned int &, const unsigned int &)' (FunctionTemplate 0xa6438d0 'max')))
            (MaterializeTemporaryExpr 0xa9c9650 <col:44, col:49> 'const unsigned int':'const unsigned int' lvalue
              (CXXMemberCallExpr 0xa9b3fe8 <col:44, col:49> 'size_type':'unsigned int'
                (MemberExpr 0xa9b3fc8 <col:44> '<bound member function type>' ->size 0xa9613f0
                  (CXXThisExpr 0xa9b3ef0 <col:44> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
            (ImplicitCastExpr 0xa9c9660 <col:52> 'const unsigned int':'const unsigned int' lvalue <NoOp>
              (DeclRefExpr 0xa9b4004 <col:52> 'size_type':'unsigned int' lvalue ParmVar 0xa9677b0 '__n' 'size_type':'unsigned int')))))")
  (ReturnStmt 0xa9c9ba0 <line:1245:2, col:63>
    (ConditionalOperator 0xa9c9b50 <col:9, col:63> 'size_type':'unsigned int'
      (ParenExpr 0xa9c99f8 <col:9, col:46> '_Bool'
        (BinaryOperator 0xa9c99e0 <col:10, col:45> '_Bool' '||'
          (BinaryOperator 0xa9c9828 <col:10, col:23> '_Bool' '<'
            (ImplicitCastExpr 0xa9c9818 <col:10> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9c96e4 <col:10> 'const size_type':'const unsigned int' lvalue Var 0xa9b3d30 '__len' 'const size_type':'const unsigned int'))
            (CXXMemberCallExpr 0xa9c97f8 <col:18, col:23> 'size_type':'unsigned int'
              (MemberExpr 0xa9c97d8 <col:18> '<bound member function type>' ->size 0xa9613f0
                (CXXThisExpr 0xa9c9700 <col:18> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))
          (BinaryOperator 0xa9c99c8 <col:28, col:45> '_Bool' '>'
            (ImplicitCastExpr 0xa9c99b8 <col:28> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9c987c <col:28> 'const size_type':'const unsigned int' lvalue Var 0xa9b3d30 '__len' 'const size_type':'const unsigned int'))
            (CXXMemberCallExpr 0xa9c9998 <col:36, col:45> 'size_type':'unsigned int'
              (MemberExpr 0xa9c9978 <col:36> '<bound member function type>' ->max_size 0xa961460
                (CXXThisExpr 0xa9c9898 <col:36> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this))))))
      (CXXMemberCallExpr 0xa9c9b08 <col:50, col:59> 'size_type':'unsigned int'
        (MemberExpr 0xa9c9ae8 <col:50> '<bound member function type>' ->max_size 0xa961460
          (CXXThisExpr 0xa9c9a10 <col:50> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > *' this)))
      (ImplicitCastExpr 0xa9c9b40 <col:63> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9c9b24 <col:63> 'const size_type':'const unsigned int' lvalue Var 0xa9b3d30 '__len' 'const size_type':'const unsigned int')))))


        void _M_erase_at_end(pointer __pos);
    }
template <typename _Tp, typename _Alloc = std::allocator<_Tp>> class vector : protected _Vector_base<_Tp, _Alloc> {
        class vector;
        typedef typename _Alloc::value_type _Alloc_value_type;
        typedef _Vector_base<_Tp, _Alloc> _Base;
        typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
    public:
    public:
        typedef _Tp value_type;
        typedef typename _Tp_alloc_type::pointer pointer;
        typedef typename _Tp_alloc_type::const_pointer const_pointer;
        typedef typename _Tp_alloc_type::reference reference;
        typedef typename _Tp_alloc_type::const_reference const_reference;
        typedef __gnu_cxx::__normal_iterator<pointer, vector<_Tp, _Alloc> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, vector<_Tp, _Alloc> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef _Alloc allocator_type;
    protected:
    protected:
        using _Base::1;
        using _Base::1;
        using _Base::1;
        using _Base::1;
    public:
    public:
        vector<_Tp, _Alloc>() : _Base() (CompoundStmt 0xa6a8cc0 </usr/include/c++/4.6/bits/stl_vector.h:218:17, col:19>)


        vector<_Tp, _Alloc>(const allocator_type &__a) : _Base((DeclRefExpr 0xa6a8cd0 </usr/include/c++/4.6/bits/stl_vector.h:226:15> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa69d480 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6a8d30 </usr/include/c++/4.6/bits/stl_vector.h:226:20, col:22>)


        vector<_Tp, _Alloc>(size_type __n, const value_type &__value = (CXXUnresolvedConstructExpr 0xa6a8c00 </usr/include/c++/4.6/bits/stl_vector.h:263:57, col:68> 'value_type':'_Tp')
, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa6a8c20 </usr/include/c++/4.6/bits/stl_vector.h:264:35, col:50> 'allocator_type':'_Alloc')
) : _Base((DeclRefExpr 0xa6a8d40 </usr/include/c++/4.6/bits/stl_vector.h:265:15> 'size_type':'unsigned int' lvalue ParmVar 0xa69d590 '__n' 'size_type':'unsigned int')
, (DeclRefExpr 0xa6a8d58 </usr/include/c++/4.6/bits/stl_vector.h:265:20> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa69d660 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6a8e60 </usr/include/c++/4.6/bits/stl_vector.h:266:7, col:43>
  (CallExpr 0xa6a8e38 <col:9, col:40> '<dependent type>'
    (MemberExpr 0xa6a8de8 <col:9> '<bound member function type>' ->_M_fill_initialize 0xa6a2cc0
      (CXXThisExpr 0xa6a8dd8 <col:9> 'vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6a8e08 <col:28> 'size_type':'unsigned int' lvalue ParmVar 0xa69d590 '__n' 'size_type':'unsigned int')
    (DeclRefExpr 0xa6a8e20 <col:33> 'const value_type':'const _Tp' lvalue ParmVar 0xa69d610 '__value' 'const value_type &')))


        vector<_Tp, _Alloc>(const vector<_Tp, _Alloc> &__x) : _Base((CallExpr 0xa6a8ec8 </usr/include/c++/4.6/bits/stl_vector.h:279:15, col:24> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa6a8e90 <col:15, col:19> '<dependent type>' lvalue
    (DeclRefExpr 0xa6a8e74 <col:15> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa69d7d0 '__x' 'const vector<_Tp, _Alloc> &')))
, (CallExpr 0xa6a8f38 </usr/include/c++/4.6/bits/stl_vector.h:279:27, col:51> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa6a8f00 <col:27, col:31> '<dependent type>' lvalue
    (DeclRefExpr 0xa6a8ee4 <col:27> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa69d7d0 '__x' 'const vector<_Tp, _Alloc> &')))
) (CompoundStmt 0xa6a9270 </usr/include/c++/4.6/bits/stl_vector.h:280:7, line:284:7>
  (BinaryOperator 0xa6a9258 <line:280:9, line:283:32> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6a8fe8 <line:280:9, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6a8fb0 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa6a8fa0 <col:9> 'vector<_Tp, _Alloc> *' this)))
    (CallExpr 0xa6a9228 <line:281:4, line:283:32> '<dependent type>'
      (UnresolvedLookupExpr 0xa6a9038 <line:281:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
      (CallExpr 0xa6a90c0 <col:32, col:42> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6a9088 <col:32, col:36> '<dependent type>' lvalue
          (DeclRefExpr 0xa6a9070 <col:32> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa69d7d0 '__x' 'const vector<_Tp, _Alloc> &')))
      (CallExpr 0xa6a9130 <col:45, col:53> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6a90f8 <col:45, col:49> '<dependent type>' lvalue
          (DeclRefExpr 0xa6a90dc <col:45> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa69d7d0 '__x' 'const vector<_Tp, _Alloc> &')))
      (CXXDependentScopeMemberExpr 0xa6a9198 <line:282:11, col:25> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6a9160 <col:11, col:17> '<dependent type>' lvalue
          (CXXThisExpr 0xa6a9150 <col:11> 'vector<_Tp, _Alloc> *' this)))
      (CallExpr 0xa6a9208 <line:283:11, col:31> '<dependent type>'
        (UnresolvedMemberExpr 0xa6a91cc <col:11> '<dependent type>' lvalue)))))


        template <typename _InputIterator> vector<_Tp, _Alloc>(_InputIterator __first, _InputIterator __last, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa6a8c40 </usr/include/c++/4.6/bits/stl_vector.h:335:37, col:52> 'allocator_type':'_Alloc')
) : _Base((DeclRefExpr 0xa6a9284 </usr/include/c++/4.6/bits/stl_vector.h:336:10> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa69d9b0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6aa9c8 </usr/include/c++/4.6/bits/stl_vector.h:337:9, line:341:2>
  (DeclStmt 0xa6a9480 <line:339:4, col:72>
    0xa6a9450 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (CallExpr 0xa6aa9a0 <line:340:4, col:55> '<dependent type>'
    (UnresolvedMemberExpr 0xa6a94a0 <col:4> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6aa940 <col:27> '_InputIterator' lvalue ParmVar 0xa69d920 '__first' '_InputIterator')
    (DeclRefExpr 0xa6aa958 <col:36> '_InputIterator' lvalue ParmVar 0xa69d960 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6aa988 <col:44, col:54> '_Integral':'typename std::__is_integer<_InputIterator>::__type')))

;
        void ~vector<_Tp, _Alloc>() (CompoundStmt 0xa6aabc8 </usr/include/c++/4.6/bits/stl_vector.h:350:7, line:351:33>
  (CallExpr 0xa6aaba0 <line:350:9, line:351:30> '<dependent type>'
    (UnresolvedLookupExpr 0xa6aaa08 <line:350:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
    (CXXDependentScopeMemberExpr 0xa6aaa90 <col:23, col:37> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6aaa58 <col:23, col:29> '<dependent type>' lvalue
        (CXXThisExpr 0xa6aaa48 <col:23> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6aab10 <col:47, col:61> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6aaad8 <col:47, col:53> '<dependent type>' lvalue
        (CXXThisExpr 0xa6aaac8 <col:47> 'vector<_Tp, _Alloc> *' this)))
    (CallExpr 0xa6aab80 <line:351:9, col:29> '<dependent type>'
      (UnresolvedMemberExpr 0xa6aab44 <col:9> '<dependent type>' lvalue))))


        vector<_Tp, _Alloc> &operator=(const vector<_Tp, _Alloc> &__x);
        void assign(size_type __n, const value_type &__val) (CompoundStmt 0xa6aac68 </usr/include/c++/4.6/bits/stl_vector.h:413:7, col:37>
  (CallExpr 0xa6aac40 <col:9, col:34> '<dependent type>'
    (MemberExpr 0xa6aabf0 <col:9> '<bound member function type>' ->_M_fill_assign 0xa6a7c10
      (CXXThisExpr 0xa6aabe0 <col:9> 'vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6aac10 <col:24> 'size_type':'unsigned int' lvalue ParmVar 0xa69dce0 '__n' 'size_type':'unsigned int')
    (DeclRefExpr 0xa6aac28 <col:29> 'const value_type':'const _Tp' lvalue ParmVar 0xa69dd30 '__val' 'const value_type &')))


        template <typename _InputIterator> void assign(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa6aae98 </usr/include/c++/4.6/bits/stl_vector.h:430:9, line:434:2>
  (DeclStmt 0xa6aadb0 <line:432:4, col:72>
    0xa6aad80 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (CallExpr 0xa6aae70 <line:433:4, col:51> '<dependent type>'
    (UnresolvedMemberExpr 0xa6aadd0 <col:4> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6aae10 <col:23> '_InputIterator' lvalue ParmVar 0xa69dea0 '__first' '_InputIterator')
    (DeclRefExpr 0xa6aae28 <col:32> '_InputIterator' lvalue ParmVar 0xa69dee0 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6aae58 <col:40, col:50> '_Integral':'typename std::__is_integer<_InputIterator>::__type')))

;
        using _Base::1;
        iterator begin() (CompoundStmt 0xa6aaf68 </usr/include/c++/4.6/bits/stl_vector.h:464:7, col:50>
  (ReturnStmt 0xa6aaf58 <col:9, col:47>
    (CXXUnresolvedConstructExpr 0xa6aaf38 <col:16, col:47> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'
      (CXXDependentScopeMemberExpr 0xa6aaf00 <col:25, col:39> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6aaec8 <col:25, col:31> '<dependent type>' lvalue
          (CXXThisExpr 0xa6aaeb8 <col:25> 'vector<_Tp, _Alloc> *' this))))))


        const_iterator begin() const (CompoundStmt 0xa6ab058 </usr/include/c++/4.6/bits/stl_vector.h:473:7, col:56>
  (ReturnStmt 0xa6ab048 <col:9, col:53>
    (CXXUnresolvedConstructExpr 0xa6ab028 <col:16, col:53> 'const_iterator':'__normal_iterator<const_pointer, vector<_Tp, _Alloc> >'
      (CXXDependentScopeMemberExpr 0xa6aaff0 <col:31, col:45> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6aafb8 <col:31, col:37> '<dependent type>' lvalue
          (CXXThisExpr 0xa6aafa8 <col:31> 'const vector<_Tp, _Alloc> *' this))))))


        iterator end() (CompoundStmt 0xa6ab128 </usr/include/c++/4.6/bits/stl_vector.h:482:7, col:51>
  (ReturnStmt 0xa6ab118 <col:9, col:48>
    (CXXUnresolvedConstructExpr 0xa6ab0f8 <col:16, col:48> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'
      (CXXDependentScopeMemberExpr 0xa6ab0c0 <col:25, col:39> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6ab088 <col:25, col:31> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ab078 <col:25> 'vector<_Tp, _Alloc> *' this))))))


        const_iterator end() const (CompoundStmt 0xa6ab1f8 </usr/include/c++/4.6/bits/stl_vector.h:491:7, col:57>
  (ReturnStmt 0xa6ab1e8 <col:9, col:54>
    (CXXUnresolvedConstructExpr 0xa6ab1c8 <col:16, col:54> 'const_iterator':'__normal_iterator<const_pointer, vector<_Tp, _Alloc> >'
      (CXXDependentScopeMemberExpr 0xa6ab190 <col:31, col:45> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6ab158 <col:31, col:37> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ab148 <col:31> 'const vector<_Tp, _Alloc> *' this))))))


        reverse_iterator rbegin() (CompoundStmt 0xa6ab2b8 </usr/include/c++/4.6/bits/stl_vector.h:500:7, col:41>
  (ReturnStmt 0xa6ab2a8 <col:9, col:38>
    (CXXUnresolvedConstructExpr 0xa6ab288 <col:16, col:38> 'reverse_iterator':'reverse_iterator<iterator>'
      (CallExpr 0xa6ab268 <col:33, col:37> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ab228 <col:33> '<bound member function type>' lvalue)))))


        const_reverse_iterator rbegin() const (CompoundStmt 0xa6ab378 </usr/include/c++/4.6/bits/stl_vector.h:509:7, col:47>
  (ReturnStmt 0xa6ab368 <col:9, col:44>
    (CXXUnresolvedConstructExpr 0xa6ab348 <col:16, col:44> 'const_reverse_iterator':'reverse_iterator<const_iterator>'
      (CallExpr 0xa6ab328 <col:39, col:43> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ab2e8 <col:39> '<bound member function type>' lvalue)))))


        reverse_iterator rend() (CompoundStmt 0xa6ab438 </usr/include/c++/4.6/bits/stl_vector.h:518:7, col:43>
  (ReturnStmt 0xa6ab428 <col:9, col:40>
    (CXXUnresolvedConstructExpr 0xa6ab408 <col:16, col:40> 'reverse_iterator':'reverse_iterator<iterator>'
      (CallExpr 0xa6ab3e8 <col:33, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ab3a8 <col:33> '<bound member function type>' lvalue)))))


        const_reverse_iterator rend() const (CompoundStmt 0xa6ab4f8 </usr/include/c++/4.6/bits/stl_vector.h:527:7, col:49>
  (ReturnStmt 0xa6ab4e8 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa6ab4c8 <col:16, col:46> 'const_reverse_iterator':'reverse_iterator<const_iterator>'
      (CallExpr 0xa6ab4a8 <col:39, col:45> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ab468 <col:39> '<bound member function type>' lvalue)))))


        size_type size() const (CompoundStmt 0xa6ab6a8 </usr/include/c++/4.6/bits/stl_vector.h:571:7, col:77>
  (ReturnStmt 0xa6ab698 <col:9, col:74>
    (CXXUnresolvedConstructExpr 0xa6ab678 <col:16, col:74> 'size_type':'unsigned int'
      (CXXOperatorCallExpr 0xa6ab650 <col:26, col:66> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ab618 <col:50, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (CXXDependentScopeMemberExpr 0xa6ab560 <col:26, col:40> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ab528 <col:26, col:32> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ab518 <col:26> 'const vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6ab5e0 <col:52, col:66> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ab5a8 <col:52, col:58> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ab598 <col:52> 'const vector<_Tp, _Alloc> *' this)))))))


        size_type max_size() const (CompoundStmt 0xa6ab780 </usr/include/c++/4.6/bits/stl_vector.h:576:7, col:50>
  (ReturnStmt 0xa6ab770 <col:9, col:47>
    (CallExpr 0xa6ab750 <col:16, col:47> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6ab718 <col:16, col:38> '<dependent type>' lvalue
        (CallExpr 0xa6ab6f8 <col:16, col:36> '<dependent type>'
          (UnresolvedMemberExpr 0xa6ab6bc <col:16> '<dependent type>' lvalue))))))


        void resize(size_type __new_size, value_type __x = (CXXUnresolvedConstructExpr 0xa6a8c60 </usr/include/c++/4.6/bits/stl_vector.h:629:53, col:64> 'value_type':'_Tp')
) (CompoundStmt 0xa6abc90 </usr/include/c++/4.6/bits/stl_vector.h:630:7, line:635:7>
  (IfStmt 0xa6abc70 <line:631:2, line:634:55>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ab840 <line:631:6, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ab800 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
      (DeclRefExpr 0xa6ab794 <col:6> 'size_type':'unsigned int' lvalue ParmVar 0xa69e640 '__new_size' 'size_type':'unsigned int')
      (CallExpr 0xa6ab7e0 <col:19, col:24> '<dependent type>'
        (MemberExpr 0xa6ab7c0 <col:19> '<bound member function type>' ->size 0xa69e550
          (CXXThisExpr 0xa6ab7b0 <col:19> 'vector<_Tp, _Alloc> *' this))))
    (CallExpr 0xa6aba10 <line:632:4, col:42> '<dependent type>'
      (UnresolvedMemberExpr 0xa6ab878 <col:4> '<bound member function type>' lvalue)
      (CallExpr 0xa6ab910 <col:11, col:15> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ab8d0 <col:11> '<bound member function type>' lvalue))
      (CXXOperatorCallExpr 0xa6ab9d0 <col:18, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ab998 <col:29, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (DeclRefExpr 0xa6ab92c <col:18> 'size_type':'unsigned int' lvalue ParmVar 0xa69e640 '__new_size' 'size_type':'unsigned int')
        (CallExpr 0xa6ab978 <col:31, col:36> '<dependent type>'
          (MemberExpr 0xa6ab958 <col:31> '<bound member function type>' ->size 0xa69e550
            (CXXThisExpr 0xa6ab948 <col:31> 'vector<_Tp, _Alloc> *' this))))
      (DeclRefExpr 0xa6ab9f4 <col:39> 'value_type':'_Tp' lvalue ParmVar 0xa69e680 '__x' 'value_type':'_Tp'))
    (IfStmt 0xa6abc50 <line:633:7, line:634:55>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa6abae0 <line:633:11, col:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa6abaa0 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
        (DeclRefExpr 0xa6aba38 <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa69e640 '__new_size' 'size_type':'unsigned int')
        (CallExpr 0xa6aba80 <col:24, col:29> '<dependent type>'
          (MemberExpr 0xa6aba60 <col:24> '<bound member function type>' ->size 0xa69e550
            (CXXThisExpr 0xa6aba50 <col:24> 'vector<_Tp, _Alloc> *' this))))
      (CallExpr 0xa6abc30 <line:634:4, col:55> '<dependent type>'
        (MemberExpr 0xa6abb18 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6a8b90
          (CXXThisExpr 0xa6abb08 <col:4> 'vector<_Tp, _Alloc> *' this))
        (CXXOperatorCallExpr 0xa6abc08 <col:20, col:45> '<dependent type>'
          (UnresolvedLookupExpr 0xa6abbd0 <col:43, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
          (CXXDependentScopeMemberExpr 0xa6abb80 <col:20, col:34> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6abb48 <col:20, col:26> '<dependent type>' lvalue
              (CXXThisExpr 0xa6abb38 <col:20> 'vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6abbb4 <col:45> 'size_type':'unsigned int' lvalue ParmVar 0xa69e640 '__new_size' 'size_type':'unsigned int')))
      <<<NULL>>>)))


        size_type capacity() const (CompoundStmt 0xa6abe40 </usr/include/c++/4.6/bits/stl_vector.h:651:7, line:652:32>
  (ReturnStmt 0xa6abe30 <line:651:9, line:652:29>
    (CXXUnresolvedConstructExpr 0xa6abe10 <line:651:16, line:652:29> 'size_type':'unsigned int'
      (CXXOperatorCallExpr 0xa6abde8 <line:651:26, line:652:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa6abdb0 <col:5, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (CXXDependentScopeMemberExpr 0xa6abcf8 <line:651:26, col:40> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6abcc0 <col:26, col:32> '<dependent type>' lvalue
            (CXXThisExpr 0xa6abcb0 <col:26> 'const vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6abd78 <line:652:7, col:21> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6abd40 <col:7, col:13> '<dependent type>' lvalue
            (CXXThisExpr 0xa6abd30 <col:7> 'const vector<_Tp, _Alloc> *' this)))))))


        bool empty() const (CompoundStmt 0xa6abfb8 </usr/include/c++/4.6/bits/stl_vector.h:660:7, col:34>
  (ReturnStmt 0xa6abfa8 <col:9, col:31>
    (CXXOperatorCallExpr 0xa6abf80 <col:16, col:31> '<dependent type>'
      (UnresolvedLookupExpr 0xa6abf38 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30)
      (CallExpr 0xa6abea8 <col:16, col:22> '<dependent type>'
        (UnresolvedMemberExpr 0xa6abe68 <col:16> '<bound member function type>' lvalue))
      (CallExpr 0xa6abf18 <col:27, col:31> '<dependent type>'
        (UnresolvedMemberExpr 0xa6abed8 <col:27> '<bound member function type>' lvalue)))))


        void reserve(size_type __n);
        reference operator[](size_type __n) (CompoundStmt 0xa6ac108 </usr/include/c++/4.6/bits/stl_vector.h:696:7, col:49>
  (ReturnStmt 0xa6ac0f8 <col:9, col:46>
    (UnaryOperator 0xa6ac0e0 <col:16, col:46> '<dependent type>' prefix '*'
      (ParenExpr 0xa6ac0c8 <col:17, col:46> '<dependent type>'
        (CXXOperatorCallExpr 0xa6ac0a0 <col:18, col:43> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ac068 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
          (CXXDependentScopeMemberExpr 0xa6ac018 <col:18, col:32> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6abfe0 <col:18, col:24> '<dependent type>' lvalue
              (CXXThisExpr 0xa6abfd0 <col:18> 'vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6ac04c <col:43> 'size_type':'unsigned int' lvalue ParmVar 0xa69e9b0 '__n' 'size_type':'unsigned int'))))))


        const_reference operator[](size_type __n) const (CompoundStmt 0xa6ac258 </usr/include/c++/4.6/bits/stl_vector.h:711:7, col:49>
  (ReturnStmt 0xa6ac248 <col:9, col:46>
    (UnaryOperator 0xa6ac230 <col:16, col:46> '<dependent type>' prefix '*'
      (ParenExpr 0xa6ac218 <col:17, col:46> '<dependent type>'
        (CXXOperatorCallExpr 0xa6ac1f0 <col:18, col:43> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ac1b8 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
          (CXXDependentScopeMemberExpr 0xa6ac168 <col:18, col:32> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6ac130 <col:18, col:24> '<dependent type>' lvalue
              (CXXThisExpr 0xa6ac120 <col:18> 'const vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6ac19c <col:43> 'size_type':'unsigned int' lvalue ParmVar 0xa69eae0 '__n' 'size_type':'unsigned int'))))))


    protected:
    protected:
        void _M_range_check(size_type __n) const (CompoundStmt 0xa6ac4b8 </usr/include/c++/4.6/bits/stl_vector.h:717:7, line:720:7>
  (IfStmt 0xa6ac498 <line:718:2, line:719:54>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ac330 <line:718:6, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ac2f0 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570)
      (DeclRefExpr 0xa6ac26c <col:6> 'size_type':'unsigned int' lvalue ParmVar 0xa69ec40 '__n' 'size_type':'unsigned int')
      (CallExpr 0xa6ac2d0 <col:13, col:24> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6ac298 <col:13, col:19> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ac288 <col:13> 'const vector<_Tp, _Alloc> *' this))))
    (CallExpr 0xa6ac468 <line:719:4, col:54> 'void'
      (ImplicitCastExpr 0xa6ac458 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6ac41c <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa6ac488 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa6ac408 <col:24, col:30> 'const char [23]' lvalue
          (StringLiteral 0xa6ac3d0 </usr/include/c++/4.6/bits/stl_vector.h:719:29> 'const char [23]' lvalue "vector::_M_range_check"))))
    <<<NULL>>>))


    public:
    public:
        reference at(size_type __n) (CompoundStmt 0xa6ac5b8 </usr/include/c++/4.6/bits/stl_vector.h:736:7, line:739:7>
  (CallExpr 0xa6ac518 <line:737:2, col:20> '<dependent type>'
    (MemberExpr 0xa6ac4e0 <col:2> '<bound member function type>' ->_M_range_check 0xa6a0f60
      (CXXThisExpr 0xa6ac4d0 <col:2> 'vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6ac500 <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa6a1020 '__n' 'size_type':'unsigned int'))
  (ReturnStmt 0xa6ac5a8 <line:738:2, col:20>
    (ArraySubscriptExpr 0xa6ac590 <col:9, col:20> '<dependent type>' lvalue
      (ParenExpr 0xa6ac560 <col:9, col:15> '<dependent type>'
        (UnaryOperator 0xa6ac548 <col:10, col:11> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa6ac538 <col:11> 'vector<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa6ac574 <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa6a1020 '__n' 'size_type':'unsigned int'))))


        const_reference at(size_type __n) const (CompoundStmt 0xa6ac6b8 </usr/include/c++/4.6/bits/stl_vector.h:754:7, line:757:7>
  (CallExpr 0xa6ac618 <line:755:2, col:20> '<dependent type>'
    (MemberExpr 0xa6ac5e0 <col:2> '<bound member function type>' ->_M_range_check 0xa6a0f60
      (CXXThisExpr 0xa6ac5d0 <col:2> 'const vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6ac600 <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa6a10e0 '__n' 'size_type':'unsigned int'))
  (ReturnStmt 0xa6ac6a8 <line:756:2, col:20>
    (ArraySubscriptExpr 0xa6ac690 <col:9, col:20> '<dependent type>' lvalue
      (ParenExpr 0xa6ac660 <col:9, col:15> '<dependent type>'
        (UnaryOperator 0xa6ac648 <col:10, col:11> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa6ac638 <col:11> 'const vector<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa6ac674 <col:17> 'size_type':'unsigned int' lvalue ParmVar 0xa6a10e0 '__n' 'size_type':'unsigned int'))))


        reference front() (CompoundStmt 0xa6ac768 </usr/include/c++/4.6/bits/stl_vector.h:765:7, col:26>
  (ReturnStmt 0xa6ac758 <col:9, col:23>
    (UnaryOperator 0xa6ac740 <col:16, col:23> '<dependent type>' prefix '*'
      (CallExpr 0xa6ac720 <col:17, col:23> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ac6e0 <col:17> '<bound member function type>' lvalue)))))


        const_reference front() const (CompoundStmt 0xa6ac818 </usr/include/c++/4.6/bits/stl_vector.h:773:7, col:26>
  (ReturnStmt 0xa6ac808 <col:9, col:23>
    (UnaryOperator 0xa6ac7f0 <col:16, col:23> '<dependent type>' prefix '*'
      (CallExpr 0xa6ac7d0 <col:17, col:23> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ac790 <col:17> '<bound member function type>' lvalue)))))


        reference back() (CompoundStmt 0xa6ae0e8 </usr/include/c++/4.6/bits/stl_vector.h:781:7, col:30>
  (ReturnStmt 0xa6ae0d8 <col:9, col:27>
    (UnaryOperator 0xa6ae0c0 <col:16, col:27> '<dependent type>' prefix '*'
      (ParenExpr 0xa6ac918 <col:17, col:27> '<dependent type>'
        (CXXOperatorCallExpr 0xa6ac8f0 <col:18, col:26> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ac8b8 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
          (CallExpr 0xa6ac880 <col:18, col:22> '<dependent type>'
            (UnresolvedMemberExpr 0xa6ac840 <col:18> '<bound member function type>' lvalue))
          (IntegerLiteral 0xa6ac8a0 <col:26> 'int' 1))))))


        const_reference back() const (CompoundStmt 0xa6ae228 </usr/include/c++/4.6/bits/stl_vector.h:789:7, col:30>
  (ReturnStmt 0xa6ae218 <col:9, col:27>
    (UnaryOperator 0xa6ae200 <col:16, col:27> '<dependent type>' prefix '*'
      (ParenExpr 0xa6ae1e8 <col:17, col:27> '<dependent type>'
        (CXXOperatorCallExpr 0xa6ae1c0 <col:18, col:26> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ae188 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
          (CallExpr 0xa6ae150 <col:18, col:22> '<dependent type>'
            (UnresolvedMemberExpr 0xa6ae110 <col:18> '<bound member function type>' lvalue))
          (IntegerLiteral 0xa6ae170 <col:26> 'int' 1))))))


        pointer data() (CompoundStmt 0xa6ae330 </usr/include/c++/4.6/bits/stl_vector.h:804:7, col:43>
  (ReturnStmt 0xa6ae320 <col:9, col:40>
    (CallExpr 0xa6ae300 <col:16, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ae258 <col:16, col:21> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (CallExpr 0xa6ae2e0 <col:33, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ae2a0 <col:33> '<bound member function type>' lvalue)))))


        const_pointer data() const (CompoundStmt 0xa6ae438 </usr/include/c++/4.6/bits/stl_vector.h:812:7, col:43>
  (ReturnStmt 0xa6ae428 <col:9, col:40>
    (CallExpr 0xa6ae408 <col:16, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ae360 <col:16, col:21> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (CallExpr 0xa6ae3e8 <col:33, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ae3a8 <col:33> '<bound member function type>' lvalue)))))


        void push_back(const value_type &__x) (CompoundStmt 0xa6ae8b0 </usr/include/c++/4.6/bits/stl_vector.h:827:7, line:835:7>
  (IfStmt 0xa6ae890 <line:828:2, line:834:28>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ae598 <line:828:6, col:47> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ae550 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
      (CXXDependentScopeMemberExpr 0xa6ae498 <col:6, col:20> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6ae460 <col:6, col:12> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ae450 <col:6> 'vector<_Tp, _Alloc> *' this)))
      (CXXDependentScopeMemberExpr 0xa6ae518 <col:33, col:47> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6ae4e0 <col:33, col:39> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ae4d0 <col:33> 'vector<_Tp, _Alloc> *' this))))
    (CompoundStmt 0xa6ae798 <line:829:4, line:832:4>
      (CallExpr 0xa6ae6d8 <line:830:6, col:58> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6ae608 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ae5d0 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ae5c0 <col:6> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6ae688 <col:30, col:44> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ae650 <col:30, col:36> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ae640 <col:30> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6ae6bc <col:55> 'const value_type':'const _Tp' lvalue ParmVar 0xa6a1570 '__x' 'const value_type &'))
      (UnaryOperator 0xa6ae780 <line:831:6, col:22> '<dependent type>' prefix '++'
        (CXXDependentScopeMemberExpr 0xa6ae748 <col:8, col:22> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ae710 <col:8, col:14> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ae700 <col:8> 'vector<_Tp, _Alloc> *' this)))))
    (CallExpr 0xa6ae868 <line:834:4, col:28> '<dependent type>'
      (MemberExpr 0xa6ae7c0 <col:4> '<bound member function type>' ->_M_insert_aux 0xa6a8920
        (CXXThisExpr 0xa6ae7b0 <col:4> 'vector<_Tp, _Alloc> *' this))
      (CallExpr 0xa6ae830 <col:18, col:22> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ae7f0 <col:18> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6ae84c <col:25> 'const value_type':'const _Tp' lvalue ParmVar 0xa6a1570 '__x' 'const value_type &'))))


        void pop_back() (CompoundStmt 0xa6aea80 </usr/include/c++/4.6/bits/stl_vector.h:858:7, line:861:7>
  (UnaryOperator 0xa6ae948 <line:859:2, col:18> '<dependent type>' prefix '--'
    (CXXDependentScopeMemberExpr 0xa6ae910 <col:4, col:18> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ae8d8 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ae8c8 <col:4> 'vector<_Tp, _Alloc> *' this))))
  (CallExpr 0xa6aea60 <line:860:2, col:47> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa6ae9a8 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ae970 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ae960 <col:2> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6aea28 <col:24, col:38> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ae9f0 <col:24, col:30> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ae9e0 <col:24> 'vector<_Tp, _Alloc> *' this)))))


        iterator insert(iterator __position, const value_type &__x);
        void insert(iterator __position, size_type __n, const value_type &__x) (CompoundStmt 0xa6aeb38 </usr/include/c++/4.6/bits/stl_vector.h:944:7, col:47>
  (CallExpr 0xa6aeb10 <col:9, col:44> '<dependent type>'
    (MemberExpr 0xa6aeaa8 <col:9> '<bound member function type>' ->_M_fill_insert 0xa6a87b0
      (CXXThisExpr 0xa6aea98 <col:9> 'vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6aeac8 <col:24> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6a1840 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
    (DeclRefExpr 0xa6aeae0 <col:36> 'size_type':'unsigned int' lvalue ParmVar 0xa6a1880 '__n' 'size_type':'unsigned int')
    (DeclRefExpr 0xa6aeaf8 <col:41> 'const value_type':'const _Tp' lvalue ParmVar 0xa6a18d0 '__x' 'const value_type &')))


        template <typename _InputIterator> void insert(iterator __position, _InputIterator __first, _InputIterator __last) (CompoundStmt 0xa6aed90 </usr/include/c++/4.6/bits/stl_vector.h:964:9, line:968:2>
  (DeclStmt 0xa6aec80 <line:966:4, col:72>
    0xa6aec50 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (CallExpr 0xa6aed60 <line:967:4, col:63> '<dependent type>'
    (UnresolvedMemberExpr 0xa6aeca0 <col:4> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6aece0 <col:23> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6a1a60 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
    (DeclRefExpr 0xa6aecf8 <col:35> '_InputIterator' lvalue ParmVar 0xa6a1aa0 '__first' '_InputIterator')
    (DeclRefExpr 0xa6aed10 <col:44> '_InputIterator' lvalue ParmVar 0xa6a1ae0 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6aed48 <col:52, col:62> '_Integral':'typename std::__is_integer<_InputIterator>::__type')))

;
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        void swap(vector<_Tp, _Alloc> &__x) (CompoundStmt 0xa6af500 </usr/include/c++/4.6/bits/stl_vector.h:1020:7, line:1030:7>
  (CallExpr 0xa6aef10 <line:1021:2, col:56> '<dependent type>'
    (UnresolvedLookupExpr 0xa6aedd0 <col:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70)
    (CXXDependentScopeMemberExpr 0xa6aee50 <col:12, col:26> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6aee18 <col:12, col:18> '<dependent type>' lvalue
        (CXXThisExpr 0xa6aee08 <col:12> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6aeed8 <col:36, col:48> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6aeea0 <col:36, col:40> '<dependent type>' lvalue
        (DeclRefExpr 0xa6aee84 <col:36> 'vector<_Tp, _Alloc>' lvalue ParmVar 0xa6a1eb0 '__x' 'vector<_Tp, _Alloc> &'))))
  (CallExpr 0xa6af098 <line:1022:2, col:58> '<dependent type>'
    (UnresolvedLookupExpr 0xa6aef58 <col:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70)
    (CXXDependentScopeMemberExpr 0xa6aefd8 <col:12, col:26> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6aefa0 <col:12, col:18> '<dependent type>' lvalue
        (CXXThisExpr 0xa6aef90 <col:12> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6af060 <col:37, col:49> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6af028 <col:37, col:41> '<dependent type>' lvalue
        (DeclRefExpr 0xa6af00c <col:37> 'vector<_Tp, _Alloc>' lvalue ParmVar 0xa6a1eb0 '__x' 'vector<_Tp, _Alloc> &'))))
  (CallExpr 0xa6af220 <line:1023:2, line:1024:34> '<dependent type>'
    (UnresolvedLookupExpr 0xa6af0e0 <line:1023:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70)
    (CXXDependentScopeMemberExpr 0xa6af160 <col:12, col:26> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6af128 <col:12, col:18> '<dependent type>' lvalue
        (CXXThisExpr 0xa6af118 <col:12> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6af1e8 <line:1024:5, col:17> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6af1b0 <col:5, col:9> '<dependent type>' lvalue
        (DeclRefExpr 0xa6af194 <col:5> 'vector<_Tp, _Alloc>' lvalue ParmVar 0xa6a1eb0 '__x' 'vector<_Tp, _Alloc> &'))))
  (CallExpr 0xa6af4d8 <line:1028:2, line:1029:36> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa6af3d8 <line:1028:2, col:37> '<dependent type>' lvalue)
    (CallExpr 0xa6af448 <col:46, col:66> '<dependent type>'
      (UnresolvedMemberExpr 0xa6af40c <col:46> '<dependent type>' lvalue))
    (CallExpr 0xa6af4b8 <line:1029:11, col:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6af480 <col:11, col:15> '<dependent type>' lvalue
        (DeclRefExpr 0xa6af464 <col:11> 'vector<_Tp, _Alloc>' lvalue ParmVar 0xa6a1eb0 '__x' 'vector<_Tp, _Alloc> &')))))


        void clear() (CompoundStmt 0xa6af5f0 </usr/include/c++/4.6/bits/stl_vector.h:1040:7, col:50>
  (CallExpr 0xa6af5d0 <col:9, col:47> '<dependent type>'
    (MemberExpr 0xa6af530 <col:9> '<bound member function type>' ->_M_erase_at_end 0xa6a8b90
      (CXXThisExpr 0xa6af520 <col:9> 'vector<_Tp, _Alloc> *' this))
    (CXXDependentScopeMemberExpr 0xa6af598 <col:25, col:39> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6af560 <col:25, col:31> '<dependent type>' lvalue
        (CXXThisExpr 0xa6af550 <col:25> 'vector<_Tp, _Alloc> *' this)))))


    protected:
    protected:
        template <typename _ForwardIterator> pointer _M_allocate_and_copy(size_type __n, _ForwardIterator __first, _ForwardIterator __last) (CompoundStmt 0xa6af970 </usr/include/c++/4.6/bits/stl_vector.h:1051:9, line:1064:2>
  (DeclStmt 0xa6af6c8 <line:1052:4, col:45>
    0xa6af610 "pointer __result =
      (CallExpr 0xa6af6a8 <col:23, col:44> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6af658 <col:23, col:29> '<dependent type>' lvalue
          (CXXThisExpr 0xa6af648 <col:23> 'vector<_Tp, _Alloc> *' this))
        (DeclRefExpr 0xa6af68c <col:41> 'size_type':'unsigned int' lvalue ParmVar 0xa6a20b0 '__n' 'size_type':'unsigned int'))")
  (IfStmt 0xa6af860 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_vector.h:1058:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa6af6d8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa6af848 </usr/include/c++/4.6/bits/stl_vector.h:1054:6, line:1058:6>
      (CallExpr 0xa6af7f0 <line:1055:8, line:1056:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa6af710 <line:1055:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
        (DeclRefExpr 0xa6af748 <col:36> '_ForwardIterator' lvalue ParmVar 0xa6a20f0 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6af760 <col:45> '_ForwardIterator' lvalue ParmVar 0xa6a2130 '__last' '_ForwardIterator')
        (DeclRefExpr 0xa6af778 <col:53> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6af610 '__result' 'pointer':'typename _Tp_alloc_type::pointer')
        (CallExpr 0xa6af7d0 <line:1056:8, col:28> '<dependent type>'
          (UnresolvedMemberExpr 0xa6af790 <col:8> '<dependent type>' lvalue)))
      (ReturnStmt 0xa6af838 <line:1057:8, col:15>
        (DeclRefExpr 0xa6af81c <col:15> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6af610 '__result' 'pointer':'typename _Tp_alloc_type::pointer')))
    <<<NULL>>>)
  (IfStmt 0xa6af950 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_vector.h:1063:6>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa6af880 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa6af938 </usr/include/c++/4.6/bits/stl_vector.h:1060:6, line:1063:6>
      (CallExpr 0xa6af900 <line:1061:8, col:35> '<dependent type>'
        (UnresolvedMemberExpr 0xa6af890 <col:8> '<dependent type>' lvalue)
        (DeclRefExpr 0xa6af8cc <col:22> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6af610 '__result' 'pointer':'typename _Tp_alloc_type::pointer')
        (DeclRefExpr 0xa6af8e4 <col:32> 'size_type':'unsigned int' lvalue ParmVar 0xa6a20b0 '__n' 'size_type':'unsigned int'))
      (NullStmt 0xa6af928 <line:1062:31>))
    <<<NULL>>>))

;
        template <typename _Integer> void _M_initialize_dispatch(_Integer __n, _Integer __value, std::__true_type) (CompoundStmt 0xa6afd10 </usr/include/c++/4.6/bits/stl_vector.h:1076:9, line:1081:2>
  (BinaryOperator 0xa6afaa0 <line:1077:4, col:68> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6af9d8 <col:4, col:18> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6af9a0 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa6af990 <col:4> 'vector<_Tp, _Alloc> *' this)))
    (CallExpr 0xa6afa80 <col:29, col:68> '<dependent type>'
      (UnresolvedMemberExpr 0xa6afa0c <col:29> '<dependent type>' lvalue)
      (CXXStaticCastExpr 0xa6afa68 <col:41, col:67> 'size_type':'unsigned int' static_cast<size_type> <Dependent>
        (DeclRefExpr 0xa6afa48 <col:64> '_Integer' lvalue ParmVar 0xa6a22f0 '__n' '_Integer'))))
  (BinaryOperator 0xa6afc50 <line:1078:4, line:1079:57> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6afb00 <line:1078:4, col:18> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6afac8 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa6afab8 <col:4> 'vector<_Tp, _Alloc> *' this)))
    (CXXOperatorCallExpr 0xa6afc28 <line:1079:6, col:57> '<dependent type>'
      (UnresolvedLookupExpr 0xa6afbf0 <col:29, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (CXXDependentScopeMemberExpr 0xa6afb80 <col:6, col:20> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6afb48 <col:6, col:12> '<dependent type>' lvalue
          (CXXThisExpr 0xa6afb38 <col:6> 'vector<_Tp, _Alloc> *' this)))
      (CXXStaticCastExpr 0xa6afbd8 <col:31, col:57> 'size_type':'unsigned int' static_cast<size_type> <Dependent>
        (DeclRefExpr 0xa6afbb4 <col:54> '_Integer' lvalue ParmVar 0xa6a22f0 '__n' '_Integer'))))
  (CallExpr 0xa6afce8 <line:1080:4, col:59> '<dependent type>'
    (MemberExpr 0xa6afc78 <col:4> '<bound member function type>' ->_M_fill_initialize 0xa6a2cc0
      (CXXThisExpr 0xa6afc68 <col:4> 'vector<_Tp, _Alloc> *' this))
    (CXXStaticCastExpr 0xa6afcb8 <col:23, col:49> 'size_type':'unsigned int' static_cast<size_type> <Dependent>
      (DeclRefExpr 0xa6afc98 <col:46> '_Integer' lvalue ParmVar 0xa6a22f0 '__n' '_Integer'))
    (DeclRefExpr 0xa6afcd0 <col:52> '_Integer' lvalue ParmVar 0xa6a2330 '__value' '_Integer')))

;
        template <typename _InputIterator> void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) (CompoundStmt 0xa6aff48 </usr/include/c++/4.6/bits/stl_vector.h:1088:9, line:1092:2>
  (DeclStmt 0xa6afe60 <line:1089:4, line:1090:37>
    0xa6afe30 "typedef typename std::iterator_traits<_InputIterator>::iterator_category _IterCategory")
  (CallExpr 0xa6aff20 <line:1091:4, col:56> '<dependent type>'
    (UnresolvedMemberExpr 0xa6afe80 <col:4> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6afec0 <col:24> '_InputIterator' lvalue ParmVar 0xa6a2530 '__first' '_InputIterator')
    (DeclRefExpr 0xa6afed8 <col:33> '_InputIterator' lvalue ParmVar 0xa6a2570 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6aff08 <col:41, col:55> '_IterCategory':'typename std::iterator_traits<_InputIterator>::iterator_category')))

;
        template <typename _InputIterator> void _M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6b1440 </usr/include/c++/4.6/bits/stl_vector.h:1099:9, line:1102:2>
  (ForStmt 0xa6b1418 <line:1100:4, line:1101:24>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6affd8 <line:1100:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa6aff90 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170)
      (DeclRefExpr 0xa6aff60 <col:11> '_InputIterator' lvalue ParmVar 0xa6a2770 '__first' '_InputIterator')
      (DeclRefExpr 0xa6aff78 <col:22> '_InputIterator' lvalue ParmVar 0xa6a27b0 '__last' '_InputIterator'))
    (UnaryOperator 0xa6b0018 <col:30, col:32> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa6afffc <col:32> '_InputIterator' lvalue ParmVar 0xa6a2770 '__first' '_InputIterator'))
    (CallExpr 0xa6b0090 <line:1101:6, col:24> '<dependent type>'
      (MemberExpr 0xa6b0040 <col:6> '<bound member function type>' ->push_back 0xa6a15f0
        (CXXThisExpr 0xa6b0030 <col:6> 'vector<_Tp, _Alloc> *' this))
      (UnaryOperator 0xa6b0078 <col:16, col:17> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa6b0060 <col:17> '_InputIterator' lvalue ParmVar 0xa6a2770 '__first' '_InputIterator')))))

;
        template <typename _ForwardIterator> void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) (CompoundStmt 0xa6b1a18 </usr/include/c++/4.6/bits/stl_vector.h:1109:9, line:1117:2>
  (DeclStmt 0xa6b1540 <line:1110:4, col:56>
    0xa6b1460 "const size_type __n =
      (CallExpr 0xa6b1518 <col:26, col:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa6b14b0 <col:26, col:31> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
        (DeclRefExpr 0xa6b14e4 <col:40> '_ForwardIterator' lvalue ParmVar 0xa6a29f0 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6b14fc <col:49> '_ForwardIterator' lvalue ParmVar 0xa6a2a30 '__last' '_ForwardIterator'))")
  (BinaryOperator 0xa6b1650 <line:1111:4, col:50> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6b1598 <col:4, col:18> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b1560 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b1550 <col:4> 'vector<_Tp, _Alloc> *' this)))
    (CallExpr 0xa6b1630 <col:29, col:50> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6b15e0 <col:29, col:35> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b15d0 <col:29> 'vector<_Tp, _Alloc> *' this))
      (DeclRefExpr 0xa6b1614 <col:47> 'const size_type':'const unsigned int' lvalue Var 0xa6b1460 '__n' 'const size_type':'const unsigned int')))
  (BinaryOperator 0xa6b17e0 <line:1112:4, col:63> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6b16b0 <col:4, col:18> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b1678 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b1668 <col:4> 'vector<_Tp, _Alloc> *' this)))
    (CXXOperatorCallExpr 0xa6b17b8 <col:38, col:63> '<dependent type>'
      (UnresolvedLookupExpr 0xa6b1780 <col:61, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
      (CXXDependentScopeMemberExpr 0xa6b1730 <col:38, col:52> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6b16f8 <col:38, col:44> '<dependent type>' lvalue
          (CXXThisExpr 0xa6b16e8 <col:38> 'vector<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa6b1764 <col:63> 'const size_type':'const unsigned int' lvalue Var 0xa6b1460 '__n' 'const size_type':'const unsigned int')))
  (BinaryOperator 0xa6b1a00 <line:1113:4, line:1116:27> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6b1840 <line:1113:4, col:18> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b1808 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b17f8 <col:4> 'vector<_Tp, _Alloc> *' this)))
    (CallExpr 0xa6b19d0 <line:1114:6, line:1116:27> '<dependent type>'
      (UnresolvedLookupExpr 0xa6b1890 <line:1114:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
      (DeclRefExpr 0xa6b18c8 <col:34> '_ForwardIterator' lvalue ParmVar 0xa6a29f0 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa6b18e0 <col:43> '_ForwardIterator' lvalue ParmVar 0xa6a2a30 '__last' '_ForwardIterator')
      (CXXDependentScopeMemberExpr 0xa6b1940 <line:1115:6, col:20> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6b1908 <col:6, col:12> '<dependent type>' lvalue
          (CXXThisExpr 0xa6b18f8 <col:6> 'vector<_Tp, _Alloc> *' this)))
      (CallExpr 0xa6b19b0 <line:1116:6, col:26> '<dependent type>'
        (UnresolvedMemberExpr 0xa6b1974 <col:6> '<dependent type>' lvalue)))))

;
        void _M_fill_initialize(size_type __n, const value_type &__value) (CompoundStmt 0xa6b1ce8 </usr/include/c++/4.6/bits/stl_vector.h:1123:7, line:1127:7>
  (CallExpr 0xa6b1ba0 <line:1124:2, line:1125:32> '<dependent type>'
    (UnresolvedLookupExpr 0xa6b1a60 <line:1124:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6911f0 0xa692550)
    (CXXDependentScopeMemberExpr 0xa6b1ae0 <col:32, col:46> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b1aa8 <col:32, col:38> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b1a98 <col:32> 'vector<_Tp, _Alloc> *' this)))
    (DeclRefExpr 0xa6b1b14 <col:56> 'size_type':'unsigned int' lvalue ParmVar 0xa6a2c10 '__n' 'size_type':'unsigned int')
    (DeclRefExpr 0xa6b1b2c <col:61> 'const value_type':'const _Tp' lvalue ParmVar 0xa6a2c60 '__value' 'const value_type &')
    (CallExpr 0xa6b1b80 <line:1125:11, col:31> '<dependent type>'
      (UnresolvedMemberExpr 0xa6b1b44 <col:11> '<dependent type>' lvalue)))
  (BinaryOperator 0xa6b1cd0 <line:1126:2, col:42> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6b1c18 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b1be0 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b1bd0 <col:2> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6b1c98 <col:28, col:42> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b1c60 <col:28, col:34> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b1c50 <col:28> 'vector<_Tp, _Alloc> *' this)))))


        template <typename _Integer> void _M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) (CompoundStmt 0xa6b1d88 </usr/include/c++/4.6/bits/stl_vector.h:1150:9, col:39>
  (CallExpr 0xa6b1d60 <col:11, col:36> '<dependent type>'
    (MemberExpr 0xa6b1d10 <col:11> '<bound member function type>' ->_M_fill_assign 0xa6a7c10
      (CXXThisExpr 0xa6b1d00 <col:11> 'vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6b1d30 <col:26> '_Integer' lvalue ParmVar 0xa6a2d90 '__n' '_Integer')
    (DeclRefExpr 0xa6b1d48 <col:31> '_Integer' lvalue ParmVar 0xa6a2dd0 '__val' '_Integer')))

;
        template <typename _InputIterator> void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) (CompoundStmt 0xa6b1fb8 </usr/include/c++/4.6/bits/stl_vector.h:1157:9, line:1161:2>
  (DeclStmt 0xa6b1ed0 <line:1158:4, line:1159:37>
    0xa6b1ea0 "typedef typename std::iterator_traits<_InputIterator>::iterator_category _IterCategory")
  (CallExpr 0xa6b1f90 <line:1160:4, col:50> '<dependent type>'
    (UnresolvedMemberExpr 0xa6b1ef0 <col:4> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6b1f30 <col:18> '_InputIterator' lvalue ParmVar 0xa6a7550 '__first' '_InputIterator')
    (DeclRefExpr 0xa6b1f48 <col:27> '_InputIterator' lvalue ParmVar 0xa6a7590 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6b1f78 <col:35, col:49> '_IterCategory':'typename std::iterator_traits<_InputIterator>::iterator_category')))

;
        template <typename _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag);
        template <typename _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
        void _M_fill_assign(size_type __n, const value_type &__val);
        template <typename _Integer> void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, std::__true_type) (CompoundStmt 0xa6b2070 </usr/include/c++/4.6/bits/stl_vector.h:1191:9, col:46>
  (CallExpr 0xa6b2048 <col:11, col:43> '<dependent type>'
    (MemberExpr 0xa6b1fe0 <col:11> '<bound member function type>' ->_M_fill_insert 0xa6a87b0
      (CXXThisExpr 0xa6b1fd0 <col:11> 'vector<_Tp, _Alloc> *' this))
    (DeclRefExpr 0xa6b2000 <col:26> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6a7ce0 '__pos' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
    (DeclRefExpr 0xa6b2018 <col:33> '_Integer' lvalue ParmVar 0xa6a7d20 '__n' '_Integer')
    (DeclRefExpr 0xa6b2030 <col:38> '_Integer' lvalue ParmVar 0xa6a7d60 '__val' '_Integer')))

;
        template <typename _InputIterator> void _M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator __last, std::__false_type) (CompoundStmt 0xa6b22c0 </usr/include/c++/4.6/bits/stl_vector.h:1198:9, line:1202:2>
  (DeclStmt 0xa6b21b0 <line:1199:4, line:1200:37>
    0xa6b2180 "typedef typename std::iterator_traits<_InputIterator>::iterator_category _IterCategory")
  (CallExpr 0xa6b2290 <line:1201:4, col:59> '<dependent type>'
    (UnresolvedMemberExpr 0xa6b21d0 <col:4> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6b2210 <col:20> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6a7f60 '__pos' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
    (DeclRefExpr 0xa6b2228 <col:27> '_InputIterator' lvalue ParmVar 0xa6a7fa0 '__first' '_InputIterator')
    (DeclRefExpr 0xa6b2240 <col:36> '_InputIterator' lvalue ParmVar 0xa6a7fe0 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6b2278 <col:44, col:58> '_IterCategory':'typename std::iterator_traits<_InputIterator>::iterator_category')))

;
        template <typename _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag);
        template <typename _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
        void _M_fill_insert(iterator __pos, size_type __n, const value_type &__x);
        void _M_insert_aux(iterator __position, const value_type &__x);
        size_type _M_check_len(size_type __n, const char *__s) const (CompoundStmt 0xa6b2980 </usr/include/c++/4.6/bits/stl_vector.h:1240:7, line:1246:7>
  (IfStmt 0xa6b2518 <line:1241:2, line:1242:33>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6b2430 <line:1241:6, col:28> '<dependent type>'
      (UnresolvedLookupExpr 0xa6b23f0 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
      (CXXOperatorCallExpr 0xa6b23b0 <col:6, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa6b2378 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0)
        (CallExpr 0xa6b2308 <col:6, col:15> '<dependent type>'
          (MemberExpr 0xa6b22e8 <col:6> '<bound member function type>' ->max_size 0xa69e5d0
            (CXXThisExpr 0xa6b22d8 <col:6> 'const vector<_Tp, _Alloc> *' this)))
        (CallExpr 0xa6b2358 <col:19, col:24> '<dependent type>'
          (MemberExpr 0xa6b2338 <col:19> '<bound member function type>' ->size 0xa69e550
            (CXXThisExpr 0xa6b2328 <col:19> 'const vector<_Tp, _Alloc> *' this))))
      (DeclRefExpr 0xa6b23d4 <col:28> 'size_type':'unsigned int' lvalue ParmVar 0xa6a8990 '__n' 'size_type':'unsigned int'))
    (CallExpr 0xa6b24e8 <line:1242:4, col:33> 'void'
      (ImplicitCastExpr 0xa6b24d8 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6b24bc <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa6b2508 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <LValueToRValue>
        (ParenExpr 0xa6b24a8 <col:24, col:30> 'const char *' lvalue
          (DeclRefExpr 0xa6b248c </usr/include/c++/4.6/bits/stl_vector.h:1242:29> 'const char *' lvalue ParmVar 0xa6a89e0 '__s' 'const char *'))))
    <<<NULL>>>)
  (DeclStmt 0xa6b2708 <line:1244:2, col:56>
    0xa6b2540 "const size_type __len =
      (CXXOperatorCallExpr 0xa6b26e0 <col:26, col:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa6b26a8 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0)
        (CallExpr 0xa6b25a8 <col:26, col:31> '<dependent type>'
          (MemberExpr 0xa6b2588 <col:26> '<bound member function type>' ->size 0xa69e550
            (CXXThisExpr 0xa6b2578 <col:26> 'const vector<_Tp, _Alloc> *' this)))
        (CallExpr 0xa6b2680 <col:35, col:55> '<dependent type>'
          (UnresolvedLookupExpr 0xa6b25e0 <col:35, col:40> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6438d0 0xa6446c0)
          (CallExpr 0xa6b2648 <col:44, col:49> '<dependent type>'
            (MemberExpr 0xa6b2628 <col:44> '<bound member function type>' ->size 0xa69e550
              (CXXThisExpr 0xa6b2618 <col:44> 'const vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6b2664 <col:52> 'size_type':'unsigned int' lvalue ParmVar 0xa6a8990 '__n' 'size_type':'unsigned int')))")
  (ReturnStmt 0xa6b2970 <line:1245:2, col:63>
    (ConditionalOperator 0xa6b2950 <col:9, col:63> '<dependent type>'
      (ParenExpr 0xa6b28d0 <col:9, col:46> '<dependent type>'
        (BinaryOperator 0xa6b28b8 <col:10, col:45> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa6b27c0 <col:10, col:23> '<dependent type>'
            (UnresolvedLookupExpr 0xa6b2780 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0)
            (DeclRefExpr 0xa6b2718 <col:10> 'const size_type':'const unsigned int' lvalue Var 0xa6b2540 '__len' 'const size_type':'const unsigned int')
            (CallExpr 0xa6b2760 <col:18, col:23> '<dependent type>'
              (MemberExpr 0xa6b2740 <col:18> '<bound member function type>' ->size 0xa69e550
                (CXXThisExpr 0xa6b2730 <col:18> 'const vector<_Tp, _Alloc> *' this))))
          (CXXOperatorCallExpr 0xa6b2890 <col:28, col:45> '<dependent type>'
            (UnresolvedLookupExpr 0xa6b2850 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670)
            (DeclRefExpr 0xa6b27e4 <col:28> 'const size_type':'const unsigned int' lvalue Var 0xa6b2540 '__len' 'const size_type':'const unsigned int')
            (CallExpr 0xa6b2830 <col:36, col:45> '<dependent type>'
              (MemberExpr 0xa6b2810 <col:36> '<bound member function type>' ->max_size 0xa69e5d0
                (CXXThisExpr 0xa6b2800 <col:36> 'const vector<_Tp, _Alloc> *' this))))))
      (CallExpr 0xa6b2918 <col:50, col:59> '<dependent type>'
        (MemberExpr 0xa6b28f8 <col:50> '<bound member function type>' ->max_size 0xa69e5d0
          (CXXThisExpr 0xa6b28e8 <col:50> 'const vector<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa6b2934 <col:63> 'const size_type':'const unsigned int' lvalue Var 0xa6b2540 '__len' 'const size_type':'const unsigned int'))))


        void _M_erase_at_end(pointer __pos) (CompoundStmt 0xa6b2bc8 </usr/include/c++/4.6/bits/stl_vector.h:1254:7, line:1257:7>
  (CallExpr 0xa6b2af0 <line:1255:2, col:69> '<dependent type>'
    (UnresolvedLookupExpr 0xa6b29c0 <col:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
    (DeclRefExpr 0xa6b2a00 <col:16> 'pointer':'typename _Tp_alloc_type::pointer' lvalue ParmVar 0xa6a8af0 '__pos' 'pointer':'typename _Tp_alloc_type::pointer')
    (CXXDependentScopeMemberExpr 0xa6b2a60 <col:23, col:37> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b2a28 <col:23, col:29> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b2a18 <col:23> 'vector<_Tp, _Alloc> *' this)))
    (CallExpr 0xa6b2ad0 <col:48, col:68> '<dependent type>'
      (UnresolvedMemberExpr 0xa6b2a94 <col:48> '<dependent type>' lvalue)))
  (BinaryOperator 0xa6b2bb0 <line:1256:2, col:28> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6b2b60 <col:2, col:16> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6b2b28 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa6b2b18 <col:2> 'vector<_Tp, _Alloc> *' this)))
    (DeclRefExpr 0xa6b2b94 <col:28> 'pointer':'typename _Tp_alloc_type::pointer' lvalue ParmVar 0xa6a8af0 '__pos' 'pointer':'typename _Tp_alloc_type::pointer')))


    };
    template <typename _Tp, typename _Alloc> inline bool operator==(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b33d8 </usr/include/c++/4.6/bits/stl_vector.h:1274:5, line:1275:61>
  (ReturnStmt 0xa6b33c8 <line:1274:7, line:1275:58>
    (ParenExpr 0xa6b33b0 <line:1274:14, line:1275:58> '<dependent type>'
      (BinaryOperator 0xa6b3398 <line:1274:15, line:1275:57> '<dependent type>' '&&'
        (CXXOperatorCallExpr 0xa6b31a8 <line:1274:15, col:38> '<dependent type>'
          (UnresolvedLookupExpr 0xa6b3160 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6b3050 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30)
          (CallExpr 0xa6b30d0 <col:15, col:24> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6b3098 <col:15, col:19> '<dependent type>' lvalue
              (DeclRefExpr 0xa6b3080 <col:15> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b2de0 '__x' 'const vector<_Tp, _Alloc> &')))
          (CallExpr 0xa6b3140 <col:29, col:38> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6b3108 <col:29, col:33> '<dependent type>' lvalue
              (DeclRefExpr 0xa6b30ec <col:29> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b2f50 '__y' 'const vector<_Tp, _Alloc> &'))))
        (CallExpr 0xa6b3370 <line:1275:11, col:57> '<dependent type>'
          (UnresolvedLookupExpr 0xa6b31e8 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = '1' 0xa663a80 0xa664a50)
          (CallExpr 0xa6b3270 <col:22, col:32> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6b3238 <col:22, col:26> '<dependent type>' lvalue
              (DeclRefExpr 0xa6b3220 <col:22> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b2de0 '__x' 'const vector<_Tp, _Alloc> &')))
          (CallExpr 0xa6b32e0 <col:35, col:43> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6b32a8 <col:35, col:39> '<dependent type>' lvalue
              (DeclRefExpr 0xa6b328c <col:35> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b2de0 '__x' 'const vector<_Tp, _Alloc> &')))
          (CallExpr 0xa6b3350 <col:46, col:56> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6b3318 <col:46, col:50> '<dependent type>' lvalue
              (DeclRefExpr 0xa6b32fc <col:46> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b2f50 '__y' 'const vector<_Tp, _Alloc> &'))))))))

;
    template <typename _Tp, typename _Alloc> inline bool operator<(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b4b00 </usr/include/c++/4.6/bits/stl_vector.h:1291:5, line:1292:33>
  (ReturnStmt 0xa6b4af0 <line:1291:7, line:1292:30>
    (CallExpr 0xa6b4ac0 <line:1291:14, line:1292:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa6b48c8 <line:1291:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa664fa0 0xa665870)
      (CallExpr 0xa6b4950 <col:43, col:53> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6b4918 <col:43, col:47> '<dependent type>' lvalue
          (DeclRefExpr 0xa6b4900 <col:43> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b4630 '__x' 'const vector<_Tp, _Alloc> &')))
      (CallExpr 0xa6b49c0 <col:56, col:64> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6b4988 <col:56, col:60> '<dependent type>' lvalue
          (DeclRefExpr 0xa6b496c <col:56> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b4630 '__x' 'const vector<_Tp, _Alloc> &')))
      (CallExpr 0xa6b4a30 <line:1292:8, col:18> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6b49f8 <col:8, col:12> '<dependent type>' lvalue
          (DeclRefExpr 0xa6b49dc <col:8> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b47a0 '__y' 'const vector<_Tp, _Alloc> &')))
      (CallExpr 0xa6b4aa0 <col:21, col:29> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6b4a68 <col:21, col:25> '<dependent type>' lvalue
          (DeclRefExpr 0xa6b4a4c <col:21> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b47a0 '__y' 'const vector<_Tp, _Alloc> &'))))))

;
    template <typename _Tp, typename _Alloc> inline bool operator!=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b5060 </usr/include/c++/4.6/bits/stl_vector.h:1298:5, col:29>
  (ReturnStmt 0xa6b5050 <col:7, col:26>
    (UnaryOperator 0xa6b5038 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa6b5020 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa6b4ff8 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa6b4fb0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6b3050 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30)
          (DeclRefExpr 0xa6b4f80 <col:16> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b4d00 '__x' 'const vector<_Tp, _Alloc> &')
          (DeclRefExpr 0xa6b4f98 <col:23> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b4e70 '__y' 'const vector<_Tp, _Alloc> &'))))))

;
    template <typename _Tp, typename _Alloc> inline bool operator>(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b5588 </usr/include/c++/4.6/bits/stl_vector.h:1304:5, col:25>
  (ReturnStmt 0xa6b5578 <col:7, col:20>
    (CXXOperatorCallExpr 0xa6b5550 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa6b5510 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6b4880 0xa60db10 0xa625610 0xa627cd0)
      (DeclRefExpr 0xa6b54e0 <col:14> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b53d0 '__y' 'const vector<_Tp, _Alloc> &')
      (DeclRefExpr 0xa6b54f8 <col:20> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b5260 '__x' 'const vector<_Tp, _Alloc> &'))))

;
    template <typename _Tp, typename _Alloc> inline bool operator<=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b5ad8 </usr/include/c++/4.6/bits/stl_vector.h:1310:5, col:28>
  (ReturnStmt 0xa6b5ac8 <col:7, col:25>
    (UnaryOperator 0xa6b5ab0 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa6b5a98 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa6b5a70 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa6b5a30 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6b4880 0xa60db10 0xa625610 0xa627cd0)
          (DeclRefExpr 0xa6b5a00 <col:16> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b58f0 '__y' 'const vector<_Tp, _Alloc> &')
          (DeclRefExpr 0xa6b5a18 <col:22> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b5780 '__x' 'const vector<_Tp, _Alloc> &'))))))

;
    template <typename _Tp, typename _Alloc> inline bool operator>=(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b6028 </usr/include/c++/4.6/bits/stl_vector.h:1316:5, col:28>
  (ReturnStmt 0xa6b6018 <col:7, col:25>
    (UnaryOperator 0xa6b6000 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa6b5fe8 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa6b5fc0 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa6b5f80 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6b4880 0xa60db10 0xa625610 0xa627cd0)
          (DeclRefExpr 0xa6b5f50 <col:16> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b5cd0 '__x' 'const vector<_Tp, _Alloc> &')
          (DeclRefExpr 0xa6b5f68 <col:22> 'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b5e40 '__y' 'const vector<_Tp, _Alloc> &'))))))

;
    template <typename _Tp, typename _Alloc> inline void swap(vector<_Tp, _Alloc> &__x, vector<_Tp, _Alloc> &__y) (CompoundStmt 0xa6b6588 </usr/include/c++/4.6/bits/stl_vector.h:1322:5, col:22>
  (CallExpr 0xa6b6568 <col:7, col:19> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa6b6518 <col:7, col:11> '<dependent type>' lvalue
      (DeclRefExpr 0xa6b6500 <col:7> 'vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b6240 '__x' 'vector<_Tp, _Alloc> &'))
    (DeclRefExpr 0xa6b654c <col:16> 'vector<_Tp, _Alloc>' lvalue ParmVar 0xa6b63b0 '__y' 'vector<_Tp, _Alloc> &')))

;
}
namespace std {
    typedef unsigned long _Bit_type;
    enum  {
        _S_word_bit = (ImplicitCastExpr 0xa6b67d8 </usr/include/c++/4.6/bits/stl_bvector.h:67:24, col:60> 'unsigned int' <IntegralCast>
  (CXXFunctionalCastExpr 0xa6b6788 <col:24, col:60> 'int' functional cast to int <NoOp>
    (ImplicitCastExpr 0xa6b6778 <<built-in>:17:22, /usr/include/c++/4.6/bits/stl_bvector.h:67:59> 'int' <IntegralCast>
      (BinaryOperator 0xa6b6760 <<built-in>:17:22, /usr/include/c++/4.6/bits/stl_bvector.h:67:59> 'unsigned int' '*'
        (ImplicitCastExpr 0xa6b6750 <<built-in>:17:22> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa6b6700 <col:22> 'int' 8))
        (UnaryExprOrTypeTraitExpr 0xa6b6738 </usr/include/c++/4.6/bits/stl_bvector.h:67:43, col:59> 'unsigned int' sizeof '_Bit_type':'unsigned long')))))

    };
    struct _Bit_reference {
        struct _Bit_reference;
        _Bit_type *_M_p;
        _Bit_type _M_mask;
        _Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p((ImplicitCastExpr 0xa6b70f8 </usr/include/c++/4.6/bits/stl_bvector.h:75:12> '_Bit_type *' <LValueToRValue>
  (DeclRefExpr 0xa6b70dc <col:12> '_Bit_type *' lvalue ParmVar 0xa6b69e0 '__x' '_Bit_type *'))
), _M_mask((ImplicitCastExpr 0xa6b7140 </usr/include/c++/4.6/bits/stl_bvector.h:75:26> '_Bit_type':'unsigned long' <LValueToRValue>
  (DeclRefExpr 0xa6b7128 <col:26> '_Bit_type':'unsigned long' lvalue ParmVar 0xa6b6a20 '__y' '_Bit_type':'unsigned long'))
) (CompoundStmt 0xa6b7170 </usr/include/c++/4.6/bits/stl_bvector.h:75:31, col:33>)


        _Bit_reference() : _M_p((ImplicitCastExpr 0xa6b7198 </usr/include/c++/4.6/bits/stl_bvector.h:77:29> '_Bit_type *' <NullToPointer>
  (IntegerLiteral 0xa6b7180 <col:29> 'int' 0))
), _M_mask((ImplicitCastExpr 0xa6b71e0 </usr/include/c++/4.6/bits/stl_bvector.h:77:41> '_Bit_type':'unsigned long' <IntegralCast>
  (IntegerLiteral 0xa6b71c8 <col:41> 'int' 0))
) (CompoundStmt 0xa6b7210 </usr/include/c++/4.6/bits/stl_bvector.h:77:44, col:46>)


        bool operator _Bool() const (CompoundStmt 0xa6b7380 </usr/include/c++/4.6/bits/stl_bvector.h:80:5, col:35>
  (ReturnStmt 0xa6b7370 <col:7, col:32>
    (UnaryOperator 0xa6b7358 <col:14, col:32> '_Bool' prefix '!'
      (UnaryOperator 0xa6b7340 <col:15, col:32> '_Bool' prefix '!'
        (ImplicitCastExpr 0xa6b7330 <col:16, col:32> '_Bool' <IntegralToBoolean>
          (ParenExpr 0xa6b7318 <col:16, col:32> 'unsigned long'
            (BinaryOperator 0xa6b7300 <col:17, col:25> 'unsigned long' '&'
              (ImplicitCastExpr 0xa6b72e0 <col:17, col:18> '_Bit_type':'unsigned long' <LValueToRValue>
                (UnaryOperator 0xa6b7298 <col:17, col:18> '_Bit_type':'unsigned long' lvalue prefix '*'
                  (ImplicitCastExpr 0xa6b7288 <col:18> '_Bit_type *' <LValueToRValue>
                    (MemberExpr 0xa6b7264 <col:18> '_Bit_type *const' lvalue ->_M_p 0xa6b6960
                      (CXXThisExpr 0xa6b7238 <col:18> 'const struct std::_Bit_reference *' this)))))
              (ImplicitCastExpr 0xa6b72f0 <col:25> '_Bit_type':'unsigned long' <LValueToRValue>
                (MemberExpr 0xa6b72c0 <col:25> 'const _Bit_type':'const unsigned long' lvalue ->_M_mask 0xa6b69a0
                  (CXXThisExpr 0xa6b72b0 <col:25> 'const struct std::_Bit_reference *' this))))))))))


        std::_Bit_reference &operator=(bool __x) (CompoundStmt 0xa6b75a0 </usr/include/c++/4.6/bits/stl_bvector.h:84:5, line:90:5>
  (IfStmt 0xa6b7548 <line:85:7, line:88:12>
    <<<NULL>>>
    (ImplicitCastExpr 0xa6b73b0 <line:85:11> '_Bool' <LValueToRValue>
      (DeclRefExpr 0xa6b7394 <col:11> '_Bool' lvalue ParmVar 0xa6b6c70 '__x' '_Bool'))
    (CompoundAssignOperator 0xa6b7458 <line:86:2, col:11> '_Bit_type':'unsigned long' lvalue '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
      (UnaryOperator 0xa6b7400 <col:2, col:3> '_Bit_type':'unsigned long' lvalue prefix '*'
        (ImplicitCastExpr 0xa6b73f0 <col:3> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6b73d0 <col:3> '_Bit_type *' lvalue ->_M_p 0xa6b6960
            (CXXThisExpr 0xa6b73c0 <col:3> 'struct std::_Bit_reference *' this))))
      (ImplicitCastExpr 0xa6b7448 <col:11> '_Bit_type':'unsigned long' <LValueToRValue>
        (MemberExpr 0xa6b7428 <col:11> '_Bit_type':'unsigned long' lvalue ->_M_mask 0xa6b69a0
          (CXXThisExpr 0xa6b7418 <col:11> 'struct std::_Bit_reference *' this))))
    (CompoundAssignOperator 0xa6b7528 <line:88:2, col:12> '_Bit_type':'unsigned long' lvalue '&=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
      (UnaryOperator 0xa6b74b8 <col:2, col:3> '_Bit_type':'unsigned long' lvalue prefix '*'
        (ImplicitCastExpr 0xa6b74a8 <col:3> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6b7488 <col:3> '_Bit_type *' lvalue ->_M_p 0xa6b6960
            (CXXThisExpr 0xa6b7478 <col:3> 'struct std::_Bit_reference *' this))))
      (UnaryOperator 0xa6b7510 <col:11, col:12> '_Bit_type':'unsigned long' prefix '~'
        (ImplicitCastExpr 0xa6b7500 <col:12> '_Bit_type':'unsigned long' <LValueToRValue>
          (MemberExpr 0xa6b74e0 <col:12> '_Bit_type':'unsigned long' lvalue ->_M_mask 0xa6b69a0
            (CXXThisExpr 0xa6b74d0 <col:12> 'struct std::_Bit_reference *' this))))))
  (ReturnStmt 0xa6b7590 <line:89:7, col:15>
    (UnaryOperator 0xa6b7578 <col:14, col:15> 'struct std::_Bit_reference' lvalue prefix '*'
      (CXXThisExpr 0xa6b7568 <col:15> 'struct std::_Bit_reference *' this))))


        std::_Bit_reference &operator=(const std::_Bit_reference &__x) (CompoundStmt 0xa6b7c30 </usr/include/c++/4.6/bits/stl_bvector.h:94:5, col:33>
  (ReturnStmt 0xa6b7c20 <col:7, col:30>
    (CXXOperatorCallExpr 0xa6b7bf8 <col:14, col:30> 'struct std::_Bit_reference' lvalue
      (ImplicitCastExpr 0xa6b7be8 <col:20, <invalid sloc>> 'struct std::_Bit_reference &(*)(_Bool)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6b7bb8 <col:20, <invalid sloc>> 'struct std::_Bit_reference &(_Bool)' lvalue CXXMethod 0xa6b6d10 'operator=' 'struct std::_Bit_reference &(_Bool)'))
      (UnaryOperator 0xa6b75c8 <col:14, col:15> 'struct std::_Bit_reference' lvalue prefix '*'
        (CXXThisExpr 0xa6b75b8 <col:15> 'struct std::_Bit_reference *' this))
      (CXXFunctionalCastExpr 0xa6b7670 <col:22, col:30> '_Bool' functional cast to _Bool <NoOp>
        (ImplicitCastExpr 0xa6b7660 <col:27> '_Bool' <UserDefinedConversion>
          (CXXMemberCallExpr 0xa6b7640 <col:27> '_Bool'
            (MemberExpr 0xa6b7620 <col:27, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
              (DeclRefExpr 0xa6b75e8 <col:27> 'const struct std::_Bit_reference' lvalue ParmVar 0xa6b6db0 '__x' 'const struct std::_Bit_reference &'))))))))


        bool operator==(const std::_Bit_reference &__x) const (CompoundStmt 0xa6b7dc0 </usr/include/c++/4.6/bits/stl_bvector.h:98:5, col:40>
  (ReturnStmt 0xa6b7db0 <col:7, col:37>
    (BinaryOperator 0xa6b7d98 <col:14, col:37> '_Bool' '=='
      (ImplicitCastExpr 0xa6b7d78 <col:14, col:24> 'int' <IntegralCast>
        (CXXFunctionalCastExpr 0xa6b7cd0 <col:14, col:24> '_Bool' functional cast to _Bool <NoOp>
          (ImplicitCastExpr 0xa6b7cc0 <col:19, col:20> '_Bool' <UserDefinedConversion>
            (CXXMemberCallExpr 0xa6b7ca0 <col:19, col:20> '_Bool'
              (MemberExpr 0xa6b7c80 <col:19, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
                (UnaryOperator 0xa6b7c60 <col:19, col:20> 'const struct std::_Bit_reference' lvalue prefix '*'
                  (CXXThisExpr 0xa6b7c50 <col:20> 'const struct std::_Bit_reference *' this)))))))
      (ImplicitCastExpr 0xa6b7d88 <col:29, col:37> 'int' <IntegralCast>
        (CXXFunctionalCastExpr 0xa6b7d60 <col:29, col:37> '_Bool' functional cast to _Bool <NoOp>
          (ImplicitCastExpr 0xa6b7d50 <col:34> '_Bool' <UserDefinedConversion>
            (CXXMemberCallExpr 0xa6b7d30 <col:34> '_Bool'
              (MemberExpr 0xa6b7d10 <col:34, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
                (DeclRefExpr 0xa6b7cf0 <col:34> 'const struct std::_Bit_reference' lvalue ParmVar 0xa6b6eb0 '__x' 'const struct std::_Bit_reference &')))))))))


        bool operator<(const std::_Bit_reference &__x) const (CompoundStmt 0xa6b7f48 </usr/include/c++/4.6/bits/stl_bvector.h:102:5, col:41>
  (ReturnStmt 0xa6b7f38 <col:7, col:38>
    (BinaryOperator 0xa6b7f20 <col:14, col:38> '_Bool' '&&'
      (UnaryOperator 0xa6b7e78 <col:14, col:25> '_Bool' prefix '!'
        (CXXFunctionalCastExpr 0xa6b7e60 <col:15, col:25> '_Bool' functional cast to _Bool <NoOp>
          (ImplicitCastExpr 0xa6b7e50 <col:20, col:21> '_Bool' <UserDefinedConversion>
            (CXXMemberCallExpr 0xa6b7e30 <col:20, col:21> '_Bool'
              (MemberExpr 0xa6b7e10 <col:20, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
                (UnaryOperator 0xa6b7df0 <col:20, col:21> 'const struct std::_Bit_reference' lvalue prefix '*'
                  (CXXThisExpr 0xa6b7de0 <col:21> 'const struct std::_Bit_reference *' this)))))))
      (CXXFunctionalCastExpr 0xa6b7f08 <col:30, col:38> '_Bool' functional cast to _Bool <NoOp>
        (ImplicitCastExpr 0xa6b7ef8 <col:35> '_Bool' <UserDefinedConversion>
          (CXXMemberCallExpr 0xa6b7ed8 <col:35> '_Bool'
            (MemberExpr 0xa6b7eb8 <col:35, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
              (DeclRefExpr 0xa6b7e98 <col:35> 'const struct std::_Bit_reference' lvalue ParmVar 0xa6b6fb0 '__x' 'const struct std::_Bit_reference &'))))))))


        void flip() (CompoundStmt 0xa6b8018 </usr/include/c++/4.6/bits/stl_bvector.h:106:5, col:25>
  (CompoundAssignOperator 0xa6b7ff8 <col:7, col:16> '_Bit_type':'unsigned long' lvalue '^=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    (UnaryOperator 0xa6b7fa0 <col:7, col:8> '_Bit_type':'unsigned long' lvalue prefix '*'
      (ImplicitCastExpr 0xa6b7f90 <col:8> '_Bit_type *' <LValueToRValue>
        (MemberExpr 0xa6b7f70 <col:8> '_Bit_type *' lvalue ->_M_p 0xa6b6960
          (CXXThisExpr 0xa6b7f60 <col:8> 'struct std::_Bit_reference *' this))))
    (ImplicitCastExpr 0xa6b7fe8 <col:16> '_Bit_type':'unsigned long' <LValueToRValue>
      (MemberExpr 0xa6b7fc8 <col:16> '_Bit_type':'unsigned long' lvalue ->_M_mask 0xa6b69a0
        (CXXThisExpr 0xa6b7fb8 <col:16> 'struct std::_Bit_reference *' this)))))


        inline _Bit_reference(const std::_Bit_reference &) throw() : _M_p((ImplicitCastExpr 0xa6bb7d0 </usr/include/c++/4.6/bits/stl_bvector.h:69:10> '_Bit_type *' <LValueToRValue>
  (MemberExpr 0xa6bb7ac <col:10> '_Bit_type *const' lvalue ._M_p 0xa6b6960
    (DeclRefExpr 0xa6bb794 <col:10> 'const struct std::_Bit_reference' lvalue ParmVar 0xa6b7740 '' 'const struct std::_Bit_reference &')))
), _M_mask((ImplicitCastExpr 0xa6bb830 </usr/include/c++/4.6/bits/stl_bvector.h:69:10> '_Bit_type':'unsigned long' <LValueToRValue>
  (MemberExpr 0xa6bb80c <col:10> 'const _Bit_type':'const unsigned long' lvalue ._M_mask 0xa6b69a0
    (DeclRefExpr 0xa6bb7f4 <col:10> 'const struct std::_Bit_reference' lvalue ParmVar 0xa6b7740 '' 'const struct std::_Bit_reference &')))
) (CompoundStmt 0xa6bb860 </usr/include/c++/4.6/bits/stl_bvector.h:69:10>)


    };
    struct _Bit_iterator_base : public std::iterator<std::random_access_iterator_tag, bool> {
        struct _Bit_iterator_base;
        _Bit_type *_M_p;
        unsigned int _M_offset;
        _Bit_iterator_base(_Bit_type *__x, unsigned int __y) : std::iterator<std::random_access_iterator_tag, bool>(), _M_p((ImplicitCastExpr 0xa6b8ff0 </usr/include/c++/4.6/bits/stl_bvector.h:116:12> '_Bit_type *' <LValueToRValue>
  (DeclRefExpr 0xa6b8fd4 <col:12> '_Bit_type *' lvalue ParmVar 0xa6b8740 '__x' '_Bit_type *'))
), _M_offset((ImplicitCastExpr 0xa6b9030 </usr/include/c++/4.6/bits/stl_bvector.h:116:28> 'unsigned int' <LValueToRValue>
  (DeclRefExpr 0xa6b9018 <col:28> 'unsigned int' lvalue ParmVar 0xa6b8790 '__y' 'unsigned int'))
) (CompoundStmt 0xa6b92a8 </usr/include/c++/4.6/bits/stl_bvector.h:116:33, col:35>)


        void _M_bump_up() (CompoundStmt 0xa6b94b8 </usr/include/c++/4.6/bits/stl_bvector.h:120:5, line:126:5>
  (IfStmt 0xa6b9498 <line:121:7, line:125:2>
    <<<NULL>>>
    (BinaryOperator 0xa6b93b0 <line:121:11, col:45> '_Bool' '=='
      (UnaryOperator 0xa6b9308 <col:11, col:20> 'unsigned int' postfix '++'
        (MemberExpr 0xa6b92e8 <col:11> 'unsigned int' lvalue ->_M_offset 0xa6b8700
          (CXXThisExpr 0xa6b92d8 <col:11> 'struct std::_Bit_iterator_base *' this)))
      (ImplicitCastExpr 0xa6b93a0 <col:26, col:45> 'unsigned int' <IntegralCast>
        (BinaryOperator 0xa6b9388 <col:26, col:45> 'int' '-'
          (CXXFunctionalCastExpr 0xa6b9358 <col:26, col:41> 'int' functional cast to int <NoOp>
            (ImplicitCastExpr 0xa6b9348 <col:30> 'int' <IntegralCast>
              (DeclRefExpr 0xa6b932c <col:30> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))
          (IntegerLiteral 0xa6b9370 <col:45> 'int' 1))))
    (CompoundStmt 0xa6b9480 <line:122:2, line:125:2>
      (BinaryOperator 0xa6b9420 <line:123:4, col:16> 'unsigned int' lvalue '='
        (MemberExpr 0xa6b93d8 <col:4> 'unsigned int' lvalue ->_M_offset 0xa6b8700
          (CXXThisExpr 0xa6b93c8 <col:4> 'struct std::_Bit_iterator_base *' this))
        (ImplicitCastExpr 0xa6b9410 <col:16> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa6b93f8 <col:16> 'int' 0)))
      (UnaryOperator 0xa6b9468 <line:124:4, col:6> '_Bit_type *' lvalue prefix '++'
        (MemberExpr 0xa6b9448 <col:6> '_Bit_type *' lvalue ->_M_p 0xa6b86c0
          (CXXThisExpr 0xa6b9438 <col:6> 'struct std::_Bit_iterator_base *' this))))
    <<<NULL>>>))


        void _M_bump_down() (CompoundStmt 0xa6b96b0 </usr/include/c++/4.6/bits/stl_bvector.h:130:5, line:136:5>
  (IfStmt 0xa6b9690 <line:131:7, line:135:2>
    <<<NULL>>>
    (BinaryOperator 0xa6b9540 <line:131:11, col:26> '_Bool' '=='
      (UnaryOperator 0xa6b9500 <col:11, col:20> 'unsigned int' postfix '--'
        (MemberExpr 0xa6b94e0 <col:11> 'unsigned int' lvalue ->_M_offset 0xa6b8700
          (CXXThisExpr 0xa6b94d0 <col:11> 'struct std::_Bit_iterator_base *' this)))
      (ImplicitCastExpr 0xa6b9530 <col:26> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa6b9518 <col:26> 'int' 0)))
    (CompoundStmt 0xa6b9678 <line:132:2, line:135:2>
      (BinaryOperator 0xa6b9618 <line:133:4, col:35> 'unsigned int' lvalue '='
        (MemberExpr 0xa6b9568 <col:4> 'unsigned int' lvalue ->_M_offset 0xa6b8700
          (CXXThisExpr 0xa6b9558 <col:4> 'struct std::_Bit_iterator_base *' this))
        (ImplicitCastExpr 0xa6b9608 <col:16, col:35> 'unsigned int' <IntegralCast>
          (BinaryOperator 0xa6b95f0 <col:16, col:35> 'int' '-'
            (CXXFunctionalCastExpr 0xa6b95c0 <col:16, col:31> 'int' functional cast to int <NoOp>
              (ImplicitCastExpr 0xa6b95b0 <col:20> 'int' <IntegralCast>
                (DeclRefExpr 0xa6b9594 <col:20> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))
            (IntegerLiteral 0xa6b95d8 <col:35> 'int' 1))))
      (UnaryOperator 0xa6b9660 <line:134:4, col:6> '_Bit_type *' lvalue prefix '--'
        (MemberExpr 0xa6b9640 <col:6> '_Bit_type *' lvalue ->_M_p 0xa6b86c0
          (CXXThisExpr 0xa6b9630 <col:6> 'struct std::_Bit_iterator_base *' this))))
    <<<NULL>>>))


        void _M_incr(ptrdiff_t __i) (CompoundStmt 0xa6b9b80 </usr/include/c++/4.6/bits/stl_bvector.h:140:5, line:150:5>
  (DeclStmt 0xa6b97c8 <line:141:7, col:44>
    0xa6b96f0 "difference_type __n =
      (ImplicitCastExpr 0xa6b97b8 <col:29, col:35> 'difference_type':'int' <IntegralCast>
        (BinaryOperator 0xa6b97a0 <col:29, col:35> 'unsigned int' '+'
          (ImplicitCastExpr 0xa6b9790 <col:29> 'unsigned int' <IntegralCast>
            (ImplicitCastExpr 0xa6b9770 <col:29> 'ptrdiff_t':'int' <LValueToRValue>
              (DeclRefExpr 0xa6b9724 <col:29> 'ptrdiff_t':'int' lvalue ParmVar 0xa6b89c0 '__i' 'ptrdiff_t':'int')))
          (ImplicitCastExpr 0xa6b9780 <col:35> 'unsigned int' <LValueToRValue>
            (MemberExpr 0xa6b9750 <col:35> 'unsigned int' lvalue ->_M_offset 0xa6b8700
              (CXXThisExpr 0xa6b9740 <col:35> 'struct std::_Bit_iterator_base *' this)))))")
  (CompoundAssignOperator 0xa6b9898 <line:142:7, col:36> '_Bit_type *' lvalue '+=' ComputeLHSTy='_Bit_type *' ComputeResultTy='_Bit_type *'
    (MemberExpr 0xa6b97e8 <col:7> '_Bit_type *' lvalue ->_M_p 0xa6b86c0
      (CXXThisExpr 0xa6b97d8 <col:7> 'struct std::_Bit_iterator_base *' this))
    (BinaryOperator 0xa6b9880 <col:15, col:36> 'int' '/'
      (ImplicitCastExpr 0xa6b9870 <col:15> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa6b9808 <col:15> 'difference_type':'int' lvalue Var 0xa6b96f0 '__n' 'difference_type':'int'))
      (CXXFunctionalCastExpr 0xa6b9858 <col:21, col:36> 'int' functional cast to int <NoOp>
        (ImplicitCastExpr 0xa6b9848 <col:25> 'int' <IntegralCast>
          (DeclRefExpr 0xa6b982c <col:25> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
  (BinaryOperator 0xa6b9960 <line:143:7, col:34> 'difference_type':'int' lvalue '='
    (DeclRefExpr 0xa6b98b8 <col:7> 'difference_type':'int' lvalue Var 0xa6b96f0 '__n' 'difference_type':'int')
    (BinaryOperator 0xa6b9948 <col:13, col:34> 'int' '%'
      (ImplicitCastExpr 0xa6b9938 <col:13> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa6b98d0 <col:13> 'difference_type':'int' lvalue Var 0xa6b96f0 '__n' 'difference_type':'int'))
      (CXXFunctionalCastExpr 0xa6b9920 <col:19, col:34> 'int' functional cast to int <NoOp>
        (ImplicitCastExpr 0xa6b9910 <col:23> 'int' <IntegralCast>
          (DeclRefExpr 0xa6b98f4 <col:23> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
  (IfStmt 0xa6b9ab8 <line:144:7, line:148:2>
    <<<NULL>>>
    (BinaryOperator 0xa6b99b8 <line:144:11, col:17> '_Bool' '<'
      (ImplicitCastExpr 0xa6b99a8 <col:11> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa6b9978 <col:11> 'difference_type':'int' lvalue Var 0xa6b96f0 '__n' 'difference_type':'int'))
      (IntegerLiteral 0xa6b9990 <col:17> 'int' 0))
    (CompoundStmt 0xa6b9aa0 <line:145:2, line:148:2>
      (CompoundAssignOperator 0xa6b9a38 <line:146:4, col:26> 'difference_type':'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
        (DeclRefExpr 0xa6b99d0 <col:4> 'difference_type':'int' lvalue Var 0xa6b96f0 '__n' 'difference_type':'int')
        (CXXFunctionalCastExpr 0xa6b9a20 <col:11, col:26> 'int' functional cast to int <NoOp>
          (ImplicitCastExpr 0xa6b9a10 <col:15> 'int' <IntegralCast>
            (DeclRefExpr 0xa6b99f4 <col:15> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))
      (UnaryOperator 0xa6b9a88 <line:147:4, col:6> '_Bit_type *' lvalue prefix '--'
        (MemberExpr 0xa6b9a68 <col:6> '_Bit_type *' lvalue ->_M_p 0xa6b86c0
          (CXXThisExpr 0xa6b9a58 <col:6> 'struct std::_Bit_iterator_base *' this))))
    <<<NULL>>>)
  (BinaryOperator 0xa6b9b68 <line:149:7, col:48> 'unsigned int' lvalue '='
    (MemberExpr 0xa6b9ae8 <col:7> 'unsigned int' lvalue ->_M_offset 0xa6b8700
      (CXXThisExpr 0xa6b9ad8 <col:7> 'struct std::_Bit_iterator_base *' this))
    (CXXStaticCastExpr 0xa6b9b50 <col:19, col:48> 'unsigned int' static_cast<unsigned int> <NoOp>
      (ImplicitCastExpr 0xa6b9b40 <col:45> 'unsigned int' <IntegralCast>
        (ImplicitCastExpr 0xa6b9b30 <col:45> 'difference_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa6b9b08 <col:45> 'difference_type':'int' lvalue Var 0xa6b96f0 '__n' 'difference_type':'int'))))))


        bool operator==(const std::_Bit_iterator_base &__i) const (CompoundStmt 0xa6b9d30 </usr/include/c++/4.6/bits/stl_bvector.h:154:5, col:62>
  (ReturnStmt 0xa6b9d20 <col:7, col:51>
    (BinaryOperator 0xa6b9d08 <col:14, col:51> '_Bool' '&&'
      (BinaryOperator 0xa6b9c50 <col:14, col:26> '_Bool' '=='
        (ImplicitCastExpr 0xa6b9c30 <col:14> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6b9bd8 <col:14> '_Bit_type *const' lvalue ->_M_p 0xa6b86c0
            (CXXThisExpr 0xa6b9bc8 <col:14> 'const struct std::_Bit_iterator_base *' this)))
        (ImplicitCastExpr 0xa6b9c40 <col:22, col:26> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6b9c10 <col:22, col:26> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
            (DeclRefExpr 0xa6b9bf8 <col:22> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8ae0 '__i' 'const struct std::_Bit_iterator_base &'))))
      (BinaryOperator 0xa6b9cf0 <col:34, col:51> '_Bool' '=='
        (ImplicitCastExpr 0xa6b9cd0 <col:34> 'unsigned int' <LValueToRValue>
          (MemberExpr 0xa6b9c78 <col:34> 'const unsigned int' lvalue ->_M_offset 0xa6b8700
            (CXXThisExpr 0xa6b9c68 <col:34> 'const struct std::_Bit_iterator_base *' this)))
        (ImplicitCastExpr 0xa6b9ce0 <col:47, col:51> 'unsigned int' <LValueToRValue>
          (MemberExpr 0xa6b9cb0 <col:47, col:51> 'const unsigned int' lvalue ._M_offset 0xa6b8700
            (DeclRefExpr 0xa6b9c98 <col:47> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8ae0 '__i' 'const struct std::_Bit_iterator_base &')))))))


        bool operator<(const std::_Bit_iterator_base &__i) const (CompoundStmt 0xa6b9f80 </usr/include/c++/4.6/bits/stl_bvector.h:158:5, line:161:5>
  (ReturnStmt 0xa6b9f70 <line:159:7, line:160:56>
    (BinaryOperator 0xa6b9f58 <line:159:14, line:160:56> '_Bool' '||'
      (BinaryOperator 0xa6b9dd0 <line:159:14, col:25> '_Bool' '<'
        (ImplicitCastExpr 0xa6b9db0 <col:14> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6b9d58 <col:14> '_Bit_type *const' lvalue ->_M_p 0xa6b86c0
            (CXXThisExpr 0xa6b9d48 <col:14> 'const struct std::_Bit_iterator_base *' this)))
        (ImplicitCastExpr 0xa6b9dc0 <col:21, col:25> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6b9d90 <col:21, col:25> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
            (DeclRefExpr 0xa6b9d78 <col:21> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8be0 '__i' 'const struct std::_Bit_iterator_base &'))))
      (ParenExpr 0xa6b9f40 <line:160:10, col:56> '_Bool'
        (BinaryOperator 0xa6b9f28 <col:11, col:47> '_Bool' '&&'
          (BinaryOperator 0xa6b9e70 <col:11, col:23> '_Bool' '=='
            (ImplicitCastExpr 0xa6b9e50 <col:11> '_Bit_type *' <LValueToRValue>
              (MemberExpr 0xa6b9df8 <col:11> '_Bit_type *const' lvalue ->_M_p 0xa6b86c0
                (CXXThisExpr 0xa6b9de8 <col:11> 'const struct std::_Bit_iterator_base *' this)))
            (ImplicitCastExpr 0xa6b9e60 <col:19, col:23> '_Bit_type *' <LValueToRValue>
              (MemberExpr 0xa6b9e30 <col:19, col:23> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
                (DeclRefExpr 0xa6b9e18 <col:19> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8be0 '__i' 'const struct std::_Bit_iterator_base &'))))
          (BinaryOperator 0xa6b9f10 <col:31, col:47> '_Bool' '<'
            (ImplicitCastExpr 0xa6b9ef0 <col:31> 'unsigned int' <LValueToRValue>
              (MemberExpr 0xa6b9e98 <col:31> 'const unsigned int' lvalue ->_M_offset 0xa6b8700
                (CXXThisExpr 0xa6b9e88 <col:31> 'const struct std::_Bit_iterator_base *' this)))
            (ImplicitCastExpr 0xa6b9f00 <col:43, col:47> 'unsigned int' <LValueToRValue>
              (MemberExpr 0xa6b9ed0 <col:43, col:47> 'const unsigned int' lvalue ._M_offset 0xa6b8700
                (DeclRefExpr 0xa6b9eb8 <col:43> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8be0 '__i' 'const struct std::_Bit_iterator_base &')))))))))


        bool operator!=(const std::_Bit_iterator_base &__i) const (CompoundStmt 0xa6ba080 </usr/include/c++/4.6/bits/stl_bvector.h:165:5, col:31>
  (ReturnStmt 0xa6ba070 <col:7, col:28>
    (UnaryOperator 0xa6ba058 <col:14, col:28> '_Bool' prefix '!'
      (ParenExpr 0xa6ba040 <col:15, col:28> '_Bool'
        (CXXOperatorCallExpr 0xa6ba018 <col:16, col:25> '_Bool'
          (ImplicitCastExpr 0xa6ba008 <col:22, <invalid sloc>> '_Bool (*)(const struct std::_Bit_iterator_base &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6b9fd8 <col:22, <invalid sloc>> '_Bool (const struct std::_Bit_iterator_base &) const' lvalue CXXMethod 0xa6b8b60 'operator==' '_Bool (const struct std::_Bit_iterator_base &) const'))
          (UnaryOperator 0xa6b9fa8 <col:16, col:17> 'const struct std::_Bit_iterator_base' lvalue prefix '*'
            (CXXThisExpr 0xa6b9f98 <col:17> 'const struct std::_Bit_iterator_base *' this))
          (DeclRefExpr 0xa6b9fbc <col:25> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8cb0 '__i' 'const struct std::_Bit_iterator_base &'))))))


        bool operator>(const std::_Bit_iterator_base &__i) const (CompoundStmt 0xa6ba138 </usr/include/c++/4.6/bits/stl_bvector.h:169:5, col:27>
  (ReturnStmt 0xa6ba128 <col:7, col:21>
    (CXXOperatorCallExpr 0xa6ba100 <col:14, col:21> '_Bool'
      (ImplicitCastExpr 0xa6ba0f0 <col:18, <invalid sloc>> '_Bool (*)(const struct std::_Bit_iterator_base &) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6ba0d8 <col:18, <invalid sloc>> '_Bool (const struct std::_Bit_iterator_base &) const' lvalue CXXMethod 0xa6b8c30 'operator<' '_Bool (const struct std::_Bit_iterator_base &) const'))
      (DeclRefExpr 0xa6ba094 <col:14> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8d80 '__i' 'const struct std::_Bit_iterator_base &')
      (UnaryOperator 0xa6ba0c0 <col:20, col:21> 'const struct std::_Bit_iterator_base' lvalue prefix '*'
        (CXXThisExpr 0xa6ba0b0 <col:21> 'const struct std::_Bit_iterator_base *' this)))))


        bool operator<=(const std::_Bit_iterator_base &__i) const (CompoundStmt 0xa6ba220 </usr/include/c++/4.6/bits/stl_bvector.h:173:5, col:30>
  (ReturnStmt 0xa6ba210 <col:7, col:27>
    (UnaryOperator 0xa6ba1f8 <col:14, col:27> '_Bool' prefix '!'
      (ParenExpr 0xa6ba1e0 <col:15, col:27> '_Bool'
        (CXXOperatorCallExpr 0xa6ba1b8 <col:16, col:23> '_Bool'
          (ImplicitCastExpr 0xa6ba1a8 <col:20, <invalid sloc>> '_Bool (*)(const struct std::_Bit_iterator_base &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6ba190 <col:20, <invalid sloc>> '_Bool (const struct std::_Bit_iterator_base &) const' lvalue CXXMethod 0xa6b8c30 'operator<' '_Bool (const struct std::_Bit_iterator_base &) const'))
          (DeclRefExpr 0xa6ba14c <col:16> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8e50 '__i' 'const struct std::_Bit_iterator_base &')
          (UnaryOperator 0xa6ba178 <col:22, col:23> 'const struct std::_Bit_iterator_base' lvalue prefix '*'
            (CXXThisExpr 0xa6ba168 <col:23> 'const struct std::_Bit_iterator_base *' this)))))))


        bool operator>=(const std::_Bit_iterator_base &__i) const (CompoundStmt 0xa6ba308 </usr/include/c++/4.6/bits/stl_bvector.h:177:5, col:30>
  (ReturnStmt 0xa6ba2f8 <col:7, col:27>
    (UnaryOperator 0xa6ba2e0 <col:14, col:27> '_Bool' prefix '!'
      (ParenExpr 0xa6ba2c8 <col:15, col:27> '_Bool'
        (CXXOperatorCallExpr 0xa6ba2a0 <col:16, col:24> '_Bool'
          (ImplicitCastExpr 0xa6ba290 <col:22, <invalid sloc>> '_Bool (*)(const struct std::_Bit_iterator_base &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6ba278 <col:22, <invalid sloc>> '_Bool (const struct std::_Bit_iterator_base &) const' lvalue CXXMethod 0xa6b8c30 'operator<' '_Bool (const struct std::_Bit_iterator_base &) const'))
          (UnaryOperator 0xa6ba248 <col:16, col:17> 'const struct std::_Bit_iterator_base' lvalue prefix '*'
            (CXXThisExpr 0xa6ba238 <col:17> 'const struct std::_Bit_iterator_base *' this))
          (DeclRefExpr 0xa6ba25c <col:24> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6b8f20 '__i' 'const struct std::_Bit_iterator_base &'))))))


        inline _Bit_iterator_base(const std::_Bit_iterator_base &) throw() : std::iterator<std::random_access_iterator_tag, bool>((ImplicitCastExpr 0xa6bbb70 </usr/include/c++/4.6/bits/stl_bvector.h:109:10> 'const std::iterator<std::random_access_iterator_tag, _Bool>':'const struct std::iterator<struct std::random_access_iterator_tag, _Bool, int, _Bool *, _Bool &>' lvalue <UncheckedDerivedToBase (iterator)>
  (DeclRefExpr 0xa6bbb58 <col:10> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6bb4e0 '' 'const struct std::_Bit_iterator_base &'))
), _M_p((ImplicitCastExpr 0xa6bbc70 </usr/include/c++/4.6/bits/stl_bvector.h:109:10> '_Bit_type *' <LValueToRValue>
  (MemberExpr 0xa6bbc50 <col:10> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
    (DeclRefExpr 0xa6bbc38 <col:10> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6bb4e0 '' 'const struct std::_Bit_iterator_base &')))
), _M_offset((ImplicitCastExpr 0xa6bbcd0 </usr/include/c++/4.6/bits/stl_bvector.h:109:10> 'unsigned int' <LValueToRValue>
  (MemberExpr 0xa6bbcac <col:10> 'const unsigned int' lvalue ._M_offset 0xa6b8700
    (DeclRefExpr 0xa6bbc94 <col:10> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6bb4e0 '' 'const struct std::_Bit_iterator_base &')))
) (CompoundStmt 0xa6bbd08 </usr/include/c++/4.6/bits/stl_bvector.h:109:10>)


    };
    inline ptrdiff_t operator-(const std::_Bit_iterator_base &__x, const std::_Bit_iterator_base &__y) (CompoundStmt 0xa6ba6f8 </usr/include/c++/4.6/bits/stl_bvector.h:182:3, line:185:3>
  (ReturnStmt 0xa6ba6e8 <line:183:5, line:184:37>
    (ImplicitCastExpr 0xa6ba6d8 <line:183:12, line:184:37> 'ptrdiff_t':'int' <IntegralCast>
      (ParenExpr 0xa6ba6c0 <line:183:12, line:184:37> 'unsigned int'
        (BinaryOperator 0xa6ba6a8 <line:183:13, line:184:28> 'unsigned int' '-'
          (BinaryOperator 0xa6ba648 <line:183:13, line:184:12> 'unsigned int' '+'
            (ImplicitCastExpr 0xa6ba638 <line:183:13, col:52> 'unsigned int' <IntegralCast>
              (BinaryOperator 0xa6ba5d8 <col:13, col:52> 'int' '*'
                (CXXFunctionalCastExpr 0xa6ba500 <col:13, col:28> 'int' functional cast to int <NoOp>
                  (ImplicitCastExpr 0xa6ba4f0 <col:17> 'int' <IntegralCast>
                    (DeclRefExpr 0xa6ba4d4 <col:17> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))
                (ParenExpr 0xa6ba5c0 <col:32, col:52> 'int'
                  (BinaryOperator 0xa6ba5a8 <col:33, col:48> 'int' '-'
                    (ImplicitCastExpr 0xa6ba588 <col:33, col:37> '_Bit_type *' <LValueToRValue>
                      (MemberExpr 0xa6ba530 <col:33, col:37> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
                        (DeclRefExpr 0xa6ba518 <col:33> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6ba330 '__x' 'const struct std::_Bit_iterator_base &')))
                    (ImplicitCastExpr 0xa6ba598 <col:44, col:48> '_Bit_type *' <LValueToRValue>
                      (MemberExpr 0xa6ba568 <col:44, col:48> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
                        (DeclRefExpr 0xa6ba550 <col:44> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6ba380 '__y' 'const struct std::_Bit_iterator_base &')))))))
            (ImplicitCastExpr 0xa6ba628 <line:184:8, col:12> 'unsigned int' <LValueToRValue>
              (MemberExpr 0xa6ba608 <col:8, col:12> 'const unsigned int' lvalue ._M_offset 0xa6b8700
                (DeclRefExpr 0xa6ba5f0 <col:8> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6ba330 '__x' 'const struct std::_Bit_iterator_base &'))))
          (ImplicitCastExpr 0xa6ba698 <col:24, col:28> 'unsigned int' <LValueToRValue>
            (MemberExpr 0xa6ba678 <col:24, col:28> 'const unsigned int' lvalue ._M_offset 0xa6b8700
              (DeclRefExpr 0xa6ba660 <col:24> 'const struct std::_Bit_iterator_base' lvalue ParmVar 0xa6ba380 '__y' 'const struct std::_Bit_iterator_base &'))))))))


    struct _Bit_iterator : public std::_Bit_iterator_base {
        struct _Bit_iterator;
        typedef std::_Bit_reference reference;
        typedef std::_Bit_reference *pointer;
        typedef std::_Bit_iterator iterator;
        _Bit_iterator() : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bb520 </usr/include/c++/4.6/bits/stl_bvector.h:193:42> '_Bit_type *' <NullToPointer>
  (IntegerLiteral 0xa6bb3d8 <col:42> 'int' 0))
, (ImplicitCastExpr 0xa6bb530 </usr/include/c++/4.6/bits/stl_bvector.h:193:45> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa6bb3f0 <col:45> 'int' 0))
) (CompoundStmt 0xa6bb590 </usr/include/c++/4.6/bits/stl_bvector.h:193:48, col:50>)


        _Bit_iterator(_Bit_type *__x, unsigned int __y) : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bb5d8 </usr/include/c++/4.6/bits/stl_bvector.h:196:26> '_Bit_type *' <LValueToRValue>
  (DeclRefExpr 0xa6bb5a0 <col:26> '_Bit_type *' lvalue ParmVar 0xa6ba9e0 '__x' '_Bit_type *'))
, (ImplicitCastExpr 0xa6bb5e8 </usr/include/c++/4.6/bits/stl_bvector.h:196:31> 'unsigned int' <LValueToRValue>
  (DeclRefExpr 0xa6bb5b8 <col:31> 'unsigned int' lvalue ParmVar 0xa6baa30 '__y' 'unsigned int'))
) (CompoundStmt 0xa6bb640 </usr/include/c++/4.6/bits/stl_bvector.h:196:36, col:38>)


        reference operator*() const (CompoundStmt 0xa6bb8a8 </usr/include/c++/4.6/bits/stl_bvector.h:200:5, col:49>
  (ReturnStmt 0xa6bb898 <col:7, col:46>
    (CXXConstructExpr 0xa6bb870 <col:14, col:46> 'reference':'struct std::_Bit_reference''void (const struct std::_Bit_reference &) throw()' elidable
      (MaterializeTemporaryExpr 0xa6bb788 <col:14, col:46> 'const struct std::_Bit_reference' lvalue
        (ImplicitCastExpr 0xa6bb778 <col:14, col:46> 'const struct std::_Bit_reference' <NoOp>
          (CXXTemporaryObjectExpr 0xa6bb748 <col:14, col:46> 'reference':'struct std::_Bit_reference''void (_Bit_type *, _Bit_type)'
            (ImplicitCastExpr 0xa6bb738 <col:24> '_Bit_type *' <LValueToRValue>
              (MemberExpr 0xa6bb698 <col:24> '_Bit_type *const' lvalue ->_M_p 0xa6b86c0
                (ImplicitCastExpr 0xa6bb688 <col:24> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
                  (CXXThisExpr 0xa6bb678 <col:24> 'const struct std::_Bit_iterator *' this))))
            (BinaryOperator 0xa6bb720 <col:30, col:37> 'unsigned long' '<<'
              (IntegerLiteral 0xa6bb6b8 <col:30> 'unsigned long' 1)
              (ImplicitCastExpr 0xa6bb710 <col:37> 'unsigned int' <LValueToRValue>
                (MemberExpr 0xa6bb6f0 <col:37> 'const unsigned int' lvalue ->_M_offset 0xa6b8700
                  (ImplicitCastExpr 0xa6bb6e0 <col:37> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
                    (CXXThisExpr 0xa6bb6d0 <col:37> 'const struct std::_Bit_iterator *' this)))))))))))


        iterator &operator++() (CompoundStmt 0xa6bb970 </usr/include/c++/4.6/bits/stl_bvector.h:204:5, line:207:5>
  (CXXMemberCallExpr 0xa6bb908 <line:205:7, col:18> 'void'
    (MemberExpr 0xa6bb8e8 <col:7> '<bound member function type>' ->_M_bump_up 0xa6b88d0
      (ImplicitCastExpr 0xa6bb928 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bb8d8 <col:7> 'struct std::_Bit_iterator *' this))))
  (ReturnStmt 0xa6bb960 <line:206:7, col:15>
    (UnaryOperator 0xa6bb948 <col:14, col:15> 'struct std::_Bit_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6bb938 <col:15> 'struct std::_Bit_iterator *' this))))


        iterator operator++(int) (CompoundStmt 0xa6bbe78 </usr/include/c++/4.6/bits/stl_bvector.h:211:5, line:215:5>
  (DeclStmt 0xa6bbda8 <line:212:7, col:29>
    0xa6bb990 "iterator __tmp =
      (CXXConstructExpr 0xa6bbd80 <col:24, col:25> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
        (ImplicitCastExpr 0xa6bbb20 <col:24, col:25> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (UnaryOperator 0xa6bb9d8 <col:24, col:25> 'struct std::_Bit_iterator' lvalue prefix '*'
            (CXXThisExpr 0xa6bb9c8 <col:25> 'struct std::_Bit_iterator *' this))))")
  (CXXMemberCallExpr 0xa6bbde8 <line:213:7, col:18> 'void'
    (MemberExpr 0xa6bbdc8 <col:7> '<bound member function type>' ->_M_bump_up 0xa6b88d0
      (ImplicitCastExpr 0xa6bbe08 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bbdb8 <col:7> 'struct std::_Bit_iterator *' this))))
  (ReturnStmt 0xa6bbe68 <line:214:7, col:14>
    (CXXConstructExpr 0xa6bbe40 <col:14> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
      (ImplicitCastExpr 0xa6bbe30 <col:14> 'const struct std::_Bit_iterator' lvalue <NoOp>
        (DeclRefExpr 0xa6bbe18 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6bb990 '__tmp' 'iterator':'struct std::_Bit_iterator')))))


        iterator &operator--() (CompoundStmt 0xa6bbf30 </usr/include/c++/4.6/bits/stl_bvector.h:219:5, line:222:5>
  (CXXMemberCallExpr 0xa6bbec8 <line:220:7, col:20> 'void'
    (MemberExpr 0xa6bbea8 <col:7> '<bound member function type>' ->_M_bump_down 0xa6b8950
      (ImplicitCastExpr 0xa6bbee8 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bbe98 <col:7> 'struct std::_Bit_iterator *' this))))
  (ReturnStmt 0xa6bbf20 <line:221:7, col:15>
    (UnaryOperator 0xa6bbf08 <col:14, col:15> 'struct std::_Bit_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6bbef8 <col:15> 'struct std::_Bit_iterator *' this))))


        iterator operator--(int) (CompoundStmt 0xa6bc0b8 </usr/include/c++/4.6/bits/stl_bvector.h:226:5, line:230:5>
  (DeclStmt 0xa6bbfe8 <line:227:7, col:29>
    0xa6bbf50 "iterator __tmp =
      (CXXConstructExpr 0xa6bbfc0 <col:24, col:25> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
        (ImplicitCastExpr 0xa6bbfb0 <col:24, col:25> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (UnaryOperator 0xa6bbf98 <col:24, col:25> 'struct std::_Bit_iterator' lvalue prefix '*'
            (CXXThisExpr 0xa6bbf88 <col:25> 'struct std::_Bit_iterator *' this))))")
  (CXXMemberCallExpr 0xa6bc028 <line:228:7, col:20> 'void'
    (MemberExpr 0xa6bc008 <col:7> '<bound member function type>' ->_M_bump_down 0xa6b8950
      (ImplicitCastExpr 0xa6bc048 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bbff8 <col:7> 'struct std::_Bit_iterator *' this))))
  (ReturnStmt 0xa6bc0a8 <line:229:7, col:14>
    (CXXConstructExpr 0xa6bc080 <col:14> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
      (ImplicitCastExpr 0xa6bc070 <col:14> 'const struct std::_Bit_iterator' lvalue <NoOp>
        (DeclRefExpr 0xa6bc058 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6bbf50 '__tmp' 'iterator':'struct std::_Bit_iterator')))))


        iterator &operator+=(difference_type __i) (CompoundStmt 0xa6bc198 </usr/include/c++/4.6/bits/stl_bvector.h:234:5, line:237:5>
  (CXXMemberCallExpr 0xa6bc120 <line:235:7, col:18> 'void'
    (MemberExpr 0xa6bc0e8 <col:7> '<bound member function type>' ->_M_incr 0xa6b8a40
      (ImplicitCastExpr 0xa6bc140 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bc0d8 <col:7> 'struct std::_Bit_iterator *' this)))
    (ImplicitCastExpr 0xa6bc150 <col:15> 'difference_type':'int' <LValueToRValue>
      (DeclRefExpr 0xa6bc108 <col:15> 'difference_type':'int' lvalue ParmVar 0xa6baf20 '__i' 'difference_type':'int')))
  (ReturnStmt 0xa6bc188 <line:236:7, col:15>
    (UnaryOperator 0xa6bc170 <col:14, col:15> 'struct std::_Bit_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6bc160 <col:15> 'struct std::_Bit_iterator *' this))))


        iterator &operator-=(difference_type __i) (CompoundStmt 0xa6bc2d8 </usr/include/c++/4.6/bits/stl_bvector.h:241:5, line:244:5>
  (CXXOperatorCallExpr 0xa6bc278 <line:242:7, col:17> 'iterator':'struct std::_Bit_iterator' lvalue
    (ImplicitCastExpr 0xa6bc268 <col:13, <invalid sloc>> 'iterator &(*)(difference_type)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa6bc218 <col:13, <invalid sloc>> 'iterator &(difference_type)' lvalue CXXMethod 0xa6bafc0 'operator+=' 'iterator &(difference_type)'))
    (UnaryOperator 0xa6bc1c0 <col:7, col:8> 'struct std::_Bit_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6bc1b0 <col:8> 'struct std::_Bit_iterator *' this))
    (UnaryOperator 0xa6bc200 <col:16, col:17> 'difference_type':'int' prefix '-'
      (ImplicitCastExpr 0xa6bc1f0 <col:17> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa6bc1d4 <col:17> 'difference_type':'int' lvalue ParmVar 0xa6bb030 '__i' 'difference_type':'int'))))
  (ReturnStmt 0xa6bc2c8 <line:243:7, col:15>
    (UnaryOperator 0xa6bc2b0 <col:14, col:15> 'struct std::_Bit_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6bc2a0 <col:15> 'struct std::_Bit_iterator *' this))))


        iterator operator+(difference_type __i) const (CompoundStmt 0xa6bc480 </usr/include/c++/4.6/bits/stl_bvector.h:248:5, line:251:5>
  (DeclStmt 0xa6bc388 <line:249:7, col:29>
    0xa6bc300 "iterator __tmp =
      (CXXConstructExpr 0xa6bc360 <col:24, col:25> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
        (UnaryOperator 0xa6bc348 <col:24, col:25> 'const struct std::_Bit_iterator' lvalue prefix '*'
          (CXXThisExpr 0xa6bc338 <col:25> 'const struct std::_Bit_iterator *' this)))")
  (ReturnStmt 0xa6bc470 <line:250:7, col:23>
    (CXXConstructExpr 0xa6bc438 <col:14, col:23> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
      (ImplicitCastExpr 0xa6bc428 <col:14, col:23> 'const struct std::_Bit_iterator' lvalue <NoOp>
        (CXXOperatorCallExpr 0xa6bc400 <col:14, col:23> 'iterator':'struct std::_Bit_iterator' lvalue
          (ImplicitCastExpr 0xa6bc3f0 <col:20, <invalid sloc>> 'iterator &(*)(difference_type)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6bc3d8 <col:20, <invalid sloc>> 'iterator &(difference_type)' lvalue CXXMethod 0xa6bafc0 'operator+=' 'iterator &(difference_type)'))
          (DeclRefExpr 0xa6bc398 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6bc300 '__tmp' 'iterator':'struct std::_Bit_iterator')
          (ImplicitCastExpr 0xa6bc3c8 <col:23> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa6bc3b0 <col:23> 'difference_type':'int' lvalue ParmVar 0xa6bb100 '__i' 'difference_type':'int')))))))


        iterator operator-(difference_type __i) const (CompoundStmt 0xa6bc610 </usr/include/c++/4.6/bits/stl_bvector.h:255:5, line:258:5>
  (DeclStmt 0xa6bc528 <line:256:7, col:29>
    0xa6bc4a0 "iterator __tmp =
      (CXXConstructExpr 0xa6bc500 <col:24, col:25> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
        (UnaryOperator 0xa6bc4e8 <col:24, col:25> 'const struct std::_Bit_iterator' lvalue prefix '*'
          (CXXThisExpr 0xa6bc4d8 <col:25> 'const struct std::_Bit_iterator *' this)))")
  (ReturnStmt 0xa6bc600 <line:257:7, col:23>
    (CXXConstructExpr 0xa6bc5d8 <col:14, col:23> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
      (ImplicitCastExpr 0xa6bc5c8 <col:14, col:23> 'const struct std::_Bit_iterator' lvalue <NoOp>
        (CXXOperatorCallExpr 0xa6bc5a0 <col:14, col:23> 'iterator':'struct std::_Bit_iterator' lvalue
          (ImplicitCastExpr 0xa6bc590 <col:20, <invalid sloc>> 'iterator &(*)(difference_type)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6bc578 <col:20, <invalid sloc>> 'iterator &(difference_type)' lvalue CXXMethod 0xa6bb090 'operator-=' 'iterator &(difference_type)'))
          (DeclRefExpr 0xa6bc538 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6bc4a0 '__tmp' 'iterator':'struct std::_Bit_iterator')
          (ImplicitCastExpr 0xa6bc568 <col:23> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa6bc550 <col:23> 'difference_type':'int' lvalue ParmVar 0xa6bb210 '__i' 'difference_type':'int')))))))


        reference operator[](difference_type __i) const (CompoundStmt 0xa6bc800 </usr/include/c++/4.6/bits/stl_bvector.h:262:5, col:30>
  (ReturnStmt 0xa6bc7f0 <col:7, col:27>
    (CXXConstructExpr 0xa6bc7c8 <col:14, col:27> 'reference':'struct std::_Bit_reference''void (const struct std::_Bit_reference &) throw()' elidable
      (MaterializeTemporaryExpr 0xa6bc7b8 <col:14, col:27> 'const struct std::_Bit_reference' lvalue
        (ImplicitCastExpr 0xa6bc7a8 <col:14, col:27> 'const struct std::_Bit_reference' <NoOp>
          (CXXOperatorCallExpr 0xa6bc788 <col:14, col:27> 'reference':'struct std::_Bit_reference'
            (ImplicitCastExpr 0xa6bc778 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6bc728 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa6bab60 'operator*' 'reference (void) const'))
            (ImplicitCastExpr 0xa6bc718 <col:15, col:27> 'const struct std::_Bit_iterator' lvalue <NoOp>
              (ParenExpr 0xa6bc700 <col:15, col:27> 'iterator':'struct std::_Bit_iterator'
                (CXXOperatorCallExpr 0xa6bc6d8 <col:16, col:24> 'iterator':'struct std::_Bit_iterator'
                  (ImplicitCastExpr 0xa6bc6c8 <col:22, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
                    (DeclRefExpr 0xa6bc678 <col:22, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
                  (UnaryOperator 0xa6bc638 <col:16, col:17> 'const struct std::_Bit_iterator' lvalue prefix '*'
                    (CXXThisExpr 0xa6bc628 <col:17> 'const struct std::_Bit_iterator *' this))
                  (ImplicitCastExpr 0xa6bc668 <col:24> 'difference_type':'int' <LValueToRValue>
                    (DeclRefExpr 0xa6bc64c <col:24> 'difference_type':'int' lvalue ParmVar 0xa6bb2d0 '__i' 'difference_type':'int')))))))))))


        inline _Bit_iterator(const std::_Bit_iterator &) throw() : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bbb48 </usr/include/c++/4.6/bits/stl_bvector.h:187:10> 'const struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
  (DeclRefExpr 0xa6bbb2c <col:10> 'const struct std::_Bit_iterator' lvalue ParmVar 0xa6bbae0 '' 'const struct std::_Bit_iterator &'))
) (CompoundStmt 0xa6bbd70 </usr/include/c++/4.6/bits/stl_bvector.h:187:10>)


    };
    inline std::_Bit_iterator operator+(ptrdiff_t __n, const std::_Bit_iterator &__x) (CompoundStmt 0xa6bca60 </usr/include/c++/4.6/bits/stl_bvector.h:267:3, col:23>
  (ReturnStmt 0xa6bca50 <col:5, col:18>
    (CXXConstructExpr 0xa6bca28 <col:12, col:18> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
      (MaterializeTemporaryExpr 0xa6bca18 <col:12, col:18> 'const struct std::_Bit_iterator' lvalue
        (ImplicitCastExpr 0xa6bca08 <col:12, col:18> 'const struct std::_Bit_iterator' <NoOp>
          (CXXOperatorCallExpr 0xa6bc9e0 <col:12, col:18> 'iterator':'struct std::_Bit_iterator'
            (ImplicitCastExpr 0xa6bc9d0 <col:16, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6bc9b8 <col:16, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
            (DeclRefExpr 0xa6bc978 <col:12> 'const struct std::_Bit_iterator' lvalue ParmVar 0xa6bc870 '__x' 'const struct std::_Bit_iterator &')
            (ImplicitCastExpr 0xa6bc9a8 <col:18> 'ptrdiff_t':'int' <LValueToRValue>
              (DeclRefExpr 0xa6bc990 <col:18> 'ptrdiff_t':'int' lvalue ParmVar 0xa6bc820 '__n' 'ptrdiff_t':'int'))))))))


    struct _Bit_const_iterator : public std::_Bit_iterator_base {
        struct _Bit_const_iterator;
        typedef bool reference;
        typedef bool const_reference;
        typedef const bool *pointer;
        typedef std::_Bit_const_iterator const_iterator;
        _Bit_const_iterator() : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bd890 </usr/include/c++/4.6/bits/stl_bvector.h:276:48> '_Bit_type *' <NullToPointer>
  (IntegerLiteral 0xa6bd858 <col:48> 'int' 0))
, (ImplicitCastExpr 0xa6bd8a0 </usr/include/c++/4.6/bits/stl_bvector.h:276:51> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa6bd870 <col:51> 'int' 0))
) (CompoundStmt 0xa6bd900 </usr/include/c++/4.6/bits/stl_bvector.h:276:54, col:56>)


        _Bit_const_iterator(_Bit_type *__x, unsigned int __y) : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bd948 </usr/include/c++/4.6/bits/stl_bvector.h:279:26> '_Bit_type *' <LValueToRValue>
  (DeclRefExpr 0xa6bd910 <col:26> '_Bit_type *' lvalue ParmVar 0xa6bcdb0 '__x' '_Bit_type *'))
, (ImplicitCastExpr 0xa6bd958 </usr/include/c++/4.6/bits/stl_bvector.h:279:31> 'unsigned int' <LValueToRValue>
  (DeclRefExpr 0xa6bd928 <col:31> 'unsigned int' lvalue ParmVar 0xa6bce00 '__y' 'unsigned int'))
) (CompoundStmt 0xa6bd9b0 </usr/include/c++/4.6/bits/stl_bvector.h:279:36, col:38>)


        _Bit_const_iterator(const std::_Bit_iterator &__x) : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bda58 </usr/include/c++/4.6/bits/stl_bvector.h:282:26, col:30> '_Bit_type *' <LValueToRValue>
  (MemberExpr 0xa6bd9e8 <col:26, col:30> '_Bit_type *const' lvalue ._M_p 0xa6b86c0
    (ImplicitCastExpr 0xa6bd9d8 <col:26> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
      (DeclRefExpr 0xa6bd9c0 <col:26> 'const struct std::_Bit_iterator' lvalue ParmVar 0xa6bcee0 '__x' 'const struct std::_Bit_iterator &'))))
, (ImplicitCastExpr 0xa6bda68 </usr/include/c++/4.6/bits/stl_bvector.h:282:36, col:40> 'unsigned int' <LValueToRValue>
  (MemberExpr 0xa6bda30 <col:36, col:40> 'const unsigned int' lvalue ._M_offset 0xa6b8700
    (ImplicitCastExpr 0xa6bda20 <col:36> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
      (DeclRefExpr 0xa6bda08 <col:36> 'const struct std::_Bit_iterator' lvalue ParmVar 0xa6bcee0 '__x' 'const struct std::_Bit_iterator &'))))
) (CompoundStmt 0xa6bdac0 </usr/include/c++/4.6/bits/stl_bvector.h:282:51, col:53>)


        const_reference operator*() const (CompoundStmt 0xa6bdc70 </usr/include/c++/4.6/bits/stl_bvector.h:286:5, col:54>
  (ReturnStmt 0xa6bdc60 <col:7, col:51>
    (ImplicitCastExpr 0xa6bdc50 <col:14, col:51> '_Bool' <UserDefinedConversion>
      (CXXMemberCallExpr 0xa6bdc30 <col:14, col:51> '_Bool'
        (MemberExpr 0xa6bdc10 <col:14, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
          (ImplicitCastExpr 0xa6bdc00 <col:14, col:51> 'const struct std::_Bit_reference' lvalue <NoOp>
            (CXXTemporaryObjectExpr 0xa6bdbc8 <col:14, col:51> 'struct std::_Bit_reference''void (_Bit_type *, _Bit_type)'
              (ImplicitCastExpr 0xa6bdbb8 <col:29> '_Bit_type *' <LValueToRValue>
                (MemberExpr 0xa6bdb18 <col:29> '_Bit_type *const' lvalue ->_M_p 0xa6b86c0
                  (ImplicitCastExpr 0xa6bdb08 <col:29> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
                    (CXXThisExpr 0xa6bdaf8 <col:29> 'const struct std::_Bit_const_iterator *' this))))
              (BinaryOperator 0xa6bdba0 <col:35, col:42> 'unsigned long' '<<'
                (IntegerLiteral 0xa6bdb38 <col:35> 'unsigned long' 1)
                (ImplicitCastExpr 0xa6bdb90 <col:42> 'unsigned int' <LValueToRValue>
                  (MemberExpr 0xa6bdb70 <col:42> 'const unsigned int' lvalue ->_M_offset 0xa6b8700
                    (ImplicitCastExpr 0xa6bdb60 <col:42> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
                      (CXXThisExpr 0xa6bdb50 <col:42> 'const struct std::_Bit_const_iterator *' this))))))))))))


        const_iterator &operator++() (CompoundStmt 0xa6bdd40 </usr/include/c++/4.6/bits/stl_bvector.h:290:5, line:293:5>
  (CXXMemberCallExpr 0xa6bdcd8 <line:291:7, col:18> 'void'
    (MemberExpr 0xa6bdcb8 <col:7> '<bound member function type>' ->_M_bump_up 0xa6b88d0
      (ImplicitCastExpr 0xa6bdcf8 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bdca8 <col:7> 'struct std::_Bit_const_iterator *' this))))
  (ReturnStmt 0xa6bdd30 <line:292:7, col:15>
    (UnaryOperator 0xa6bdd18 <col:14, col:15> 'struct std::_Bit_const_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6bdd08 <col:15> 'struct std::_Bit_const_iterator *' this))))


        const_iterator operator++(int) (CompoundStmt 0xa6be068 </usr/include/c++/4.6/bits/stl_bvector.h:297:5, line:301:5>
  (DeclStmt 0xa6bdf98 <line:298:7, col:35>
    0xa6bdd60 "const_iterator __tmp =
      (CXXConstructExpr 0xa6bdf70 <col:30, col:31> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
        (ImplicitCastExpr 0xa6bded0 <col:30, col:31> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
          (UnaryOperator 0xa6bdda8 <col:30, col:31> 'struct std::_Bit_const_iterator' lvalue prefix '*'
            (CXXThisExpr 0xa6bdd98 <col:31> 'struct std::_Bit_const_iterator *' this))))")
  (CXXMemberCallExpr 0xa6bdfd8 <line:299:7, col:18> 'void'
    (MemberExpr 0xa6bdfb8 <col:7> '<bound member function type>' ->_M_bump_up 0xa6b88d0
      (ImplicitCastExpr 0xa6bdff8 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6bdfa8 <col:7> 'struct std::_Bit_const_iterator *' this))))
  (ReturnStmt 0xa6be058 <line:300:7, col:14>
    (CXXConstructExpr 0xa6be030 <col:14> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()' elidable
      (ImplicitCastExpr 0xa6be020 <col:14> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
        (DeclRefExpr 0xa6be008 <col:14> 'const_iterator':'struct std::_Bit_const_iterator' lvalue Var 0xa6bdd60 '__tmp' 'const_iterator':'struct std::_Bit_const_iterator')))))


        const_iterator &operator--() (CompoundStmt 0xa6be120 </usr/include/c++/4.6/bits/stl_bvector.h:305:5, line:308:5>
  (CXXMemberCallExpr 0xa6be0b8 <line:306:7, col:20> 'void'
    (MemberExpr 0xa6be098 <col:7> '<bound member function type>' ->_M_bump_down 0xa6b8950
      (ImplicitCastExpr 0xa6be0d8 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6be088 <col:7> 'struct std::_Bit_const_iterator *' this))))
  (ReturnStmt 0xa6be110 <line:307:7, col:15>
    (UnaryOperator 0xa6be0f8 <col:14, col:15> 'struct std::_Bit_const_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6be0e8 <col:15> 'struct std::_Bit_const_iterator *' this))))


        const_iterator operator--(int) (CompoundStmt 0xa6be2a8 </usr/include/c++/4.6/bits/stl_bvector.h:312:5, line:316:5>
  (DeclStmt 0xa6be1d8 <line:313:7, col:35>
    0xa6be140 "const_iterator __tmp =
      (CXXConstructExpr 0xa6be1b0 <col:30, col:31> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
        (ImplicitCastExpr 0xa6be1a0 <col:30, col:31> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
          (UnaryOperator 0xa6be188 <col:30, col:31> 'struct std::_Bit_const_iterator' lvalue prefix '*'
            (CXXThisExpr 0xa6be178 <col:31> 'struct std::_Bit_const_iterator *' this))))")
  (CXXMemberCallExpr 0xa6be218 <line:314:7, col:20> 'void'
    (MemberExpr 0xa6be1f8 <col:7> '<bound member function type>' ->_M_bump_down 0xa6b8950
      (ImplicitCastExpr 0xa6be238 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6be1e8 <col:7> 'struct std::_Bit_const_iterator *' this))))
  (ReturnStmt 0xa6be298 <line:315:7, col:14>
    (CXXConstructExpr 0xa6be270 <col:14> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()' elidable
      (ImplicitCastExpr 0xa6be260 <col:14> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
        (DeclRefExpr 0xa6be248 <col:14> 'const_iterator':'struct std::_Bit_const_iterator' lvalue Var 0xa6be140 '__tmp' 'const_iterator':'struct std::_Bit_const_iterator')))))


        const_iterator &operator+=(difference_type __i) (CompoundStmt 0xa6be388 </usr/include/c++/4.6/bits/stl_bvector.h:320:5, line:323:5>
  (CXXMemberCallExpr 0xa6be310 <line:321:7, col:18> 'void'
    (MemberExpr 0xa6be2d8 <col:7> '<bound member function type>' ->_M_incr 0xa6b8a40
      (ImplicitCastExpr 0xa6be330 <col:7> 'struct std::_Bit_iterator_base *' <UncheckedDerivedToBase (_Bit_iterator_base)>
        (CXXThisExpr 0xa6be2c8 <col:7> 'struct std::_Bit_const_iterator *' this)))
    (ImplicitCastExpr 0xa6be340 <col:15> 'difference_type':'int' <LValueToRValue>
      (DeclRefExpr 0xa6be2f8 <col:15> 'difference_type':'int' lvalue ParmVar 0xa6bd3a0 '__i' 'difference_type':'int')))
  (ReturnStmt 0xa6be378 <line:322:7, col:15>
    (UnaryOperator 0xa6be360 <col:14, col:15> 'struct std::_Bit_const_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6be350 <col:15> 'struct std::_Bit_const_iterator *' this))))


        const_iterator &operator-=(difference_type __i) (CompoundStmt 0xa6be4e0 </usr/include/c++/4.6/bits/stl_bvector.h:327:5, line:330:5>
  (CXXOperatorCallExpr 0xa6be480 <line:328:7, col:17> 'const_iterator':'struct std::_Bit_const_iterator' lvalue
    (ImplicitCastExpr 0xa6be470 <col:13, <invalid sloc>> 'const_iterator &(*)(difference_type)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa6be408 <col:13, <invalid sloc>> 'const_iterator &(difference_type)' lvalue CXXMethod 0xa6bd440 'operator+=' 'const_iterator &(difference_type)'))
    (UnaryOperator 0xa6be3b0 <col:7, col:8> 'struct std::_Bit_const_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6be3a0 <col:8> 'struct std::_Bit_const_iterator *' this))
    (UnaryOperator 0xa6be3f0 <col:16, col:17> 'difference_type':'int' prefix '-'
      (ImplicitCastExpr 0xa6be3e0 <col:17> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa6be3c4 <col:17> 'difference_type':'int' lvalue ParmVar 0xa6bd4b0 '__i' 'difference_type':'int'))))
  (ReturnStmt 0xa6be4d0 <line:329:7, col:15>
    (UnaryOperator 0xa6be4b8 <col:14, col:15> 'struct std::_Bit_const_iterator' lvalue prefix '*'
      (CXXThisExpr 0xa6be4a8 <col:15> 'struct std::_Bit_const_iterator *' this))))


        const_iterator operator+(difference_type __i) const (CompoundStmt 0xa6be670 </usr/include/c++/4.6/bits/stl_bvector.h:334:5, line:337:5>
  (DeclStmt 0xa6be588 <line:335:7, col:35>
    0xa6be500 "const_iterator __tmp =
      (CXXConstructExpr 0xa6be560 <col:30, col:31> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
        (UnaryOperator 0xa6be548 <col:30, col:31> 'const struct std::_Bit_const_iterator' lvalue prefix '*'
          (CXXThisExpr 0xa6be538 <col:31> 'const struct std::_Bit_const_iterator *' this)))")
  (ReturnStmt 0xa6be660 <line:336:7, col:23>
    (CXXConstructExpr 0xa6be638 <col:14, col:23> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
      (ImplicitCastExpr 0xa6be628 <col:14, col:23> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
        (CXXOperatorCallExpr 0xa6be600 <col:14, col:23> 'const_iterator':'struct std::_Bit_const_iterator' lvalue
          (ImplicitCastExpr 0xa6be5f0 <col:20, <invalid sloc>> 'const_iterator &(*)(difference_type)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6be5d8 <col:20, <invalid sloc>> 'const_iterator &(difference_type)' lvalue CXXMethod 0xa6bd440 'operator+=' 'const_iterator &(difference_type)'))
          (DeclRefExpr 0xa6be598 <col:14> 'const_iterator':'struct std::_Bit_const_iterator' lvalue Var 0xa6be500 '__tmp' 'const_iterator':'struct std::_Bit_const_iterator')
          (ImplicitCastExpr 0xa6be5c8 <col:23> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa6be5b0 <col:23> 'difference_type':'int' lvalue ParmVar 0xa6bd580 '__i' 'difference_type':'int')))))))


        const_iterator operator-(difference_type __i) const (CompoundStmt 0xa6be800 </usr/include/c++/4.6/bits/stl_bvector.h:341:5, line:344:5>
  (DeclStmt 0xa6be718 <line:342:7, col:35>
    0xa6be690 "const_iterator __tmp =
      (CXXConstructExpr 0xa6be6f0 <col:30, col:31> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
        (UnaryOperator 0xa6be6d8 <col:30, col:31> 'const struct std::_Bit_const_iterator' lvalue prefix '*'
          (CXXThisExpr 0xa6be6c8 <col:31> 'const struct std::_Bit_const_iterator *' this)))")
  (ReturnStmt 0xa6be7f0 <line:343:7, col:23>
    (CXXConstructExpr 0xa6be7c8 <col:14, col:23> 'const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
      (ImplicitCastExpr 0xa6be7b8 <col:14, col:23> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
        (CXXOperatorCallExpr 0xa6be790 <col:14, col:23> 'const_iterator':'struct std::_Bit_const_iterator' lvalue
          (ImplicitCastExpr 0xa6be780 <col:20, <invalid sloc>> 'const_iterator &(*)(difference_type)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa6be768 <col:20, <invalid sloc>> 'const_iterator &(difference_type)' lvalue CXXMethod 0xa6bd510 'operator-=' 'const_iterator &(difference_type)'))
          (DeclRefExpr 0xa6be728 <col:14> 'const_iterator':'struct std::_Bit_const_iterator' lvalue Var 0xa6be690 '__tmp' 'const_iterator':'struct std::_Bit_const_iterator')
          (ImplicitCastExpr 0xa6be758 <col:23> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa6be740 <col:23> 'difference_type':'int' lvalue ParmVar 0xa6bd690 '__i' 'difference_type':'int')))))))


        const_reference operator[](difference_type __i) const (CompoundStmt 0xa6be988 </usr/include/c++/4.6/bits/stl_bvector.h:348:5, col:30>
  (ReturnStmt 0xa6be978 <col:7, col:27>
    (CXXOperatorCallExpr 0xa6be958 <col:14, col:27> 'const_reference':'_Bool'
      (ImplicitCastExpr 0xa6be948 <<invalid sloc>> 'const_reference (*)(void) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6be918 <<invalid sloc>> 'const_reference (void) const' lvalue CXXMethod 0xa6bcfe0 'operator*' 'const_reference (void) const'))
      (ImplicitCastExpr 0xa6be908 <col:15, col:27> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
        (ParenExpr 0xa6be8f0 <col:15, col:27> 'const_iterator':'struct std::_Bit_const_iterator'
          (CXXOperatorCallExpr 0xa6be8c8 <col:16, col:24> 'const_iterator':'struct std::_Bit_const_iterator'
            (ImplicitCastExpr 0xa6be8b8 <col:22, <invalid sloc>> 'const_iterator (*)(difference_type) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6be868 <col:22, <invalid sloc>> 'const_iterator (difference_type) const' lvalue CXXMethod 0xa6bd620 'operator+' 'const_iterator (difference_type) const'))
            (UnaryOperator 0xa6be828 <col:16, col:17> 'const struct std::_Bit_const_iterator' lvalue prefix '*'
              (CXXThisExpr 0xa6be818 <col:17> 'const struct std::_Bit_const_iterator *' this))
            (ImplicitCastExpr 0xa6be858 <col:24> 'difference_type':'int' <LValueToRValue>
              (DeclRefExpr 0xa6be83c <col:24> 'difference_type':'int' lvalue ParmVar 0xa6bd750 '__i' 'difference_type':'int'))))))))


        inline _Bit_const_iterator(const std::_Bit_const_iterator &) throw() : std::_Bit_iterator_base((ImplicitCastExpr 0xa6bdef8 </usr/include/c++/4.6/bits/stl_bvector.h:269:10> 'const struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
  (DeclRefExpr 0xa6bdedc <col:10> 'const struct std::_Bit_const_iterator' lvalue ParmVar 0xa6bde90 '' 'const struct std::_Bit_const_iterator &'))
) (CompoundStmt 0xa6bdf60 </usr/include/c++/4.6/bits/stl_bvector.h:269:10>)


    };
    inline std::_Bit_const_iterator operator+(ptrdiff_t __n, const std::_Bit_const_iterator &__x) (CompoundStmt 0xa6bebf0 </usr/include/c++/4.6/bits/stl_bvector.h:353:3, col:23>
  (ReturnStmt 0xa6bebe0 <col:5, col:18>
    (CXXConstructExpr 0xa6bebb8 <col:12, col:18> 'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()' elidable
      (MaterializeTemporaryExpr 0xa6beba8 <col:12, col:18> 'const struct std::_Bit_const_iterator' lvalue
        (ImplicitCastExpr 0xa6beb98 <col:12, col:18> 'const struct std::_Bit_const_iterator' <NoOp>
          (CXXOperatorCallExpr 0xa6beb70 <col:12, col:18> 'const_iterator':'struct std::_Bit_const_iterator'
            (ImplicitCastExpr 0xa6beb60 <col:16, <invalid sloc>> 'const_iterator (*)(difference_type) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6beb48 <col:16, <invalid sloc>> 'const_iterator (difference_type) const' lvalue CXXMethod 0xa6bd620 'operator+' 'const_iterator (difference_type) const'))
            (DeclRefExpr 0xa6beb08 <col:12> 'const struct std::_Bit_const_iterator' lvalue ParmVar 0xa6bea00 '__x' 'const struct std::_Bit_const_iterator &')
            (ImplicitCastExpr 0xa6beb38 <col:18> 'ptrdiff_t':'int' <LValueToRValue>
              (DeclRefExpr 0xa6beb20 <col:18> 'ptrdiff_t':'int' lvalue ParmVar 0xa6be9b0 '__n' 'ptrdiff_t':'int'))))))))


    inline void __fill_bvector(std::_Bit_iterator __first, std::_Bit_iterator __last, bool __x) (CompoundStmt 0xa6befe8 </usr/include/c++/4.6/bits/stl_bvector.h:357:3, line:360:3>
  (ForStmt 0xa6befc0 <line:358:5, line:359:18>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6bee18 <line:358:12, col:23> '_Bool'
      (ImplicitCastExpr 0xa6bee08 <col:20, <invalid sloc>> '_Bool (*)(const struct std::_Bit_iterator_base &) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6bedf0 <col:20, <invalid sloc>> '_Bool (const struct std::_Bit_iterator_base &) const' lvalue CXXMethod 0xa6b8d00 'operator!=' '_Bool (const struct std::_Bit_iterator_base &) const'))
      (ImplicitCastExpr 0xa6bede0 <col:12> 'const struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
        (DeclRefExpr 0xa6bed8c <col:12> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bec10 '__first' 'struct std::_Bit_iterator'))
      (ImplicitCastExpr 0xa6bedd0 <col:23> 'const struct std::_Bit_iterator_base' lvalue <NoOp>
        (ImplicitCastExpr 0xa6bedc0 <col:23> 'struct std::_Bit_iterator_base' lvalue <DerivedToBase (_Bit_iterator_base)>
          (DeclRefExpr 0xa6beda4 <col:23> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bec50 '__last' 'struct std::_Bit_iterator'))))
    (CXXOperatorCallExpr 0xa6beeb8 <col:31, col:33> 'iterator':'struct std::_Bit_iterator' lvalue
      (ImplicitCastExpr 0xa6beea8 <<invalid sloc>> 'iterator &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6bee58 <<invalid sloc>> 'iterator &(void)' lvalue CXXMethod 0xa6bac60 'operator++' 'iterator &(void)'))
      (DeclRefExpr 0xa6bee3c <col:33> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bec10 '__first' 'struct std::_Bit_iterator'))
    (CXXOperatorCallExpr 0xa6bef98 <line:359:7, col:18> 'struct std::_Bit_reference' lvalue
      (ImplicitCastExpr 0xa6bef88 <col:16, <invalid sloc>> 'struct std::_Bit_reference &(*)(_Bool)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6bef70 <col:16, <invalid sloc>> 'struct std::_Bit_reference &(_Bool)' lvalue CXXMethod 0xa6b6d10 'operator=' 'struct std::_Bit_reference &(_Bool)'))
      (CXXOperatorCallExpr 0xa6bef28 <col:7, col:8> 'reference':'struct std::_Bit_reference'
        (ImplicitCastExpr 0xa6bef18 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6bef00 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa6bab60 'operator*' 'reference (void) const'))
        (ImplicitCastExpr 0xa6beef0 <col:8> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (DeclRefExpr 0xa6beed8 <col:8> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bec10 '__first' 'struct std::_Bit_iterator')))
      (ImplicitCastExpr 0xa6bef60 <col:18> '_Bool' <LValueToRValue>
        (DeclRefExpr 0xa6bef48 <col:18> '_Bool' lvalue ParmVar 0xa6bec90 '__x' '_Bool')))))


    inline void fill(std::_Bit_iterator __first, std::_Bit_iterator __last, const bool &__x) (CompoundStmt 0xa6bfdf0 </usr/include/c++/4.6/bits/stl_bvector.h:364:3, line:373:3>
  (IfStmt 0xa6bfdd0 <line:365:5, line:372:42>
    <<<NULL>>>
    (BinaryOperator 0xa6bf270 <line:365:9, col:32> '_Bool' '!='
      (ImplicitCastExpr 0xa6bf250 <col:9, col:17> '_Bit_type *' <LValueToRValue>
        (MemberExpr 0xa6bf1e8 <col:9, col:17> '_Bit_type *' lvalue ._M_p 0xa6b86c0
          (ImplicitCastExpr 0xa6bf1d8 <col:9> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
            (DeclRefExpr 0xa6bf1bc <col:9> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf010 '__first' 'struct std::_Bit_iterator'))))
      (ImplicitCastExpr 0xa6bf260 <col:25, col:32> '_Bit_type *' <LValueToRValue>
        (MemberExpr 0xa6bf230 <col:25, col:32> '_Bit_type *' lvalue ._M_p 0xa6b86c0
          (ImplicitCastExpr 0xa6bf220 <col:25> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
            (DeclRefExpr 0xa6bf208 <col:25> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf050 '__last' 'struct std::_Bit_iterator')))))
    (CompoundStmt 0xa6bfc60 <line:366:7, line:370:7>
      (CallExpr 0xa6bf7c8 <line:367:2, col:55> 'void'
        (ImplicitCastExpr 0xa6bf7b8 <col:2, col:7> 'void (*)(unsigned long *, unsigned long *, const int &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6bf758 <col:2, col:7> 'void (unsigned long *, unsigned long *, const int &)' lvalue Function 0xa6bf690 'fill' 'void (unsigned long *, unsigned long *, const int &)' (FunctionTemplate 0xa655780 'fill')))
        (BinaryOperator 0xa6bf358 <col:12, col:27> '_Bit_type *' '+'
          (ImplicitCastExpr 0xa6bf348 <col:12, col:20> '_Bit_type *' <LValueToRValue>
            (MemberExpr 0xa6bf310 <col:12, col:20> '_Bit_type *' lvalue ._M_p 0xa6b86c0
              (ImplicitCastExpr 0xa6bf300 <col:12> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
                (DeclRefExpr 0xa6bf2e8 <col:12> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf010 '__first' 'struct std::_Bit_iterator'))))
          (IntegerLiteral 0xa6bf330 <col:27> 'int' 1))
        (ImplicitCastExpr 0xa6bf7f0 <col:30, col:37> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6bf398 <col:30, col:37> '_Bit_type *' lvalue ._M_p 0xa6b86c0
            (ImplicitCastExpr 0xa6bf388 <col:30> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
              (DeclRefExpr 0xa6bf370 <col:30> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf050 '__last' 'struct std::_Bit_iterator'))))
        (MaterializeTemporaryExpr 0xa6bf800 <col:43, col:54> 'const int':'const int' lvalue
          (ConditionalOperator 0xa6bf428 <col:43, col:54> 'int'
            (ImplicitCastExpr 0xa6bf418 <col:43> '_Bool' <LValueToRValue>
              (DeclRefExpr 0xa6bf3b8 <col:43> 'const _Bool' lvalue ParmVar 0xa6bf0c0 '__x' 'const _Bool &'))
            (UnaryOperator 0xa6bf3e8 <col:49, col:50> 'int' prefix '~'
              (IntegerLiteral 0xa6bf3d0 <col:50> 'int' 0))
            (IntegerLiteral 0xa6bf400 <col:54> 'int' 0))))
      (CallExpr 0xa6bf9a8 <line:368:2, col:65> 'void'
        (ImplicitCastExpr 0xa6bf998 <col:2> 'void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6bf960 <col:2> 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)' lvalue Function 0xa6bed20 '__fill_bvector' 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)'))
        (CXXConstructExpr 0xa6bf9e0 <col:17> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
          (ImplicitCastExpr 0xa6bf9d0 <col:17> 'const struct std::_Bit_iterator' lvalue <NoOp>
            (DeclRefExpr 0xa6bf844 <col:17> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf010 '__first' 'struct std::_Bit_iterator')))
        (CXXConstructExpr 0xa6bfa28 <col:26, col:59> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
          (MaterializeTemporaryExpr 0xa6bfa18 <col:26, col:59> 'const struct std::_Bit_iterator' lvalue
            (ImplicitCastExpr 0xa6bfa08 <col:26, col:59> 'const struct std::_Bit_iterator' <NoOp>
              (CXXTemporaryObjectExpr 0xa6bf918 <col:26, col:59> 'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
                (BinaryOperator 0xa6bf8d8 <col:40, col:55> '_Bit_type *' '+'
                  (ImplicitCastExpr 0xa6bf8c8 <col:40, col:48> '_Bit_type *' <LValueToRValue>
                    (MemberExpr 0xa6bf890 <col:40, col:48> '_Bit_type *' lvalue ._M_p 0xa6b86c0
                      (ImplicitCastExpr 0xa6bf880 <col:40> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
                        (DeclRefExpr 0xa6bf868 <col:40> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf010 '__first' 'struct std::_Bit_iterator'))))
                  (IntegerLiteral 0xa6bf8b0 <col:55> 'int' 1))
                (ImplicitCastExpr 0xa6bf908 <col:58> 'unsigned int' <IntegralCast>
                  (IntegerLiteral 0xa6bf8f0 <col:58> 'int' 0))))))
        (ImplicitCastExpr 0xa6bfa50 <col:62> '_Bool' <LValueToRValue>
          (DeclRefExpr 0xa6bf948 <col:62> 'const _Bool' lvalue ParmVar 0xa6bf0c0 '__x' 'const _Bool &')))
      (CallExpr 0xa6bfba8 <line:369:2, col:59> 'void'
        (ImplicitCastExpr 0xa6bfb98 <col:2> 'void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6bfb80 <col:2> 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)' lvalue Function 0xa6bed20 '__fill_bvector' 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)'))
        (CXXConstructExpr 0xa6bfbf0 <col:17, col:45> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
          (MaterializeTemporaryExpr 0xa6bfbe0 <col:17, col:45> 'const struct std::_Bit_iterator' lvalue
            (ImplicitCastExpr 0xa6bfbd0 <col:17, col:45> 'const struct std::_Bit_iterator' <NoOp>
              (CXXTemporaryObjectExpr 0xa6bfb20 <col:17, col:45> 'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
                (ImplicitCastExpr 0xa6bfb00 <col:31, col:38> '_Bit_type *' <LValueToRValue>
                  (MemberExpr 0xa6bfac8 <col:31, col:38> '_Bit_type *' lvalue ._M_p 0xa6b86c0
                    (ImplicitCastExpr 0xa6bfab8 <col:31> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
                      (DeclRefExpr 0xa6bfaa0 <col:31> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf050 '__last' 'struct std::_Bit_iterator'))))
                (ImplicitCastExpr 0xa6bfb10 <col:44> 'unsigned int' <IntegralCast>
                  (IntegerLiteral 0xa6bfae8 <col:44> 'int' 0))))))
        (CXXConstructExpr 0xa6bfc28 <col:48> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
          (ImplicitCastExpr 0xa6bfc18 <col:48> 'const struct std::_Bit_iterator' lvalue <NoOp>
            (DeclRefExpr 0xa6bfb50 <col:48> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf050 '__last' 'struct std::_Bit_iterator')))
        (ImplicitCastExpr 0xa6bfc50 <col:56> '_Bool' <LValueToRValue>
          (DeclRefExpr 0xa6bfb68 <col:56> 'const _Bool' lvalue ParmVar 0xa6bf0c0 '__x' 'const _Bool &'))))
    (CallExpr 0xa6bfd28 <line:372:7, col:42> 'void'
      (ImplicitCastExpr 0xa6bfd18 <col:7> 'void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6bfcfc <col:7> 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)' lvalue Function 0xa6bed20 '__fill_bvector' 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool)'))
      (CXXConstructExpr 0xa6bfd60 <col:22> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
        (ImplicitCastExpr 0xa6bfd50 <col:22> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (DeclRefExpr 0xa6bfcb4 <col:22> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf010 '__first' 'struct std::_Bit_iterator')))
      (CXXConstructExpr 0xa6bfd98 <col:31> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
        (ImplicitCastExpr 0xa6bfd88 <col:31> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (DeclRefExpr 0xa6bfccc <col:31> 'struct std::_Bit_iterator' lvalue ParmVar 0xa6bf050 '__last' 'struct std::_Bit_iterator')))
      (ImplicitCastExpr 0xa6bfdc0 <col:39> '_Bool' <LValueToRValue>
        (DeclRefExpr 0xa6bfce4 <col:39> 'const _Bool' lvalue ParmVar 0xa6bf0c0 '__x' 'const _Bool &')))))


    template <typename _Alloc> struct _Bvector_base {
        struct _Bvector_base;
        typedef typename _Alloc::_Alloc::rebind<_Bit_type>::other _Bit_alloc_type;
        struct _Bvector_impl : public _Bit_alloc_type {
            struct _Bvector_impl;
            std::_Bit_iterator _M_start;
            std::_Bit_iterator _M_finish;
            _Bit_type *_M_end_of_storage;
            _Bvector_impl() : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage((IntegerLiteral 0xa6c0e68 </usr/include/c++/4.6/bits/stl_bvector.h:389:66> 'int' 0)
) (CompoundStmt 0xa6c0ed8 </usr/include/c++/4.6/bits/stl_bvector.h:390:2, col:4>)


            _Bvector_impl(const _Bit_alloc_type &__a) : _Bit_alloc_type((DeclRefExpr 0xa6c0ee8 </usr/include/c++/4.6/bits/stl_bvector.h:393:20> 'const _Bit_alloc_type':'const typename _Alloc::_Alloc::rebind<_Bit_type>::other' lvalue ParmVar 0xa6c0550 '__a' 'const _Bit_alloc_type &')
), _M_start(), _M_finish(), _M_end_of_storage((IntegerLiteral 0xa6c0fe8 </usr/include/c++/4.6/bits/stl_bvector.h:393:69> 'int' 0)
) (CompoundStmt 0xa6c1058 </usr/include/c++/4.6/bits/stl_bvector.h:394:2, col:4>)


        };
    public:
    public:
        typedef _Alloc allocator_type;
        _Bit_alloc_type &_M_get_Bit_allocator() (CompoundStmt 0xa6c1178 </usr/include/c++/4.6/bits/stl_bvector.h:402:7, col:64>
  (ReturnStmt 0xa6c1168 <col:9, col:61>
    (UnaryOperator 0xa6c1150 <col:16, col:61> '<dependent type>' prefix '*'
      (CXXStaticCastExpr 0xa6c1138 <col:17, col:61> '_Bit_alloc_type *' static_cast<_Bit_alloc_type *> <Dependent>
        (UnaryOperator 0xa6c10d0 <col:47, col:54> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa6c1098 <col:48, col:54> '<dependent type>' lvalue
            (CXXThisExpr 0xa6c1088 <col:48> '_Bvector_base<_Alloc> *' this)))))))


        const _Bit_alloc_type &_M_get_Bit_allocator() const (CompoundStmt 0xa6c1298 </usr/include/c++/4.6/bits/stl_bvector.h:406:7, col:70>
  (ReturnStmt 0xa6c1288 <col:9, col:67>
    (UnaryOperator 0xa6c1270 <col:16, col:67> '<dependent type>' prefix '*'
      (CXXStaticCastExpr 0xa6c1258 <col:17, col:67> 'const _Bit_alloc_type *' static_cast<const _Bit_alloc_type *> <Dependent>
        (UnaryOperator 0xa6c11f0 <col:53, col:60> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa6c11b8 <col:54, col:60> '<dependent type>' lvalue
            (CXXThisExpr 0xa6c11a8 <col:54> 'const _Bvector_base<_Alloc> *' this)))))))


        allocator_type get_allocator() const (CompoundStmt 0xa6c1358 </usr/include/c++/4.6/bits/stl_bvector.h:410:7, col:56>
  (ReturnStmt 0xa6c1348 <col:9, col:53>
    (CXXUnresolvedConstructExpr 0xa6c1328 <col:16, col:53> 'allocator_type':'_Alloc'
      (CallExpr 0xa6c1308 <col:31, col:52> '<dependent type>'
        (UnresolvedMemberExpr 0xa6c12c8 <col:31> '<bound member function type>' lvalue)))))


        _Bvector_base<_Alloc>() : _M_impl() (CompoundStmt 0xa6c13b0 </usr/include/c++/4.6/bits/stl_bvector.h:413:19, col:21>)


        _Bvector_base<_Alloc>(const allocator_type &__a) : _M_impl((DeclRefExpr 0xa6c13c0 </usr/include/c++/4.6/bits/stl_bvector.h:416:17> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa6c09f0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6c1420 </usr/include/c++/4.6/bits/stl_bvector.h:416:22, col:24>)


        void ~_Bvector_base<_Alloc>() (CompoundStmt 0xa6c1498 </usr/include/c++/4.6/bits/stl_bvector.h:432:7, col:32>
  (CallExpr 0xa6c1478 <col:9, col:29> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa6c1440 <col:9, col:15> '<dependent type>' lvalue
      (CXXThisExpr 0xa6c1430 <col:9> '_Bvector_base<_Alloc> *' this))))


    protected:
    protected:
        std::_Bvector_base::_Bvector_impl _M_impl;
        _Bit_type *_M_allocate(size_t __n) (CompoundStmt 0xa6c16b8 </usr/include/c++/4.6/bits/stl_bvector.h:439:7, line:440:26>
  (ReturnStmt 0xa6c16a8 <line:439:9, line:440:23>
    (CallExpr 0xa6c1688 <line:439:16, line:440:23> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6c14e0 <line:439:16, col:24> '<dependent type>' lvalue
        (MemberExpr 0xa6c14c0 <col:16> 'struct std::_Bvector_base::_Bvector_impl' lvalue ->_M_impl 0xa6c0bd0
          (CXXThisExpr 0xa6c14b0 <col:16> '_Bvector_base<_Alloc> *' this)))
      (BinaryOperator 0xa6c1670 <col:33, line:440:22> 'unsigned int' '/'
        (ParenExpr 0xa6c15f8 <line:439:33, col:60> 'unsigned int'
          (BinaryOperator 0xa6c15e0 <col:34, col:59> 'unsigned int' '-'
            (BinaryOperator 0xa6c15a0 <col:34, col:55> 'unsigned int' '+'
              (ImplicitCastExpr 0xa6c1580 <col:34> 'size_t':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6c1514 <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa6c0c10 '__n' 'size_t':'unsigned int'))
              (ImplicitCastExpr 0xa6c1590 <col:40, col:55> 'unsigned int' <IntegralCast>
                (CXXFunctionalCastExpr 0xa6c1568 <col:40, col:55> 'int' functional cast to int <NoOp>
                  (ImplicitCastExpr 0xa6c1558 <col:44> 'int' <IntegralCast>
                    (DeclRefExpr 0xa6c153c <col:44> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
            (ImplicitCastExpr 0xa6c15d0 <col:59> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa6c15b8 <col:59> 'int' 1))))
        (ImplicitCastExpr 0xa6c1660 <line:440:7, col:22> 'unsigned int' <IntegralCast>
          (CXXFunctionalCastExpr 0xa6c1648 <col:7, col:22> 'int' functional cast to int <NoOp>
            (ImplicitCastExpr 0xa6c1638 <col:11> 'int' <IntegralCast>
              (DeclRefExpr 0xa6c161c <col:11> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))))))


        void _M_deallocate() (CompoundStmt 0xa6c1a30 </usr/include/c++/4.6/bits/stl_bvector.h:444:7, line:448:7>
  (IfStmt 0xa6c1a10 <line:445:2, line:447:58>
    <<<NULL>>>
    (CXXDependentScopeMemberExpr 0xa6c1738 <line:445:6, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6c1700 <col:6, col:14> '<dependent type>' lvalue
        (MemberExpr 0xa6c16e0 <col:6> 'struct std::_Bvector_base::_Bvector_impl' lvalue ->_M_impl 0xa6c0bd0
          (CXXThisExpr 0xa6c16d0 <col:6> '_Bvector_base<_Alloc> *' this))))
    (CallExpr 0xa6c19e8 <line:446:4, line:447:58> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6c17a0 <line:446:4, col:12> '<dependent type>' lvalue
        (MemberExpr 0xa6c1780 <col:4> 'struct std::_Bvector_base::_Bvector_impl' lvalue ->_M_impl 0xa6c0bd0
          (CXXThisExpr 0xa6c1770 <col:4> '_Bvector_base<_Alloc> *' this)))
      (CXXDependentScopeMemberExpr 0xa6c1840 <col:23, col:40> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6c1808 <col:23, col:31> '<dependent type>' lvalue
          (MemberExpr 0xa6c17e8 <col:23> 'struct std::_Bvector_base::_Bvector_impl' lvalue ->_M_impl 0xa6c0bd0
            (CXXThisExpr 0xa6c17d8 <col:23> '_Bvector_base<_Alloc> *' this))))
      (CXXOperatorCallExpr 0xa6c19c0 <line:447:9, col:54> '<dependent type>'
        (UnresolvedLookupExpr 0xa6c1980 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6ba460 0xa626c50 0xa629af0)
        (CXXDependentScopeMemberExpr 0xa6c18a8 <col:9, col:17> '<dependent type>' lvalue
          (MemberExpr 0xa6c1888 <col:9> 'struct std::_Bvector_base::_Bvector_impl' lvalue ->_M_impl 0xa6c0bd0
            (CXXThisExpr 0xa6c1878 <col:9> '_Bvector_base<_Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6c1948 <col:37, col:54> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6c1910 <col:37, col:45> '<dependent type>' lvalue
            (MemberExpr 0xa6c18f0 <col:37> 'struct std::_Bvector_base::_Bvector_impl' lvalue ->_M_impl 0xa6c0bd0
              (CXXThisExpr 0xa6c18e0 <col:37> '_Bvector_base<_Alloc> *' this))))))
    <<<NULL>>>))


    };
}
namespace std {
    class vector : protected _Bvector_base<_Alloc> {
        class vector;
        typedef _Bvector_base<_Alloc> _Base;
    public:
    public:
        typedef bool value_type;
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::_Bit_reference reference;
        typedef bool const_reference;
        typedef std::_Bit_reference *pointer;
        typedef const bool *const_pointer;
        typedef std::_Bit_iterator iterator;
        typedef std::_Bit_const_iterator const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef _Alloc allocator_type;
        allocator_type get_allocator() const (CompoundStmt 0xa6ccd90 </usr/include/c++/4.6/bits/stl_bvector.h:502:5, col:38>
  (ReturnStmt 0xa6ccd80 <col:7, col:35>
    (CallExpr 0xa6ccd60 <col:14, col:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6ccd28 <col:14, col:21> '<dependent type>' lvalue))))


    protected:
    protected:
        using _Base::1;
        using _Base::1;
        using _Base::1;
    public:
    public:
        vector<_Bool, type-parameter-0-0>() : _Base() (CompoundStmt 0xa6ccdf0 </usr/include/c++/4.6/bits/stl_bvector.h:511:15, col:17>)


        vector<_Bool, type-parameter-0-0>(const allocator_type &__a) : _Base((DeclRefExpr 0xa6cce00 </usr/include/c++/4.6/bits/stl_bvector.h:515:13> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa6c29a0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6cce60 </usr/include/c++/4.6/bits/stl_bvector.h:515:18, col:20>)


        vector<_Bool, type-parameter-0-0>(size_type __n, const bool &__value = (MaterializeTemporaryExpr 0xa6ccc60 </usr/include/c++/4.6/bits/stl_bvector.h:518:49, col:54> 'const _Bool' lvalue
  (CXXScalarValueInitExpr 0xa6ccc50 <col:49, col:54> '_Bool'))
, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa6ccc78 </usr/include/c++/4.6/bits/stl_bvector.h:519:33, col:48> 'allocator_type':'_Alloc')
) : _Base((DeclRefExpr 0xa6cce70 </usr/include/c++/4.6/bits/stl_bvector.h:520:13> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa6c2b50 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6cd1a0 </usr/include/c++/4.6/bits/stl_bvector.h:521:5, line:525:5>
  (CallExpr 0xa6ccf30 <line:522:7, col:24> '<dependent type>'
    (MemberExpr 0xa6ccef8 <col:7> '<bound member function type>' ->_M_initialize 0xa6c6120
      (CXXThisExpr 0xa6ccee8 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6ccf18 <col:21> 'size_type':'unsigned int' lvalue ParmVar 0xa6c2ab0 '__n' 'size_type':'unsigned int'))
  (CallExpr 0xa6cd178 <line:523:7, line:524:19> '<dependent type>'
    (UnresolvedLookupExpr 0xa6ccf78 <line:523:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
    (CXXDependentScopeMemberExpr 0xa6cd030 <col:17, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ccff8 <col:17, col:31> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6ccfc0 <col:17, col:23> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ccfb0 <col:17> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CXXDependentScopeMemberExpr 0xa6cd0b0 <col:46, col:60> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6cd078 <col:46, col:52> '<dependent type>' lvalue
        (CXXThisExpr 0xa6cd068 <col:46> 'vector<_Bool, type-parameter-0-0> *' this)))
    (ConditionalOperator 0xa6cd158 <line:524:3, col:18> 'int'
      (ImplicitCastExpr 0xa6cd148 <col:3> '_Bool' <LValueToRValue>
        (DeclRefExpr 0xa6cd0e4 <col:3> 'const _Bool' lvalue ParmVar 0xa6c2b00 '__value' 'const _Bool &'))
      (UnaryOperator 0xa6cd118 <col:13, col:14> 'int' prefix '~'
        (IntegerLiteral 0xa6cd100 <col:14> 'int' 0))
      (IntegerLiteral 0xa6cd130 <col:18> 'int' 0))))


        vector<_Bool, type-parameter-0-0>(const vector<bool, type-parameter-0-0> &__x) : _Base((CallExpr 0xa6cd208 </usr/include/c++/4.6/bits/stl_bvector.h:528:13, col:38> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa6cd1d0 <col:13, col:17> '<dependent type>' lvalue
    (DeclRefExpr 0xa6cd1b8 <col:13> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c2cc0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))
) (CompoundStmt 0xa6cd4e8 </usr/include/c++/4.6/bits/stl_bvector.h:529:5, line:532:5>
  (CallExpr 0xa6cd310 <line:530:7, col:31> '<dependent type>'
    (MemberExpr 0xa6cd280 <col:7> '<bound member function type>' ->_M_initialize 0xa6c6120
      (CXXThisExpr 0xa6cd270 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (CallExpr 0xa6cd2f0 <col:21, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6cd2b8 <col:21, col:25> '<dependent type>' lvalue
        (DeclRefExpr 0xa6cd2a0 <col:21> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c2cc0 '__x' 'const vector<_Bool, type-parameter-0-0> &'))))
  (CallExpr 0xa6cd4c0 <line:531:7, col:69> '<dependent type>'
    (MemberExpr 0xa6cd340 <col:7> '<bound member function type>' ->_M_copy_aligned 0xa6c6050
      (CXXThisExpr 0xa6cd330 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (CallExpr 0xa6cd3b0 <col:23, col:33> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6cd378 <col:23, col:27> '<dependent type>' lvalue
        (DeclRefExpr 0xa6cd360 <col:23> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c2cc0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))
    (CallExpr 0xa6cd420 <col:36, col:44> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6cd3e8 <col:36, col:40> '<dependent type>' lvalue
        (DeclRefExpr 0xa6cd3cc <col:36> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c2cc0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))
    (CXXDependentScopeMemberExpr 0xa6cd488 <col:47, col:61> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6cd450 <col:47, col:53> '<dependent type>' lvalue
        (CXXThisExpr 0xa6cd440 <col:47> 'vector<_Bool, type-parameter-0-0> *' this)))))


        template <typename _InputIterator> vector<_Bool, type-parameter-0-0>(_InputIterator __first, _InputIterator __last, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa6ccc98 </usr/include/c++/4.6/bits/stl_bvector.h:549:35, col:50> 'allocator_type':'_Alloc')
) : _Base((DeclRefExpr 0xa6cd500 </usr/include/c++/4.6/bits/stl_bvector.h:550:15> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa6c2ea0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa6cd778 </usr/include/c++/4.6/bits/stl_bvector.h:551:7, line:554:7>
  (DeclStmt 0xa6cd690 <line:552:2, col:70>
    0xa6cd660 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (CallExpr 0xa6cd750 <line:553:2, col:53> '<dependent type>'
    (UnresolvedMemberExpr 0xa6cd6b0 <col:2> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6cd6f0 <col:25> '_InputIterator' lvalue ParmVar 0xa6c2e10 '__first' '_InputIterator')
    (DeclRefExpr 0xa6cd708 <col:34> '_InputIterator' lvalue ParmVar 0xa6c2e50 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6cd738 <col:42, col:52> '_Integral':'typename std::__is_integer<_InputIterator>::__type')))

;
        void ~vector<_Bool, type-parameter-0-0>() (CompoundStmt 0xa6cd790 </usr/include/c++/4.6/bits/stl_bvector.h:556:15, col:17>)


        vector<bool, type-parameter-0-0> &operator=(const vector<bool, type-parameter-0-0> &__x) (CompoundStmt 0xa6d0228 </usr/include/c++/4.6/bits/stl_bvector.h:560:5, line:571:5>
  (IfStmt 0xa6cd888 <line:561:7, line:562:10>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6cd828 <line:561:11, col:19> '<dependent type>'
      (UnresolvedLookupExpr 0xa6cd7e0 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050)
      (UnaryOperator 0xa6cd7b8 <col:11, col:12> '<dependent type>' prefix '&'
        (DeclRefExpr 0xa6cd7a0 <col:12> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c30c0 '__x' 'const vector<_Bool, type-parameter-0-0> &'))
      (CXXThisExpr 0xa6cd7d0 <col:19> 'vector<_Bool, type-parameter-0-0> *' this))
    (ReturnStmt 0xa6cd878 <line:562:2, col:10>
      (UnaryOperator 0xa6cd860 <col:9, col:10> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa6cd850 <col:10> 'vector<_Bool, type-parameter-0-0> *' this)))
    <<<NULL>>>)
  (IfStmt 0xa6cff90 <line:563:7, line:567:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6cfe28 <line:563:11, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa6cfde8 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (CallExpr 0xa6cfd78 <col:11, col:20> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6cfd40 <col:11, col:15> '<dependent type>' lvalue
          (DeclRefExpr 0xa6cd8a4 <col:11> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c30c0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))
      (CallExpr 0xa6cfdc8 <col:24, col:33> '<dependent type>'
        (MemberExpr 0xa6cfda8 <col:24> '<bound member function type>' ->capacity 0xa6c3af0
          (CXXThisExpr 0xa6cfd98 <col:24> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CompoundStmt 0xa6cff78 <line:564:2, line:567:2>
      (CallExpr 0xa6cfe98 <line:565:4, col:24> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6cfe60 <col:4, col:10> '<dependent type>' lvalue
          (CXXThisExpr 0xa6cfe50 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
      (CallExpr 0xa6cff58 <line:566:4, col:28> '<dependent type>'
        (MemberExpr 0xa6cfec8 <col:4> '<bound member function type>' ->_M_initialize 0xa6c6120
          (CXXThisExpr 0xa6cfeb8 <col:4> 'vector<_Bool, type-parameter-0-0> *' this))
        (CallExpr 0xa6cff38 <col:18, col:27> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa6cff00 <col:18, col:22> '<dependent type>' lvalue
            (DeclRefExpr 0xa6cfee8 <col:18> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c30c0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))))
    <<<NULL>>>)
  (BinaryOperator 0xa6d01d8 <line:568:7, line:569:14> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6cfff8 <line:568:7, col:21> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6cffc0 <col:7, col:13> '<dependent type>' lvalue
        (CXXThisExpr 0xa6cffb0 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
    (CallExpr 0xa6d01b0 <col:33, line:569:14> '<dependent type>'
      (MemberExpr 0xa6d0040 <line:568:33> '<bound member function type>' ->_M_copy_aligned 0xa6c6050
        (CXXThisExpr 0xa6d0030 <col:33> 'vector<_Bool, type-parameter-0-0> *' this))
      (CallExpr 0xa6d00b0 <col:49, col:59> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6d0078 <col:49, col:53> '<dependent type>' lvalue
          (DeclRefExpr 0xa6d0060 <col:49> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c30c0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))
      (CallExpr 0xa6d0120 <col:62, col:70> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6d00e8 <col:62, col:66> '<dependent type>' lvalue
          (DeclRefExpr 0xa6d00cc <col:62> 'const vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c30c0 '__x' 'const vector<_Bool, type-parameter-0-0> &')))
      (CallExpr 0xa6d0190 <line:569:7, col:13> '<dependent type>'
        (UnresolvedMemberExpr 0xa6d0150 <col:7> '<bound member function type>' lvalue))))
  (ReturnStmt 0xa6d0218 <line:570:7, col:15>
    (UnaryOperator 0xa6d0200 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa6d01f0 <col:15> 'vector<_Bool, type-parameter-0-0> *' this))))


        void assign(size_type __n, const bool &__x) (CompoundStmt 0xa6d02d0 </usr/include/c++/4.6/bits/stl_bvector.h:598:5, col:33>
  (CallExpr 0xa6d02a8 <col:7, col:30> '<dependent type>'
    (MemberExpr 0xa6d0258 <col:7> '<bound member function type>' ->_M_fill_assign 0xa6c6f30
      (CXXThisExpr 0xa6d0248 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6d0278 <col:22> 'size_type':'unsigned int' lvalue ParmVar 0xa6c31d0 '__n' 'size_type':'unsigned int')
    (DeclRefExpr 0xa6d0290 <col:27> 'const _Bool' lvalue ParmVar 0xa6c3220 '__x' 'const _Bool &')))


        template <typename _InputIterator> void assign(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa6d04f8 </usr/include/c++/4.6/bits/stl_bvector.h:603:7, line:606:7>
  (DeclStmt 0xa6d0410 <line:604:2, col:70>
    0xa6d03e0 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (CallExpr 0xa6d04d0 <line:605:2, col:49> '<dependent type>'
    (UnresolvedMemberExpr 0xa6d0430 <col:2> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6d0470 <col:21> '_InputIterator' lvalue ParmVar 0xa6c3390 '__first' '_InputIterator')
    (DeclRefExpr 0xa6d0488 <col:30> '_InputIterator' lvalue ParmVar 0xa6c33d0 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6d04b8 <col:38, col:48> '_Integral':'typename std::__is_integer<_InputIterator>::__type')))

;
        iterator begin() (CompoundStmt 0xa6d05a0 </usr/include/c++/4.6/bits/stl_bvector.h:616:5, col:38>
  (ReturnStmt 0xa6d0590 <col:7, col:28>
    (CXXDependentScopeMemberExpr 0xa6d0558 <col:14, col:28> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6d0520 <col:14, col:20> '<dependent type>' lvalue
        (CXXThisExpr 0xa6d0510 <col:14> 'vector<_Bool, type-parameter-0-0> *' this)))))


        const_iterator begin() const (CompoundStmt 0xa6d0648 </usr/include/c++/4.6/bits/stl_bvector.h:620:5, col:38>
  (ReturnStmt 0xa6d0638 <col:7, col:28>
    (CXXDependentScopeMemberExpr 0xa6d0600 <col:14, col:28> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6d05c8 <col:14, col:20> '<dependent type>' lvalue
        (CXXThisExpr 0xa6d05b8 <col:14> 'const vector<_Bool, type-parameter-0-0> *' this)))))


        iterator end() (CompoundStmt 0xa6d06f0 </usr/include/c++/4.6/bits/stl_bvector.h:624:5, col:39>
  (ReturnStmt 0xa6d06e0 <col:7, col:28>
    (CXXDependentScopeMemberExpr 0xa6d06a8 <col:14, col:28> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6d0670 <col:14, col:20> '<dependent type>' lvalue
        (CXXThisExpr 0xa6d0660 <col:14> 'vector<_Bool, type-parameter-0-0> *' this)))))


        const_iterator end() const (CompoundStmt 0xa6d0798 </usr/include/c++/4.6/bits/stl_bvector.h:628:5, col:39>
  (ReturnStmt 0xa6d0788 <col:7, col:28>
    (CXXDependentScopeMemberExpr 0xa6d0750 <col:14, col:28> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6d0718 <col:14, col:20> '<dependent type>' lvalue
        (CXXThisExpr 0xa6d0708 <col:14> 'const vector<_Bool, type-parameter-0-0> *' this)))))


        reverse_iterator rbegin() (CompoundStmt 0xa6d4990 </usr/include/c++/4.6/bits/stl_bvector.h:632:5, col:39>
  (ReturnStmt 0xa6d4980 <col:7, col:36>
    (CXXConstructExpr 0xa6d4958 <col:14, col:36> 'reverse_iterator':'class std::reverse_iterator<struct std::_Bit_iterator>''void (const class std::reverse_iterator<struct std::_Bit_iterator> &)' elidable
      (MaterializeTemporaryExpr 0xa6d4948 <col:14, col:36> 'const class std::reverse_iterator<struct std::_Bit_iterator>' lvalue
        (ImplicitCastExpr 0xa6d4938 <col:14, col:36> 'const class std::reverse_iterator<struct std::_Bit_iterator>' <NoOp>
          (CXXUnresolvedConstructExpr 0xa6d4708 <col:14, col:36> 'reverse_iterator':'class std::reverse_iterator<struct std::_Bit_iterator>'
            (CallExpr 0xa6d46e8 <col:31, col:35> '<dependent type>'
              (UnresolvedMemberExpr 0xa6d46a8 <col:31> '<bound member function type>' lvalue))))))))


        const_reverse_iterator rbegin() const (CompoundStmt 0xa6373b0 </usr/include/c++/4.6/bits/stl_bvector.h:636:5, col:45>
  (ReturnStmt 0xa6373a0 <col:7, col:42>
    (CXXConstructExpr 0xa637378 <col:14, col:42> 'const_reverse_iterator':'class std::reverse_iterator<struct std::_Bit_const_iterator>''void (const class std::reverse_iterator<struct std::_Bit_const_iterator> &)' elidable
      (MaterializeTemporaryExpr 0xa637368 <col:14, col:42> 'const class std::reverse_iterator<struct std::_Bit_const_iterator>' lvalue
        (ImplicitCastExpr 0xa637358 <col:14, col:42> 'const class std::reverse_iterator<struct std::_Bit_const_iterator>' <NoOp>
          (CXXUnresolvedConstructExpr 0xa637128 <col:14, col:42> 'const_reverse_iterator':'class std::reverse_iterator<struct std::_Bit_const_iterator>'
            (CallExpr 0xa637108 <col:37, col:41> '<dependent type>'
              (UnresolvedMemberExpr 0xa6370c8 <col:37> '<bound member function type>' lvalue))))))))


        reverse_iterator rend() (CompoundStmt 0xa637508 </usr/include/c++/4.6/bits/stl_bvector.h:640:5, col:41>
  (ReturnStmt 0xa6374f8 <col:7, col:38>
    (CXXConstructExpr 0xa6374d0 <col:14, col:38> 'reverse_iterator':'class std::reverse_iterator<struct std::_Bit_iterator>''void (const class std::reverse_iterator<struct std::_Bit_iterator> &)' elidable
      (MaterializeTemporaryExpr 0xa6374c0 <col:14, col:38> 'const class std::reverse_iterator<struct std::_Bit_iterator>' lvalue
        (ImplicitCastExpr 0xa6374b0 <col:14, col:38> 'const class std::reverse_iterator<struct std::_Bit_iterator>' <NoOp>
          (CXXUnresolvedConstructExpr 0xa637440 <col:14, col:38> 'reverse_iterator':'class std::reverse_iterator<struct std::_Bit_iterator>'
            (CallExpr 0xa637420 <col:31, col:37> '<dependent type>'
              (UnresolvedMemberExpr 0xa6373e0 <col:31> '<bound member function type>' lvalue))))))))


        const_reverse_iterator rend() const (CompoundStmt 0xa637660 </usr/include/c++/4.6/bits/stl_bvector.h:644:5, col:47>
  (ReturnStmt 0xa637650 <col:7, col:44>
    (CXXConstructExpr 0xa637628 <col:14, col:44> 'const_reverse_iterator':'class std::reverse_iterator<struct std::_Bit_const_iterator>''void (const class std::reverse_iterator<struct std::_Bit_const_iterator> &)' elidable
      (MaterializeTemporaryExpr 0xa637618 <col:14, col:44> 'const class std::reverse_iterator<struct std::_Bit_const_iterator>' lvalue
        (ImplicitCastExpr 0xa637608 <col:14, col:44> 'const class std::reverse_iterator<struct std::_Bit_const_iterator>' <NoOp>
          (CXXUnresolvedConstructExpr 0xa637598 <col:14, col:44> 'const_reverse_iterator':'class std::reverse_iterator<struct std::_Bit_const_iterator>'
            (CallExpr 0xa637578 <col:37, col:43> '<dependent type>'
              (UnresolvedMemberExpr 0xa637538 <col:37> '<bound member function type>' lvalue))))))))


        size_type size() const (CompoundStmt 0xa6377f8 </usr/include/c++/4.6/bits/stl_bvector.h:666:5, col:42>
  (ReturnStmt 0xa6377e8 <col:7, col:39>
    (CXXUnresolvedConstructExpr 0xa6377c8 <col:14, col:39> 'size_type':'unsigned int'
      (CXXOperatorCallExpr 0xa6377a0 <col:24, col:38> '<dependent type>'
        (UnresolvedLookupExpr 0xa637760 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CallExpr 0xa6376d0 <col:24, col:28> '<dependent type>'
          (UnresolvedMemberExpr 0xa637690 <col:24> '<bound member function type>' lvalue))
        (CallExpr 0xa637740 <col:32, col:38> '<dependent type>'
          (UnresolvedMemberExpr 0xa637700 <col:32> '<bound member function type>' lvalue))))))


        size_type max_size() const (CompoundStmt 0xa6df6d8 </usr/include/c++/4.6/bits/stl_bvector.h:670:5, line:677:5>
  (DeclStmt 0xa638940 <line:671:7, line:673:24>
    0xa637820 "const size_type __isize =
      (ImplicitCastExpr 0xa638900 <line:672:2, line:673:23> 'const size_type':'const unsigned int' <IntegralCast>
        (BinaryOperator 0xa6388e8 <line:672:2, line:673:23> 'int' '+'
          (BinaryOperator 0xa6388b8 <line:672:2, line:673:19> 'int' '-'
            (ImplicitCastExpr 0xa6388a8 <line:672:2, col:48> 'int':'int' <LValueToRValue>
              (DeclRefExpr 0xa638838 <col:2, col:48> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int'))
            (CXXFunctionalCastExpr 0xa638890 <line:673:4, col:19> 'int' functional cast to int <NoOp>
              (ImplicitCastExpr 0xa638880 <col:8> 'int' <IntegralCast>
                (DeclRefExpr 0xa638864 <col:8> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))
          (IntegerLiteral 0xa6388d0 <col:23> 'int' 1)))")
  (DeclStmt 0xa6df4d8 <line:674:7, col:66>
    0xa638960 "const size_type __asize =
      (CallExpr 0xa6df4b8 <col:33, col:65> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6389f0 <col:33, col:56> '<dependent type>' lvalue
          (CallExpr 0xa6389d0 <col:33, col:54> '<dependent type>'
            (UnresolvedMemberExpr 0xa638994 <col:33> '<dependent type>' lvalue))))")
  (ReturnStmt 0xa6df6c8 <line:675:7, line:676:46>
    (ParenExpr 0xa6df6b0 <line:675:14, line:676:46> 'unsigned int'
      (ConditionalOperator 0xa6df690 <line:675:15, line:676:39> 'unsigned int'
        (BinaryOperator 0xa6df5b0 <line:675:15, col:51> '_Bool' '<='
          (ImplicitCastExpr 0xa6df5a0 <col:15> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa6df4e8 <col:15> 'const size_type':'const unsigned int' lvalue Var 0xa638960 '__asize' 'const size_type':'const unsigned int'))
          (BinaryOperator 0xa6df588 <col:26, col:51> 'unsigned int' '/'
            (ImplicitCastExpr 0xa6df568 <col:26> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa6df500 <col:26> 'const size_type':'const unsigned int' lvalue Var 0xa637820 '__isize' 'const size_type':'const unsigned int'))
            (ImplicitCastExpr 0xa6df578 <col:36, col:51> 'unsigned int' <IntegralCast>
              (CXXFunctionalCastExpr 0xa6df550 <col:36, col:51> 'int' functional cast to int <NoOp>
                (ImplicitCastExpr 0xa6df540 <col:40> 'int' <IntegralCast>
                  (DeclRefExpr 0xa6df524 <col:40> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))))
        (BinaryOperator 0xa6df650 <line:676:10, col:35> 'unsigned int' '*'
          (ImplicitCastExpr 0xa6df630 <col:10> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa6df5c8 <col:10> 'const size_type':'const unsigned int' lvalue Var 0xa638960 '__asize' 'const size_type':'const unsigned int'))
          (ImplicitCastExpr 0xa6df640 <col:20, col:35> 'unsigned int' <IntegralCast>
            (CXXFunctionalCastExpr 0xa6df618 <col:20, col:35> 'int' functional cast to int <NoOp>
              (ImplicitCastExpr 0xa6df608 <col:24> 'int' <IntegralCast>
                (DeclRefExpr 0xa6df5ec <col:24> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
        (ImplicitCastExpr 0xa6df680 <col:39> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa6df668 <col:39> 'const size_type':'const unsigned int' lvalue Var 0xa637820 '__isize' 'const size_type':'const unsigned int'))))))


        size_type capacity() const (CompoundStmt 0xa6df8c8 </usr/include/c++/4.6/bits/stl_bvector.h:681:5, line:682:22>
  (ReturnStmt 0xa6df8b8 <line:681:7, line:682:19>
    (CXXUnresolvedConstructExpr 0xa6df898 <line:681:14, line:682:19> 'size_type':'unsigned int'
      (CXXOperatorCallExpr 0xa6df870 <line:681:24, line:682:18> '<dependent type>'
        (UnresolvedLookupExpr 0xa6df830 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CXXUnresolvedConstructExpr 0xa6df7a0 <line:681:24, col:73> 'const_iterator':'struct std::_Bit_const_iterator'
          (CXXDependentScopeMemberExpr 0xa6df750 <col:39, col:53> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6df718 <col:39, col:45> '<dependent type>' lvalue
              (CXXThisExpr 0xa6df708 <col:39> 'const vector<_Bool, type-parameter-0-0> *' this)))
          (IntegerLiteral 0xa6df788 <col:72> 'int' 0))
        (CallExpr 0xa6df810 <line:682:12, col:18> '<dependent type>'
          (UnresolvedMemberExpr 0xa6df7d0 <col:12> '<bound member function type>' lvalue))))))


        bool empty() const (CompoundStmt 0xa6dfa40 </usr/include/c++/4.6/bits/stl_bvector.h:686:5, col:32>
  (ReturnStmt 0xa6dfa30 <col:7, col:29>
    (CXXOperatorCallExpr 0xa6dfa08 <col:14, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa6df9c0 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050)
      (CallExpr 0xa6df930 <col:14, col:20> '<dependent type>'
        (UnresolvedMemberExpr 0xa6df8f0 <col:14> '<bound member function type>' lvalue))
      (CallExpr 0xa6df9a0 <col:25, col:29> '<dependent type>'
        (UnresolvedMemberExpr 0xa6df960 <col:25> '<bound member function type>' lvalue)))))


        reference operator[](size_type __n) (CompoundStmt 0xa6dfd90 </usr/include/c++/4.6/bits/stl_bvector.h:690:5, line:693:5>
  (ReturnStmt 0xa6dfd80 <line:691:7, line:692:58>
    (CXXConstructExpr 0xa6dfd58 <line:691:14, line:692:58> 'reference':'struct std::_Bit_reference''void (const struct std::_Bit_reference &) throw()' elidable
      (MaterializeTemporaryExpr 0xa6dfd48 <line:691:14, line:692:58> 'const struct std::_Bit_reference' lvalue
        (ImplicitCastExpr 0xa6dfd38 <line:691:14, line:692:58> 'const struct std::_Bit_reference' <NoOp>
          (CXXOperatorCallExpr 0xa6dfd18 <line:691:14, line:692:58> 'reference':'struct std::_Bit_reference'
            (ImplicitCastExpr 0xa6dfd08 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6dfcf0 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa6bab60 'operator*' 'reference (void) const'))
            (ImplicitCastExpr 0xa6dfce0 <line:691:15, line:692:58> 'const struct std::_Bit_iterator' lvalue <NoOp>
              (CXXUnresolvedConstructExpr 0xa6dfcc0 <line:691:15, line:692:58> 'iterator':'struct std::_Bit_iterator'
                (CXXOperatorCallExpr 0xa6dfbf8 <line:691:24, line:692:33> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6dfbb8 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                  (CXXDependentScopeMemberExpr 0xa6dfae0 <line:691:24, col:47> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6dfaa8 <col:24, col:38> '<dependent type>' lvalue
                      (CXXDependentScopeMemberExpr 0xa6dfa70 <col:24, col:30> '<dependent type>' lvalue
                        (CXXThisExpr 0xa6dfa60 <col:24> 'vector<_Bool, type-parameter-0-0> *' this))))
                  (BinaryOperator 0xa6dfba0 <line:692:12, col:33> 'unsigned int' '/'
                    (ImplicitCastExpr 0xa6dfb80 <col:12> 'size_type':'unsigned int' <LValueToRValue>
                      (DeclRefExpr 0xa6dfb14 <col:12> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3bf0 '__n' 'size_type':'unsigned int'))
                    (ImplicitCastExpr 0xa6dfb90 <col:18, col:33> 'unsigned int' <IntegralCast>
                      (CXXFunctionalCastExpr 0xa6dfb68 <col:18, col:33> 'int' functional cast to int <NoOp>
                        (ImplicitCastExpr 0xa6dfb58 <col:22> 'int' <IntegralCast>
                          (DeclRefExpr 0xa6dfb3c <col:22> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))))
                (BinaryOperator 0xa6dfca8 <col:36, col:57> 'unsigned int' '%'
                  (ImplicitCastExpr 0xa6dfc88 <col:36> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6dfc1c <col:36> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3bf0 '__n' 'size_type':'unsigned int'))
                  (ImplicitCastExpr 0xa6dfc98 <col:42, col:57> 'unsigned int' <IntegralCast>
                    (CXXFunctionalCastExpr 0xa6dfc70 <col:42, col:57> 'int' functional cast to int <NoOp>
                      (ImplicitCastExpr 0xa6dfc60 <col:46> 'int' <IntegralCast>
                        (DeclRefExpr 0xa6dfc44 <col:46> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))))))))))


        const_reference operator[](size_type __n) const (CompoundStmt 0xa6e0098 </usr/include/c++/4.6/bits/stl_bvector.h:697:5, line:700:5>
  (ReturnStmt 0xa6e0088 <line:698:7, line:699:57>
    (CXXOperatorCallExpr 0xa6e0068 <line:698:14, line:699:57> 'const_reference':'_Bool'
      (ImplicitCastExpr 0xa6e0058 <<invalid sloc>> 'const_reference (*)(void) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6e0040 <<invalid sloc>> 'const_reference (void) const' lvalue CXXMethod 0xa6bcfe0 'operator*' 'const_reference (void) const'))
      (ImplicitCastExpr 0xa6e0030 <line:698:15, line:699:57> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
        (CXXUnresolvedConstructExpr 0xa6e0010 <line:698:15, line:699:57> 'const_iterator':'struct std::_Bit_const_iterator'
          (CXXOperatorCallExpr 0xa6dff48 <line:698:30, line:699:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa6dff08 <col:9, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
            (CXXDependentScopeMemberExpr 0xa6dfe30 <line:698:30, col:53> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6dfdf8 <col:30, col:44> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6dfdc0 <col:30, col:36> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6dfdb0 <col:30> 'const vector<_Bool, type-parameter-0-0> *' this))))
            (BinaryOperator 0xa6dfef0 <line:699:11, col:32> 'unsigned int' '/'
              (ImplicitCastExpr 0xa6dfed0 <col:11> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6dfe64 <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3d20 '__n' 'size_type':'unsigned int'))
              (ImplicitCastExpr 0xa6dfee0 <col:17, col:32> 'unsigned int' <IntegralCast>
                (CXXFunctionalCastExpr 0xa6dfeb8 <col:17, col:32> 'int' functional cast to int <NoOp>
                  (ImplicitCastExpr 0xa6dfea8 <col:21> 'int' <IntegralCast>
                    (DeclRefExpr 0xa6dfe8c <col:21> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))))
          (BinaryOperator 0xa6dfff8 <col:35, col:56> 'unsigned int' '%'
            (ImplicitCastExpr 0xa6dffd8 <col:35> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa6dff6c <col:35> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3d20 '__n' 'size_type':'unsigned int'))
            (ImplicitCastExpr 0xa6dffe8 <col:41, col:56> 'unsigned int' <IntegralCast>
              (CXXFunctionalCastExpr 0xa6dffc0 <col:41, col:56> 'int' functional cast to int <NoOp>
                (ImplicitCastExpr 0xa6dffb0 <col:45> 'int' <IntegralCast>
                  (DeclRefExpr 0xa6dff94 <col:45> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>'))))))))))


    protected:
    protected:
        void _M_range_check(size_type __n) const (CompoundStmt 0xa6e02d8 </usr/include/c++/4.6/bits/stl_bvector.h:705:5, line:708:5>
  (IfStmt 0xa6e02b8 <line:706:7, line:707:65>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e0170 <line:706:11, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e0130 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (DeclRefExpr 0xa6e00ac <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3e80 '__n' 'size_type':'unsigned int')
      (CallExpr 0xa6e0110 <col:18, col:29> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6e00d8 <col:18, col:24> '<dependent type>' lvalue
          (CXXThisExpr 0xa6e00c8 <col:18> 'const vector<_Bool, type-parameter-0-0> *' this))))
    (CallExpr 0xa6e0288 <line:707:9, col:65> 'void'
      (ImplicitCastExpr 0xa6e0278 <col:9> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6e025c <col:9> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa6e02a8 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa6e0248 <col:24, col:30> 'const char [29]' lvalue
          (StringLiteral 0xa6e0210 </usr/include/c++/4.6/bits/stl_bvector.h:707:34> 'const char [29]' lvalue "vector<bool>::_M_range_check"))))
    <<<NULL>>>))


    public:
    public:
        reference at(size_type __n) (CompoundStmt 0xa6e03d8 </usr/include/c++/4.6/bits/stl_bvector.h:713:5, col:49>
  (CallExpr 0xa6e0338 <col:7, col:25> '<dependent type>'
    (MemberExpr 0xa6e0300 <col:7> '<bound member function type>' ->_M_range_check 0xa6c3f00
      (CXXThisExpr 0xa6e02f0 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6e0320 <col:22> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3fc0 '__n' 'size_type':'unsigned int'))
  (ReturnStmt 0xa6e03c8 <col:28, col:46>
    (ArraySubscriptExpr 0xa6e03b0 <col:35, col:46> '<dependent type>' lvalue
      (ParenExpr 0xa6e0380 <col:35, col:41> '<dependent type>'
        (UnaryOperator 0xa6e0368 <col:36, col:37> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa6e0358 <col:37> 'vector<_Bool, type-parameter-0-0> *' this)))
      (DeclRefExpr 0xa6e0394 <col:43> 'size_type':'unsigned int' lvalue ParmVar 0xa6c3fc0 '__n' 'size_type':'unsigned int'))))


        const_reference at(size_type __n) const (CompoundStmt 0xa6e04d8 </usr/include/c++/4.6/bits/stl_bvector.h:717:5, col:49>
  (CallExpr 0xa6e0438 <col:7, col:25> '<dependent type>'
    (MemberExpr 0xa6e0400 <col:7> '<bound member function type>' ->_M_range_check 0xa6c3f00
      (CXXThisExpr 0xa6e03f0 <col:7> 'const vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6e0420 <col:22> 'size_type':'unsigned int' lvalue ParmVar 0xa6c4080 '__n' 'size_type':'unsigned int'))
  (ReturnStmt 0xa6e04c8 <col:28, col:46>
    (ArraySubscriptExpr 0xa6e04b0 <col:35, col:46> '<dependent type>' lvalue
      (ParenExpr 0xa6e0480 <col:35, col:41> '<dependent type>'
        (UnaryOperator 0xa6e0468 <col:36, col:37> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa6e0458 <col:37> 'const vector<_Bool, type-parameter-0-0> *' this)))
      (DeclRefExpr 0xa6e0494 <col:43> 'size_type':'unsigned int' lvalue ParmVar 0xa6c4080 '__n' 'size_type':'unsigned int'))))


        void reserve(size_type __n);
        reference front() (CompoundStmt 0xa6e0588 </usr/include/c++/4.6/bits/stl_bvector.h:724:5, col:24>
  (ReturnStmt 0xa6e0578 <col:7, col:21>
    (UnaryOperator 0xa6e0560 <col:14, col:21> '<dependent type>' prefix '*'
      (CallExpr 0xa6e0540 <col:15, col:21> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e0500 <col:15> '<bound member function type>' lvalue)))))


        const_reference front() const (CompoundStmt 0xa6e0638 </usr/include/c++/4.6/bits/stl_bvector.h:728:5, col:24>
  (ReturnStmt 0xa6e0628 <col:7, col:21>
    (UnaryOperator 0xa6e0610 <col:14, col:21> '<dependent type>' prefix '*'
      (CallExpr 0xa6e05f0 <col:15, col:21> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e05b0 <col:15> '<bound member function type>' lvalue)))))


        reference back() (CompoundStmt 0xa6e0780 </usr/include/c++/4.6/bits/stl_bvector.h:732:5, col:28>
  (ReturnStmt 0xa6e0770 <col:7, col:25>
    (UnaryOperator 0xa6e0758 <col:14, col:25> '<dependent type>' prefix '*'
      (ParenExpr 0xa6e0740 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa6e0718 <col:16, col:24> '<dependent type>'
          (UnresolvedLookupExpr 0xa6e06d8 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CallExpr 0xa6e06a0 <col:16, col:20> '<dependent type>'
            (UnresolvedMemberExpr 0xa6e0660 <col:16> '<bound member function type>' lvalue))
          (IntegerLiteral 0xa6e06c0 <col:24> 'int' 1))))))


        const_reference back() const (CompoundStmt 0xa6e08c8 </usr/include/c++/4.6/bits/stl_bvector.h:736:5, col:28>
  (ReturnStmt 0xa6e08b8 <col:7, col:25>
    (UnaryOperator 0xa6e08a0 <col:14, col:25> '<dependent type>' prefix '*'
      (ParenExpr 0xa6e0888 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa6e0860 <col:16, col:24> '<dependent type>'
          (UnresolvedLookupExpr 0xa6e0820 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CallExpr 0xa6e07e8 <col:16, col:20> '<dependent type>'
            (UnresolvedMemberExpr 0xa6e07a8 <col:16> '<bound member function type>' lvalue))
          (IntegerLiteral 0xa6e0808 <col:24> 'int' 1))))))


        void data() (CompoundStmt 0xa6e08e0 </usr/include/c++/4.6/bits/stl_bvector.h:744:12, col:14>)


        void push_back(bool __x) (CompoundStmt 0xa6e0c90 </usr/include/c++/4.6/bits/stl_bvector.h:748:5, line:753:5>
  (IfStmt 0xa6e0c70 <line:749:7, line:752:33>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e0a70 <line:749:11, col:57> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e0a28 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (CXXDependentScopeMemberExpr 0xa6e0970 <col:11, col:35> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6e0938 <col:11, col:25> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e0900 <col:11, col:17> '<dependent type>' lvalue
            (CXXThisExpr 0xa6e08f0 <col:11> 'vector<_Bool, type-parameter-0-0> *' this))))
      (CXXDependentScopeMemberExpr 0xa6e09f0 <col:43, col:57> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6e09b8 <col:43, col:49> '<dependent type>' lvalue
          (CXXThisExpr 0xa6e09a8 <col:43> 'vector<_Bool, type-parameter-0-0> *' this))))
    (BinaryOperator 0xa6e0b78 <line:750:9, col:38> '<dependent type>' '='
      (UnaryOperator 0xa6e0b48 <col:9, col:33> '<dependent type>' prefix '*'
        (UnaryOperator 0xa6e0b30 <col:10, col:33> '<dependent type>' postfix '++'
          (CXXDependentScopeMemberExpr 0xa6e0ae0 <col:10, col:24> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6e0aa8 <col:10, col:16> '<dependent type>' lvalue
              (CXXThisExpr 0xa6e0a98 <col:10> 'vector<_Bool, type-parameter-0-0> *' this)))))
      (DeclRefExpr 0xa6e0b5c <col:38> '_Bool' lvalue ParmVar 0xa6c50f0 '__x' '_Bool'))
    (CallExpr 0xa6e0c48 <line:752:9, col:33> '<dependent type>'
      (MemberExpr 0xa6e0ba0 <col:9> '<bound member function type>' ->_M_insert_aux 0xa6cc990
        (CXXThisExpr 0xa6e0b90 <col:9> 'vector<_Bool, type-parameter-0-0> *' this))
      (CallExpr 0xa6e0c10 <col:23, col:27> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e0bd0 <col:23> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6e0c2c <col:30> '_Bool' lvalue ParmVar 0xa6c50f0 '__x' '_Bool'))))


        void swap(vector<bool, type-parameter-0-0> &__x) (CompoundStmt 0xa6e1490 </usr/include/c++/4.6/bits/stl_bvector.h:757:5, line:767:5>
  (CallExpr 0xa6e0e10 <line:758:7, col:61> '<dependent type>'
    (UnresolvedLookupExpr 0xa6e0cc8 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0)
    (CXXDependentScopeMemberExpr 0xa6e0d50 <col:17, col:31> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e0d18 <col:17, col:23> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e0d08 <col:17> 'vector<_Bool, type-parameter-0-0> *' this)))
    (CXXDependentScopeMemberExpr 0xa6e0dd8 <col:41, col:53> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e0da0 <col:41, col:45> '<dependent type>' lvalue
        (DeclRefExpr 0xa6e0d84 <col:41> 'vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c51f0 '__x' 'vector<_Bool, type-parameter-0-0> &'))))
  (CallExpr 0xa6e0fa0 <line:759:7, col:63> '<dependent type>'
    (UnresolvedLookupExpr 0xa6e0e58 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0)
    (CXXDependentScopeMemberExpr 0xa6e0ee0 <col:17, col:31> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e0ea8 <col:17, col:23> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e0e98 <col:17> 'vector<_Bool, type-parameter-0-0> *' this)))
    (CXXDependentScopeMemberExpr 0xa6e0f68 <col:42, col:54> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e0f30 <col:42, col:46> '<dependent type>' lvalue
        (DeclRefExpr 0xa6e0f14 <col:42> 'vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c51f0 '__x' 'vector<_Bool, type-parameter-0-0> &'))))
  (CallExpr 0xa6e1130 <line:760:7, line:761:32> '<dependent type>'
    (UnresolvedLookupExpr 0xa6e0fe8 <line:760:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0)
    (CXXDependentScopeMemberExpr 0xa6e1070 <col:17, col:31> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e1038 <col:17, col:23> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e1028 <col:17> 'vector<_Bool, type-parameter-0-0> *' this)))
    (CXXDependentScopeMemberExpr 0xa6e10f8 <line:761:3, col:15> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e10c0 <col:3, col:7> '<dependent type>' lvalue
        (DeclRefExpr 0xa6e10a4 <col:3> 'vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c51f0 '__x' 'vector<_Bool, type-parameter-0-0> &'))))
  (CallExpr 0xa6e1468 <line:765:7, line:766:61> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa6e1368 <line:765:7, line:766:2> '<dependent type>' lvalue)
    (CallExpr 0xa6e13d8 <col:11, col:32> '<dependent type>'
      (UnresolvedMemberExpr 0xa6e139c <col:11> '<dependent type>' lvalue))
    (CallExpr 0xa6e1448 <col:35, col:60> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa6e1410 <col:35, col:39> '<dependent type>' lvalue
        (DeclRefExpr 0xa6e13f4 <col:35> 'vector<_Bool, type-parameter-0-0>' lvalue ParmVar 0xa6c51f0 '__x' 'vector<_Bool, type-parameter-0-0> &')))))


        static void swap(reference __x, reference __y) (CompoundStmt 0xa6e16e0 </usr/include/c++/4.6/bits/stl_bvector.h:772:5, line:776:5>
  (DeclStmt 0xa6e1588 <line:773:7, col:23>
    0xa6e14d0 "bool __tmp =
      (ImplicitCastExpr 0xa6e1578 <col:20> '_Bool' <UserDefinedConversion>
        (CXXMemberCallExpr 0xa6e1558 <col:20> '_Bool'
          (MemberExpr 0xa6e1538 <col:20, <invalid sloc>> '_Bool (void) const' .operator _Bool 0xa6b6c00
            (ImplicitCastExpr 0xa6e1528 <col:20> 'const struct std::_Bit_reference' lvalue <NoOp>
              (DeclRefExpr 0xa6e1504 <col:20> 'reference':'struct std::_Bit_reference' lvalue ParmVar 0xa6c52e0 '__x' 'reference':'struct std::_Bit_reference')))))")
  (CXXOperatorCallExpr 0xa6e1628 <line:774:7, col:13> 'struct std::_Bit_reference' lvalue
    (ImplicitCastExpr 0xa6e1618 <col:11, <invalid sloc>> 'struct std::_Bit_reference &(*)(const struct std::_Bit_reference &)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa6e15e0 <col:11, <invalid sloc>> 'struct std::_Bit_reference &(const struct std::_Bit_reference &)' lvalue CXXMethod 0xa6b6e30 'operator=' 'struct std::_Bit_reference &(const struct std::_Bit_reference &)'))
    (DeclRefExpr 0xa6e1598 <col:7> 'reference':'struct std::_Bit_reference' lvalue ParmVar 0xa6c52e0 '__x' 'reference':'struct std::_Bit_reference')
    (ImplicitCastExpr 0xa6e15d0 <col:13> 'const struct std::_Bit_reference' lvalue <NoOp>
      (DeclRefExpr 0xa6e15b0 <col:13> 'reference':'struct std::_Bit_reference' lvalue ParmVar 0xa6c5320 '__y' 'reference':'struct std::_Bit_reference')))
  (CXXOperatorCallExpr 0xa6e16b8 <line:775:7, col:13> 'struct std::_Bit_reference' lvalue
    (ImplicitCastExpr 0xa6e16a8 <col:11, <invalid sloc>> 'struct std::_Bit_reference &(*)(_Bool)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa6e1690 <col:11, <invalid sloc>> 'struct std::_Bit_reference &(_Bool)' lvalue CXXMethod 0xa6b6d10 'operator=' 'struct std::_Bit_reference &(_Bool)'))
    (DeclRefExpr 0xa6e164c <col:7> 'reference':'struct std::_Bit_reference' lvalue ParmVar 0xa6c5320 '__y' 'reference':'struct std::_Bit_reference')
    (ImplicitCastExpr 0xa6e1680 <col:13> '_Bool' <LValueToRValue>
      (DeclRefExpr 0xa6e1664 <col:13> '_Bool' lvalue Var 0xa6e14d0 '__tmp' '_Bool'))))


        iterator insert(iterator __position, const bool &__x = (MaterializeTemporaryExpr 0xa6cccc8 </usr/include/c++/4.6/bits/stl_bvector.h:779:51, col:56> 'const _Bool' lvalue
  (CXXScalarValueInitExpr 0xa6cccb8 <col:51, col:56> '_Bool'))
) (CompoundStmt 0xa6e1da0 </usr/include/c++/4.6/bits/stl_bvector.h:780:5, line:788:5>
  (DeclStmt 0xa6e1838 <line:781:7, col:55>
    0xa6e1710 "const difference_type __n =
      (CXXOperatorCallExpr 0xa6e1810 <col:35, col:54> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e17d0 <col:46, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa6e1744 <col:35> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5430 '__position' 'iterator':'struct std::_Bit_iterator')
        (CallExpr 0xa6e17b0 <col:48, col:54> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e1770 <col:48> '<bound member function type>' lvalue)))")
  (IfStmt 0xa6e1c80 <line:782:7, line:786:38>
    <<<NULL>>>
    (BinaryOperator 0xa6e1ae8 <line:782:11, line:783:25> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa6e19c8 <line:782:11, col:57> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e1980 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
        (CXXDependentScopeMemberExpr 0xa6e18c8 <col:11, col:35> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e1890 <col:11, col:25> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6e1858 <col:11, col:17> '<dependent type>' lvalue
              (CXXThisExpr 0xa6e1848 <col:11> 'vector<_Bool, type-parameter-0-0> *' this))))
        (CXXDependentScopeMemberExpr 0xa6e1948 <col:43, col:57> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e1910 <col:43, col:49> '<dependent type>' lvalue
            (CXXThisExpr 0xa6e1900 <col:43> 'vector<_Bool, type-parameter-0-0> *' this))))
      (CXXOperatorCallExpr 0xa6e1ac0 <line:783:7, col:25> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e1a78 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050)
        (DeclRefExpr 0xa6e19ec <col:7> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5430 '__position' 'iterator':'struct std::_Bit_iterator')
        (CallExpr 0xa6e1a58 <col:21, col:25> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e1a18 <col:21> '<bound member function type>' lvalue))))
    (BinaryOperator 0xa6e1be0 <line:784:9, col:38> '<dependent type>' '='
      (UnaryOperator 0xa6e1bb0 <col:9, col:33> '<dependent type>' prefix '*'
        (UnaryOperator 0xa6e1b98 <col:10, col:33> '<dependent type>' postfix '++'
          (CXXDependentScopeMemberExpr 0xa6e1b48 <col:10, col:24> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6e1b10 <col:10, col:16> '<dependent type>' lvalue
              (CXXThisExpr 0xa6e1b00 <col:10> 'vector<_Bool, type-parameter-0-0> *' this)))))
      (DeclRefExpr 0xa6e1bc4 <col:38> 'const _Bool' lvalue ParmVar 0xa6c5480 '__x' 'const _Bool &'))
    (CallExpr 0xa6e1c58 <line:786:9, col:38> '<dependent type>'
      (MemberExpr 0xa6e1c08 <col:9> '<bound member function type>' ->_M_insert_aux 0xa6cc990
        (CXXThisExpr 0xa6e1bf8 <col:9> 'vector<_Bool, type-parameter-0-0> *' this))
      (DeclRefExpr 0xa6e1c28 <col:23> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5430 '__position' 'iterator':'struct std::_Bit_iterator')
      (DeclRefExpr 0xa6e1c40 <col:35> 'const _Bool' lvalue ParmVar 0xa6c5480 '__x' 'const _Bool &')))
  (ReturnStmt 0xa6e1d90 <line:787:7, col:24>
    (CXXOperatorCallExpr 0xa6e1d68 <col:14, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e1d28 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
      (CallExpr 0xa6e1cf0 <col:14, col:20> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e1cb0 <col:14> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6e1d0c <col:24> 'const difference_type':'const int' lvalue Var 0xa6e1710 '__n' 'const difference_type':'const int'))))


        template <typename _InputIterator> void insert(iterator __position, _InputIterator __first, _InputIterator __last) (CompoundStmt 0xa6e2000 </usr/include/c++/4.6/bits/stl_bvector.h:794:7, line:797:7>
  (DeclStmt 0xa6e1ef0 <line:795:2, col:70>
    0xa6e1ec0 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (CallExpr 0xa6e1fd0 <line:796:2, col:61> '<dependent type>'
    (UnresolvedMemberExpr 0xa6e1f10 <col:2> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6e1f50 <col:21> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c55f0 '__position' 'iterator':'struct std::_Bit_iterator')
    (DeclRefExpr 0xa6e1f68 <col:33> '_InputIterator' lvalue ParmVar 0xa6c5630 '__first' '_InputIterator')
    (DeclRefExpr 0xa6e1f80 <col:42> '_InputIterator' lvalue ParmVar 0xa6c5670 '__last' '_InputIterator')
    (CXXUnresolvedConstructExpr 0xa6e1fb8 <col:50, col:60> '_Integral':'typename std::__is_integer<_InputIterator>::__type')))

;
        void insert(iterator __position, size_type __n, const bool &__x) (CompoundStmt 0xa6e20b8 </usr/include/c++/4.6/bits/stl_bvector.h:801:5, col:45>
  (CallExpr 0xa6e2090 <col:7, col:42> '<dependent type>'
    (MemberExpr 0xa6e2028 <col:7> '<bound member function type>' ->_M_fill_insert 0xa6cc300
      (CXXThisExpr 0xa6e2018 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6e2048 <col:22> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c57d0 '__position' 'iterator':'struct std::_Bit_iterator')
    (DeclRefExpr 0xa6e2060 <col:34> 'size_type':'unsigned int' lvalue ParmVar 0xa6c5810 '__n' 'size_type':'unsigned int')
    (DeclRefExpr 0xa6e2078 <col:39> 'const _Bool' lvalue ParmVar 0xa6c5860 '__x' 'const _Bool &')))


        void pop_back() (CompoundStmt 0xa6e2168 </usr/include/c++/4.6/bits/stl_bvector.h:810:5, col:34>
  (UnaryOperator 0xa6e2150 <col:7, col:23> '<dependent type>' prefix '--'
    (CXXDependentScopeMemberExpr 0xa6e2118 <col:9, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e20e0 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e20d0 <col:9> 'vector<_Bool, type-parameter-0-0> *' this)))))


        iterator erase(iterator __position) (CompoundStmt 0xa6e25a0 </usr/include/c++/4.6/bits/stl_bvector.h:814:5, line:819:5>
  (IfStmt 0xa6e2488 <line:815:7, line:816:52>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e22c8 <line:815:11, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e2280 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (CXXOperatorCallExpr 0xa6e21e8 <col:11, col:24> 'iterator':'struct std::_Bit_iterator'
        (ImplicitCastExpr 0xa6e21d8 <col:22, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6e21c0 <col:22, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
        (ImplicitCastExpr 0xa6e21b0 <col:11> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (DeclRefExpr 0xa6e217c <col:11> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5a20 '__position' 'iterator':'struct std::_Bit_iterator'))
        (IntegerLiteral 0xa6e2198 <col:24> 'int' 1))
      (CallExpr 0xa6e2260 <col:29, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e2220 <col:29> '<bound member function type>' lvalue)))
    (CallExpr 0xa6e2460 <line:816:9, col:52> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e2310 <col:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
      (CXXOperatorCallExpr 0xa6e23b0 <col:19, col:32> 'iterator':'struct std::_Bit_iterator'
        (ImplicitCastExpr 0xa6e23a0 <col:30, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6e2388 <col:30, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
        (ImplicitCastExpr 0xa6e2378 <col:19> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (DeclRefExpr 0xa6e2344 <col:19> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5a20 '__position' 'iterator':'struct std::_Bit_iterator'))
        (IntegerLiteral 0xa6e2360 <col:32> 'int' 1))
      (CallExpr 0xa6e2428 <col:35, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e23e8 <col:35> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6e2444 <col:42> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5a20 '__position' 'iterator':'struct std::_Bit_iterator'))
    <<<NULL>>>)
  (UnaryOperator 0xa6e2528 <line:817:7, col:23> '<dependent type>' prefix '--'
    (CXXDependentScopeMemberExpr 0xa6e24f0 <col:9, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e24b8 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e24a8 <col:9> 'vector<_Bool, type-parameter-0-0> *' this))))
  (ReturnStmt 0xa6e2590 <line:818:7, col:14>
    (CXXConstructExpr 0xa6e2568 <col:14> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
      (ImplicitCastExpr 0xa6e2558 <col:14> 'const struct std::_Bit_iterator' lvalue <NoOp>
        (DeclRefExpr 0xa6e253c <col:14> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5a20 '__position' 'iterator':'struct std::_Bit_iterator')))))


        iterator erase(iterator __first, iterator __last) (CompoundStmt 0xa6e2858 </usr/include/c++/4.6/bits/stl_bvector.h:823:5, line:827:5>
  (IfStmt 0xa6e27d8 <line:824:7, line:825:51>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e2648 <line:824:11, col:22> '_Bool'
      (ImplicitCastExpr 0xa6e2638 <col:19, <invalid sloc>> '_Bool (*)(const struct std::_Bit_iterator_base &) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6e2620 <col:19, <invalid sloc>> '_Bool (const struct std::_Bit_iterator_base &) const' lvalue CXXMethod 0xa6b8d00 'operator!=' '_Bool (const struct std::_Bit_iterator_base &) const'))
      (ImplicitCastExpr 0xa6e2610 <col:11> 'const struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
        (DeclRefExpr 0xa6e25bc <col:11> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5b30 '__first' 'iterator':'struct std::_Bit_iterator'))
      (ImplicitCastExpr 0xa6e2600 <col:22> 'const struct std::_Bit_iterator_base' lvalue <NoOp>
        (ImplicitCastExpr 0xa6e25f0 <col:22> 'struct std::_Bit_iterator_base' lvalue <DerivedToBase (_Bit_iterator_base)>
          (DeclRefExpr 0xa6e25d4 <col:22> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5b70 '__last' 'iterator':'struct std::_Bit_iterator'))))
    (CallExpr 0xa6e27b8 <line:825:2, col:51> '<dependent type>'
      (MemberExpr 0xa6e2680 <col:2> '<bound member function type>' ->_M_erase_at_end 0xa6ccbe0
        (CXXThisExpr 0xa6e2670 <col:2> 'vector<_Bool, type-parameter-0-0> *' this))
      (CallExpr 0xa6e2790 <col:18, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e26b8 <col:18, col:23> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
        (DeclRefExpr 0xa6e26ec <col:28> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5b70 '__last' 'iterator':'struct std::_Bit_iterator')
        (CallExpr 0xa6e2758 <col:36, col:40> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e2718 <col:36> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa6e2774 <col:43> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5b30 '__first' 'iterator':'struct std::_Bit_iterator')))
    <<<NULL>>>)
  (ReturnStmt 0xa6e2848 <line:826:7, col:14>
    (CXXConstructExpr 0xa6e2820 <col:14> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
      (ImplicitCastExpr 0xa6e2810 <col:14> 'const struct std::_Bit_iterator' lvalue <NoOp>
        (DeclRefExpr 0xa6e27f4 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5b30 '__first' 'iterator':'struct std::_Bit_iterator')))))


        void resize(size_type __new_size, bool __x = (CXXScalarValueInitExpr 0xa6ccce0 </usr/include/c++/4.6/bits/stl_bvector.h:830:45, col:50> '_Bool')
) (CompoundStmt 0xa6e2cb8 </usr/include/c++/4.6/bits/stl_bvector.h:831:5, line:836:5>
  (IfStmt 0xa6e2c98 <line:832:7, line:835:47>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e2918 <line:832:11, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e28d8 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (DeclRefExpr 0xa6e2870 <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6c5c80 '__new_size' 'size_type':'unsigned int')
      (CallExpr 0xa6e28b8 <col:24, col:29> '<dependent type>'
        (MemberExpr 0xa6e2898 <col:24> '<bound member function type>' ->size 0xa6c39f0
          (CXXThisExpr 0xa6e2888 <col:24> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CallExpr 0xa6e2aa0 <line:833:9, col:62> '<dependent type>'
      (MemberExpr 0xa6e2950 <col:9> '<bound member function type>' ->_M_erase_at_end 0xa6ccbe0
        (CXXThisExpr 0xa6e2940 <col:9> 'vector<_Bool, type-parameter-0-0> *' this))
      (CXXOperatorCallExpr 0xa6e2a78 <col:25, col:61> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e2a38 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa6e29c0 <col:25, col:31> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e2980 <col:25> '<bound member function type>' lvalue))
        (CXXFunctionalCastExpr 0xa6e2a20 <col:35, col:61> 'difference_type':'int' functional cast to difference_type <NoOp>
          (ImplicitCastExpr 0xa6e2a10 <col:51> 'difference_type':'int' <IntegralCast>
            (ImplicitCastExpr 0xa6e2a00 <col:51> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa6e29e8 <col:51> 'size_type':'unsigned int' lvalue ParmVar 0xa6c5c80 '__new_size' 'size_type':'unsigned int'))))))
    (CallExpr 0xa6e2c70 <line:835:9, col:47> '<dependent type>'
      (UnresolvedMemberExpr 0xa6e2ad0 <col:9> '<bound member function type>' lvalue)
      (CallExpr 0xa6e2b68 <col:16, col:20> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e2b28 <col:16> '<bound member function type>' lvalue))
      (CXXOperatorCallExpr 0xa6e2c30 <col:23, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e2bf0 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa6e2b84 <col:23> 'size_type':'unsigned int' lvalue ParmVar 0xa6c5c80 '__new_size' 'size_type':'unsigned int')
        (CallExpr 0xa6e2bd0 <col:36, col:41> '<dependent type>'
          (MemberExpr 0xa6e2bb0 <col:36> '<bound member function type>' ->size 0xa6c39f0
            (CXXThisExpr 0xa6e2ba0 <col:36> 'vector<_Bool, type-parameter-0-0> *' this))))
      (DeclRefExpr 0xa6e2c54 <col:44> '_Bool' lvalue ParmVar 0xa6c5cc0 '__x' '_Bool'))))


        void flip() (CompoundStmt 0xa6e3000 </usr/include/c++/4.6/bits/stl_bvector.h:846:5, line:850:5>
  (ForStmt 0xa6e2fd8 <line:847:7, line:849:18>
    (DeclStmt 0xa6e2dd0 <line:847:12, col:57>
      0xa6e2ce0 "_Bit_type *__p =
        (CXXDependentScopeMemberExpr 0xa6e2d98 <col:30, col:53> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e2d60 <col:30, col:44> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6e2d28 <col:30, col:36> '<dependent type>' lvalue
              (CXXThisExpr 0xa6e2d18 <col:30> 'vector<_Bool, type-parameter-0-0> *' this))))")
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e2ec0 <line:848:5, col:26> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e2e78 <col:9, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6e2de0 <col:5> '_Bit_type *' lvalue Var 0xa6e2ce0 '__p' '_Bit_type *')
      (CXXDependentScopeMemberExpr 0xa6e2e40 <col:12, col:26> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6e2e08 <col:12, col:18> '<dependent type>' lvalue
          (CXXThisExpr 0xa6e2df8 <col:12> 'vector<_Bool, type-parameter-0-0> *' this))))
    (UnaryOperator 0xa6e2f00 <col:45, col:47> '_Bit_type *' lvalue prefix '++'
      (DeclRefExpr 0xa6e2ee4 <col:47> '_Bit_type *' lvalue Var 0xa6e2ce0 '__p' '_Bit_type *'))
    (BinaryOperator 0xa6e2fc0 <line:849:9, col:18> '_Bit_type':'unsigned long' lvalue '='
      (UnaryOperator 0xa6e2f40 <col:9, col:10> '_Bit_type':'unsigned long' lvalue prefix '*'
        (ImplicitCastExpr 0xa6e2f30 <col:10> '_Bit_type *' <LValueToRValue>
          (DeclRefExpr 0xa6e2f14 <col:10> '_Bit_type *' lvalue Var 0xa6e2ce0 '__p' '_Bit_type *')))
      (UnaryOperator 0xa6e2fa8 <col:16, col:18> '_Bit_type':'unsigned long' prefix '~'
        (ImplicitCastExpr 0xa6e2f98 <col:17, col:18> '_Bit_type':'unsigned long' <LValueToRValue>
          (UnaryOperator 0xa6e2f80 <col:17, col:18> '_Bit_type':'unsigned long' lvalue prefix '*'
            (ImplicitCastExpr 0xa6e2f70 <col:18> '_Bit_type *' <LValueToRValue>
              (DeclRefExpr 0xa6e2f54 <col:18> '_Bit_type *' lvalue Var 0xa6e2ce0 '__p' '_Bit_type *'))))))))


        void clear() (CompoundStmt 0xa6e30d8 </usr/include/c++/4.6/bits/stl_bvector.h:854:5, col:33>
  (CallExpr 0xa6e30b8 <col:7, col:30> '<dependent type>'
    (MemberExpr 0xa6e3028 <col:7> '<bound member function type>' ->_M_erase_at_end 0xa6ccbe0
      (CXXThisExpr 0xa6e3018 <col:7> 'vector<_Bool, type-parameter-0-0> *' this))
    (CallExpr 0xa6e3098 <col:23, col:29> '<dependent type>'
      (UnresolvedMemberExpr 0xa6e3058 <col:23> '<bound member function type>' lvalue))))


    protected:
    protected:
        iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator __result) (CompoundStmt 0xa6e5240 </usr/include/c++/4.6/bits/stl_bvector.h:862:5, line:866:5>
  (DeclStmt 0xa6e4c70 <line:863:7, col:75>
    0xa6e3100 "_Bit_type *__q =
      (CallExpr 0xa6e4c18 <col:24, col:74> 'unsigned long *':'unsigned long *'
        (ImplicitCastExpr 0xa6e4c08 <col:24, col:29> 'unsigned long *(*)(unsigned long *, unsigned long *, unsigned long *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6e4ba8 <col:24, col:29> 'unsigned long *(unsigned long *, unsigned long *, unsigned long *)' lvalue Function 0xa6e4ae0 'copy' 'unsigned long *(unsigned long *, unsigned long *, unsigned long *)' (FunctionTemplate 0xa64d290 'copy')))
        (ImplicitCastExpr 0xa6e4c40 <col:34, col:42> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6e31b0 <col:34, col:42> '_Bit_type *' lvalue ._M_p 0xa6b86c0
            (ImplicitCastExpr 0xa6e31a0 <col:34> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
              (DeclRefExpr 0xa6e3184 <col:34> 'const_iterator':'struct std::_Bit_const_iterator' lvalue ParmVar 0xa6c5f10 '__first' 'const_iterator':'struct std::_Bit_const_iterator'))))
        (ImplicitCastExpr 0xa6e4c50 <col:48, col:55> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6e31f8 <col:48, col:55> '_Bit_type *' lvalue ._M_p 0xa6b86c0
            (ImplicitCastExpr 0xa6e31e8 <col:48> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
              (DeclRefExpr 0xa6e31d0 <col:48> 'const_iterator':'struct std::_Bit_const_iterator' lvalue ParmVar 0xa6c5f50 '__last' 'const_iterator':'struct std::_Bit_const_iterator'))))
        (ImplicitCastExpr 0xa6e4c60 <col:61, col:70> '_Bit_type *' <LValueToRValue>
          (MemberExpr 0xa6e3240 <col:61, col:70> '_Bit_type *' lvalue ._M_p 0xa6b86c0
            (ImplicitCastExpr 0xa6e3230 <col:61> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
              (DeclRefExpr 0xa6e3218 <col:61> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6c5f90 '__result' 'iterator':'struct std::_Bit_iterator')))))")
  (ReturnStmt 0xa6e5230 <line:864:7, line:865:26>
    (CXXConstructExpr 0xa6e5208 <line:864:14, line:865:26> 'iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
      (MaterializeTemporaryExpr 0xa6e51f8 <line:864:14, line:865:26> 'const struct std::_Bit_iterator' lvalue
        (ImplicitCastExpr 0xa6e51e8 <line:864:14, line:865:26> 'const struct std::_Bit_iterator' <NoOp>
          (CallExpr 0xa6e50f8 <line:864:14, line:865:26> 'struct std::_Bit_iterator':'struct std::_Bit_iterator'
            (ImplicitCastExpr 0xa6e50e8 <line:864:14, col:19> 'struct std::_Bit_iterator (*)(struct std::_Bit_const_iterator, struct std::_Bit_const_iterator, struct std::_Bit_iterator)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6e5088 <col:14, col:19> 'struct std::_Bit_iterator (struct std::_Bit_const_iterator, struct std::_Bit_const_iterator, struct std::_Bit_iterator)' lvalue Function 0xa6e4fc0 'copy' 'struct std::_Bit_iterator (struct std::_Bit_const_iterator, struct std::_Bit_const_iterator, struct std::_Bit_iterator)' (FunctionTemplate 0xa64d290 'copy')))
            (CXXConstructExpr 0xa6e5140 <col:24, col:53> 'struct std::_Bit_const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()' elidable
              (MaterializeTemporaryExpr 0xa6e5130 <col:24, col:53> 'const struct std::_Bit_const_iterator' lvalue
                (ImplicitCastExpr 0xa6e5120 <col:24, col:53> 'const struct std::_Bit_const_iterator' <NoOp>
                  (CXXTemporaryObjectExpr 0xa6e4d58 <col:24, col:53> 'const_iterator':'struct std::_Bit_const_iterator''void (_Bit_type *, unsigned int)'
                    (ImplicitCastExpr 0xa6e4d38 <col:39, col:46> '_Bit_type *' <LValueToRValue>
                      (MemberExpr 0xa6e4d00 <col:39, col:46> '_Bit_type *' lvalue ._M_p 0xa6b86c0
                        (ImplicitCastExpr 0xa6e4cf0 <col:39> 'struct std::_Bit_iterator_base' lvalue <UncheckedDerivedToBase (_Bit_iterator_base)>
                          (DeclRefExpr 0xa6e4cd8 <col:39> 'const_iterator':'struct std::_Bit_const_iterator' lvalue ParmVar 0xa6c5f50 '__last' 'const_iterator':'struct std::_Bit_const_iterator'))))
                    (ImplicitCastExpr 0xa6e4d48 <col:52> 'unsigned int' <IntegralCast>
                      (IntegerLiteral 0xa6e4d20 <col:52> 'int' 0))))))
            (CXXConstructExpr 0xa6e5178 <col:56> 'struct std::_Bit_const_iterator':'struct std::_Bit_const_iterator''void (const struct std::_Bit_const_iterator &) throw()'
              (ImplicitCastExpr 0xa6e5168 <col:56> 'const struct std::_Bit_const_iterator' lvalue <NoOp>
                (DeclRefExpr 0xa6e4d88 <col:56> 'const_iterator':'struct std::_Bit_const_iterator' lvalue ParmVar 0xa6c5f50 '__last' 'const_iterator':'struct std::_Bit_const_iterator')))
            (CXXConstructExpr 0xa6e51c0 <line:865:10, col:25> 'struct std::_Bit_iterator':'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
              (MaterializeTemporaryExpr 0xa6e51b0 <col:10, col:25> 'const struct std::_Bit_iterator' lvalue
                (ImplicitCastExpr 0xa6e51a0 <col:10, col:25> 'const struct std::_Bit_iterator' <NoOp>
                  (CXXTemporaryObjectExpr 0xa6e4df8 <col:10, col:25> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
                    (ImplicitCastExpr 0xa6e4dd8 <col:19> '_Bit_type *' <LValueToRValue>
                      (DeclRefExpr 0xa6e4da8 <col:19> '_Bit_type *' lvalue Var 0xa6e3100 '__q' '_Bit_type *'))
                    (ImplicitCastExpr 0xa6e4de8 <col:24> 'unsigned int' <IntegralCast>
                      (IntegerLiteral 0xa6e4dc0 <col:24> 'int' 0))))))))))))


        void _M_initialize(size_type __n) (CompoundStmt 0xa6e58a8 </usr/include/c++/4.6/bits/stl_bvector.h:870:5, line:877:5>
  (DeclStmt 0xa6e5328 <line:871:7, col:46>
    0xa6e5270 "_Bit_type *__q =
      (CallExpr 0xa6e5308 <col:24, col:45> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6e52b8 <col:24, col:30> '<dependent type>' lvalue
          (CXXThisExpr 0xa6e52a8 <col:24> 'vector<_Bool, type-parameter-0-0> *' this))
        (DeclRefExpr 0xa6e52ec <col:42> 'size_type':'unsigned int' lvalue ParmVar 0xa6c60d0 '__n' 'size_type':'unsigned int'))")
  (BinaryOperator 0xa6e5598 <line:872:7, line:874:29> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6e5380 <line:872:7, col:21> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e5348 <col:7, col:13> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e5338 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
    (ParenExpr 0xa6e5580 <col:41, line:874:29> '_Bit_type *'
      (BinaryOperator 0xa6e5568 <line:872:42, line:874:28> '_Bit_type *' '+'
        (ImplicitCastExpr 0xa6e5558 <line:872:42> '_Bit_type *' <LValueToRValue>
          (DeclRefExpr 0xa6e53b4 <col:42> '_Bit_type *' lvalue Var 0xa6e5270 '__q' '_Bit_type *'))
        (ParenExpr 0xa6e5540 <line:873:9, line:874:28> 'unsigned int'
          (BinaryOperator 0xa6e5528 <line:873:10, line:874:27> 'unsigned int' '/'
            (ParenExpr 0xa6e54b0 <line:873:10, col:37> 'unsigned int'
              (BinaryOperator 0xa6e5498 <col:11, col:36> 'unsigned int' '-'
                (BinaryOperator 0xa6e5458 <col:11, col:32> 'unsigned int' '+'
                  (ImplicitCastExpr 0xa6e5438 <col:11> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6e53cc <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6c60d0 '__n' 'size_type':'unsigned int'))
                  (ImplicitCastExpr 0xa6e5448 <col:17, col:32> 'unsigned int' <IntegralCast>
                    (CXXFunctionalCastExpr 0xa6e5420 <col:17, col:32> 'int' functional cast to int <NoOp>
                      (ImplicitCastExpr 0xa6e5410 <col:21> 'int' <IntegralCast>
                        (DeclRefExpr 0xa6e53f4 <col:21> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
                (ImplicitCastExpr 0xa6e5488 <col:36> 'unsigned int' <IntegralCast>
                  (IntegerLiteral 0xa6e5470 <col:36> 'int' 1))))
            (ImplicitCastExpr 0xa6e5518 <line:874:12, col:27> 'unsigned int' <IntegralCast>
              (CXXFunctionalCastExpr 0xa6e5500 <col:12, col:27> 'int' functional cast to int <NoOp>
                (ImplicitCastExpr 0xa6e54f0 <col:16> 'int' <IntegralCast>
                  (DeclRefExpr 0xa6e54d4 <col:16> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))))))
  (BinaryOperator 0xa6e56b8 <line:875:7, col:47> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6e55f8 <col:7, col:21> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e55c0 <col:7, col:13> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e55b0 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
    (CXXTemporaryObjectExpr 0xa6e5688 <col:32, col:47> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
      (ImplicitCastExpr 0xa6e5668 <col:41> '_Bit_type *' <LValueToRValue>
        (DeclRefExpr 0xa6e5638 <col:41> '_Bit_type *' lvalue Var 0xa6e5270 '__q' '_Bit_type *'))
      (ImplicitCastExpr 0xa6e5678 <col:46> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa6e5650 <col:46> 'int' 0))))
  (BinaryOperator 0xa6e5890 <line:876:7, col:77> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6e5718 <col:7, col:21> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e56e0 <col:7, col:13> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e56d0 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
    (CXXOperatorCallExpr 0xa6e5868 <col:33, col:77> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e5828 <col:56, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
      (CXXDependentScopeMemberExpr 0xa6e5798 <col:33, col:47> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6e5760 <col:33, col:39> '<dependent type>' lvalue
          (CXXThisExpr 0xa6e5750 <col:33> 'vector<_Bool, type-parameter-0-0> *' this)))
      (CXXFunctionalCastExpr 0xa6e5810 <col:58, col:77> 'difference_type':'int' functional cast to difference_type <NoOp>
        (ImplicitCastExpr 0xa6e5800 <col:74> 'difference_type':'int' <IntegralCast>
          (ImplicitCastExpr 0xa6e57f0 <col:74> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa6e57d8 <col:74> 'size_type':'unsigned int' lvalue ParmVar 0xa6c60d0 '__n' 'size_type':'unsigned int')))))))


        template <typename _Integer> void _M_initialize_dispatch(_Integer __n, _Integer __x, std::__true_type) (CompoundStmt 0xa6e5b90 </usr/include/c++/4.6/bits/stl_bvector.h:886:7, line:890:7>
  (CallExpr 0xa6e5930 <line:887:2, col:43> '<dependent type>'
    (MemberExpr 0xa6e58d8 <col:2> '<bound member function type>' ->_M_initialize 0xa6c6120
      (CXXThisExpr 0xa6e58c8 <col:2> 'vector<_Bool, type-parameter-0-0> *' this))
    (CXXStaticCastExpr 0xa6e5918 <col:16, col:42> 'size_type':'unsigned int' static_cast<size_type> <Dependent>
      (DeclRefExpr 0xa6e58f8 <col:39> '_Integer' lvalue ParmVar 0xa6c61f0 '__n' '_Integer')))
  (CallExpr 0xa6e5b68 <line:888:2, line:889:50> '<dependent type>'
    (UnresolvedLookupExpr 0xa6e5978 <line:888:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
    (CXXDependentScopeMemberExpr 0xa6e5a30 <col:12, col:35> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e59f8 <col:12, col:26> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6e59c0 <col:12, col:18> '<dependent type>' lvalue
          (CXXThisExpr 0xa6e59b0 <col:12> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CXXDependentScopeMemberExpr 0xa6e5ab0 <line:889:5, col:19> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e5a78 <col:5, col:11> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e5a68 <col:5> 'vector<_Bool, type-parameter-0-0> *' this)))
    (ConditionalOperator 0xa6e5b48 <col:38, col:49> 'int'
      (DeclRefExpr 0xa6e5ae4 <col:38> '_Integer' lvalue ParmVar 0xa6c6230 '__x' '_Integer')
      (UnaryOperator 0xa6e5b18 <col:44, col:45> 'int' prefix '~'
        (IntegerLiteral 0xa6e5b00 <col:45> 'int' 0))
      (IntegerLiteral 0xa6e5b30 <col:49> 'int' 0))))

;
        template <typename _InputIterator> void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) (CompoundStmt 0xa6e5cd8 </usr/include/c++/4.6/bits/stl_bvector.h:896:7, line:897:44>
  (CallExpr 0xa6e5cb0 <line:896:9, line:897:41> '<dependent type>'
    (UnresolvedMemberExpr 0xa6e5bb8 <line:896:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6e5bf8 <col:29> '_InputIterator' lvalue ParmVar 0xa6c6400 '__first' '_InputIterator')
    (DeclRefExpr 0xa6e5c10 <col:38> '_InputIterator' lvalue ParmVar 0xa6c6440 '__last' '_InputIterator')
    (CallExpr 0xa6e5c90 <line:897:8, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e5c40 <col:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa616970)
      (DeclRefExpr 0xa6e5c74 <col:33> '_InputIterator' lvalue ParmVar 0xa6c6400 '__first' '_InputIterator'))))

;
        template <typename _InputIterator> void _M_initialize_range(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6e5e68 </usr/include/c++/4.6/bits/stl_bvector.h:903:7, line:906:7>
  (ForStmt 0xa6e5e40 <line:904:2, line:905:22>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e5d68 <line:904:9, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e5d20 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6e5cec <col:9> '_InputIterator' lvalue ParmVar 0xa6c6610 '__first' '_InputIterator')
      (DeclRefExpr 0xa6e5d04 <col:20> '_InputIterator' lvalue ParmVar 0xa6c6650 '__last' '_InputIterator'))
    (UnaryOperator 0xa6e5da8 <col:28, col:30> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa6e5d8c <col:30> '_InputIterator' lvalue ParmVar 0xa6c6610 '__first' '_InputIterator'))
    (CallExpr 0xa6e5e20 <line:905:4, col:22> '<dependent type>'
      (MemberExpr 0xa6e5dd0 <col:4> '<bound member function type>' ->push_back 0xa6c5170
        (CXXThisExpr 0xa6e5dc0 <col:4> 'vector<_Bool, type-parameter-0-0> *' this))
      (UnaryOperator 0xa6e5e08 <col:14, col:15> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa6e5df0 <col:15> '_InputIterator' lvalue ParmVar 0xa6c6610 '__first' '_InputIterator')))))

;
        template <typename _ForwardIterator> void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) (CompoundStmt 0xa6e6120 </usr/include/c++/4.6/bits/stl_bvector.h:912:7, line:916:7>
  (DeclStmt 0xa6e5f70 <line:913:2, col:54>
    0xa6e5e90 "const size_type __n =
      (CallExpr 0xa6e5f48 <col:24, col:53> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e5ee0 <col:24, col:29> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
        (DeclRefExpr 0xa6e5f14 <col:38> '_ForwardIterator' lvalue ParmVar 0xa6c6860 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6e5f2c <col:47> '_ForwardIterator' lvalue ParmVar 0xa6c68a0 '__last' '_ForwardIterator'))")
  (CallExpr 0xa6e5fc8 <line:914:2, col:19> '<dependent type>'
    (MemberExpr 0xa6e5f90 <col:2> '<bound member function type>' ->_M_initialize 0xa6c6120
      (CXXThisExpr 0xa6e5f80 <col:2> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6e5fb0 <col:16> 'const size_type':'const unsigned int' lvalue Var 0xa6e5e90 '__n' 'const size_type':'const unsigned int'))
  (CallExpr 0xa6e60f8 <line:915:2, col:51> '<dependent type>'
    (UnresolvedLookupExpr 0xa6e6010 <col:2, col:7> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
    (DeclRefExpr 0xa6e6044 <col:12> '_ForwardIterator' lvalue ParmVar 0xa6c6860 '__first' '_ForwardIterator')
    (DeclRefExpr 0xa6e605c <col:21> '_ForwardIterator' lvalue ParmVar 0xa6c68a0 '__last' '_ForwardIterator')
    (CXXDependentScopeMemberExpr 0xa6e60c0 <col:29, col:43> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6e6088 <col:29, col:35> '<dependent type>' lvalue
        (CXXThisExpr 0xa6e6078 <col:29> 'vector<_Bool, type-parameter-0-0> *' this)))))

;
        template <typename _Integer> void _M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) (CompoundStmt 0xa6e61c8 </usr/include/c++/4.6/bits/stl_bvector.h:923:7, col:37>
  (CallExpr 0xa6e61a0 <col:9, col:34> '<dependent type>'
    (MemberExpr 0xa6e6150 <col:9> '<bound member function type>' ->_M_fill_assign 0xa6c6f30
      (CXXThisExpr 0xa6e6140 <col:9> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6e6170 <col:24> '_Integer' lvalue ParmVar 0xa6c6ab0 '__n' '_Integer')
    (DeclRefExpr 0xa6e6188 <col:29> '_Integer' lvalue ParmVar 0xa6c6af0 '__val' '_Integer')))

;
        template <class _InputIterator> void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) (CompoundStmt 0xa6e6310 </usr/include/c++/4.6/bits/stl_bvector.h:929:7, col:76>
  (CallExpr 0xa6e62e8 <col:9, col:73> '<dependent type>'
    (UnresolvedMemberExpr 0xa6e61f0 <col:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6e6230 <col:23> '_InputIterator' lvalue ParmVar 0xa6c6cc0 '__first' '_InputIterator')
    (DeclRefExpr 0xa6e6248 <col:32> '_InputIterator' lvalue ParmVar 0xa6c6d00 '__last' '_InputIterator')
    (CallExpr 0xa6e62c8 <col:40, col:72> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e6278 <col:40, col:45> '<overloaded function type>' lvalue (no ADL) = '1' 0xa616970)
      (DeclRefExpr 0xa6e62ac <col:65> '_InputIterator' lvalue ParmVar 0xa6c6cc0 '__first' '_InputIterator'))))

;
        void _M_fill_assign(size_t __n, bool __x) (CompoundStmt 0xa6e8e70 </usr/include/c++/4.6/bits/stl_bvector.h:933:5, line:946:5>
  (IfStmt 0xa6e8e50 <line:934:7, line:945:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e63d0 <line:934:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e6390 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa6e6324 <col:11> 'size_t':'unsigned int' lvalue ParmVar 0xa6c6e70 '__n' 'size_t':'unsigned int')
      (CallExpr 0xa6e6370 <col:17, col:22> '<dependent type>'
        (MemberExpr 0xa6e6350 <col:17> '<bound member function type>' ->size 0xa6c39f0
          (CXXThisExpr 0xa6e6340 <col:17> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CompoundStmt 0xa6e6818 <line:935:2, line:939:2>
      (CallExpr 0xa6e6618 <line:936:4, line:937:52> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e6418 <line:936:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
        (CXXDependentScopeMemberExpr 0xa6e64d0 <col:14, col:37> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e6498 <col:14, col:28> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6e6460 <col:14, col:20> '<dependent type>' lvalue
              (CXXThisExpr 0xa6e6450 <col:14> 'vector<_Bool, type-parameter-0-0> *' this))))
        (CXXDependentScopeMemberExpr 0xa6e6550 <line:937:7, col:21> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e6518 <col:7, col:13> '<dependent type>' lvalue
            (CXXThisExpr 0xa6e6508 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
        (ConditionalOperator 0xa6e65f8 <col:40, col:51> 'int'
          (ImplicitCastExpr 0xa6e65e8 <col:40> '_Bool' <LValueToRValue>
            (DeclRefExpr 0xa6e6584 <col:40> '_Bool' lvalue ParmVar 0xa6c6eb0 '__x' '_Bool'))
          (UnaryOperator 0xa6e65b8 <col:46, col:47> 'int' prefix '~'
            (IntegerLiteral 0xa6e65a0 <col:47> 'int' 0))
          (IntegerLiteral 0xa6e65d0 <col:51> 'int' 0)))
      (CallExpr 0xa6e67f0 <line:938:4, col:35> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e6650 <col:4> '<bound member function type>' lvalue)
        (CallExpr 0xa6e66e8 <col:11, col:15> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e66a8 <col:11> '<bound member function type>' lvalue))
        (CXXOperatorCallExpr 0xa6e67b0 <col:18, col:29> '<dependent type>'
          (UnresolvedLookupExpr 0xa6e6770 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (DeclRefExpr 0xa6e6704 <col:18> 'size_t':'unsigned int' lvalue ParmVar 0xa6c6e70 '__n' 'size_t':'unsigned int')
          (CallExpr 0xa6e6750 <col:24, col:29> '<dependent type>'
            (MemberExpr 0xa6e6730 <col:24> '<bound member function type>' ->size 0xa6c39f0
              (CXXThisExpr 0xa6e6720 <col:24> 'vector<_Bool, type-parameter-0-0> *' this))))
        (DeclRefExpr 0xa6e67d4 <col:32> '_Bool' lvalue ParmVar 0xa6c6eb0 '__x' '_Bool')))
    (CompoundStmt 0xa6e8e38 <line:941:2, line:945:2>
      (CallExpr 0xa6e6950 <line:942:4, col:33> '<dependent type>'
        (MemberExpr 0xa6e6840 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6ccbe0
          (CXXThisExpr 0xa6e6830 <col:4> 'vector<_Bool, type-parameter-0-0> *' this))
        (CXXOperatorCallExpr 0xa6e6928 <col:20, col:30> '<dependent type>'
          (UnresolvedLookupExpr 0xa6e68e8 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CallExpr 0xa6e68b0 <col:20, col:26> '<dependent type>'
            (UnresolvedMemberExpr 0xa6e6870 <col:20> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa6e68cc <col:30> 'size_t':'unsigned int' lvalue ParmVar 0xa6c6e70 '__n' 'size_t':'unsigned int')))
      (CallExpr 0xa6e8e10 <line:943:4, line:944:52> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e6998 <line:943:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
        (CXXDependentScopeMemberExpr 0xa6e6a50 <col:14, col:37> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e6a18 <col:14, col:28> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6e69e0 <col:14, col:20> '<dependent type>' lvalue
              (CXXThisExpr 0xa6e69d0 <col:14> 'vector<_Bool, type-parameter-0-0> *' this))))
        (CXXDependentScopeMemberExpr 0xa6e8d48 <line:944:7, col:21> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6e6a98 <col:7, col:13> '<dependent type>' lvalue
            (CXXThisExpr 0xa6e6a88 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
        (ConditionalOperator 0xa6e8df0 <col:40, col:51> 'int'
          (ImplicitCastExpr 0xa6e8de0 <col:40> '_Bool' <LValueToRValue>
            (DeclRefExpr 0xa6e8d7c <col:40> '_Bool' lvalue ParmVar 0xa6c6eb0 '__x' '_Bool'))
          (UnaryOperator 0xa6e8db0 <col:46, col:47> 'int' prefix '~'
            (IntegerLiteral 0xa6e8d98 <col:47> 'int' 0))
          (IntegerLiteral 0xa6e8dc8 <col:51> 'int' 0))))))


        template <typename _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6e94c8 </usr/include/c++/4.6/bits/stl_bvector.h:952:7, line:960:7>
  (DeclStmt 0xa6e8f38 <line:953:2, col:26>
    0xa6e8e90 "iterator __cur =
      (CallExpr 0xa6e8f18 <col:19, col:25> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e8ed8 <col:19> '<bound member function type>' lvalue))")
  (ForStmt 0xa6e9258 <line:954:2, line:955:14>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa6e90e0 <line:954:9, col:43> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa6e8fc0 <col:9, col:20> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e8f78 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
        (DeclRefExpr 0xa6e8f48 <col:9> '_InputIterator' lvalue ParmVar 0xa6c7000 '__first' '_InputIterator')
        (DeclRefExpr 0xa6e8f60 <col:20> '_InputIterator' lvalue ParmVar 0xa6cb900 '__last' '_InputIterator'))
      (CXXOperatorCallExpr 0xa6e90b8 <col:30, col:43> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e9070 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
        (DeclRefExpr 0xa6e8fe4 <col:30> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6e8e90 '__cur' 'iterator':'struct std::_Bit_iterator')
        (CallExpr 0xa6e9050 <col:39, col:43> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e9010 <col:39> '<bound member function type>' lvalue))))
    (BinaryOperator 0xa6e9188 <col:46, col:57> '<dependent type>' ','
      (CXXOperatorCallExpr 0xa6e9138 <col:46, col:48> 'iterator':'struct std::_Bit_iterator' lvalue
        (ImplicitCastExpr 0xa6e9128 <<invalid sloc>> 'iterator &(*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6e9110 <<invalid sloc>> 'iterator &(void)' lvalue CXXMethod 0xa6bac60 'operator++' 'iterator &(void)'))
        (DeclRefExpr 0xa6e90f8 <col:48> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6e8e90 '__cur' 'iterator':'struct std::_Bit_iterator'))
      (UnaryOperator 0xa6e9170 <col:55, col:57> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6e9158 <col:57> '_InputIterator' lvalue ParmVar 0xa6c7000 '__first' '_InputIterator')))
    (BinaryOperator 0xa6e9240 <line:955:4, col:14> '<dependent type>' '='
      (CXXOperatorCallExpr 0xa6e91f0 <col:4, col:5> 'reference':'struct std::_Bit_reference'
        (ImplicitCastExpr 0xa6e91e0 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6e91c8 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa6bab60 'operator*' 'reference (void) const'))
        (ImplicitCastExpr 0xa6e91b8 <col:5> 'const struct std::_Bit_iterator' lvalue <NoOp>
          (DeclRefExpr 0xa6e91a0 <col:5> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6e8e90 '__cur' 'iterator':'struct std::_Bit_iterator')))
      (UnaryOperator 0xa6e9228 <col:13, col:14> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa6e9210 <col:14> '_InputIterator' lvalue ParmVar 0xa6c7000 '__first' '_InputIterator'))))
  (IfStmt 0xa6e94a8 <line:956:2, line:959:33>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e92f8 <line:956:6, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e92b0 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050)
      (DeclRefExpr 0xa6e927c <col:6> '_InputIterator' lvalue ParmVar 0xa6c7000 '__first' '_InputIterator')
      (DeclRefExpr 0xa6e9294 <col:17> '_InputIterator' lvalue ParmVar 0xa6cb900 '__last' '_InputIterator'))
    (CallExpr 0xa6e9368 <line:957:4, col:25> '<dependent type>'
      (MemberExpr 0xa6e9330 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6ccbe0
        (CXXThisExpr 0xa6e9320 <col:4> 'vector<_Bool, type-parameter-0-0> *' this))
      (DeclRefExpr 0xa6e9350 <col:20> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6e8e90 '__cur' 'iterator':'struct std::_Bit_iterator'))
    (CallExpr 0xa6e9480 <line:959:4, col:33> '<dependent type>'
      (UnresolvedMemberExpr 0xa6e9398 <col:4> '<bound member function type>' lvalue)
      (CallExpr 0xa6e9430 <col:11, col:15> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e93f0 <col:11> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6e944c <col:18> '_InputIterator' lvalue ParmVar 0xa6c7000 '__first' '_InputIterator')
      (DeclRefExpr 0xa6e9464 <col:27> '_InputIterator' lvalue ParmVar 0xa6cb900 '__last' '_InputIterator'))))

;
        template <typename _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) (CompoundStmt 0xa6e9bf0 </usr/include/c++/4.6/bits/stl_bvector.h:966:7, line:977:7>
  (DeclStmt 0xa6e95d0 <line:967:2, col:56>
    0xa6e94f0 "const size_type __len =
      (CallExpr 0xa6e95a8 <col:26, col:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e9540 <col:26, col:31> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
        (DeclRefExpr 0xa6e9574 <col:40> '_ForwardIterator' lvalue ParmVar 0xa6cbaf0 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6e958c <col:49> '_ForwardIterator' lvalue ParmVar 0xa6cbb30 '__last' '_ForwardIterator'))")
  (IfStmt 0xa6e9bd0 <line:968:2, line:976:4>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e9688 <line:968:6, col:19> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e9648 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (DeclRefExpr 0xa6e95e0 <col:6> 'const size_type':'const unsigned int' lvalue Var 0xa6e94f0 '__len' 'const size_type':'const unsigned int')
      (CallExpr 0xa6e9628 <col:14, col:19> '<dependent type>'
        (MemberExpr 0xa6e9608 <col:14> '<bound member function type>' ->size 0xa6c39f0
          (CXXThisExpr 0xa6e95f8 <col:14> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CallExpr 0xa6e97f8 <line:969:4, col:55> '<dependent type>'
      (MemberExpr 0xa6e96c0 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6ccbe0
        (CXXThisExpr 0xa6e96b0 <col:4> 'vector<_Bool, type-parameter-0-0> *' this))
      (CallExpr 0xa6e97d0 <col:20, col:54> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e96f8 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
        (DeclRefExpr 0xa6e972c <col:30> '_ForwardIterator' lvalue ParmVar 0xa6cbaf0 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6e9744 <col:39> '_ForwardIterator' lvalue ParmVar 0xa6cbb30 '__last' '_ForwardIterator')
        (CallExpr 0xa6e97b0 <col:47, col:53> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e9770 <col:47> '<bound member function type>' lvalue))))
    (CompoundStmt 0xa6e9bb0 <line:971:4, line:976:4>
      (DeclStmt 0xa6e9870 <line:972:6, col:38>
        0xa6e9820 "_ForwardIterator __mid =
          (DeclRefExpr 0xa6e9854 <col:31> '_ForwardIterator' lvalue ParmVar 0xa6cbaf0 '__first' '_ForwardIterator')")
      (CallExpr 0xa6e9948 <line:973:6, col:32> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e98a8 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61d500)
        (DeclRefExpr 0xa6e98dc <col:19> '_ForwardIterator' lvalue Var 0xa6e9820 '__mid' '_ForwardIterator')
        (CallExpr 0xa6e9928 <col:26, col:31> '<dependent type>'
          (MemberExpr 0xa6e9908 <col:26> '<bound member function type>' ->size 0xa6c39f0
            (CXXThisExpr 0xa6e98f8 <col:26> 'vector<_Bool, type-parameter-0-0> *' this))))
      (CallExpr 0xa6e9a68 <line:974:6, col:39> '<dependent type>'
        (UnresolvedLookupExpr 0xa6e9990 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
        (DeclRefExpr 0xa6e99c4 <col:16> '_ForwardIterator' lvalue ParmVar 0xa6cbaf0 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6e99dc <col:25> '_ForwardIterator' lvalue Var 0xa6e9820 '__mid' '_ForwardIterator')
        (CallExpr 0xa6e9a48 <col:32, col:38> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e9a08 <col:32> '<bound member function type>' lvalue)))
      (CallExpr 0xa6e9b88 <line:975:6, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa6e9aa0 <col:6> '<bound member function type>' lvalue)
        (CallExpr 0xa6e9b38 <col:13, col:17> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e9af8 <col:13> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa6e9b54 <col:20> '_ForwardIterator' lvalue Var 0xa6e9820 '__mid' '_ForwardIterator')
        (DeclRefExpr 0xa6e9b6c <col:27> '_ForwardIterator' lvalue ParmVar 0xa6cbb30 '__last' '_ForwardIterator')))))

;
        template <typename _Integer> void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x, std::__true_type) (CompoundStmt 0xa6e9ca8 </usr/include/c++/4.6/bits/stl_bvector.h:987:7, col:42>
  (CallExpr 0xa6e9c80 <col:9, col:39> '<dependent type>'
    (MemberExpr 0xa6e9c18 <col:9> '<bound member function type>' ->_M_fill_insert 0xa6cc300
      (CXXThisExpr 0xa6e9c08 <col:9> 'vector<_Bool, type-parameter-0-0> *' this))
    (DeclRefExpr 0xa6e9c38 <col:24> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6cbd20 '__pos' 'iterator':'struct std::_Bit_iterator')
    (DeclRefExpr 0xa6e9c50 <col:31> '_Integer' lvalue ParmVar 0xa6cbd60 '__n' '_Integer')
    (DeclRefExpr 0xa6e9c68 <col:36> '_Integer' lvalue ParmVar 0xa6cbda0 '__x' '_Integer')))

;
        template <typename _InputIterator> void _M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator __last, std::__false_type) (CompoundStmt 0xa6e9e10 </usr/include/c++/4.6/bits/stl_bvector.h:994:7, line:995:40>
  (CallExpr 0xa6e9de0 <line:994:9, line:995:37> '<dependent type>'
    (UnresolvedMemberExpr 0xa6e9cd0 <line:994:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa6e9d10 <col:25> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6cbfa0 '__pos' 'iterator':'struct std::_Bit_iterator')
    (DeclRefExpr 0xa6e9d28 <col:32> '_InputIterator' lvalue ParmVar 0xa6cbfe0 '__first' '_InputIterator')
    (DeclRefExpr 0xa6e9d40 <col:41> '_InputIterator' lvalue ParmVar 0xa6cc020 '__last' '_InputIterator')
    (CallExpr 0xa6e9dc0 <line:995:4, col:36> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e9d70 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa616970)
      (DeclRefExpr 0xa6e9da4 <col:29> '_InputIterator' lvalue ParmVar 0xa6cbfe0 '__first' '_InputIterator'))))

;
        void _M_fill_insert(iterator __position, size_type __n, bool __x);
        template <typename _InputIterator> void _M_insert_range(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6ea090 </usr/include/c++/4.6/bits/stl_bvector.h:1004:7, line:1010:7>
  (ForStmt 0xa6ea068 <line:1005:2, line:1009:4>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6e9ea0 <line:1005:9, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa6e9e58 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6e9e24 <col:9> '_InputIterator' lvalue ParmVar 0xa6cc410 '__first' '_InputIterator')
      (DeclRefExpr 0xa6e9e3c <col:20> '_InputIterator' lvalue ParmVar 0xa6cc450 '__last' '_InputIterator'))
    (UnaryOperator 0xa6e9ee0 <col:28, col:30> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa6e9ec4 <col:30> '_InputIterator' lvalue ParmVar 0xa6cc410 '__first' '_InputIterator'))
    (CompoundStmt 0xa6ea050 <line:1006:4, line:1009:4>
      (BinaryOperator 0xa6e9fd8 <line:1007:6, col:36> '<dependent type>' '='
        (DeclRefExpr 0xa6e9ef4 <col:6> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6cc3d0 '__pos' 'iterator':'struct std::_Bit_iterator')
        (CallExpr 0xa6e9fb0 <col:14, col:36> '<dependent type>'
          (UnresolvedMemberExpr 0xa6e9f20 <col:14> '<bound member function type>' lvalue)
          (DeclRefExpr 0xa6e9f64 <col:21> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6cc3d0 '__pos' 'iterator':'struct std::_Bit_iterator')
          (UnaryOperator 0xa6e9f98 <col:28, col:29> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa6e9f7c <col:29> '_InputIterator' lvalue ParmVar 0xa6cc410 '__first' '_InputIterator'))))
      (CXXOperatorCallExpr 0xa6ea030 <line:1008:6, col:8> 'iterator':'struct std::_Bit_iterator' lvalue
        (ImplicitCastExpr 0xa6ea020 <<invalid sloc>> 'iterator &(*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6ea008 <<invalid sloc>> 'iterator &(void)' lvalue CXXMethod 0xa6bac60 'operator++' 'iterator &(void)'))
        (DeclRefExpr 0xa6e9ff0 <col:8> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6cc3d0 '__pos' 'iterator':'struct std::_Bit_iterator')))))

;
        template <typename _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
        void _M_insert_aux(iterator __position, bool __x);
        size_type _M_check_len(size_type __n, const char *__s) const (CompoundStmt 0xa6ea768 </usr/include/c++/4.6/bits/stl_bvector.h:1022:5, line:1028:5>
  (IfStmt 0xa6ea2f0 <line:1023:7, line:1024:31>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ea208 <line:1023:11, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ea1c8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CXXOperatorCallExpr 0xa6ea188 <col:11, col:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ea148 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CallExpr 0xa6ea0d8 <col:11, col:20> '<dependent type>'
          (MemberExpr 0xa6ea0b8 <col:11> '<bound member function type>' ->max_size 0xa6c3a70
            (CXXThisExpr 0xa6ea0a8 <col:11> 'const vector<_Bool, type-parameter-0-0> *' this)))
        (CallExpr 0xa6ea128 <col:24, col:29> '<dependent type>'
          (MemberExpr 0xa6ea108 <col:24> '<bound member function type>' ->size 0xa6c39f0
            (CXXThisExpr 0xa6ea0f8 <col:24> 'const vector<_Bool, type-parameter-0-0> *' this))))
      (DeclRefExpr 0xa6ea1ac <col:33> 'size_type':'unsigned int' lvalue ParmVar 0xa6cca00 '__n' 'size_type':'unsigned int'))
    (CallExpr 0xa6ea2c0 <line:1024:2, col:31> 'void'
      (ImplicitCastExpr 0xa6ea2b0 <col:2> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6ea294 <col:2> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa6ea2e0 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <LValueToRValue>
        (ParenExpr 0xa6ea280 <col:24, col:30> 'const char *' lvalue
          (DeclRefExpr 0xa6ea264 </usr/include/c++/4.6/bits/stl_bvector.h:1024:27> 'const char *' lvalue ParmVar 0xa6cca50 '__s' 'const char *'))))
    <<<NULL>>>)
  (DeclStmt 0xa6ea4f0 <line:1026:7, col:61>
    0xa6ea320 "const size_type __len =
      (CXXOperatorCallExpr 0xa6ea4c8 <col:31, col:60> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ea488 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa6ea388 <col:31, col:36> '<dependent type>'
          (MemberExpr 0xa6ea368 <col:31> '<bound member function type>' ->size 0xa6c39f0
            (CXXThisExpr 0xa6ea358 <col:31> 'const vector<_Bool, type-parameter-0-0> *' this)))
        (CallExpr 0xa6ea460 <col:40, col:60> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ea3c0 <col:40, col:45> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6438d0 0xa6446c0)
          (CallExpr 0xa6ea428 <col:49, col:54> '<dependent type>'
            (MemberExpr 0xa6ea408 <col:49> '<bound member function type>' ->size 0xa6c39f0
              (CXXThisExpr 0xa6ea3f8 <col:49> 'const vector<_Bool, type-parameter-0-0> *' this)))
          (DeclRefExpr 0xa6ea444 <col:57> 'size_type':'unsigned int' lvalue ParmVar 0xa6cca00 '__n' 'size_type':'unsigned int')))")
  (ReturnStmt 0xa6ea758 <line:1027:7, col:68>
    (ConditionalOperator 0xa6ea738 <col:14, col:68> '<dependent type>'
      (ParenExpr 0xa6ea6b8 <col:14, col:51> '<dependent type>'
        (BinaryOperator 0xa6ea6a0 <col:15, col:50> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa6ea5a8 <col:15, col:28> '<dependent type>'
            (UnresolvedLookupExpr 0xa6ea568 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
            (DeclRefExpr 0xa6ea500 <col:15> 'const size_type':'const unsigned int' lvalue Var 0xa6ea320 '__len' 'const size_type':'const unsigned int')
            (CallExpr 0xa6ea548 <col:23, col:28> '<dependent type>'
              (MemberExpr 0xa6ea528 <col:23> '<bound member function type>' ->size 0xa6c39f0
                (CXXThisExpr 0xa6ea518 <col:23> 'const vector<_Bool, type-parameter-0-0> *' this))))
          (CXXOperatorCallExpr 0xa6ea678 <col:33, col:50> '<dependent type>'
            (UnresolvedLookupExpr 0xa6ea638 <col:39, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
            (DeclRefExpr 0xa6ea5cc <col:33> 'const size_type':'const unsigned int' lvalue Var 0xa6ea320 '__len' 'const size_type':'const unsigned int')
            (CallExpr 0xa6ea618 <col:41, col:50> '<dependent type>'
              (MemberExpr 0xa6ea5f8 <col:41> '<bound member function type>' ->max_size 0xa6c3a70
                (CXXThisExpr 0xa6ea5e8 <col:41> 'const vector<_Bool, type-parameter-0-0> *' this))))))
      (CallExpr 0xa6ea700 <col:55, col:64> '<dependent type>'
        (MemberExpr 0xa6ea6e0 <col:55> '<bound member function type>' ->max_size 0xa6c3a70
          (CXXThisExpr 0xa6ea6d0 <col:55> 'const vector<_Bool, type-parameter-0-0> *' this)))
      (DeclRefExpr 0xa6ea71c <col:68> 'const size_type':'const unsigned int' lvalue Var 0xa6ea320 '__len' 'const size_type':'const unsigned int'))))


        void _M_erase_at_end(iterator __pos) (CompoundStmt 0xa6ea838 </usr/include/c++/4.6/bits/stl_bvector.h:1032:5, col:40>
  (BinaryOperator 0xa6ea820 <col:7, col:33> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa6ea7d0 <col:7, col:21> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ea798 <col:7, col:13> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ea788 <col:7> 'vector<_Bool, type-parameter-0-0> *' this)))
    (DeclRefExpr 0xa6ea804 <col:33> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6ccb40 '__pos' 'iterator':'struct std::_Bit_iterator')))


    };
}
namespace std {
    void reserve(size_type __n) (CompoundStmt 0xa6ecf70 </usr/include/c++/4.6/bits/vector.tcc:68:5, line:86:5>
  (IfStmt 0xa6ec3b0 <line:69:7, line:70:45>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ec270 <line:69:11, col:32> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ead08 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa6eac84 <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6eaba0 '__n' 'size_type':'unsigned int')
      (CallExpr 0xa6eace8 <col:17, col:32> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6eacb0 <col:17, col:23> '<dependent type>' lvalue
          (CXXThisExpr 0xa6eaca0 <col:17> 'vector<_Tp, _Alloc> *' this))))
    (CallExpr 0xa6ec380 <line:70:2, col:45> 'void'
      (ImplicitCastExpr 0xa6ec370 <col:2> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6ec354 <col:2> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa6ec3a0 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa6ec340 <col:24, col:30> 'const char [16]' lvalue
          (StringLiteral 0xa6ec310 </usr/include/c++/4.6/bits/vector.tcc:70:27> 'const char [16]' lvalue "vector::reserve"))))
    <<<NULL>>>)
  (IfStmt 0xa6ecf50 <line:71:7, line:85:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ec490 <line:71:11, col:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ec450 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CallExpr 0xa6ec418 <col:11, col:26> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6ec3e0 <col:11, col:17> '<dependent type>' lvalue
          (CXXThisExpr 0xa6ec3d0 <col:11> 'vector<_Tp, _Alloc> *' this)))
      (DeclRefExpr 0xa6ec434 <col:30> 'size_type':'unsigned int' lvalue ParmVar 0xa6eaba0 '__n' 'size_type':'unsigned int'))
    (CompoundStmt 0xa6ecf20 <line:72:2, line:85:2>
      (DeclStmt 0xa6ec548 <line:73:4, col:39>
        0xa6ec4c0 "const size_type __old_size =
          (CallExpr 0xa6ec528 <col:33, col:38> '<dependent type>'
            (MemberExpr 0xa6ec508 <col:33> '<bound member function type>' ->size 0xa69e550
              (CXXThisExpr 0xa6ec4f8 <col:33> 'vector<_Tp, _Alloc> *' this)))")
      (DeclStmt 0xa6ec758 <line:74:4, line:76:57>
        0xa6ec560 "pointer __tmp =
          (CallExpr 0xa6ec730 <line:74:20, line:76:56> '<dependent type>'
            (UnresolvedMemberExpr 0xa6ec5a8 <line:74:20> '<bound member function type>' lvalue)
            (DeclRefExpr 0xa6ec5e4 <col:41> 'size_type':'unsigned int' lvalue ParmVar 0xa6eaba0 '__n' 'size_type':'unsigned int')
            (ParenExpr 0xa6ec680 </usr/include/c++/4.6/bits/stl_iterator.h:1128:44, col:50> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6ec648 </usr/include/c++/4.6/bits/vector.tcc:75:32, col:46> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6ec610 <col:32, col:38> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6ec600 <col:32> 'vector<_Tp, _Alloc> *' this))))
            (ParenExpr 0xa6ec718 </usr/include/c++/4.6/bits/stl_iterator.h:1128:44, col:50> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6ec6e0 </usr/include/c++/4.6/bits/vector.tcc:76:32, col:46> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6ec6a8 <col:32, col:38> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6ec698 <col:32> 'vector<_Tp, _Alloc> *' this)))))")
      (CallExpr 0xa6ec930 <line:77:4, line:78:25> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ec798 <line:77:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (CXXDependentScopeMemberExpr 0xa6ec820 <col:18, col:32> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ec7e8 <col:18, col:24> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ec7d8 <col:18> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6ec8a0 <col:42, col:56> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ec868 <col:42, col:48> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ec858 <col:42> 'vector<_Tp, _Alloc> *' this)))
        (CallExpr 0xa6ec910 <line:78:4, col:24> '<dependent type>'
          (UnresolvedMemberExpr 0xa6ec8d4 <col:4> '<dependent type>' lvalue)))
      (CallExpr 0xa6ecb80 <line:79:4, line:81:28> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ec958 <line:79:4> '<dependent type>' lvalue)
        (CXXDependentScopeMemberExpr 0xa6ec9e0 <col:18, col:32> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ec9a8 <col:18, col:24> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ec998 <col:18> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6ecb58 <line:80:4, line:81:20> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ecb18 <col:4, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CXXDependentScopeMemberExpr 0xa6eca60 <line:80:4, col:18> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6eca28 <col:4, col:10> '<dependent type>' lvalue
              (CXXThisExpr 0xa6eca18 <col:4> 'vector<_Tp, _Alloc> *' this)))
          (CXXDependentScopeMemberExpr 0xa6ecae0 <line:81:6, col:20> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6ecaa8 <col:6, col:12> '<dependent type>' lvalue
              (CXXThisExpr 0xa6eca98 <col:6> 'vector<_Tp, _Alloc> *' this)))))
      (BinaryOperator 0xa6ecc40 <line:82:4, col:29> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6ecbf0 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ecbb8 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ecba8 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6ecc24 <col:29> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6ec560 '__tmp' 'pointer':'typename _Tp_alloc_type::pointer'))
      (BinaryOperator 0xa6ecd70 <line:83:4, col:38> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6ecca0 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ecc68 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ecc58 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6ecd48 <col:30, col:38> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ecd08 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (DeclRefExpr 0xa6eccd4 <col:30> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6ec560 '__tmp' 'pointer':'typename _Tp_alloc_type::pointer')
          (DeclRefExpr 0xa6eccec <col:38> 'const size_type':'const unsigned int' lvalue Var 0xa6ec4c0 '__old_size' 'const size_type':'const unsigned int')))
      (BinaryOperator 0xa6ecf08 <line:84:4, col:63> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6ecdd0 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ecd98 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ecd88 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6ecee0 <col:38, col:63> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ecea0 <col:61, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CXXDependentScopeMemberExpr 0xa6ece50 <col:38, col:52> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6ece18 <col:38, col:44> '<dependent type>' lvalue
              (CXXThisExpr 0xa6ece08 <col:38> 'vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6ece84 <col:63> 'size_type':'unsigned int' lvalue ParmVar 0xa6eaba0 '__n' 'size_type':'unsigned int'))))
    <<<NULL>>>))


    typename vector<_Tp, _Alloc>::iterator insert(iterator __position, const value_type &__x) (CompoundStmt 0xa6eddc0 </usr/include/c++/4.6/bits/vector.tcc:110:5, line:131:5>
  (DeclStmt 0xa6ed748 <line:111:7, col:49>
    0xa6ed620 "const size_type __n =
      (CXXOperatorCallExpr 0xa6ed720 <col:29, col:48> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ed6e0 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa6ed654 <col:29> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ed380 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
        (CallExpr 0xa6ed6c0 <col:42, col:48> '<dependent type>'
          (UnresolvedMemberExpr 0xa6ed680 <col:42> '<bound member function type>' lvalue)))")
  (IfStmt 0xa6edc68 <line:112:7, line:129:2>
    <<<NULL>>>
    (BinaryOperator 0xa6ed9c0 <line:112:11, line:113:25> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa6ed8a0 <line:112:11, col:52> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ed858 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
        (CXXDependentScopeMemberExpr 0xa6ed7a0 <col:11, col:25> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ed768 <col:11, col:17> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ed758 <col:11> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6ed820 <col:38, col:52> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ed7e8 <col:38, col:44> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ed7d8 <col:38> 'vector<_Tp, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa6ed998 <line:113:7, col:25> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ed950 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050)
        (DeclRefExpr 0xa6ed8c4 <col:7> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ed380 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
        (CallExpr 0xa6ed930 <col:21, col:25> '<dependent type>'
          (UnresolvedMemberExpr 0xa6ed8f0 <col:21> '<bound member function type>' lvalue))))
    (CompoundStmt 0xa6edbb0 <line:114:2, line:117:2>
      (CallExpr 0xa6edaf0 <line:115:4, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6eda20 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ed9e8 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ed9d8 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6edaa0 <col:28, col:42> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6eda68 <col:28, col:34> '<dependent type>' lvalue
            (CXXThisExpr 0xa6eda58 <col:28> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6edad4 <col:53> 'const value_type':'const _Tp' lvalue ParmVar 0xa6ed3d0 '__x' 'const value_type &'))
      (UnaryOperator 0xa6edb98 <line:116:4, col:20> '<dependent type>' prefix '++'
        (CXXDependentScopeMemberExpr 0xa6edb60 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6edb28 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa6edb18 <col:6> 'vector<_Tp, _Alloc> *' this)))))
    (CompoundStmt 0xa6edc50 <line:119:2, line:129:2>
      (CallExpr 0xa6edc28 <line:128:6, col:35> '<dependent type>'
        (MemberExpr 0xa6edbd8 <col:6> '<bound member function type>' ->_M_insert_aux 0xa6a8920
          (CXXThisExpr 0xa6edbc8 <col:6> 'vector<_Tp, _Alloc> *' this))
        (DeclRefExpr 0xa6edbf8 <col:20> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ed380 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
        (DeclRefExpr 0xa6edc10 <col:32> 'const value_type':'const _Tp' lvalue ParmVar 0xa6ed3d0 '__x' 'const value_type &'))))
  (ReturnStmt 0xa6eddb0 <line:130:7, col:51>
    (CXXUnresolvedConstructExpr 0xa6edd90 <col:14, col:51> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'
      (CXXOperatorCallExpr 0xa6edd68 <col:23, col:48> '<dependent type>'
        (UnresolvedLookupExpr 0xa6edd28 <col:46, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CXXDependentScopeMemberExpr 0xa6edcd8 <col:23, col:37> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6edca0 <col:23, col:29> '<dependent type>' lvalue
            (CXXThisExpr 0xa6edc90 <col:23> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6edd0c <col:48> 'const size_type':'const unsigned int' lvalue Var 0xa6ed620 '__n' 'const size_type':'const unsigned int')))))


    typename vector<_Tp, _Alloc>::iterator erase(iterator __position) (CompoundStmt 0xa6ee920 </usr/include/c++/4.6/bits/vector.tcc:137:5, line:143:5>
  (IfStmt 0xa6ee720 <line:138:7, /usr/include/c++/4.6/bits/stl_algobase.h:491:62>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ee558 </usr/include/c++/4.6/bits/vector.tcc:138:11, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ee510 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (CXXOperatorCallExpr 0xa6ee478 <col:11, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ee438 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (DeclRefExpr 0xa6ee404 <col:11> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ee1a0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
        (IntegerLiteral 0xa6ee420 <col:24> 'int' 1))
      (CallExpr 0xa6ee4f0 <col:29, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ee4b0 <col:29> '<bound member function type>' lvalue)))
    (CallExpr 0xa6ee6f8 </usr/include/c++/4.6/bits/stl_algobase.h:491:39, col:62> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ee5a0 <col:39, col:44> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
      (CXXOperatorCallExpr 0xa6ee648 </usr/include/c++/4.6/bits/vector.tcc:139:17, col:30> '<dependent type>'
        (UnresolvedLookupExpr 0xa6ee608 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (DeclRefExpr 0xa6ee5d4 <col:17> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ee1a0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
        (IntegerLiteral 0xa6ee5f0 <col:30> 'int' 1))
      (CallExpr 0xa6ee6c0 <col:33, col:37> '<dependent type>'
        (UnresolvedMemberExpr 0xa6ee680 <col:33> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6ee6dc <col:40> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ee1a0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))
    <<<NULL>>>)
  (UnaryOperator 0xa6ee7c0 <line:140:7, col:23> '<dependent type>' prefix '--'
    (CXXDependentScopeMemberExpr 0xa6ee788 <col:9, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ee750 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ee740 <col:9> 'vector<_Tp, _Alloc> *' this))))
  (CallExpr 0xa6ee8d8 <line:141:7, col:52> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa6ee820 <col:7, col:21> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ee7e8 <col:7, col:13> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ee7d8 <col:7> 'vector<_Tp, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa6ee8a0 <col:29, col:43> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa6ee868 <col:29, col:35> '<dependent type>' lvalue
        (CXXThisExpr 0xa6ee858 <col:29> 'vector<_Tp, _Alloc> *' this))))
  (ReturnStmt 0xa6ee910 <line:142:7, col:14>
    (DeclRefExpr 0xa6ee8f8 <col:14> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6ee1a0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))


    typename vector<_Tp, _Alloc>::iterator erase(iterator __first, iterator __last) (CompoundStmt 0xa6ef4f0 </usr/include/c++/4.6/bits/vector.tcc:149:5, line:157:5>
  (IfStmt 0xa6ef4a8 <line:150:7, line:155:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ef000 <line:150:11, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa6eefb8 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6eef88 <col:11> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed00 '__first' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
      (DeclRefExpr 0xa6eefa0 <col:22> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed40 '__last' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))
    (CompoundStmt 0xa6ef490 <line:151:2, line:155:2>
      (IfStmt 0xa6ef240 <line:152:4, /usr/include/c++/4.6/bits/stl_algobase.h:491:62>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa6ef0f8 </usr/include/c++/4.6/bits/vector.tcc:152:8, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ef0b0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
          (DeclRefExpr 0xa6ef024 <col:8> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed40 '__last' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
          (CallExpr 0xa6ef090 <col:18, col:22> '<dependent type>'
            (UnresolvedMemberExpr 0xa6ef050 <col:18> '<bound member function type>' lvalue)))
        (CallExpr 0xa6ef218 </usr/include/c++/4.6/bits/stl_algobase.h:491:39, col:62> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ef140 <col:39, col:44> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
          (DeclRefExpr 0xa6ef174 </usr/include/c++/4.6/bits/vector.tcc:153:21> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed40 '__last' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
          (CallExpr 0xa6ef1e0 <col:29, col:33> '<dependent type>'
            (UnresolvedMemberExpr 0xa6ef1a0 <col:29> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa6ef1fc <col:36> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed00 '__first' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))
        <<<NULL>>>)
      (CallExpr 0xa6ef470 <line:154:4, col:53> '<dependent type>'
        (MemberExpr 0xa6ef270 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6a8b90
          (CXXThisExpr 0xa6ef260 <col:4> 'vector<_Tp, _Alloc> *' this))
        (CXXOperatorCallExpr 0xa6ef448 <col:20, col:52> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ef408 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CallExpr 0xa6ef2e0 <col:20, col:33> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6ef2a8 <col:20, col:28> '<dependent type>' lvalue
              (DeclRefExpr 0xa6ef290 <col:20> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed00 '__first' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
          (ParenExpr 0xa6ef3f0 <col:37, col:52> '<dependent type>'
            (CXXOperatorCallExpr 0xa6ef3c8 <col:38, col:46> '<dependent type>'
              (UnresolvedLookupExpr 0xa6ef388 <col:44, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (CallExpr 0xa6ef350 <col:38, col:42> '<dependent type>'
                (UnresolvedMemberExpr 0xa6ef310 <col:38> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa6ef36c <col:46> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed40 '__last' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))))))
    <<<NULL>>>)
  (ReturnStmt 0xa6ef4e0 <line:156:7, col:14>
    (DeclRefExpr 0xa6ef4c4 <col:14> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6eed00 '__first' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))


    vector<_Tp, _Alloc> &operator=(const vector<_Tp, _Alloc> &__x) (CompoundStmt 0xa6f1340 </usr/include/c++/4.6/bits/vector.tcc:163:5, line:196:5>
  (IfStmt 0xa6f12e8 <line:164:7, line:194:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6efc80 <line:164:11, col:19> '<dependent type>'
      (UnresolvedLookupExpr 0xa6efc38 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (UnaryOperator 0xa6efc10 <col:11, col:12> '<dependent type>' prefix '&'
        (DeclRefExpr 0xa6efbf4 <col:12> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &'))
      (CXXThisExpr 0xa6efc28 <col:19> 'vector<_Tp, _Alloc> *' this))
    (CompoundStmt 0xa6f12c8 <line:165:2, line:194:2>
      (DeclStmt 0xa6efd58 <line:166:4, col:39>
        0xa6efcb0 "const size_type __xlen =
          (CallExpr 0xa6efd38 <col:29, col:38> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6efd00 <col:29, col:33> '<dependent type>' lvalue
              (DeclRefExpr 0xa6efce4 <col:29> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))")
      (IfStmt 0xa6f1110 <line:167:4, line:192:6>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa6efe10 <line:167:8, col:26> '<dependent type>'
          (UnresolvedLookupExpr 0xa6efdd0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
          (DeclRefExpr 0xa6efd68 <col:8> 'const size_type':'const unsigned int' lvalue Var 0xa6efcb0 '__xlen' 'const size_type':'const unsigned int')
          (CallExpr 0xa6efdb0 <col:17, col:26> '<dependent type>'
            (MemberExpr 0xa6efd90 <col:17> '<bound member function type>' ->capacity 0xa69e7a0
              (CXXThisExpr 0xa6efd80 <col:17> 'vector<_Tp, _Alloc> *' this))))
        (CompoundStmt 0xa6f06b8 <line:168:6, line:178:6>
          (DeclStmt 0xa6effe8 <line:169:8, line:170:20>
            0xa6efe40 "pointer __tmp =
              (CallExpr 0xa6effc0 <line:169:24, line:170:19> '<dependent type>'
                (UnresolvedMemberExpr 0xa6efe88 <line:169:24> '<bound member function type>' lvalue)
                (DeclRefExpr 0xa6efec4 <col:45> 'const size_type':'const unsigned int' lvalue Var 0xa6efcb0 '__xlen' 'const size_type':'const unsigned int')
                (CallExpr 0xa6eff30 <col:53, col:63> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6efef8 <col:53, col:57> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6efedc <col:53> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
                (CallExpr 0xa6effa0 <line:170:10, col:18> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6eff68 <col:10, col:14> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6eff4c <col:10> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &'))))")
          (CallExpr 0xa6f01b8 <line:171:8, line:172:29> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f0020 <line:171:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
            (CXXDependentScopeMemberExpr 0xa6f00a8 <col:22, col:36> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f0070 <col:22, col:28> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f0060 <col:22> 'vector<_Tp, _Alloc> *' this)))
            (CXXDependentScopeMemberExpr 0xa6f0128 <col:46, col:60> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f00f0 <col:46, col:52> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f00e0 <col:46> 'vector<_Tp, _Alloc> *' this)))
            (CallExpr 0xa6f0198 <line:172:8, col:28> '<dependent type>'
              (UnresolvedMemberExpr 0xa6f015c <col:8> '<dependent type>' lvalue)))
          (CallExpr 0xa6f0448 <line:173:8, line:175:32> '<dependent type>'
            (UnresolvedMemberExpr 0xa6f01e0 <line:173:8> '<dependent type>' lvalue)
            (CXXDependentScopeMemberExpr 0xa6f02a8 <col:22, col:36> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f0270 <col:22, col:28> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f0220 <col:22> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6f0420 <line:174:8, line:175:24> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f03e0 <col:8, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (CXXDependentScopeMemberExpr 0xa6f0328 <line:174:8, col:22> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f02f0 <col:8, col:14> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f02e0 <col:8> 'vector<_Tp, _Alloc> *' this)))
              (CXXDependentScopeMemberExpr 0xa6f03a8 <line:175:10, col:24> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f0370 <col:10, col:16> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f0360 <col:10> 'vector<_Tp, _Alloc> *' this)))))
          (BinaryOperator 0xa6f0508 <line:176:8, col:33> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6f04b8 <col:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f0480 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f0470 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (DeclRefExpr 0xa6f04ec <col:33> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6efe40 '__tmp' 'pointer':'typename _Tp_alloc_type::pointer'))
          (BinaryOperator 0xa6f06a0 <line:177:8, col:67> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6f0568 <col:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f0530 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f0520 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6f0678 <col:42, col:67> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f0638 <col:65, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
              (CXXDependentScopeMemberExpr 0xa6f05e8 <col:42, col:56> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f05b0 <col:42, col:48> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f05a0 <col:42> 'vector<_Tp, _Alloc> *' this)))
              (DeclRefExpr 0xa6f061c <col:67> 'const size_type':'const unsigned int' lvalue Var 0xa6efcb0 '__xlen' 'const size_type':'const unsigned int'))))
        (IfStmt 0xa6f10f0 <line:179:9, line:192:6>
          <<<NULL>>>
          (CXXOperatorCallExpr 0xa6f0788 <line:179:13, col:23> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f0748 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
            (CallExpr 0xa6f0710 <col:13, col:18> '<dependent type>'
              (MemberExpr 0xa6f06f0 <col:13> '<bound member function type>' ->size 0xa69e550
                (CXXThisExpr 0xa6f06e0 <col:13> 'vector<_Tp, _Alloc> *' this)))
            (DeclRefExpr 0xa6f072c <col:23> 'const size_type':'const unsigned int' lvalue Var 0xa6efcb0 '__xlen' 'const size_type':'const unsigned int'))
          (CompoundStmt 0xa6f0ac8 <line:180:6, line:183:6>
            (CallExpr 0xa6f0aa0 <line:181:8, line:182:36> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f07d0 <line:181:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
              (CallExpr 0xa6f09b0 <col:22, col:63> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f0828 <col:22, col:27> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
                (CallExpr 0xa6f08b0 <col:32, col:42> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f0878 <col:32, col:36> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f085c <col:32> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
                (CallExpr 0xa6f0920 <col:45, col:53> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f08e8 <col:45, col:49> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f08cc <col:45> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
                (CallExpr 0xa6f0990 <col:56, col:62> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f0950 <col:56> '<bound member function type>' lvalue)))
              (CallExpr 0xa6f0a28 <line:182:8, col:12> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f09e8 <col:8> '<bound member function type>' lvalue))
              (CallExpr 0xa6f0a80 <col:15, col:35> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f0a44 <col:15> '<dependent type>' lvalue))))
          (CompoundStmt 0xa6f10d8 <line:185:6, line:192:6>
            (CallExpr 0xa6f0d80 <line:186:8, line:187:26> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f0b00 <line:186:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
              (CXXDependentScopeMemberExpr 0xa6f0b88 <col:18, col:30> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f0b50 <col:18, col:22> '<dependent type>' lvalue
                  (DeclRefExpr 0xa6f0b34 <col:18> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
              (CXXOperatorCallExpr 0xa6f0cd8 <col:40, col:68> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f0c98 <col:61, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                (CXXDependentScopeMemberExpr 0xa6f0c10 <col:40, col:52> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f0bd8 <col:40, col:44> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f0bbc <col:40> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
                (CallExpr 0xa6f0c78 <col:63, col:68> '<dependent type>'
                  (MemberExpr 0xa6f0c58 <col:63> '<bound member function type>' ->size 0xa69e550
                    (CXXThisExpr 0xa6f0c48 <col:63> 'vector<_Tp, _Alloc> *' this))))
              (CXXDependentScopeMemberExpr 0xa6f0d48 <line:187:4, col:18> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f0d10 <col:4, col:10> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f0d00 <col:4> 'vector<_Tp, _Alloc> *' this))))
            (CallExpr 0xa6f10a8 <line:188:8, line:191:29> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f0dd0 <line:188:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
              (CXXOperatorCallExpr 0xa6f0f20 <col:36, col:64> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f0ee0 <col:57, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                (CXXDependentScopeMemberExpr 0xa6f0e58 <col:36, col:48> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f0e20 <col:36, col:40> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f0e08 <col:36> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
                (CallExpr 0xa6f0ec0 <col:59, col:64> '<dependent type>'
                  (MemberExpr 0xa6f0ea0 <col:59> '<bound member function type>' ->size 0xa69e550
                    (CXXThisExpr 0xa6f0e90 <col:59> 'vector<_Tp, _Alloc> *' this))))
              (CXXDependentScopeMemberExpr 0xa6f0f98 <line:189:8, col:20> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f0f60 <col:8, col:12> '<dependent type>' lvalue
                  (DeclRefExpr 0xa6f0f44 <col:8> 'const vector<_Tp, _Alloc>':'const vector<_Tp, _Alloc>' lvalue ParmVar 0xa6ef9b0 '__x' 'const vector<_Tp, _Alloc> &')))
              (CXXDependentScopeMemberExpr 0xa6f1018 <line:190:8, col:22> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f0fe0 <col:8, col:14> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f0fd0 <col:8> 'vector<_Tp, _Alloc> *' this)))
              (CallExpr 0xa6f1088 <line:191:8, col:28> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f104c <col:8> '<dependent type>' lvalue))))))
      (BinaryOperator 0xa6f12b0 <line:193:4, col:55> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f1178 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f1140 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f1130 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6f1288 <col:30, col:55> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f1248 <col:53, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CXXDependentScopeMemberExpr 0xa6f11f8 <col:30, col:44> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f11c0 <col:30, col:36> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f11b0 <col:30> 'vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6f122c <col:55> 'const size_type':'const unsigned int' lvalue Var 0xa6efcb0 '__xlen' 'const size_type':'const unsigned int'))))
    <<<NULL>>>)
  (ReturnStmt 0xa6f1330 <line:195:7, col:15>
    (UnaryOperator 0xa6f1318 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa6f1308 <col:15> 'vector<_Tp, _Alloc> *' this))))


    void _M_fill_assign(size_t __n, const value_type &__val) (CompoundStmt 0xa6f21c8 </usr/include/c++/4.6/bits/vector.tcc:202:5, line:218:5>
  (IfStmt 0xa6f21a8 <line:203:7, line:217:72>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6f1810 <line:203:11, col:26> '<dependent type>'
      (UnresolvedLookupExpr 0xa6f17d0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa6f1768 <col:11> 'size_t':'unsigned int' lvalue ParmVar 0xa6f1600 '__n' 'size_t':'unsigned int')
      (CallExpr 0xa6f17b0 <col:17, col:26> '<dependent type>'
        (MemberExpr 0xa6f1790 <col:17> '<bound member function type>' ->capacity 0xa69e7a0
          (CXXThisExpr 0xa6f1780 <col:17> 'vector<_Tp, _Alloc> *' this))))
    (CompoundStmt 0xa6f19d0 <line:204:2, line:207:2>
      (DeclStmt 0xa6f1928 <line:205:4, col:51>
        0xa6f1840 "vector<_Tp, _Alloc> __tmp =
          (ParenListExpr 0xa6f1900 <col:16, col:50> 'vector<_Tp, _Alloc>'
            (DeclRefExpr 0xa6f1874 <col:17> 'size_t':'unsigned int' lvalue ParmVar 0xa6f1600 '__n' 'size_t':'unsigned int')
            (DeclRefExpr 0xa6f188c <col:22> 'const value_type':'const _Tp' lvalue ParmVar 0xa6f1650 '__val' 'const value_type &')
            (CallExpr 0xa6f18e0 <col:29, col:49> '<dependent type>'
              (UnresolvedMemberExpr 0xa6f18a4 <col:29> '<dependent type>' lvalue)))")
      (CallExpr 0xa6f19b0 <line:206:4, col:20> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6f1950 <col:4, col:10> '<dependent type>' lvalue
          (DeclRefExpr 0xa6f1938 <col:4> 'vector<_Tp, _Alloc>' lvalue Var 0xa6f1840 '__tmp' 'vector<_Tp, _Alloc>'))
        (UnaryOperator 0xa6f1998 <col:15, col:16> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa6f1988 <col:16> 'vector<_Tp, _Alloc> *' this))))
    (IfStmt 0xa6f2188 <line:208:12, line:217:72>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa6f1a90 <line:208:16, col:27> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f1a50 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
        (DeclRefExpr 0xa6f19e8 <col:16> 'size_t':'unsigned int' lvalue ParmVar 0xa6f1600 '__n' 'size_t':'unsigned int')
        (CallExpr 0xa6f1a30 <col:22, col:27> '<dependent type>'
          (MemberExpr 0xa6f1a10 <col:22> '<bound member function type>' ->size 0xa69e550
            (CXXThisExpr 0xa6f1a00 <col:22> 'vector<_Tp, _Alloc> *' this))))
      (CompoundStmt 0xa6f1ff0 <line:209:2, line:215:2>
        (CallExpr 0xa6f1c08 <line:210:4, col:35> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f1ad8 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
          (CallExpr 0xa6f1b60 <col:14, col:20> '<dependent type>'
            (UnresolvedMemberExpr 0xa6f1b20 <col:14> '<bound member function type>' lvalue))
          (CallExpr 0xa6f1bd0 <col:23, col:27> '<dependent type>'
            (UnresolvedMemberExpr 0xa6f1b90 <col:23> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa6f1bec <col:30> 'const value_type':'const _Tp' lvalue ParmVar 0xa6f1650 '__val' 'const value_type &'))
        (CallExpr 0xa6f1e50 <line:211:4, line:213:27> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f1c58 <line:211:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6911f0 0xa692550)
          (CXXDependentScopeMemberExpr 0xa6f1cd8 <col:34, col:48> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f1ca0 <col:34, col:40> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f1c90 <col:34> 'vector<_Tp, _Alloc> *' this)))
          (CXXOperatorCallExpr 0xa6f1db8 <line:212:6, col:17> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f1d78 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa6f1d0c <col:6> 'size_t':'unsigned int' lvalue ParmVar 0xa6f1600 '__n' 'size_t':'unsigned int')
            (CallExpr 0xa6f1d58 <col:12, col:17> '<dependent type>'
              (MemberExpr 0xa6f1d38 <col:12> '<bound member function type>' ->size 0xa69e550
                (CXXThisExpr 0xa6f1d28 <col:12> 'vector<_Tp, _Alloc> *' this))))
          (DeclRefExpr 0xa6f1ddc <col:20> 'const value_type':'const _Tp' lvalue ParmVar 0xa6f1650 '__val' 'const value_type &')
          (CallExpr 0xa6f1e30 <line:213:6, col:26> '<dependent type>'
            (UnresolvedMemberExpr 0xa6f1df4 <col:6> '<dependent type>' lvalue)))
        (CompoundAssignOperator 0xa6f1fd0 <line:214:4, col:42> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
          (CXXDependentScopeMemberExpr 0xa6f1ec8 <col:4, col:18> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f1e90 <col:4, col:10> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f1e80 <col:4> 'vector<_Tp, _Alloc> *' this)))
          (CXXOperatorCallExpr 0xa6f1fa8 <col:31, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f1f68 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa6f1efc <col:31> 'size_t':'unsigned int' lvalue ParmVar 0xa6f1600 '__n' 'size_t':'unsigned int')
            (CallExpr 0xa6f1f48 <col:37, col:42> '<dependent type>'
              (MemberExpr 0xa6f1f28 <col:37> '<bound member function type>' ->size 0xa69e550
                (CXXThisExpr 0xa6f1f18 <col:37> 'vector<_Tp, _Alloc> *' this))))))
      (CallExpr 0xa6f2168 <line:217:9, col:72> '<dependent type>'
        (MemberExpr 0xa6f2020 <col:9> '<bound member function type>' ->_M_erase_at_end 0xa6a8b90
          (CXXThisExpr 0xa6f2010 <col:9> 'vector<_Tp, _Alloc> *' this))
        (CallExpr 0xa6f2140 <col:25, col:71> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f2058 <col:25, col:30> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6580c0)
          (CXXDependentScopeMemberExpr 0xa6f20d8 <col:37, col:51> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f20a0 <col:37, col:43> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f2090 <col:37> 'vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6f210c <col:61> 'size_t':'unsigned int' lvalue ParmVar 0xa6f1600 '__n' 'size_t':'unsigned int')
          (DeclRefExpr 0xa6f2124 <col:66> 'const value_type':'const _Tp' lvalue ParmVar 0xa6f1650 '__val' 'const value_type &'))))))


    template <typename _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6f2d68 </usr/include/c++/4.6/bits/vector.tcc:226:7, line:235:7>
  (DeclStmt 0xa6f2838 <line:227:2, col:39>
    0xa6f2760 "pointer __cur =
      (ParenListExpr 0xa6f2818 <col:15, col:38> 'pointer':'typename _Tp_alloc_type::pointer'
        (CXXDependentScopeMemberExpr 0xa6f27e0 <col:16, col:30> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f27a8 <col:16, col:22> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f2798 <col:16> 'vector<_Tp, _Alloc> *' this))))")
  (ForStmt 0xa6f2af8 <line:228:2, line:230:14>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa6f29f0 <line:228:9, col:53> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa6f28c0 <col:9, col:20> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f2878 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
        (DeclRefExpr 0xa6f2848 <col:9> '_InputIterator' lvalue ParmVar 0xa6f2500 '__first' '_InputIterator')
        (DeclRefExpr 0xa6f2860 <col:20> '_InputIterator' lvalue ParmVar 0xa6f2540 '__last' '_InputIterator'))
      (CXXOperatorCallExpr 0xa6f29c8 <col:30, col:53> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f2980 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
        (DeclRefExpr 0xa6f28e4 <col:30> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f2760 '__cur' 'pointer':'typename _Tp_alloc_type::pointer')
        (CXXDependentScopeMemberExpr 0xa6f2948 <col:39, col:53> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f2910 <col:39, col:45> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f2900 <col:39> 'vector<_Tp, _Alloc> *' this)))))
    (BinaryOperator 0xa6f2a68 <line:229:7, col:18> '<dependent type>' ','
      (UnaryOperator 0xa6f2a20 <col:7, col:9> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6f2a08 <col:9> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f2760 '__cur' 'pointer':'typename _Tp_alloc_type::pointer'))
      (UnaryOperator 0xa6f2a50 <col:16, col:18> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6f2a34 <col:18> '_InputIterator' lvalue ParmVar 0xa6f2500 '__first' '_InputIterator')))
    (BinaryOperator 0xa6f2ae0 <line:230:4, col:14> '<dependent type>' '='
      (UnaryOperator 0xa6f2a98 <col:4, col:5> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa6f2a80 <col:5> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f2760 '__cur' 'pointer':'typename _Tp_alloc_type::pointer'))
      (UnaryOperator 0xa6f2ac8 <col:13, col:14> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa6f2aac <col:14> '_InputIterator' lvalue ParmVar 0xa6f2500 '__first' '_InputIterator'))))
  (IfStmt 0xa6f2d48 <line:231:2, line:234:33>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6f2b98 <line:231:6, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa6f2b50 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050)
      (DeclRefExpr 0xa6f2b1c <col:6> '_InputIterator' lvalue ParmVar 0xa6f2500 '__first' '_InputIterator')
      (DeclRefExpr 0xa6f2b34 <col:17> '_InputIterator' lvalue ParmVar 0xa6f2540 '__last' '_InputIterator'))
    (CallExpr 0xa6f2c08 <line:232:4, col:25> '<dependent type>'
      (MemberExpr 0xa6f2bd0 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6a8b90
        (CXXThisExpr 0xa6f2bc0 <col:4> 'vector<_Tp, _Alloc> *' this))
      (DeclRefExpr 0xa6f2bf0 <col:20> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f2760 '__cur' 'pointer':'typename _Tp_alloc_type::pointer'))
    (CallExpr 0xa6f2d20 <line:234:4, col:33> '<dependent type>'
      (UnresolvedMemberExpr 0xa6f2c38 <col:4> '<bound member function type>' lvalue)
      (CallExpr 0xa6f2cd0 <col:11, col:15> '<dependent type>'
        (UnresolvedMemberExpr 0xa6f2c90 <col:11> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa6f2cec <col:18> '_InputIterator' lvalue ParmVar 0xa6f2500 '__first' '_InputIterator')
      (DeclRefExpr 0xa6f2d04 <col:27> '_InputIterator' lvalue ParmVar 0xa6f2540 '__last' '_InputIterator'))))

;
    template <typename _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) (CompoundStmt 0xa6f4510 </usr/include/c++/4.6/bits/vector.tcc:243:7, line:270:7>
  (DeclStmt 0xa6f33d0 <line:244:2, col:56>
    0xa6f32f0 "const size_type __len =
      (CallExpr 0xa6f33a8 <col:26, col:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f3340 <col:26, col:31> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
        (DeclRefExpr 0xa6f3374 <col:40> '_ForwardIterator' lvalue ParmVar 0xa6f3090 '__first' '_ForwardIterator')
        (DeclRefExpr 0xa6f338c <col:49> '_ForwardIterator' lvalue ParmVar 0xa6f30d0 '__last' '_ForwardIterator'))")
  (IfStmt 0xa6f44f0 <line:246:2, line:269:4>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6f3488 <line:246:6, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa6f3448 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa6f33e0 <col:6> 'const size_type':'const unsigned int' lvalue Var 0xa6f32f0 '__len' 'const size_type':'const unsigned int')
      (CallExpr 0xa6f3428 <col:14, col:23> '<dependent type>'
        (MemberExpr 0xa6f3408 <col:14> '<bound member function type>' ->capacity 0xa69e7a0
          (CXXThisExpr 0xa6f33f8 <col:14> 'vector<_Tp, _Alloc> *' this))))
    (CompoundStmt 0xa6f3d80 <line:247:4, line:257:4>
      (DeclStmt 0xa6f35d8 <line:248:6, col:65>
        0xa6f34c0 "pointer __tmp =
          (ParenListExpr 0xa6f35b8 <col:19, col:64> 'pointer':'typename _Tp_alloc_type::pointer'
            (CallExpr 0xa6f3590 <col:20, col:63> '<dependent type>'
              (UnresolvedMemberExpr 0xa6f3508 <col:20> '<bound member function type>' lvalue)
              (DeclRefExpr 0xa6f3544 <col:41> 'const size_type':'const unsigned int' lvalue Var 0xa6f32f0 '__len' 'const size_type':'const unsigned int')
              (DeclRefExpr 0xa6f355c <col:48> '_ForwardIterator' lvalue ParmVar 0xa6f3090 '__first' '_ForwardIterator')
              (DeclRefExpr 0xa6f3574 <col:57> '_ForwardIterator' lvalue ParmVar 0xa6f30d0 '__last' '_ForwardIterator')))")
      (CallExpr 0xa6f37a8 <line:249:6, line:250:27> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f3610 <line:249:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (CXXDependentScopeMemberExpr 0xa6f3698 <col:20, col:34> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f3660 <col:20, col:26> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f3650 <col:20> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6f3718 <col:44, col:58> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f36e0 <col:44, col:50> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f36d0 <col:44> 'vector<_Tp, _Alloc> *' this)))
        (CallExpr 0xa6f3788 <line:250:6, col:26> '<dependent type>'
          (UnresolvedMemberExpr 0xa6f374c <col:6> '<dependent type>' lvalue)))
      (CallExpr 0xa6f39f8 <line:251:6, line:253:30> '<dependent type>'
        (UnresolvedMemberExpr 0xa6f37d0 <line:251:6> '<dependent type>' lvalue)
        (CXXDependentScopeMemberExpr 0xa6f3858 <col:20, col:34> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f3820 <col:20, col:26> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f3810 <col:20> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6f39d0 <line:252:6, line:253:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f3990 <col:6, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CXXDependentScopeMemberExpr 0xa6f38d8 <line:252:6, col:20> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f38a0 <col:6, col:12> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f3890 <col:6> 'vector<_Tp, _Alloc> *' this)))
          (CXXDependentScopeMemberExpr 0xa6f3958 <line:253:8, col:22> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f3920 <col:8, col:14> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f3910 <col:8> 'vector<_Tp, _Alloc> *' this)))))
      (BinaryOperator 0xa6f3ab8 <line:254:6, col:31> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f3a68 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f3a30 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f3a20 <col:6> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6f3a9c <col:31> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f34c0 '__tmp' 'pointer':'typename _Tp_alloc_type::pointer'))
      (BinaryOperator 0xa6f3c50 <line:255:6, col:57> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f3b18 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f3ae0 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f3ad0 <col:6> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6f3c28 <col:32, col:57> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f3be8 <col:55, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CXXDependentScopeMemberExpr 0xa6f3b98 <col:32, col:46> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f3b60 <col:32, col:38> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f3b50 <col:32> 'vector<_Tp, _Alloc> *' this)))
          (DeclRefExpr 0xa6f3bcc <col:57> 'const size_type':'const unsigned int' lvalue Var 0xa6f32f0 '__len' 'const size_type':'const unsigned int')))
      (BinaryOperator 0xa6f3d68 <line:256:6, col:54> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f3cb0 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f3c78 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f3c68 <col:6> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6f3d30 <col:40, col:54> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f3cf8 <col:40, col:46> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f3ce8 <col:40> 'vector<_Tp, _Alloc> *' this)))))
    (IfStmt 0xa6f44d0 <line:258:7, line:269:4>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa6f3e50 <line:258:11, col:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f3e10 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
        (CallExpr 0xa6f3dd8 <col:11, col:16> '<dependent type>'
          (MemberExpr 0xa6f3db8 <col:11> '<bound member function type>' ->size 0xa69e550
            (CXXThisExpr 0xa6f3da8 <col:11> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6f3df4 <col:21> 'const size_type':'const unsigned int' lvalue Var 0xa6f32f0 '__len' 'const size_type':'const unsigned int'))
      (CallExpr 0xa6f3fd0 <line:259:4, col:70> '<dependent type>'
        (MemberExpr 0xa6f3e88 <col:4> '<bound member function type>' ->_M_erase_at_end 0xa6a8b90
          (CXXThisExpr 0xa6f3e78 <col:4> 'vector<_Tp, _Alloc> *' this))
        (CallExpr 0xa6f3fa8 <col:20, col:69> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f3ec0 <col:20, col:25> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
          (DeclRefExpr 0xa6f3ef4 <col:30> '_ForwardIterator' lvalue ParmVar 0xa6f3090 '__first' '_ForwardIterator')
          (DeclRefExpr 0xa6f3f0c <col:39> '_ForwardIterator' lvalue ParmVar 0xa6f30d0 '__last' '_ForwardIterator')
          (CXXDependentScopeMemberExpr 0xa6f3f70 <col:47, col:61> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f3f38 <col:47, col:53> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f3f28 <col:47> 'vector<_Tp, _Alloc> *' this)))))
      (CompoundStmt 0xa6f44b0 <line:261:4, line:269:4>
        (DeclStmt 0xa6f4050 <line:262:6, col:38>
          0xa6f4000 "_ForwardIterator __mid =
            (DeclRefExpr 0xa6f4034 <col:31> '_ForwardIterator' lvalue ParmVar 0xa6f3090 '__first' '_ForwardIterator')")
        (CallExpr 0xa6f4128 <line:263:6, col:32> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f4088 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61d500)
          (DeclRefExpr 0xa6f40bc <col:19> '_ForwardIterator' lvalue Var 0xa6f4000 '__mid' '_ForwardIterator')
          (CallExpr 0xa6f4108 <col:26, col:31> '<dependent type>'
            (MemberExpr 0xa6f40e8 <col:26> '<bound member function type>' ->size 0xa69e550
              (CXXThisExpr 0xa6f40d8 <col:26> 'vector<_Tp, _Alloc> *' this))))
        (CallExpr 0xa6f4258 <line:264:6, col:54> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f4170 <col:6, col:11> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
          (DeclRefExpr 0xa6f41a4 <col:16> '_ForwardIterator' lvalue ParmVar 0xa6f3090 '__first' '_ForwardIterator')
          (DeclRefExpr 0xa6f41bc <col:25> '_ForwardIterator' lvalue Var 0xa6f4000 '__mid' '_ForwardIterator')
          (CXXDependentScopeMemberExpr 0xa6f4220 <col:32, col:46> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f41e8 <col:32, col:38> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f41d8 <col:32> 'vector<_Tp, _Alloc> *' this))))
        (BinaryOperator 0xa6f4498 <line:265:6, line:268:29> '<dependent type>' '='
          (CXXDependentScopeMemberExpr 0xa6f42d8 <line:265:6, col:20> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f42a0 <col:6, col:12> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f4290 <col:6> 'vector<_Tp, _Alloc> *' this)))
          (CallExpr 0xa6f4468 <line:266:8, line:268:29> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f4328 <line:266:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
            (DeclRefExpr 0xa6f4360 <col:36> '_ForwardIterator' lvalue Var 0xa6f4000 '__mid' '_ForwardIterator')
            (DeclRefExpr 0xa6f4378 <col:43> '_ForwardIterator' lvalue ParmVar 0xa6f30d0 '__last' '_ForwardIterator')
            (CXXDependentScopeMemberExpr 0xa6f43d8 <line:267:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f43a0 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f4390 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (CallExpr 0xa6f4448 <line:268:8, col:28> '<dependent type>'
              (UnresolvedMemberExpr 0xa6f440c <col:8> '<dependent type>' lvalue))))))))

;
    void _M_insert_aux(iterator __position, const _Tp &__x) (CompoundStmt 0xa6f6708 </usr/include/c++/4.6/bits/vector.tcc:303:5, line:373:5>
  (IfStmt 0xa6f66e8 <line:304:7, line:372:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6f4aa0 <line:304:11, col:52> '<dependent type>'
      (UnresolvedLookupExpr 0xa6f4a58 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (CXXDependentScopeMemberExpr 0xa6f49a0 <col:11, col:25> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6f4968 <col:11, col:17> '<dependent type>' lvalue
          (CXXThisExpr 0xa6f4958 <col:11> 'vector<_Tp, _Alloc> *' this)))
      (CXXDependentScopeMemberExpr 0xa6f4a20 <col:38, col:52> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa6f49e8 <col:38, col:44> '<dependent type>' lvalue
          (CXXThisExpr 0xa6f49d8 <col:38> 'vector<_Tp, _Alloc> *' this))))
    (CompoundStmt 0xa6f5198 <line:305:2, line:321:2>
      (CallExpr 0xa6f4d10 <line:306:4, line:308:14> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6f4b10 <line:306:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f4ad8 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f4ac8 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6f4b90 <col:28, col:42> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f4b58 <col:28, col:34> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f4b48 <col:28> 'vector<_Tp, _Alloc> *' this)))
        (ParenExpr 0xa6f4cf8 </usr/include/c++/4.6/bits/move.h:105:30, col:36> '<dependent type>'
          (UnaryOperator 0xa6f4ce0 </usr/include/c++/4.6/bits/vector.tcc:307:21, line:308:12> '<dependent type>' prefix '*'
            (ParenExpr 0xa6f4cc8 <line:307:22, line:308:12> '<dependent type>'
              (CXXOperatorCallExpr 0xa6f4ca0 <line:307:23, line:308:11> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f4c60 <col:9, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                (CXXDependentScopeMemberExpr 0xa6f4c10 <line:307:23, col:37> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f4bd8 <col:23, col:29> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f4bc8 <col:23> 'vector<_Tp, _Alloc> *' this)))
                (IntegerLiteral 0xa6f4c48 <line:308:11> 'int' 1))))))
      (UnaryOperator 0xa6f4db8 <line:309:4, col:20> '<dependent type>' prefix '++'
        (CXXDependentScopeMemberExpr 0xa6f4d80 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f4d48 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f4d38 <col:6> 'vector<_Tp, _Alloc> *' this))))
      (DeclStmt 0xa6f4e30 <line:311:4, col:22>
        0xa6f4de0 "_Tp __x_copy =
          (DeclRefExpr 0xa6f4e14 <col:19> 'const _Tp' lvalue ParmVar 0xa6f4840 '__x' 'const _Tp &')")
      (CallExpr 0xa6f5110 </usr/include/c++/4.6/bits/stl_algobase.h:666:48, col:80> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f4e68 <col:48, col:53> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653060)
        (CallExpr 0xa6f4ef0 </usr/include/c++/4.6/bits/vector.tcc:313:28, col:44> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa6f4eb8 <col:28, col:39> '<dependent type>' lvalue
            (DeclRefExpr 0xa6f4e9c <col:28> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f47d0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
        (CXXOperatorCallExpr 0xa6f4fe8 <line:314:7, col:33> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f4fa8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CXXDependentScopeMemberExpr 0xa6f4f58 <col:7, col:21> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f4f20 <col:7, col:13> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f4f10 <col:7> 'vector<_Tp, _Alloc> *' this)))
          (IntegerLiteral 0xa6f4f90 <col:33> 'int' 2))
        (CXXOperatorCallExpr 0xa6f50e8 <line:315:7, col:33> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f50a8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CXXDependentScopeMemberExpr 0xa6f5058 <col:7, col:21> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f5020 <col:7, col:13> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f5010 <col:7> 'vector<_Tp, _Alloc> *' this)))
          (IntegerLiteral 0xa6f5090 <col:33> 'int' 1)))
      (BinaryOperator 0xa6f5180 <line:317:4, col:18> '<dependent type>' '='
        (UnaryOperator 0xa6f5150 <col:4, col:5> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa6f5138 <col:5> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f47d0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))
        (DeclRefExpr 0xa6f5164 <col:18> '_Tp' lvalue Var 0xa6f4de0 '__x_copy' '_Tp')))
    (CompoundStmt 0xa6f66a8 <line:323:2, line:372:2>
      (DeclStmt 0xa6f5320 <line:324:4, line:325:57>
        0xa6f51d0 "const size_type __len =
          (CallExpr 0xa6f52f8 <col:6, col:56> '<dependent type>'
            (MemberExpr 0xa6f5218 <col:6> '<bound member function type>' ->_M_check_len 0xa6a8a80
              (CXXThisExpr 0xa6f5208 <col:6> 'vector<_Tp, _Alloc> *' this))
            (CXXFunctionalCastExpr 0xa6f5268 <col:19, col:30> 'size_type':'unsigned int' functional cast to size_type <NoOp>
              (ImplicitCastExpr 0xa6f5258 <col:29> 'size_type':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa6f5240 <col:29> 'int' 1)))
            (StringLiteral 0xa6f52c0 <col:33> 'const char [22]' lvalue "vector::_M_insert_aux"))")
      (DeclStmt 0xa6f5468 <line:326:4, col:57>
        0xa6f5340 "const size_type __elems_before =
          (CXXOperatorCallExpr 0xa6f5440 <col:37, col:56> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f5400 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa6f5374 <col:37> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f47d0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
            (CallExpr 0xa6f53e0 <col:50, col:56> '<dependent type>'
              (UnresolvedMemberExpr 0xa6f53a0 <col:50> '<bound member function type>' lvalue)))")
      (DeclStmt 0xa6f5558 <line:327:4, col:49>
        0xa6f5480 "pointer __new_start =
          (ParenListExpr 0xa6f5538 <col:23, col:48> 'pointer':'typename _Tp_alloc_type::pointer'
            (CallExpr 0xa6f5518 <col:24, col:47> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa6f54c8 <col:24, col:30> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f54b8 <col:24> 'vector<_Tp, _Alloc> *' this))
              (DeclRefExpr 0xa6f54fc <col:42> 'const size_type':'const unsigned int' lvalue Var 0xa6f51d0 '__len' 'const size_type':'const unsigned int')))")
      (DeclStmt 0xa6f55e0 <line:328:4, col:37>
        0xa6f5570 "pointer __new_finish =
          (ParenListExpr 0xa6f55c0 <col:24, col:36> 'pointer':'typename _Tp_alloc_type::pointer'
            (DeclRefExpr 0xa6f55a4 <col:25> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer'))")
      (IfStmt 0xa6f5c18 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/vector.tcc:354:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa6f55f0 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
        (CompoundStmt 0xa6f5bf0 </usr/include/c++/4.6/bits/vector.tcc:330:6, line:354:6>
          (CallExpr 0xa6f5730 <line:335:8, line:339:35> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6f5648 <line:335:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f5610 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f5600 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6f56f0 <col:32, col:46> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f56b0 <col:44, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
              (DeclRefExpr 0xa6f567c <col:32> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
              (DeclRefExpr 0xa6f5694 <col:46> 'const size_type':'const unsigned int' lvalue Var 0xa6f5340 '__elems_before' 'const size_type':'const unsigned int'))
            (DeclRefExpr 0xa6f5714 <line:339:32> 'const _Tp' lvalue ParmVar 0xa6f4840 '__x' 'const _Tp &'))
          (BinaryOperator 0xa6f5788 <line:341:8, col:23> '<dependent type>' '='
            (DeclRefExpr 0xa6f5754 <col:8> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
            (IntegerLiteral 0xa6f5770 <col:23> 'int' 0))
          (BinaryOperator 0xa6f5998 <line:343:8, line:346:31> '<dependent type>' '='
            (DeclRefExpr 0xa6f57a0 <line:343:8> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
            (CallExpr 0xa6f5968 <line:344:3, line:346:31> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f57d0 <line:344:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
              (CXXDependentScopeMemberExpr 0xa6f5850 <col:31, col:45> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f5818 <col:31, col:37> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f5808 <col:31> 'vector<_Tp, _Alloc> *' this)))
              (CallExpr 0xa6f58d8 <line:345:10, col:26> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6f58a0 <col:10, col:21> '<dependent type>' lvalue
                  (DeclRefExpr 0xa6f5884 <col:10> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f47d0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
              (DeclRefExpr 0xa6f58f4 <col:29> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
              (CallExpr 0xa6f5948 <line:346:10, col:30> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f590c <col:10> '<dependent type>' lvalue))))
          (UnaryOperator 0xa6f59c8 <line:347:8, col:10> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa6f59b0 <col:10> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
          (BinaryOperator 0xa6f5bd8 <line:349:8, line:353:31> '<dependent type>' '='
            (DeclRefExpr 0xa6f59dc <line:349:8> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
            (CallExpr 0xa6f5ba8 <line:350:3, line:353:31> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f5a10 <line:350:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
              (CallExpr 0xa6f5a98 <col:31, col:47> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6f5a60 <col:31, col:42> '<dependent type>' lvalue
                  (DeclRefExpr 0xa6f5a44 <col:31> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f47d0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
              (CXXDependentScopeMemberExpr 0xa6f5b00 <line:351:10, col:24> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f5ac8 <col:10, col:16> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f5ab8 <col:10> 'vector<_Tp, _Alloc> *' this)))
              (DeclRefExpr 0xa6f5b34 <line:352:10> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
              (CallExpr 0xa6f5b88 <line:353:10, col:30> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f5b4c <col:10> '<dependent type>' lvalue)))))
        <<<NULL>>>)
      (IfStmt 0xa6f5fb0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/vector.tcc:363:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa6f5c38 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa6f5f90 </usr/include/c++/4.6/bits/vector.tcc:356:6, line:363:6>
          (IfStmt 0xa6f5ed0 <line:357:8, line:360:65>
            <<<NULL>>>
            (UnaryOperator 0xa6f5c60 <line:357:12, col:13> '<dependent type>' prefix '!'
              (DeclRefExpr 0xa6f5c48 <col:13> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
            (CallExpr 0xa6f5d90 <line:358:3, col:53> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa6f5cc0 <col:3, col:17> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f5c88 <col:3, col:9> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f5c78 <col:3> 'vector<_Tp, _Alloc> *' this)))
              (CXXOperatorCallExpr 0xa6f5d68 <col:25, col:39> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f5d28 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                (DeclRefExpr 0xa6f5cf4 <col:25> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                (DeclRefExpr 0xa6f5d0c <col:39> 'const size_type':'const unsigned int' lvalue Var 0xa6f5340 '__elems_before' 'const size_type':'const unsigned int')))
            (CallExpr 0xa6f5ea8 <line:360:3, col:65> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f5dd8 <col:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
              (DeclRefExpr 0xa6f5e18 <col:17> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
              (DeclRefExpr 0xa6f5e30 <col:30> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
              (CallExpr 0xa6f5e88 <col:44, col:64> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f5e48 <col:44> '<dependent type>' lvalue))))
          (CallExpr 0xa6f5f58 <line:361:8, col:40> '<dependent type>'
            (UnresolvedMemberExpr 0xa6f5eec <col:8> '<dependent type>' lvalue)
            (DeclRefExpr 0xa6f5f28 <col:22> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
            (DeclRefExpr 0xa6f5f40 <col:35> 'const size_type':'const unsigned int' lvalue Var 0xa6f51d0 '__len' 'const size_type':'const unsigned int'))
          (NullStmt 0xa6f5f80 <line:362:31>))
        <<<NULL>>>)
      (CallExpr 0xa6f6188 <line:364:4, line:365:25> '<dependent type>'
        (UnresolvedLookupExpr 0xa6f5ff0 <line:364:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
        (CXXDependentScopeMemberExpr 0xa6f6078 <col:18, col:32> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f6040 <col:18, col:24> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f6030 <col:18> 'vector<_Tp, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa6f60f8 <col:42, col:56> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f60c0 <col:42, col:48> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f60b0 <col:42> 'vector<_Tp, _Alloc> *' this)))
        (CallExpr 0xa6f6168 <line:365:4, col:24> '<dependent type>'
          (UnresolvedMemberExpr 0xa6f612c <col:4> '<dependent type>' lvalue)))
      (CallExpr 0xa6f63f0 <line:366:4, line:368:28> '<dependent type>'
        (UnresolvedMemberExpr 0xa6f61b0 <line:366:4> '<dependent type>' lvalue)
        (CXXDependentScopeMemberExpr 0xa6f6238 <col:18, col:32> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f6200 <col:18, col:24> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f61f0 <col:18> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6f63c8 <line:367:4, line:368:20> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f6388 <col:4, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CXXDependentScopeMemberExpr 0xa6f62d0 <line:367:4, col:18> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f6298 <col:4, col:10> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f6288 <col:4> 'vector<_Tp, _Alloc> *' this)))
          (CXXDependentScopeMemberExpr 0xa6f6350 <line:368:6, col:20> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6f6318 <col:6, col:12> '<dependent type>' lvalue
              (CXXThisExpr 0xa6f6308 <col:6> 'vector<_Tp, _Alloc> *' this)))))
      (BinaryOperator 0xa6f64b0 <line:369:4, col:29> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f6460 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f6428 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f6418 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6f6494 <col:29> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer'))
      (BinaryOperator 0xa6f6560 <line:370:4, col:30> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f6510 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f64d8 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f64c8 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (DeclRefExpr 0xa6f6544 <col:30> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5570 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
      (BinaryOperator 0xa6f6690 <line:371:4, col:52> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6f65c0 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6f6588 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6f6578 <col:4> 'vector<_Tp, _Alloc> *' this)))
        (CXXOperatorCallExpr 0xa6f6668 <col:38, col:52> '<dependent type>'
          (UnresolvedLookupExpr 0xa6f6628 <col:50, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (DeclRefExpr 0xa6f65f4 <col:38> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f5480 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
          (DeclRefExpr 0xa6f660c <col:52> 'const size_type':'const unsigned int' lvalue Var 0xa6f51d0 '__len' 'const size_type':'const unsigned int'))))))


    void _M_fill_insert(iterator __position, size_type __n, const value_type &__x) (CompoundStmt 0xa6f9618 </usr/include/c++/4.6/bits/vector.tcc:379:5, line:464:5>
  (IfStmt 0xa6f95f8 <line:380:7, line:463:2>
    <<<NULL>>>
    (BinaryOperator 0xa6f6ba0 <line:380:11, col:18> '_Bool' '!='
      (ImplicitCastExpr 0xa6f6b80 <col:11> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa6f6b4c <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
      (ImplicitCastExpr 0xa6f6b90 <col:18> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa6f6b68 <col:18> 'int' 0)))
    (CompoundStmt 0xa6f95e0 <line:381:2, line:463:2>
      (IfStmt 0xa6f95c0 <line:382:4, line:462:6>
        <<<NULL>>>
        (BinaryOperator 0xa6f6d70 <line:382:8, line:383:34> '_Bool' '>='
          (CXXUnresolvedConstructExpr 0xa6f6d28 <line:382:8, line:383:29> 'size_type':'unsigned int'
            (CXXOperatorCallExpr 0xa6f6d00 <line:382:18, line:383:20> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f6cc0 <col:4, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (CXXDependentScopeMemberExpr 0xa6f6c08 <line:382:18, col:32> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f6bd0 <col:18, col:24> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f6bc0 <col:18> 'vector<_Tp, _Alloc> *' this)))
              (CXXDependentScopeMemberExpr 0xa6f6c88 <line:383:6, col:20> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f6c50 <col:6, col:12> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f6c40 <col:6> 'vector<_Tp, _Alloc> *' this)))))
          (ImplicitCastExpr 0xa6f6d60 <col:34> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa6f6d44 <col:34> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int')))
        (CompoundStmt 0xa6f7f08 <line:384:6, line:413:6>
          (DeclStmt 0xa6f6de0 <line:385:8, col:33>
            0xa6f6d90 "value_type __x_copy =
              (DeclRefExpr 0xa6f6dc4 <col:30> 'const value_type':'const _Tp' lvalue ParmVar 0xa6f6a50 '__x' 'const value_type &')")
          (DeclStmt 0xa6f6f28 <line:386:8, col:58>
            0xa6f6e00 "const size_type __elems_after =
              (CXXOperatorCallExpr 0xa6f6f00 <col:40, col:48> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f6ec0 <col:46, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                (CallExpr 0xa6f6e88 <col:40, col:44> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f6e48 <col:40> '<bound member function type>' lvalue))
                (DeclRefExpr 0xa6f6ea4 <col:48> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))")
          (DeclStmt 0xa6f7018 <line:387:8, col:53>
            0xa6f6f40 "pointer __old_finish =
              (ParenListExpr 0xa6f6ff8 <col:28, col:52> 'pointer':'typename _Tp_alloc_type::pointer'
                (CXXDependentScopeMemberExpr 0xa6f6fc0 <col:29, col:43> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f6f88 <col:29, col:35> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f6f78 <col:29> 'vector<_Tp, _Alloc> *' this))))")
          (IfStmt 0xa6f7ee8 <line:388:8, line:412:3>
            <<<NULL>>>
            (BinaryOperator 0xa6f7078 <line:388:12, col:28> '_Bool' '>'
              (ImplicitCastExpr 0xa6f7058 <col:12> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6f7028 <col:12> 'const size_type':'const unsigned int' lvalue Var 0xa6f6e00 '__elems_after' 'const size_type':'const unsigned int'))
              (ImplicitCastExpr 0xa6f7068 <col:28> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6f7040 <col:28> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int')))
            (CompoundStmt 0xa6f77d8 <line:389:3, line:399:3>
              (CallExpr 0xa6f7348 <line:390:5, line:393:33> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f70b8 <line:390:5, col:10> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                (CXXOperatorCallExpr 0xa6f71c8 <col:33, col:59> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f7188 <col:57, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                  (CXXDependentScopeMemberExpr 0xa6f7138 <col:33, col:47> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6f7100 <col:33, col:39> '<dependent type>' lvalue
                      (CXXThisExpr 0xa6f70f0 <col:33> 'vector<_Tp, _Alloc> *' this)))
                  (DeclRefExpr 0xa6f716c <col:59> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
                (CXXDependentScopeMemberExpr 0xa6f7238 <line:391:12, col:26> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f7200 <col:12, col:18> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f71f0 <col:12> 'vector<_Tp, _Alloc> *' this)))
                (CXXDependentScopeMemberExpr 0xa6f72b8 <line:392:12, col:26> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f7280 <col:12, col:18> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f7270 <col:12> 'vector<_Tp, _Alloc> *' this)))
                (CallExpr 0xa6f7328 <line:393:12, col:32> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f72ec <col:12> '<dependent type>' lvalue)))
              (CompoundAssignOperator 0xa6f7410 <line:394:5, col:32> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6f73c0 <col:5, col:19> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f7388 <col:5, col:11> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f7378 <col:5> 'vector<_Tp, _Alloc> *' this)))
                (DeclRefExpr 0xa6f73f4 <col:32> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
              (CallExpr 0xa6f75b0 </usr/include/c++/4.6/bits/stl_algobase.h:666:48, col:80> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f7458 <col:48, col:53> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653060)
                (CallExpr 0xa6f74e0 </usr/include/c++/4.6/bits/vector.tcc:395:29, col:45> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f74a8 <col:29, col:40> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f748c <col:29> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                (CXXOperatorCallExpr 0xa6f7570 <line:396:8, col:23> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f7530 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                  (DeclRefExpr 0xa6f74fc <col:8> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f6f40 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                  (DeclRefExpr 0xa6f7514 <col:23> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
                (DeclRefExpr 0xa6f7594 <col:28> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f6f40 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
              (CallExpr 0xa6f77b0 <line:397:5, line:398:16> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f7600 <line:397:5, col:10> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
                (CallExpr 0xa6f7688 <col:15, col:31> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f7650 <col:15, col:26> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f7638 <col:15> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                (CXXOperatorCallExpr 0xa6f7770 <col:34, col:54> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f7730 <col:52, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                  (CallExpr 0xa6f76f8 <col:34, col:50> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa6f76c0 <col:34, col:45> '<dependent type>' lvalue
                      (DeclRefExpr 0xa6f76a4 <col:34> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                  (DeclRefExpr 0xa6f7714 <col:54> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
                (DeclRefExpr 0xa6f7794 <line:398:8> 'value_type':'_Tp' lvalue Var 0xa6f6d90 '__x_copy' 'value_type':'_Tp')))
            (CompoundStmt 0xa6f7ec0 <line:401:3, line:412:3>
              (CallExpr 0xa6f79b8 <line:402:5, line:405:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f7820 <line:402:5, col:10> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6911f0 0xa692550)
                (CXXDependentScopeMemberExpr 0xa6f78a0 <col:35, col:49> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f7868 <col:35, col:41> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f7858 <col:35> 'vector<_Tp, _Alloc> *' this)))
                (BinaryOperator 0xa6f7928 <line:403:7, col:13> 'unsigned int' '-'
                  (ImplicitCastExpr 0xa6f7908 <col:7> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6f78d4 <col:7> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
                  (ImplicitCastExpr 0xa6f7918 <col:13> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6f78ec <col:13> 'const size_type':'const unsigned int' lvalue Var 0xa6f6e00 '__elems_after' 'const size_type':'const unsigned int')))
                (DeclRefExpr 0xa6f7940 <line:404:7> 'value_type':'_Tp' lvalue Var 0xa6f6d90 '__x_copy' 'value_type':'_Tp')
                (CallExpr 0xa6f7998 <line:405:7, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f7958 <col:7> '<dependent type>' lvalue)))
              (CompoundAssignOperator 0xa6f7ad0 <line:406:5, col:38> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6f7a30 <col:5, col:19> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f79f8 <col:5, col:11> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f79e8 <col:5> 'vector<_Tp, _Alloc> *' this)))
                (BinaryOperator 0xa6f7ab8 <col:32, col:38> 'unsigned int' '-'
                  (ImplicitCastExpr 0xa6f7a98 <col:32> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6f7a64 <col:32> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
                  (ImplicitCastExpr 0xa6f7aa8 <col:38> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6f7a7c <col:38> 'const size_type':'const unsigned int' lvalue Var 0xa6f6e00 '__elems_after' 'const size_type':'const unsigned int'))))
              (CallExpr 0xa6f7cb0 <line:407:5, line:409:33> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f7b18 <line:407:5, col:10> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                (CallExpr 0xa6f7ba0 <col:33, col:49> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f7b68 <col:33, col:44> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f7b4c <col:33> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                (DeclRefExpr 0xa6f7bbc <col:52> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f6f40 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CXXDependentScopeMemberExpr 0xa6f7c20 <line:408:12, col:26> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f7be8 <col:12, col:18> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f7bd8 <col:12> 'vector<_Tp, _Alloc> *' this)))
                (CallExpr 0xa6f7c90 <line:409:12, col:32> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f7c54 <col:12> '<dependent type>' lvalue)))
              (CompoundAssignOperator 0xa6f7d78 <line:410:5, col:32> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6f7d28 <col:5, col:19> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6f7cf0 <col:5, col:11> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f7ce0 <col:5> 'vector<_Tp, _Alloc> *' this)))
                (DeclRefExpr 0xa6f7d5c <col:32> 'const size_type':'const unsigned int' lvalue Var 0xa6f6e00 '__elems_after' 'const size_type':'const unsigned int'))
              (CallExpr 0xa6f7e98 <line:411:5, col:56> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f7dc0 <col:5, col:10> '<overloaded function type>' lvalue (no ADL) = '1' 0xa655780 0xa6bf150)
                (CallExpr 0xa6f7e48 <col:15, col:31> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f7e10 <col:15, col:26> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6f7df8 <col:15> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                (DeclRefExpr 0xa6f7e64 <col:34> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f6f40 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (DeclRefExpr 0xa6f7e7c <col:48> 'value_type':'_Tp' lvalue Var 0xa6f6d90 '__x_copy' 'value_type':'_Tp')))))
        (CompoundStmt 0xa6f9580 <line:415:6, line:462:6>
          (DeclStmt 0xa6f8010 <line:416:8, line:417:46>
            0xa6f7f30 "const size_type __len =
              (CallExpr 0xa6f7fe8 <col:3, col:45> '<dependent type>'
                (MemberExpr 0xa6f7f78 <col:3> '<bound member function type>' ->_M_check_len 0xa6a8a80
                  (CXXThisExpr 0xa6f7f68 <col:3> 'vector<_Tp, _Alloc> *' this))
                (DeclRefExpr 0xa6f7f98 <col:16> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int')
                (StringLiteral 0xa6f7fb0 <col:21> 'const char [23]' lvalue "vector::_M_fill_insert"))")
          (DeclStmt 0xa6f8158 <line:418:8, col:61>
            0xa6f8030 "const size_type __elems_before =
              (CXXOperatorCallExpr 0xa6f8130 <col:41, col:60> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f80f0 <col:52, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                (DeclRefExpr 0xa6f8064 <col:41> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
                (CallExpr 0xa6f80d0 <col:54, col:60> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f8090 <col:54> '<bound member function type>' lvalue)))")
          (DeclStmt 0xa6f8248 <line:419:8, col:53>
            0xa6f8170 "pointer __new_start =
              (ParenListExpr 0xa6f8228 <col:27, col:52> 'pointer':'typename _Tp_alloc_type::pointer'
                (CallExpr 0xa6f8208 <col:28, col:51> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6f81b8 <col:28, col:34> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6f81a8 <col:28> 'vector<_Tp, _Alloc> *' this))
                  (DeclRefExpr 0xa6f81ec <col:46> 'const size_type':'const unsigned int' lvalue Var 0xa6f7f30 '__len' 'const size_type':'const unsigned int')))")
          (DeclStmt 0xa6f8300 <line:420:8, col:41>
            0xa6f8290 "pointer __new_finish =
              (ParenListExpr 0xa6f82e0 <col:28, col:40> 'pointer':'typename _Tp_alloc_type::pointer'
                (DeclRefExpr 0xa6f82c4 <col:29> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer'))")
          (IfStmt 0xa6f89b0 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/vector.tcc:441:3>
            <<<NULL>>>
            (CXXBoolLiteralExpr 0xa6f8310 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
            (CompoundStmt 0xa6f8988 </usr/include/c++/4.6/bits/vector.tcc:422:3, line:441:3>
              (CallExpr 0xa6f84a0 <line:424:5, line:426:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa6f8348 <line:424:5, col:10> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6911f0 0xa692550)
                (CXXOperatorCallExpr 0xa6f83f0 <col:35, col:49> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f83b0 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                  (DeclRefExpr 0xa6f8380 <col:35> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                  (DeclRefExpr 0xa6f8398 <col:49> 'const size_type':'const unsigned int' lvalue Var 0xa6f8030 '__elems_before' 'const size_type':'const unsigned int'))
                (DeclRefExpr 0xa6f8414 <line:425:7> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int')
                (DeclRefExpr 0xa6f842c <col:12> 'const value_type':'const _Tp' lvalue ParmVar 0xa6f6a50 '__x' 'const value_type &')
                (CallExpr 0xa6f8480 <line:426:7, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6f8444 <col:7> '<dependent type>' lvalue)))
              (BinaryOperator 0xa6f8500 <line:427:5, col:20> '<dependent type>' '='
                (DeclRefExpr 0xa6f84cc <col:5> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (IntegerLiteral 0xa6f84e8 <col:20> 'int' 0))
              (BinaryOperator 0xa6f8710 <line:429:5, line:433:28> '<dependent type>' '='
                (DeclRefExpr 0xa6f8518 <line:429:5> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CallExpr 0xa6f86e0 <line:430:7, line:433:28> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f8548 <line:430:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                  (CXXDependentScopeMemberExpr 0xa6f85c8 <col:35, col:49> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6f8590 <col:35, col:41> '<dependent type>' lvalue
                      (CXXThisExpr 0xa6f8580 <col:35> 'vector<_Tp, _Alloc> *' this)))
                  (CallExpr 0xa6f8650 <line:431:7, col:23> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa6f8618 <col:7, col:18> '<dependent type>' lvalue
                      (DeclRefExpr 0xa6f85fc <col:7> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                  (DeclRefExpr 0xa6f866c <line:432:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                  (CallExpr 0xa6f86c0 <line:433:7, col:27> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6f8684 <col:7> '<dependent type>' lvalue))))
              (CompoundAssignOperator 0xa6f8758 <line:434:5, col:21> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (DeclRefExpr 0xa6f8728 <col:5> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (DeclRefExpr 0xa6f8740 <col:21> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
              (BinaryOperator 0xa6f8970 <line:436:5, line:440:28> '<dependent type>' '='
                (DeclRefExpr 0xa6f8778 <line:436:5> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CallExpr 0xa6f8940 <line:437:7, line:440:28> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f87a8 <line:437:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                  (CallExpr 0xa6f8830 <col:35, col:51> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa6f87f8 <col:35, col:46> '<dependent type>' lvalue
                      (DeclRefExpr 0xa6f87dc <col:35> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f69c0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                  (CXXDependentScopeMemberExpr 0xa6f8898 <line:438:7, col:21> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6f8860 <col:7, col:13> '<dependent type>' lvalue
                      (CXXThisExpr 0xa6f8850 <col:7> 'vector<_Tp, _Alloc> *' this)))
                  (DeclRefExpr 0xa6f88cc <line:439:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                  (CallExpr 0xa6f8920 <line:440:7, col:27> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6f88e4 <col:7> '<dependent type>' lvalue)))))
            <<<NULL>>>)
          (IfStmt 0xa6f8ea0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/vector.tcc:453:3>
            <<<NULL>>>
            (CXXBoolLiteralExpr 0xa6f89d0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
            (CompoundStmt 0xa6f8e80 </usr/include/c++/4.6/bits/vector.tcc:443:3, line:453:3>
              (IfStmt 0xa6f8dc0 <line:444:5, line:450:28>
                <<<NULL>>>
                (UnaryOperator 0xa6f89f8 <line:444:9, col:10> '<dependent type>' prefix '!'
                  (DeclRefExpr 0xa6f89e0 <col:10> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
                (CallExpr 0xa6f8c78 <line:445:7, line:447:28> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f8a30 <line:445:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
                  (CXXOperatorCallExpr 0xa6f8ae0 <col:21, col:35> '<dependent type>'
                    (UnresolvedLookupExpr 0xa6f8aa0 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                    (DeclRefExpr 0xa6f8a70 <col:21> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                    (DeclRefExpr 0xa6f8a88 <col:35> 'const size_type':'const unsigned int' lvalue Var 0xa6f8030 '__elems_before' 'const size_type':'const unsigned int'))
                  (CXXOperatorCallExpr 0xa6f8bf8 <line:446:7, col:38> '<dependent type>'
                    (UnresolvedLookupExpr 0xa6f8bb8 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                    (CXXOperatorCallExpr 0xa6f8b78 <col:7, col:21> '<dependent type>'
                      (UnresolvedLookupExpr 0xa6f8b38 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
                      (DeclRefExpr 0xa6f8b04 <col:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                      (DeclRefExpr 0xa6f8b1c <col:21> 'const size_type':'const unsigned int' lvalue Var 0xa6f8030 '__elems_before' 'const size_type':'const unsigned int'))
                    (DeclRefExpr 0xa6f8b9c <col:38> 'size_type':'unsigned int' lvalue ParmVar 0xa6f6a00 '__n' 'size_type':'unsigned int'))
                  (CallExpr 0xa6f8c58 <line:447:7, col:27> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6f8c1c <col:7> '<dependent type>' lvalue)))
                (CallExpr 0xa6f8d98 <line:449:7, line:450:28> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6f8cc8 <line:449:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
                  (DeclRefExpr 0xa6f8d08 <col:21> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                  (DeclRefExpr 0xa6f8d20 <col:34> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                  (CallExpr 0xa6f8d78 <line:450:7, col:27> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6f8d38 <col:7> '<dependent type>' lvalue))))
              (CallExpr 0xa6f8e48 <line:451:5, col:37> '<dependent type>'
                (UnresolvedMemberExpr 0xa6f8ddc <col:5> '<dependent type>' lvalue)
                (DeclRefExpr 0xa6f8e18 <col:19> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                (DeclRefExpr 0xa6f8e30 <col:32> 'const size_type':'const unsigned int' lvalue Var 0xa6f7f30 '__len' 'const size_type':'const unsigned int'))
              (NullStmt 0xa6f8e70 <line:452:28>))
            <<<NULL>>>)
          (CallExpr 0xa6f9078 <line:454:8, line:455:29> '<dependent type>'
            (UnresolvedLookupExpr 0xa6f8ee0 <line:454:8, col:13> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
            (CXXDependentScopeMemberExpr 0xa6f8f68 <col:22, col:36> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f8f30 <col:22, col:28> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f8f20 <col:22> 'vector<_Tp, _Alloc> *' this)))
            (CXXDependentScopeMemberExpr 0xa6f8fe8 <col:46, col:60> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f8fb0 <col:46, col:52> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f8fa0 <col:46> 'vector<_Tp, _Alloc> *' this)))
            (CallExpr 0xa6f9058 <line:455:8, col:28> '<dependent type>'
              (UnresolvedMemberExpr 0xa6f901c <col:8> '<dependent type>' lvalue)))
          (CallExpr 0xa6f92c8 <line:456:8, line:458:32> '<dependent type>'
            (UnresolvedMemberExpr 0xa6f90a0 <line:456:8> '<dependent type>' lvalue)
            (CXXDependentScopeMemberExpr 0xa6f9128 <col:22, col:36> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f90f0 <col:22, col:28> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f90e0 <col:22> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6f92a0 <line:457:8, line:458:24> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f9260 <col:8, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (CXXDependentScopeMemberExpr 0xa6f91a8 <line:457:8, col:22> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f9170 <col:8, col:14> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f9160 <col:8> 'vector<_Tp, _Alloc> *' this)))
              (CXXDependentScopeMemberExpr 0xa6f9228 <line:458:10, col:24> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6f91f0 <col:10, col:16> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6f91e0 <col:10> 'vector<_Tp, _Alloc> *' this)))))
          (BinaryOperator 0xa6f9388 <line:459:8, col:33> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6f9338 <col:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f9300 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f92f0 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (DeclRefExpr 0xa6f936c <col:33> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer'))
          (BinaryOperator 0xa6f9438 <line:460:8, col:34> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6f93e8 <col:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f93b0 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f93a0 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (DeclRefExpr 0xa6f941c <col:34> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8290 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
          (BinaryOperator 0xa6f9568 <line:461:8, col:56> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6f9498 <col:8, col:22> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6f9460 <col:8, col:14> '<dependent type>' lvalue
                (CXXThisExpr 0xa6f9450 <col:8> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6f9540 <col:42, col:56> '<dependent type>'
              (UnresolvedLookupExpr 0xa6f9500 <col:54, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
              (DeclRefExpr 0xa6f94cc <col:42> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6f8170 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
              (DeclRefExpr 0xa6f94e4 <col:56> 'const size_type':'const unsigned int' lvalue Var 0xa6f7f30 '__len' 'const size_type':'const unsigned int'))))))
    <<<NULL>>>))


    template <typename _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag) (CompoundStmt 0xa6f9dd8 </usr/include/c++/4.6/bits/vector.tcc:525:7, line:531:7>
  (ForStmt 0xa6f9db0 <line:526:2, line:530:4>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6f9c18 <line:526:9, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa6f9bd0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6f9b9c <col:9> '_InputIterator' lvalue ParmVar 0xa6f9970 '__first' '_InputIterator')
      (DeclRefExpr 0xa6f9bb4 <col:20> '_InputIterator' lvalue ParmVar 0xa6f99b0 '__last' '_InputIterator'))
    (UnaryOperator 0xa6f9c58 <col:28, col:30> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa6f9c3c <col:30> '_InputIterator' lvalue ParmVar 0xa6f9970 '__first' '_InputIterator'))
    (CompoundStmt 0xa6f9d98 <line:527:4, line:530:4>
      (BinaryOperator 0xa6f9d50 <line:528:6, col:36> '<dependent type>' '='
        (DeclRefExpr 0xa6f9c6c <col:6> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f9930 '__pos' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
        (CallExpr 0xa6f9d28 <col:14, col:36> '<dependent type>'
          (UnresolvedMemberExpr 0xa6f9c98 <col:14> '<bound member function type>' lvalue)
          (DeclRefExpr 0xa6f9cdc <col:21> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f9930 '__pos' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')
          (UnaryOperator 0xa6f9d10 <col:28, col:29> '<dependent type>' prefix '*'
            (DeclRefExpr 0xa6f9cf4 <col:29> '_InputIterator' lvalue ParmVar 0xa6f9970 '__first' '_InputIterator'))))
      (UnaryOperator 0xa6f9d80 <line:529:6, col:8> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa6f9d68 <col:8> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6f9930 '__pos' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))))

;
    template <typename _ForwardIterator> void _M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) (CompoundStmt 0xa6fc980 </usr/include/c++/4.6/bits/vector.tcc:539:7, line:615:7>
  (IfStmt 0xa6fc960 <line:540:2, line:614:4>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6fa418 <line:540:6, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa6fa3d0 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6fa39c <col:6> '_ForwardIterator' lvalue ParmVar 0xa6fa130 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa6fa3b4 <col:17> '_ForwardIterator' lvalue ParmVar 0xa6fa170 '__last' '_ForwardIterator'))
    (CompoundStmt 0xa6fc948 <line:541:4, line:614:4>
      (DeclStmt 0xa6fa530 <line:542:6, col:58>
        0xa6fa450 "const size_type __n =
          (CallExpr 0xa6fa508 <col:28, col:57> '<dependent type>'
            (UnresolvedLookupExpr 0xa6fa4a0 <col:28, col:33> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
            (DeclRefExpr 0xa6fa4d4 <col:42> '_ForwardIterator' lvalue ParmVar 0xa6fa130 '__first' '_ForwardIterator')
            (DeclRefExpr 0xa6fa4ec <col:51> '_ForwardIterator' lvalue ParmVar 0xa6fa170 '__last' '_ForwardIterator'))")
      (IfStmt 0xa6fc928 <line:543:6, line:613:8>
        <<<NULL>>>
        (BinaryOperator 0xa6fa6f8 <line:543:10, line:544:36> '_Bool' '>='
          (CXXUnresolvedConstructExpr 0xa6fa6b0 <line:543:10, line:544:31> 'size_type':'unsigned int'
            (CXXOperatorCallExpr 0xa6fa688 <line:543:20, line:544:22> '<dependent type>'
              (UnresolvedLookupExpr 0xa6fa648 <col:6, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (CXXDependentScopeMemberExpr 0xa6fa590 <line:543:20, col:34> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6fa558 <col:20, col:26> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6fa548 <col:20> 'vector<_Tp, _Alloc> *' this)))
              (CXXDependentScopeMemberExpr 0xa6fa610 <line:544:8, col:22> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6fa5d8 <col:8, col:14> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6fa5c8 <col:8> 'vector<_Tp, _Alloc> *' this)))))
          (ImplicitCastExpr 0xa6fa6e8 <col:36> 'size_type':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa6fa6cc <col:36> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int')))
        (CompoundStmt 0xa6fb768 <line:545:8, line:574:8>
          (DeclStmt 0xa6fa848 <line:546:3, col:53>
            0xa6fa720 "const size_type __elems_after =
              (CXXOperatorCallExpr 0xa6fa820 <col:35, col:43> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fa7e0 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                (CallExpr 0xa6fa7a8 <col:35, col:39> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6fa768 <col:35> '<bound member function type>' lvalue))
                (DeclRefExpr 0xa6fa7c4 <col:43> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >'))")
          (DeclStmt 0xa6fa938 <line:547:3, col:48>
            0xa6fa860 "pointer __old_finish =
              (ParenListExpr 0xa6fa918 <col:23, col:47> 'pointer':'typename _Tp_alloc_type::pointer'
                (CXXDependentScopeMemberExpr 0xa6fa8e0 <col:24, col:38> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6fa8a8 <col:24, col:30> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fa898 <col:24> 'vector<_Tp, _Alloc> *' this))))")
          (IfStmt 0xa6fb748 <line:548:3, line:573:5>
            <<<NULL>>>
            (BinaryOperator 0xa6fa998 <line:548:7, col:23> '_Bool' '>'
              (ImplicitCastExpr 0xa6fa978 <col:7> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6fa948 <col:7> 'const size_type':'const unsigned int' lvalue Var 0xa6fa720 '__elems_after' 'const size_type':'const unsigned int'))
              (ImplicitCastExpr 0xa6fa988 <col:23> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6fa960 <col:23> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int')))
            (CompoundStmt 0xa6fafc8 <line:549:5, line:558:5>
              (CallExpr 0xa6fac68 <line:550:7, line:553:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fa9d8 <line:550:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                (CXXOperatorCallExpr 0xa6faae8 <col:35, col:61> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6faaa8 <col:59, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                  (CXXDependentScopeMemberExpr 0xa6faa58 <col:35, col:49> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6faa20 <col:35, col:41> '<dependent type>' lvalue
                      (CXXThisExpr 0xa6faa10 <col:35> 'vector<_Tp, _Alloc> *' this)))
                  (DeclRefExpr 0xa6faa8c <col:61> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int'))
                (CXXDependentScopeMemberExpr 0xa6fab58 <line:551:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6fab20 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fab10 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (CXXDependentScopeMemberExpr 0xa6fabd8 <line:552:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6faba0 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fab90 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (CallExpr 0xa6fac48 <line:553:7, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6fac0c <col:7> '<dependent type>' lvalue)))
              (CompoundAssignOperator 0xa6fad30 <line:554:7, col:34> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6face0 <col:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6faca8 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fac98 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (DeclRefExpr 0xa6fad14 <col:34> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int'))
              (CallExpr 0xa6faed0 </usr/include/c++/4.6/bits/stl_algobase.h:666:48, col:80> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fad78 <col:48, col:53> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653060)
                (CallExpr 0xa6fae00 </usr/include/c++/4.6/bits/vector.tcc:555:31, col:47> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6fadc8 <col:31, col:42> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6fadac <col:31> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                (CXXOperatorCallExpr 0xa6fae90 <line:556:10, col:25> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6fae50 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                  (DeclRefExpr 0xa6fae1c <col:10> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fa860 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                  (DeclRefExpr 0xa6fae34 <col:25> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int'))
                (DeclRefExpr 0xa6faeb4 <col:30> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fa860 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
              (CallExpr 0xa6fafa0 <line:557:7, col:44> '<dependent type>'
                (UnresolvedLookupExpr 0xa6faf20 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
                (DeclRefExpr 0xa6faf54 <col:17> '_ForwardIterator' lvalue ParmVar 0xa6fa130 '__first' '_ForwardIterator')
                (DeclRefExpr 0xa6faf6c <col:26> '_ForwardIterator' lvalue ParmVar 0xa6fa170 '__last' '_ForwardIterator')
                (DeclRefExpr 0xa6faf84 <col:34> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
            (CompoundStmt 0xa6fb718 <line:560:5, line:573:5>
              (DeclStmt 0xa6fb040 <line:561:7, col:39>
                0xa6faff0 "_ForwardIterator __mid =
                  (DeclRefExpr 0xa6fb024 <col:32> '_ForwardIterator' lvalue ParmVar 0xa6fa130 '__first' '_ForwardIterator')")
              (CallExpr 0xa6fb0e0 <line:562:7, col:40> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fb078 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61d500)
                (DeclRefExpr 0xa6fb0ac <col:20> '_ForwardIterator' lvalue Var 0xa6faff0 '__mid' '_ForwardIterator')
                (DeclRefExpr 0xa6fb0c4 <col:27> 'const size_type':'const unsigned int' lvalue Var 0xa6fa720 '__elems_after' 'const size_type':'const unsigned int'))
              (CallExpr 0xa6fb268 <line:563:7, line:565:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fb128 <line:563:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
                (DeclRefExpr 0xa6fb160 <col:35> '_ForwardIterator' lvalue Var 0xa6faff0 '__mid' '_ForwardIterator')
                (DeclRefExpr 0xa6fb178 <col:42> '_ForwardIterator' lvalue ParmVar 0xa6fa170 '__last' '_ForwardIterator')
                (CXXDependentScopeMemberExpr 0xa6fb1d8 <line:564:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6fb1a0 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fb190 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (CallExpr 0xa6fb248 <line:565:7, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6fb20c <col:7> '<dependent type>' lvalue)))
              (CompoundAssignOperator 0xa6fb380 <line:566:7, col:40> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6fb2e0 <col:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6fb2a8 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fb298 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (BinaryOperator 0xa6fb368 <col:34, col:40> 'unsigned int' '-'
                  (ImplicitCastExpr 0xa6fb348 <col:34> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6fb314 <col:34> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int'))
                  (ImplicitCastExpr 0xa6fb358 <col:40> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6fb32c <col:40> 'const size_type':'const unsigned int' lvalue Var 0xa6fa720 '__elems_after' 'const size_type':'const unsigned int'))))
              (CallExpr 0xa6fb560 <line:567:7, line:570:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fb3c8 <line:567:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                (CallExpr 0xa6fb450 <col:35, col:51> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6fb418 <col:35, col:46> '<dependent type>' lvalue
                    (DeclRefExpr 0xa6fb3fc <col:35> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                (DeclRefExpr 0xa6fb46c <line:568:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fa860 '__old_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CXXDependentScopeMemberExpr 0xa6fb4d0 <line:569:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6fb498 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fb488 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (CallExpr 0xa6fb540 <line:570:7, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6fb504 <col:7> '<dependent type>' lvalue)))
              (CompoundAssignOperator 0xa6fb628 <line:571:7, col:34> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (CXXDependentScopeMemberExpr 0xa6fb5d8 <col:7, col:21> '<dependent type>' lvalue
                  (CXXDependentScopeMemberExpr 0xa6fb5a0 <col:7, col:13> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fb590 <col:7> 'vector<_Tp, _Alloc> *' this)))
                (DeclRefExpr 0xa6fb60c <col:34> 'const size_type':'const unsigned int' lvalue Var 0xa6fa720 '__elems_after' 'const size_type':'const unsigned int'))
              (CallExpr 0xa6fb6f0 <line:572:7, col:43> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fb670 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
                (DeclRefExpr 0xa6fb6a4 <col:17> '_ForwardIterator' lvalue ParmVar 0xa6fa130 '__first' '_ForwardIterator')
                (DeclRefExpr 0xa6fb6bc <col:26> '_ForwardIterator' lvalue Var 0xa6faff0 '__mid' '_ForwardIterator')
                (DeclRefExpr 0xa6fb6d4 <col:33> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))))
        (CompoundStmt 0xa6fc8f0 <line:576:8, line:613:8>
          (DeclStmt 0xa6fb890 <line:577:3, line:578:49>
            0xa6fb790 "const size_type __len =
              (CallExpr 0xa6fb868 <col:5, col:48> '<dependent type>'
                (MemberExpr 0xa6fb7d8 <col:5> '<bound member function type>' ->_M_check_len 0xa6a8a80
                  (CXXThisExpr 0xa6fb7c8 <col:5> 'vector<_Tp, _Alloc> *' this))
                (DeclRefExpr 0xa6fb7f8 <col:18> 'const size_type':'const unsigned int' lvalue Var 0xa6fa450 '__n' 'const size_type':'const unsigned int')
                (StringLiteral 0xa6fb830 <col:23> 'const char [24]' lvalue "vector::_M_range_insert"))")
          (DeclStmt 0xa6fb988 <line:579:3, col:48>
            0xa6fb8b0 "pointer __new_start =
              (ParenListExpr 0xa6fb968 <col:22, col:47> 'pointer':'typename _Tp_alloc_type::pointer'
                (CallExpr 0xa6fb948 <col:23, col:46> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa6fb8f8 <col:23, col:29> '<dependent type>' lvalue
                    (CXXThisExpr 0xa6fb8e8 <col:23> 'vector<_Tp, _Alloc> *' this))
                  (DeclRefExpr 0xa6fb92c <col:41> 'const size_type':'const unsigned int' lvalue Var 0xa6fb790 '__len' 'const size_type':'const unsigned int')))")
          (DeclStmt 0xa6fba10 <line:580:3, col:36>
            0xa6fb9a0 "pointer __new_finish =
              (ParenListExpr 0xa6fb9f0 <col:23, col:35> 'pointer':'typename _Tp_alloc_type::pointer'
                (DeclRefExpr 0xa6fb9d4 <col:24> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb8b0 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer'))")
          (IfStmt 0xa6fbfc8 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/vector.tcc:597:5>
            <<<NULL>>>
            (CXXBoolLiteralExpr 0xa6fba20 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
            (CompoundStmt 0xa6fbfa8 </usr/include/c++/4.6/bits/vector.tcc:582:5, line:597:5>
              (BinaryOperator 0xa6fbc28 <line:583:7, line:587:30> '<dependent type>' '='
                (DeclRefExpr 0xa6fba30 <line:583:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CallExpr 0xa6fbbf8 <line:584:9, line:587:30> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6fba60 <line:584:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                  (CXXDependentScopeMemberExpr 0xa6fbae0 <col:37, col:51> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6fbaa8 <col:37, col:43> '<dependent type>' lvalue
                      (CXXThisExpr 0xa6fba98 <col:37> 'vector<_Tp, _Alloc> *' this)))
                  (CallExpr 0xa6fbb68 <line:585:9, col:25> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa6fbb30 <col:9, col:20> '<dependent type>' lvalue
                      (DeclRefExpr 0xa6fbb14 <col:9> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                  (DeclRefExpr 0xa6fbb84 <line:586:9> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb8b0 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                  (CallExpr 0xa6fbbd8 <line:587:9, col:29> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6fbb9c <col:9> '<dependent type>' lvalue))))
              (BinaryOperator 0xa6fbd80 <line:588:7, line:591:30> '<dependent type>' '='
                (DeclRefExpr 0xa6fbc40 <line:588:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CallExpr 0xa6fbd50 <line:589:9, line:591:30> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6fbc70 <line:589:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa68d3c0 0xa68fc00)
                  (DeclRefExpr 0xa6fbca8 <col:37> '_ForwardIterator' lvalue ParmVar 0xa6fa130 '__first' '_ForwardIterator')
                  (DeclRefExpr 0xa6fbcc0 <col:46> '_ForwardIterator' lvalue ParmVar 0xa6fa170 '__last' '_ForwardIterator')
                  (DeclRefExpr 0xa6fbcd8 <line:590:9> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                  (CallExpr 0xa6fbd30 <line:591:9, col:29> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6fbcf0 <col:9> '<dependent type>' lvalue))))
              (BinaryOperator 0xa6fbf90 <line:592:7, line:596:30> '<dependent type>' '='
                (DeclRefExpr 0xa6fbd98 <line:592:7> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CallExpr 0xa6fbf60 <line:593:9, line:596:30> '<dependent type>'
                  (UnresolvedLookupExpr 0xa6fbdc8 <line:593:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa690010)
                  (CallExpr 0xa6fbe50 <col:37, col:53> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa6fbe18 <col:37, col:48> '<dependent type>' lvalue
                      (DeclRefExpr 0xa6fbdfc <col:37> 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >' lvalue ParmVar 0xa6fa0f0 '__position' 'iterator':'__normal_iterator<pointer, vector<_Tp, _Alloc> >')))
                  (CXXDependentScopeMemberExpr 0xa6fbeb8 <line:594:9, col:23> '<dependent type>' lvalue
                    (CXXDependentScopeMemberExpr 0xa6fbe80 <col:9, col:15> '<dependent type>' lvalue
                      (CXXThisExpr 0xa6fbe70 <col:9> 'vector<_Tp, _Alloc> *' this)))
                  (DeclRefExpr 0xa6fbeec <line:595:9> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                  (CallExpr 0xa6fbf40 <line:596:9, col:29> '<dependent type>'
                    (UnresolvedMemberExpr 0xa6fbf04 <col:9> '<dependent type>' lvalue)))))
            <<<NULL>>>)
          (IfStmt 0xa6fc1e0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/vector.tcc:604:5>
            <<<NULL>>>
            (CXXBoolLiteralExpr 0xa6fbfe8 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
            (CompoundStmt 0xa6fc1c0 </usr/include/c++/4.6/bits/vector.tcc:599:5, line:604:5>
              (CallExpr 0xa6fc0f0 <line:600:7, line:601:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa6fc020 <line:600:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
                (DeclRefExpr 0xa6fc060 <col:21> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb8b0 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                (DeclRefExpr 0xa6fc078 <col:34> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer')
                (CallExpr 0xa6fc0d0 <line:601:7, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa6fc090 <col:7> '<dependent type>' lvalue)))
              (CallExpr 0xa6fc188 <line:602:7, col:39> '<dependent type>'
                (UnresolvedMemberExpr 0xa6fc118 <col:7> '<dependent type>' lvalue)
                (DeclRefExpr 0xa6fc154 <col:21> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb8b0 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
                (DeclRefExpr 0xa6fc16c <col:34> 'const size_type':'const unsigned int' lvalue Var 0xa6fb790 '__len' 'const size_type':'const unsigned int'))
              (NullStmt 0xa6fc1b0 <line:603:30>))
            <<<NULL>>>)
          (CallExpr 0xa6fc3e8 <line:605:3, line:606:31> '<dependent type>'
            (UnresolvedLookupExpr 0xa6fc220 <line:605:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa684b70 0xa685820 0xa685ec0 0xa686460)
            (CXXDependentScopeMemberExpr 0xa6fc2d8 <col:17, col:31> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6fc2a0 <col:17, col:23> '<dependent type>' lvalue
                (CXXThisExpr 0xa6fc260 <col:17> 'vector<_Tp, _Alloc> *' this)))
            (CXXDependentScopeMemberExpr 0xa6fc358 <col:41, col:55> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6fc320 <col:41, col:47> '<dependent type>' lvalue
                (CXXThisExpr 0xa6fc310 <col:41> 'vector<_Tp, _Alloc> *' this)))
            (CallExpr 0xa6fc3c8 <line:606:10, col:30> '<dependent type>'
              (UnresolvedMemberExpr 0xa6fc38c <col:10> '<dependent type>' lvalue)))
          (CallExpr 0xa6fc638 <line:607:3, line:609:34> '<dependent type>'
            (UnresolvedMemberExpr 0xa6fc410 <line:607:3> '<dependent type>' lvalue)
            (CXXDependentScopeMemberExpr 0xa6fc498 <col:17, col:31> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6fc460 <col:17, col:23> '<dependent type>' lvalue
                (CXXThisExpr 0xa6fc450 <col:17> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6fc610 <line:608:10, line:609:26> '<dependent type>'
              (UnresolvedLookupExpr 0xa6fc5d0 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (CXXDependentScopeMemberExpr 0xa6fc518 <line:608:10, col:24> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6fc4e0 <col:10, col:16> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6fc4d0 <col:10> 'vector<_Tp, _Alloc> *' this)))
              (CXXDependentScopeMemberExpr 0xa6fc598 <line:609:12, col:26> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6fc560 <col:12, col:18> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6fc550 <col:12> 'vector<_Tp, _Alloc> *' this)))))
          (BinaryOperator 0xa6fc6f8 <line:610:3, col:28> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6fc6a8 <col:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6fc670 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa6fc660 <col:3> 'vector<_Tp, _Alloc> *' this)))
            (DeclRefExpr 0xa6fc6dc <col:28> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb8b0 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer'))
          (BinaryOperator 0xa6fc7a8 <line:611:3, col:29> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6fc758 <col:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6fc720 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa6fc710 <col:3> 'vector<_Tp, _Alloc> *' this)))
            (DeclRefExpr 0xa6fc78c <col:29> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb9a0 '__new_finish' 'pointer':'typename _Tp_alloc_type::pointer'))
          (BinaryOperator 0xa6fc8d8 <line:612:3, col:51> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa6fc808 <col:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6fc7d0 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa6fc7c0 <col:3> 'vector<_Tp, _Alloc> *' this)))
            (CXXOperatorCallExpr 0xa6fc8b0 <col:37, col:51> '<dependent type>'
              (UnresolvedLookupExpr 0xa6fc870 <col:49, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
              (DeclRefExpr 0xa6fc83c <col:37> 'pointer':'typename _Tp_alloc_type::pointer' lvalue Var 0xa6fb8b0 '__new_start' 'pointer':'typename _Tp_alloc_type::pointer')
              (DeclRefExpr 0xa6fc854 <col:51> 'const size_type':'const unsigned int' lvalue Var 0xa6fb790 '__len' 'const size_type':'const unsigned int'))))))
    <<<NULL>>>))

;
    void reserve(size_type __n) (CompoundStmt 0xa6fd700 </usr/include/c++/4.6/bits/vector.tcc:624:5, line:637:5>
  (IfStmt 0xa6fce90 <line:625:7, line:626:45>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6fcd98 <line:625:11, col:32> '<dependent type>'
      (UnresolvedLookupExpr 0xa6fcd58 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa6fccd4 <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6fcbf0 '__n' 'size_type':'unsigned int')
      (CallExpr 0xa6fcd38 <col:17, col:32> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6fcd00 <col:17, col:23> '<dependent type>' lvalue
          (CXXThisExpr 0xa6fccf0 <col:17> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CallExpr 0xa6fce60 <line:626:2, col:45> 'void'
      (ImplicitCastExpr 0xa6fce50 <col:2> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa6fce34 <col:2> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa6fce80 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa6fce20 <col:24, col:30> 'const char [16]' lvalue
          (StringLiteral 0xa6fcdf4 </usr/include/c++/4.6/bits/vector.tcc:626:27> 'const char [16]' lvalue "vector::reserve"))))
    <<<NULL>>>)
  (IfStmt 0xa6fd6e0 <line:627:7, line:636:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6fcf70 <line:627:11, col:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa6fcf30 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CallExpr 0xa6fcef8 <col:11, col:26> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6fcec0 <col:11, col:17> '<dependent type>' lvalue
          (CXXThisExpr 0xa6fceb0 <col:11> 'vector<_Bool, type-parameter-0-0> *' this)))
      (DeclRefExpr 0xa6fcf14 <col:30> 'size_type':'unsigned int' lvalue ParmVar 0xa6fcbf0 '__n' 'size_type':'unsigned int'))
    (CompoundStmt 0xa6fd6b8 <line:628:2, line:636:2>
      (DeclStmt 0xa6fd068 <line:629:4, col:43>
        0xa6fcfb0 "_Bit_type *__q =
          (CallExpr 0xa6fd048 <col:21, col:42> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6fcff8 <col:21, col:27> '<dependent type>' lvalue
              (CXXThisExpr 0xa6fcfe8 <col:21> 'vector<_Bool, type-parameter-0-0> *' this))
            (DeclRefExpr 0xa6fd02c <col:39> 'size_type':'unsigned int' lvalue ParmVar 0xa6fcbf0 '__n' 'size_type':'unsigned int'))")
      (BinaryOperator 0xa6fd2b8 <line:630:4, line:631:27> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6fd0c0 <line:630:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6fd088 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6fd078 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CallExpr 0xa6fd290 <col:30, line:631:27> '<dependent type>'
          (MemberExpr 0xa6fd108 <line:630:30> '<bound member function type>' ->_M_copy_aligned 0xa6c6050
            (CXXThisExpr 0xa6fd0f8 <col:30> 'vector<_Bool, type-parameter-0-0> *' this))
          (CallExpr 0xa6fd178 <col:46, col:52> '<dependent type>'
            (UnresolvedMemberExpr 0xa6fd138 <col:46> '<bound member function type>' lvalue))
          (CallExpr 0xa6fd1e8 <col:55, col:59> '<dependent type>'
            (UnresolvedMemberExpr 0xa6fd1a8 <col:55> '<bound member function type>' lvalue))
          (CXXTemporaryObjectExpr 0xa6fd260 <line:631:11, col:26> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
            (ImplicitCastExpr 0xa6fd240 <col:20> '_Bit_type *' <LValueToRValue>
              (DeclRefExpr 0xa6fd210 <col:20> '_Bit_type *' lvalue Var 0xa6fcfb0 '__q' '_Bit_type *'))
            (ImplicitCastExpr 0xa6fd250 <col:25> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa6fd228 <col:25> 'int' 0)))))
      (CallExpr 0xa6fd318 <line:632:4, col:24> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6fd2e0 <col:4, col:10> '<dependent type>' lvalue
          (CXXThisExpr 0xa6fd2d0 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
      (BinaryOperator 0xa6fd440 <line:633:4, col:44> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6fd380 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6fd348 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6fd338 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CXXTemporaryObjectExpr 0xa6fd410 <col:29, col:44> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
          (ImplicitCastExpr 0xa6fd3f0 <col:38> '_Bit_type *' <LValueToRValue>
            (DeclRefExpr 0xa6fd3c0 <col:38> '_Bit_type *' lvalue Var 0xa6fcfb0 '__q' '_Bit_type *'))
          (ImplicitCastExpr 0xa6fd400 <col:43> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa6fd3d8 <col:43> 'int' 0))))
      (BinaryOperator 0xa6fd6a0 <line:634:4, line:635:29> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6fd4a0 <line:634:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6fd468 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6fd458 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (ParenExpr 0xa6fd688 <col:38, line:635:29> '_Bit_type *'
          (BinaryOperator 0xa6fd670 <line:634:39, line:635:28> '_Bit_type *' '+'
            (ImplicitCastExpr 0xa6fd660 <line:634:39> '_Bit_type *' <LValueToRValue>
              (DeclRefExpr 0xa6fd4d4 <col:39> '_Bit_type *' lvalue Var 0xa6fcfb0 '__q' '_Bit_type *'))
            (BinaryOperator 0xa6fd648 <col:45, line:635:28> 'unsigned int' '/'
              (ParenExpr 0xa6fd5d0 <line:634:45, col:72> 'unsigned int'
                (BinaryOperator 0xa6fd5b8 <col:46, col:71> 'unsigned int' '-'
                  (BinaryOperator 0xa6fd578 <col:46, col:67> 'unsigned int' '+'
                    (ImplicitCastExpr 0xa6fd558 <col:46> 'size_type':'unsigned int' <LValueToRValue>
                      (DeclRefExpr 0xa6fd4ec <col:46> 'size_type':'unsigned int' lvalue ParmVar 0xa6fcbf0 '__n' 'size_type':'unsigned int'))
                    (ImplicitCastExpr 0xa6fd568 <col:52, col:67> 'unsigned int' <IntegralCast>
                      (CXXFunctionalCastExpr 0xa6fd540 <col:52, col:67> 'int' functional cast to int <NoOp>
                        (ImplicitCastExpr 0xa6fd530 <col:56> 'int' <IntegralCast>
                          (DeclRefExpr 0xa6fd514 <col:56> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
                  (ImplicitCastExpr 0xa6fd5a8 <col:71> 'unsigned int' <IntegralCast>
                    (IntegerLiteral 0xa6fd590 <col:71> 'int' 1))))
              (ImplicitCastExpr 0xa6fd638 <line:635:13, col:28> 'unsigned int' <IntegralCast>
                (CXXFunctionalCastExpr 0xa6fd620 <col:13, col:28> 'int' functional cast to int <NoOp>
                  (ImplicitCastExpr 0xa6fd610 <col:17> 'int' <IntegralCast>
                    (DeclRefExpr 0xa6fd5f4 <col:17> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))))))
    <<<NULL>>>))


    void _M_fill_insert(iterator __position, size_type __n, bool __x) (CompoundStmt 0xa6ff268 </usr/include/c++/4.6/bits/vector.tcc:643:5, line:669:5>
  (IfStmt 0xa6fdb68 <line:644:7, line:645:2>
    <<<NULL>>>
    (BinaryOperator 0xa6fdb40 <line:644:11, col:18> '_Bool' '=='
      (ImplicitCastExpr 0xa6fdb20 <col:11> 'size_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa6fdaec <col:11> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int'))
      (ImplicitCastExpr 0xa6fdb30 <col:18> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa6fdb08 <col:18> 'int' 0)))
    (ReturnStmt 0xa6fdb58 <line:645:2>)
    <<<NULL>>>)
  (IfStmt 0xa6ff248 <line:646:7, line:668:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6fdce8 <line:646:11, col:34> '<dependent type>'
      (UnresolvedLookupExpr 0xa6fdca8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (CXXOperatorCallExpr 0xa6fdc68 <col:11, col:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa6fdc28 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CallExpr 0xa6fdbb8 <col:11, col:20> '<dependent type>'
          (MemberExpr 0xa6fdb98 <col:11> '<bound member function type>' ->capacity 0xa6c3af0
            (CXXThisExpr 0xa6fdb88 <col:11> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CallExpr 0xa6fdc08 <col:24, col:29> '<dependent type>'
          (MemberExpr 0xa6fdbe8 <col:24> '<bound member function type>' ->size 0xa6c39f0
            (CXXThisExpr 0xa6fdbd8 <col:24> 'vector<_Bool, type-parameter-0-0> *' this))))
      (DeclRefExpr 0xa6fdc8c <col:34> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int'))
    (CompoundStmt 0xa6fe578 <line:647:2, line:652:2>
      (CallExpr 0xa6fdf30 <line:648:4, line:649:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa6fdd30 <line:648:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653060)
        (DeclRefExpr 0xa6fdd64 <col:23> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6fd970 '__position' 'iterator':'struct std::_Bit_iterator')
        (CallExpr 0xa6fddd0 <col:35, col:39> '<dependent type>'
          (UnresolvedMemberExpr 0xa6fdd90 <col:35> '<bound member function type>' lvalue))
        (CXXOperatorCallExpr 0xa6fdf08 <line:649:9, col:54> '<dependent type>'
          (UnresolvedLookupExpr 0xa6fdec8 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CXXDependentScopeMemberExpr 0xa6fde38 <col:9, col:23> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa6fde00 <col:9, col:15> '<dependent type>' lvalue
              (CXXThisExpr 0xa6fddf0 <col:9> 'vector<_Bool, type-parameter-0-0> *' this)))
          (CXXFunctionalCastExpr 0xa6fdeb0 <col:35, col:54> 'difference_type':'int' functional cast to difference_type <NoOp>
            (ImplicitCastExpr 0xa6fdea0 <col:51> 'difference_type':'int' <IntegralCast>
              (ImplicitCastExpr 0xa6fde90 <col:51> 'size_type':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa6fde78 <col:51> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int'))))))
      (CallExpr 0xa6fe3c8 <line:650:4, col:64> 'void'
        (ImplicitCastExpr 0xa6fe3b8 <col:4, col:9> 'void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, const _Bool &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6fe378 <col:4, col:9> 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, const _Bool &)' lvalue Function 0xa6bf150 'fill' 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, const _Bool &)'))
        (CXXConstructExpr 0xa6fe400 <col:14> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
          (ImplicitCastExpr 0xa6fe3f0 <col:14> 'const struct std::_Bit_iterator' lvalue <NoOp>
            (DeclRefExpr 0xa6fdfb8 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6fd970 '__position' 'iterator':'struct std::_Bit_iterator')))
        (CXXConstructExpr 0xa6fe448 <col:26, col:58> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
          (MaterializeTemporaryExpr 0xa6fe438 <col:26, col:58> 'const struct std::_Bit_iterator' lvalue
            (ImplicitCastExpr 0xa6fe428 <col:26, col:58> 'const struct std::_Bit_iterator' <NoOp>
              (CXXOperatorCallExpr 0xa6fe078 <col:26, col:58> 'iterator':'struct std::_Bit_iterator'
                (ImplicitCastExpr 0xa6fe068 <col:37, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa6fe050 <col:37, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
                (ImplicitCastExpr 0xa6fe040 <col:26> 'const struct std::_Bit_iterator' lvalue <NoOp>
                  (DeclRefExpr 0xa6fdfd0 <col:26> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6fd970 '__position' 'iterator':'struct std::_Bit_iterator'))
                (CXXFunctionalCastExpr 0xa6fe028 <col:39, col:58> 'difference_type':'int' functional cast to difference_type <NoOp>
                  (ImplicitCastExpr 0xa6fe018 <col:55> 'difference_type':'int' <IntegralCast>
                    (ImplicitCastExpr 0xa6fe008 <col:55> 'size_type':'unsigned int' <LValueToRValue>
                      (DeclRefExpr 0xa6fdff0 <col:55> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int'))))))))
        (ImplicitCastExpr 0xa6fe470 <col:61> 'const _Bool' lvalue <NoOp>
          (DeclRefExpr 0xa6fe09c <col:61> '_Bool' lvalue ParmVar 0xa6fd9f0 '__x' '_Bool')))
      (CompoundAssignOperator 0xa6fe558 <line:651:4, col:50> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6fe4c8 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6fe490 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6fe480 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CXXFunctionalCastExpr 0xa6fe540 <col:31, col:50> 'difference_type':'int' functional cast to difference_type <NoOp>
          (ImplicitCastExpr 0xa6fe530 <col:47> 'difference_type':'int' <IntegralCast>
            (ImplicitCastExpr 0xa6fe520 <col:47> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa6fe508 <col:47> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int'))))))
    (CompoundStmt 0xa6ff218 <line:654:2, line:668:2>
      (DeclStmt 0xa6fe680 <line:655:4, line:656:55>
        0xa6fe5a0 "const size_type __len =
          (CallExpr 0xa6fe658 <col:6, col:54> '<dependent type>'
            (MemberExpr 0xa6fe5e8 <col:6> '<bound member function type>' ->_M_check_len 0xa6ccad0
              (CXXThisExpr 0xa6fe5d8 <col:6> 'vector<_Bool, type-parameter-0-0> *' this))
            (DeclRefExpr 0xa6fe608 <col:19> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int')
            (StringLiteral 0xa6fe620 <col:24> 'const char [29]' lvalue "vector<bool>::_M_fill_insert"))")
      (DeclStmt 0xa6fe758 <line:657:4, col:46>
        0xa6fe6a0 "_Bit_type *__q =
          (CallExpr 0xa6fe738 <col:22, col:45> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6fe6e8 <col:22, col:28> '<dependent type>' lvalue
              (CXXThisExpr 0xa6fe6d8 <col:22> 'vector<_Bool, type-parameter-0-0> *' this))
            (DeclRefExpr 0xa6fe71c <col:40> 'const size_type':'const unsigned int' lvalue Var 0xa6fe5a0 '__len' 'const size_type':'const unsigned int'))")
      (DeclStmt 0xa6fe910 <line:658:4, line:659:24>
        0xa6fe770 "iterator __i =
          (CallExpr 0xa6fe8e8 <line:658:19, line:659:23> '<dependent type>'
            (MemberExpr 0xa6fe7b8 <line:658:19> '<bound member function type>' ->_M_copy_aligned 0xa6c6050
              (CXXThisExpr 0xa6fe7a8 <col:19> 'vector<_Bool, type-parameter-0-0> *' this))
            (CallExpr 0xa6fe828 <col:35, col:41> '<dependent type>'
              (UnresolvedMemberExpr 0xa6fe7e8 <col:35> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa6fe844 <col:44> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6fd970 '__position' 'iterator':'struct std::_Bit_iterator')
            (CXXTemporaryObjectExpr 0xa6fe8b8 <line:659:7, col:22> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
              (ImplicitCastExpr 0xa6fe898 <col:16> '_Bit_type *' <LValueToRValue>
                (DeclRefExpr 0xa6fe868 <col:16> '_Bit_type *' lvalue Var 0xa6fe6a0 '__q' '_Bit_type *'))
              (ImplicitCastExpr 0xa6fe8a8 <col:21> 'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa6fe880 <col:21> 'int' 0))))")
      (CallExpr 0xa6feaf8 <line:660:4, col:50> 'void'
        (ImplicitCastExpr 0xa6feae8 <col:4, col:9> 'void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, const _Bool &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa6feac8 <col:4, col:9> 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, const _Bool &)' lvalue Function 0xa6bf150 'fill' 'void (struct std::_Bit_iterator, struct std::_Bit_iterator, const _Bool &)'))
        (CXXConstructExpr 0xa6feb30 <col:14> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()'
          (ImplicitCastExpr 0xa6feb20 <col:14> 'const struct std::_Bit_iterator' lvalue <NoOp>
            (DeclRefExpr 0xa6fe980 <col:14> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6fe770 '__i' 'iterator':'struct std::_Bit_iterator')))
        (CXXConstructExpr 0xa6feb78 <col:19, col:44> 'struct std::_Bit_iterator''void (const struct std::_Bit_iterator &) throw()' elidable
          (MaterializeTemporaryExpr 0xa6feb68 <col:19, col:44> 'const struct std::_Bit_iterator' lvalue
            (ImplicitCastExpr 0xa6feb58 <col:19, col:44> 'const struct std::_Bit_iterator' <NoOp>
              (CXXOperatorCallExpr 0xa6fea40 <col:19, col:44> 'iterator':'struct std::_Bit_iterator'
                (ImplicitCastExpr 0xa6fea30 <col:23, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa6fea18 <col:23, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
                (ImplicitCastExpr 0xa6fea08 <col:19> 'const struct std::_Bit_iterator' lvalue <NoOp>
                  (DeclRefExpr 0xa6fe998 <col:19> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6fe770 '__i' 'iterator':'struct std::_Bit_iterator'))
                (CXXFunctionalCastExpr 0xa6fe9f0 <col:25, col:44> 'difference_type':'int' functional cast to difference_type <NoOp>
                  (ImplicitCastExpr 0xa6fe9e0 <col:41> 'difference_type':'int' <IntegralCast>
                    (ImplicitCastExpr 0xa6fe9d0 <col:41> 'size_type':'unsigned int' <LValueToRValue>
                      (DeclRefExpr 0xa6fe9b8 <col:41> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int'))))))))
        (ImplicitCastExpr 0xa6feba0 <col:47> 'const _Bool' lvalue <NoOp>
          (DeclRefExpr 0xa6fea64 <col:47> '_Bool' lvalue ParmVar 0xa6fd9f0 '__x' '_Bool')))
      (BinaryOperator 0xa6fee00 <line:661:4, line:662:38> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6febf8 <line:661:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6febc0 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6febb0 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CallExpr 0xa6fedd8 <col:30, line:662:38> '<dependent type>'
          (UnresolvedLookupExpr 0xa6fec48 <line:661:30, col:35> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
          (DeclRefExpr 0xa6fec7c <col:40> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6fd970 '__position' 'iterator':'struct std::_Bit_iterator')
          (CallExpr 0xa6fece8 <col:52, col:56> '<dependent type>'
            (UnresolvedMemberExpr 0xa6feca8 <col:52> '<bound member function type>' lvalue))
          (CXXOperatorCallExpr 0xa6fedb0 <line:662:12, col:37> 'iterator':'struct std::_Bit_iterator'
            (ImplicitCastExpr 0xa6feda0 <col:16, <invalid sloc>> 'iterator (*)(difference_type) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa6fed88 <col:16, <invalid sloc>> 'iterator (difference_type) const' lvalue CXXMethod 0xa6bb1a0 'operator+' 'iterator (difference_type) const'))
            (ImplicitCastExpr 0xa6fed78 <col:12> 'const struct std::_Bit_iterator' lvalue <NoOp>
              (DeclRefExpr 0xa6fed04 <col:12> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa6fe770 '__i' 'iterator':'struct std::_Bit_iterator'))
            (CXXFunctionalCastExpr 0xa6fed60 <col:18, col:37> 'difference_type':'int' functional cast to difference_type <NoOp>
              (ImplicitCastExpr 0xa6fed50 <col:34> 'difference_type':'int' <IntegralCast>
                (ImplicitCastExpr 0xa6fed40 <col:34> 'size_type':'unsigned int' <LValueToRValue>
                  (DeclRefExpr 0xa6fed28 <col:34> 'size_type':'unsigned int' lvalue ParmVar 0xa6fd9b0 '__n' 'size_type':'unsigned int')))))))
      (CallExpr 0xa6fee60 <line:663:4, col:24> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa6fee28 <col:4, col:10> '<dependent type>' lvalue
          (CXXThisExpr 0xa6fee18 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
      (BinaryOperator 0xa6ff0e0 <line:664:4, line:666:30> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6feec8 <line:664:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6fee90 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6fee80 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (ParenExpr 0xa6ff0c8 <col:38, line:666:30> '_Bit_type *'
          (BinaryOperator 0xa6ff0b0 <line:664:39, line:666:29> '_Bit_type *' '+'
            (ImplicitCastExpr 0xa6ff0a0 <line:664:39> '_Bit_type *' <LValueToRValue>
              (DeclRefExpr 0xa6feefc <col:39> '_Bit_type *' lvalue Var 0xa6fe6a0 '__q' '_Bit_type *'))
            (ParenExpr 0xa6ff088 <col:45, line:666:29> 'unsigned int'
              (BinaryOperator 0xa6ff070 <line:664:46, line:666:28> 'unsigned int' '/'
                (ParenExpr 0xa6feff8 <line:664:46, line:665:34> 'unsigned int'
                  (BinaryOperator 0xa6fefe0 <line:664:47, line:665:33> 'unsigned int' '-'
                    (BinaryOperator 0xa6fefa0 <line:664:47, line:665:29> 'unsigned int' '+'
                      (ImplicitCastExpr 0xa6fef80 <line:664:47> 'size_type':'unsigned int' <LValueToRValue>
                        (DeclRefExpr 0xa6fef14 <col:47> 'const size_type':'const unsigned int' lvalue Var 0xa6fe5a0 '__len' 'const size_type':'const unsigned int'))
                      (ImplicitCastExpr 0xa6fef90 <line:665:14, col:29> 'unsigned int' <IntegralCast>
                        (CXXFunctionalCastExpr 0xa6fef68 <col:14, col:29> 'int' functional cast to int <NoOp>
                          (ImplicitCastExpr 0xa6fef58 <col:18> 'int' <IntegralCast>
                            (DeclRefExpr 0xa6fef3c <col:18> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
                    (ImplicitCastExpr 0xa6fefd0 <col:33> 'unsigned int' <IntegralCast>
                      (IntegerLiteral 0xa6fefb8 <col:33> 'int' 1))))
                (ImplicitCastExpr 0xa6ff060 <line:666:13, col:28> 'unsigned int' <IntegralCast>
                  (CXXFunctionalCastExpr 0xa6ff048 <col:13, col:28> 'int' functional cast to int <NoOp>
                    (ImplicitCastExpr 0xa6ff038 <col:17> 'int' <IntegralCast>
                      (DeclRefExpr 0xa6ff01c <col:17> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))))))
      (BinaryOperator 0xa6ff200 <line:667:4, col:44> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa6ff140 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa6ff108 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa6ff0f8 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CXXTemporaryObjectExpr 0xa6ff1d0 <col:29, col:44> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
          (ImplicitCastExpr 0xa6ff1b0 <col:38> '_Bit_type *' <LValueToRValue>
            (DeclRefExpr 0xa6ff180 <col:38> '_Bit_type *' lvalue Var 0xa6fe6a0 '__q' '_Bit_type *'))
          (ImplicitCastExpr 0xa6ff1c0 <col:43> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa6ff198 <col:43> 'int' 0)))))))


    template <typename _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) (CompoundStmt 0xa700a10 </usr/include/c++/4.6/bits/vector.tcc:677:7, line:706:7>
  (IfStmt 0xa7009f0 <line:678:2, line:705:4>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa6ff818 <line:678:6, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa6ff7d0 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (DeclRefExpr 0xa6ff79c <col:6> '_ForwardIterator' lvalue ParmVar 0xa6ff570 '__first' '_ForwardIterator')
      (DeclRefExpr 0xa6ff7b4 <col:17> '_ForwardIterator' lvalue ParmVar 0xa6ff5b0 '__last' '_ForwardIterator'))
    (CompoundStmt 0xa7009d8 <line:679:4, line:705:4>
      (DeclStmt 0xa6ff930 <line:680:6, col:52>
        0xa6ff850 "size_type __n =
          (CallExpr 0xa6ff908 <col:22, col:51> '<dependent type>'
            (UnresolvedLookupExpr 0xa6ff8a0 <col:22, col:27> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
            (DeclRefExpr 0xa6ff8d4 <col:36> '_ForwardIterator' lvalue ParmVar 0xa6ff570 '__first' '_ForwardIterator')
            (DeclRefExpr 0xa6ff8ec <col:45> '_ForwardIterator' lvalue ParmVar 0xa6ff5b0 '__last' '_ForwardIterator'))")
      (IfStmt 0xa7009b8 <line:681:6, line:704:8>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa6ffaa0 <line:681:10, col:33> '<dependent type>'
          (UnresolvedLookupExpr 0xa6ffa60 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
          (CXXOperatorCallExpr 0xa6ffa20 <col:10, col:28> '<dependent type>'
            (UnresolvedLookupExpr 0xa6ff9e0 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (CallExpr 0xa6ff970 <col:10, col:19> '<dependent type>'
              (MemberExpr 0xa6ff950 <col:10> '<bound member function type>' ->capacity 0xa6c3af0
                (CXXThisExpr 0xa6ff940 <col:10> 'vector<_Bool, type-parameter-0-0> *' this)))
            (CallExpr 0xa6ff9c0 <col:23, col:28> '<dependent type>'
              (MemberExpr 0xa6ff9a0 <col:23> '<bound member function type>' ->size 0xa6c39f0
                (CXXThisExpr 0xa6ff990 <col:23> 'vector<_Bool, type-parameter-0-0> *' this))))
          (DeclRefExpr 0xa6ffa44 <col:33> 'size_type':'unsigned int' lvalue Var 0xa6ff850 '__n' 'size_type':'unsigned int'))
        (CompoundStmt 0xa6ffed8 <line:682:8, line:688:8>
          (CallExpr 0xa6ffce8 <line:683:3, line:685:30> '<dependent type>'
            (UnresolvedLookupExpr 0xa6ffae8 <line:683:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653060)
            (DeclRefExpr 0xa6ffb1c <col:22> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6ff530 '__position' 'iterator':'struct std::_Bit_iterator')
            (CallExpr 0xa6ffb88 <col:34, col:38> '<dependent type>'
              (UnresolvedMemberExpr 0xa6ffb48 <col:34> '<bound member function type>' lvalue))
            (CXXOperatorCallExpr 0xa6ffcc0 <line:684:8, line:685:29> '<dependent type>'
              (UnresolvedLookupExpr 0xa6ffc80 <col:8, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
              (CXXDependentScopeMemberExpr 0xa6ffbf0 <line:684:8, col:22> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa6ffbb8 <col:8, col:14> '<dependent type>' lvalue
                  (CXXThisExpr 0xa6ffba8 <col:8> 'vector<_Bool, type-parameter-0-0> *' this)))
              (CXXFunctionalCastExpr 0xa6ffc68 <line:685:10, col:29> 'difference_type':'int' functional cast to difference_type <NoOp>
                (ImplicitCastExpr 0xa6ffc58 <col:26> 'difference_type':'int' <IntegralCast>
                  (ImplicitCastExpr 0xa6ffc48 <col:26> 'size_type':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa6ffc30 <col:26> 'size_type':'unsigned int' lvalue Var 0xa6ff850 '__n' 'size_type':'unsigned int'))))))
          (CallExpr 0xa6ffdb8 <line:686:3, col:40> '<dependent type>'
            (UnresolvedLookupExpr 0xa6ffd38 <col:3, col:8> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
            (DeclRefExpr 0xa6ffd6c <col:13> '_ForwardIterator' lvalue ParmVar 0xa6ff570 '__first' '_ForwardIterator')
            (DeclRefExpr 0xa6ffd84 <col:22> '_ForwardIterator' lvalue ParmVar 0xa6ff5b0 '__last' '_ForwardIterator')
            (DeclRefExpr 0xa6ffd9c <col:30> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6ff530 '__position' 'iterator':'struct std::_Bit_iterator'))
          (CompoundAssignOperator 0xa6ffeb8 <line:687:3, col:49> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
            (CXXDependentScopeMemberExpr 0xa6ffe28 <col:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa6ffdf0 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa6ffde0 <col:3> 'vector<_Bool, type-parameter-0-0> *' this)))
            (CXXFunctionalCastExpr 0xa6ffea0 <col:30, col:49> 'difference_type':'int' functional cast to difference_type <NoOp>
              (ImplicitCastExpr 0xa6ffe90 <col:46> 'difference_type':'int' <IntegralCast>
                (ImplicitCastExpr 0xa6ffe80 <col:46> 'size_type':'unsigned int' <LValueToRValue>
                  (DeclRefExpr 0xa6ffe68 <col:46> 'size_type':'unsigned int' lvalue Var 0xa6ff850 '__n' 'size_type':'unsigned int'))))))
        (CompoundStmt 0xa700988 <line:690:8, line:704:8>
          (DeclStmt 0xa700028 <line:691:3, line:692:55>
            0xa6fff00 "const size_type __len =
              (CallExpr 0xa700000 <col:5, col:54> '<dependent type>'
                (MemberExpr 0xa6fff48 <col:5> '<bound member function type>' ->_M_check_len 0xa6ccad0
                  (CXXThisExpr 0xa6fff38 <col:5> 'vector<_Bool, type-parameter-0-0> *' this))
                (DeclRefExpr 0xa6fff68 <col:18> 'size_type':'unsigned int' lvalue Var 0xa6ff850 '__n' 'size_type':'unsigned int')
                (StringLiteral 0xa6fffc0 <col:23> 'const char [30]' lvalue "vector<bool>::_M_insert_range"))")
          (DeclStmt 0xa700108 <line:693:3, col:45>
            0xa700050 "_Bit_type *__q =
              (CallExpr 0xa7000e8 <col:21, col:44> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa700098 <col:21, col:27> '<dependent type>' lvalue
                  (CXXThisExpr 0xa700088 <col:21> 'vector<_Bool, type-parameter-0-0> *' this))
                (DeclRefExpr 0xa7000cc <col:39> 'const size_type':'const unsigned int' lvalue Var 0xa6fff00 '__len' 'const size_type':'const unsigned int'))")
          (DeclStmt 0xa7002d8 <line:694:3, line:695:30>
            0xa700120 "iterator __i =
              (CallExpr 0xa7002b0 <line:694:18, line:695:29> '<dependent type>'
                (MemberExpr 0xa700168 <line:694:18> '<bound member function type>' ->_M_copy_aligned 0xa6c6050
                  (CXXThisExpr 0xa700158 <col:18> 'vector<_Bool, type-parameter-0-0> *' this))
                (CallExpr 0xa7001d8 <col:34, col:40> '<dependent type>'
                  (UnresolvedMemberExpr 0xa700198 <col:34> '<bound member function type>' lvalue))
                (DeclRefExpr 0xa7001f4 <col:43> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6ff530 '__position' 'iterator':'struct std::_Bit_iterator')
                (CXXTemporaryObjectExpr 0xa700268 <line:695:13, col:28> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
                  (ImplicitCastExpr 0xa700248 <col:22> '_Bit_type *' <LValueToRValue>
                    (DeclRefExpr 0xa700218 <col:22> '_Bit_type *' lvalue Var 0xa700050 '__q' '_Bit_type *'))
                  (ImplicitCastExpr 0xa700258 <col:27> 'unsigned int' <IntegralCast>
                    (IntegerLiteral 0xa700230 <col:27> 'int' 0))))")
          (BinaryOperator 0xa7003c0 <line:696:3, col:39> '<dependent type>' '='
            (DeclRefExpr 0xa7002e8 <col:3> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa700120 '__i' 'iterator':'struct std::_Bit_iterator')
            (CallExpr 0xa700398 <col:9, col:39> '<dependent type>'
              (UnresolvedLookupExpr 0xa700318 <col:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
              (DeclRefExpr 0xa70034c <col:19> '_ForwardIterator' lvalue ParmVar 0xa6ff570 '__first' '_ForwardIterator')
              (DeclRefExpr 0xa700364 <col:28> '_ForwardIterator' lvalue ParmVar 0xa6ff5b0 '__last' '_ForwardIterator')
              (DeclRefExpr 0xa70037c <col:36> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa700120 '__i' 'iterator':'struct std::_Bit_iterator')))
          (BinaryOperator 0xa700570 <line:697:3, col:61> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa700420 <col:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa7003e8 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa7003d8 <col:3> 'vector<_Bool, type-parameter-0-0> *' this)))
            (CallExpr 0xa700548 <col:29, col:61> '<dependent type>'
              (UnresolvedLookupExpr 0xa700470 <col:29, col:34> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
              (DeclRefExpr 0xa7004a4 <col:39> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa6ff530 '__position' 'iterator':'struct std::_Bit_iterator')
              (CallExpr 0xa700510 <col:51, col:55> '<dependent type>'
                (UnresolvedMemberExpr 0xa7004d0 <col:51> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa70052c <col:58> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa700120 '__i' 'iterator':'struct std::_Bit_iterator')))
          (CallExpr 0xa7005d0 <line:698:3, col:23> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa700598 <col:3, col:9> '<dependent type>' lvalue
              (CXXThisExpr 0xa700588 <col:3> 'vector<_Bool, type-parameter-0-0> *' this)))
          (BinaryOperator 0xa700850 <line:699:3, line:702:32> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa700638 <line:699:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa700600 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa7005f0 <col:3> 'vector<_Bool, type-parameter-0-0> *' this)))
            (ParenExpr 0xa700838 <col:37, line:702:32> '_Bit_type *'
              (BinaryOperator 0xa700820 <line:699:38, line:702:31> '_Bit_type *' '+'
                (ImplicitCastExpr 0xa700810 <line:699:38> '_Bit_type *' <LValueToRValue>
                  (DeclRefExpr 0xa70066c <col:38> '_Bit_type *' lvalue Var 0xa700050 '__q' '_Bit_type *'))
                (ParenExpr 0xa7007f8 <line:700:12, line:702:31> 'unsigned int'
                  (BinaryOperator 0xa7007e0 <line:700:13, line:702:30> 'unsigned int' '/'
                    (ParenExpr 0xa700768 <line:700:13, line:701:36> 'unsigned int'
                      (BinaryOperator 0xa700750 <line:700:14, line:701:35> 'unsigned int' '-'
                        (BinaryOperator 0xa700710 <line:700:14, line:701:31> 'unsigned int' '+'
                          (ImplicitCastExpr 0xa7006f0 <line:700:14> 'size_type':'unsigned int' <LValueToRValue>
                            (DeclRefExpr 0xa700684 <col:14> 'const size_type':'const unsigned int' lvalue Var 0xa6fff00 '__len' 'const size_type':'const unsigned int'))
                          (ImplicitCastExpr 0xa700700 <line:701:16, col:31> 'unsigned int' <IntegralCast>
                            (CXXFunctionalCastExpr 0xa7006d8 <col:16, col:31> 'int' functional cast to int <NoOp>
                              (ImplicitCastExpr 0xa7006c8 <col:20> 'int' <IntegralCast>
                                (DeclRefExpr 0xa7006ac <col:20> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
                        (ImplicitCastExpr 0xa700740 <col:35> 'unsigned int' <IntegralCast>
                          (IntegerLiteral 0xa700728 <col:35> 'int' 1))))
                    (ImplicitCastExpr 0xa7007d0 <line:702:15, col:30> 'unsigned int' <IntegralCast>
                      (CXXFunctionalCastExpr 0xa7007b8 <col:15, col:30> 'int' functional cast to int <NoOp>
                        (ImplicitCastExpr 0xa7007a8 <col:19> 'int' <IntegralCast>
                          (DeclRefExpr 0xa70078c <col:19> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))))))
          (BinaryOperator 0xa700970 <line:703:3, col:43> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa7008b0 <col:3, col:17> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa700878 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa700868 <col:3> 'vector<_Bool, type-parameter-0-0> *' this)))
            (CXXTemporaryObjectExpr 0xa700940 <col:28, col:43> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
              (ImplicitCastExpr 0xa700920 <col:37> '_Bit_type *' <LValueToRValue>
                (DeclRefExpr 0xa7008f0 <col:37> '_Bit_type *' lvalue Var 0xa700050 '__q' '_Bit_type *'))
              (ImplicitCastExpr 0xa700930 <col:42> 'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa700908 <col:42> 'int' 0)))))))
    <<<NULL>>>))

;
    void _M_insert_aux(iterator __position, bool __x) (CompoundStmt 0xa701ea0 </usr/include/c++/4.6/bits/vector.tcc:712:5, line:735:5>
  (IfStmt 0xa701e80 <line:713:7, line:734:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa700f38 <line:713:11, col:57> '<dependent type>'
      (UnresolvedLookupExpr 0xa700ef0 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50)
      (CXXDependentScopeMemberExpr 0xa700e38 <col:11, col:35> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa700e00 <col:11, col:25> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa700dc8 <col:11, col:17> '<dependent type>' lvalue
            (CXXThisExpr 0xa700db8 <col:11> 'vector<_Bool, type-parameter-0-0> *' this))))
      (CXXDependentScopeMemberExpr 0xa700eb8 <col:43, col:57> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa700e80 <col:43, col:49> '<dependent type>' lvalue
          (CXXThisExpr 0xa700e70 <col:43> 'vector<_Bool, type-parameter-0-0> *' this))))
    (CompoundStmt 0xa7012f8 <line:714:2, line:719:2>
      (CallExpr 0xa701150 <line:715:4, line:716:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa700f80 <line:715:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa653060)
        (DeclRefExpr 0xa700fb4 <col:23> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa700c80 '__position' 'iterator':'struct std::_Bit_iterator')
        (CXXDependentScopeMemberExpr 0xa701018 <col:35, col:49> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa700fe0 <col:35, col:41> '<dependent type>' lvalue
            (CXXThisExpr 0xa700fd0 <col:35> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CXXOperatorCallExpr 0xa701128 <line:716:9, col:35> '<dependent type>'
          (UnresolvedLookupExpr 0xa7010e8 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
          (CXXDependentScopeMemberExpr 0xa701098 <col:9, col:23> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa701060 <col:9, col:15> '<dependent type>' lvalue
              (CXXThisExpr 0xa701050 <col:9> 'vector<_Bool, type-parameter-0-0> *' this)))
          (IntegerLiteral 0xa7010d0 <col:35> 'int' 1)))
      (CXXOperatorCallExpr 0xa701238 <line:717:4, col:18> 'struct std::_Bit_reference' lvalue
        (ImplicitCastExpr 0xa701228 <col:16, <invalid sloc>> 'struct std::_Bit_reference &(*)(_Bool)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa701210 <col:16, <invalid sloc>> 'struct std::_Bit_reference &(_Bool)' lvalue CXXMethod 0xa6b6d10 'operator=' 'struct std::_Bit_reference &(_Bool)'))
        (CXXOperatorCallExpr 0xa7011c8 <col:4, col:5> 'reference':'struct std::_Bit_reference'
          (ImplicitCastExpr 0xa7011b8 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa7011a0 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa6bab60 'operator*' 'reference (void) const'))
          (ImplicitCastExpr 0xa701190 <col:5> 'const struct std::_Bit_iterator' lvalue <NoOp>
            (DeclRefExpr 0xa701178 <col:5> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa700c80 '__position' 'iterator':'struct std::_Bit_iterator')))
        (ImplicitCastExpr 0xa701200 <col:18> '_Bool' <LValueToRValue>
          (DeclRefExpr 0xa7011e8 <col:18> '_Bool' lvalue ParmVar 0xa700cc0 '__x' '_Bool')))
      (UnaryOperator 0xa7012e0 <line:718:4, col:20> '<dependent type>' prefix '++'
        (CXXDependentScopeMemberExpr 0xa7012a8 <col:6, col:20> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa701270 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa701260 <col:6> 'vector<_Bool, type-parameter-0-0> *' this)))))
    (CompoundStmt 0xa701e50 <line:721:2, line:734:2>
      (DeclStmt 0xa701470 <line:722:4, line:723:63>
        0xa701320 "const size_type __len =
          (CallExpr 0xa701448 <col:6, col:62> '<dependent type>'
            (MemberExpr 0xa701368 <col:6> '<bound member function type>' ->_M_check_len 0xa6ccad0
              (CXXThisExpr 0xa701358 <col:6> 'vector<_Bool, type-parameter-0-0> *' this))
            (CXXFunctionalCastExpr 0xa7013b8 <col:19, col:30> 'size_type':'unsigned int' functional cast to size_type <NoOp>
              (ImplicitCastExpr 0xa7013a8 <col:29> 'size_type':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa701390 <col:29> 'int' 1)))
            (StringLiteral 0xa701410 <col:33> 'const char [28]' lvalue "vector<bool>::_M_insert_aux"))")
      (DeclStmt 0xa701548 <line:724:4, col:46>
        0xa701490 "_Bit_type *__q =
          (CallExpr 0xa701528 <col:22, col:45> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa7014d8 <col:22, col:28> '<dependent type>' lvalue
              (CXXThisExpr 0xa7014c8 <col:22> 'vector<_Bool, type-parameter-0-0> *' this))
            (DeclRefExpr 0xa70150c <col:40> 'const size_type':'const unsigned int' lvalue Var 0xa701320 '__len' 'const size_type':'const unsigned int'))")
      (DeclStmt 0xa701700 <line:725:4, line:726:24>
        0xa701560 "iterator __i =
          (CallExpr 0xa7016d8 <line:725:19, line:726:23> '<dependent type>'
            (MemberExpr 0xa7015a8 <line:725:19> '<bound member function type>' ->_M_copy_aligned 0xa6c6050
              (CXXThisExpr 0xa701598 <col:19> 'vector<_Bool, type-parameter-0-0> *' this))
            (CallExpr 0xa701618 <col:35, col:41> '<dependent type>'
              (UnresolvedMemberExpr 0xa7015d8 <col:35> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa701634 <col:44> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa700c80 '__position' 'iterator':'struct std::_Bit_iterator')
            (CXXTemporaryObjectExpr 0xa7016a8 <line:726:7, col:22> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
              (ImplicitCastExpr 0xa701688 <col:16> '_Bit_type *' <LValueToRValue>
                (DeclRefExpr 0xa701658 <col:16> '_Bit_type *' lvalue Var 0xa701490 '__q' '_Bit_type *'))
              (ImplicitCastExpr 0xa701698 <col:21> 'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa701670 <col:21> 'int' 0))))")
      (CXXOperatorCallExpr 0xa701878 <line:727:4, col:13> 'struct std::_Bit_reference' lvalue
        (ImplicitCastExpr 0xa701868 <col:11, <invalid sloc>> 'struct std::_Bit_reference &(*)(_Bool)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa701850 <col:11, <invalid sloc>> 'struct std::_Bit_reference &(_Bool)' lvalue CXXMethod 0xa6b6d10 'operator=' 'struct std::_Bit_reference &(_Bool)'))
        (CXXOperatorCallExpr 0xa701808 <col:4, col:8> 'reference':'struct std::_Bit_reference'
          (ImplicitCastExpr 0xa7017f8 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa7017e0 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xa6bab60 'operator*' 'reference (void) const'))
          (ImplicitCastExpr 0xa7017d0 <col:5, col:8> 'const struct std::_Bit_iterator' lvalue <NoOp>
            (CXXOperatorCallExpr 0xa7017a8 <col:5, col:8> 'iterator':'struct std::_Bit_iterator'
              (ImplicitCastExpr 0xa701798 <<invalid sloc>> 'iterator (*)(int)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa701740 <<invalid sloc>> 'iterator (int)' lvalue CXXMethod 0xa6bad70 'operator++' 'iterator (int)'))
              (DeclRefExpr 0xa701710 <col:5> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa701560 '__i' 'iterator':'struct std::_Bit_iterator')
              (IntegerLiteral 0xa701728 <<invalid sloc>> 'int' 0))))
        (ImplicitCastExpr 0xa701840 <col:13> '_Bool' <LValueToRValue>
          (DeclRefExpr 0xa701828 <col:13> '_Bool' lvalue ParmVar 0xa700cc0 '__x' '_Bool')))
      (BinaryOperator 0xa701a38 <line:728:4, col:62> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa7018e8 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa7018b0 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa7018a0 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CallExpr 0xa701a10 <col:30, col:62> '<dependent type>'
          (UnresolvedLookupExpr 0xa701938 <col:30, col:35> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
          (DeclRefExpr 0xa70196c <col:40> 'iterator':'struct std::_Bit_iterator' lvalue ParmVar 0xa700c80 '__position' 'iterator':'struct std::_Bit_iterator')
          (CallExpr 0xa7019d8 <col:52, col:56> '<dependent type>'
            (UnresolvedMemberExpr 0xa701998 <col:52> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa7019f4 <col:59> 'iterator':'struct std::_Bit_iterator' lvalue Var 0xa701560 '__i' 'iterator':'struct std::_Bit_iterator')))
      (CallExpr 0xa701a98 <line:729:4, col:24> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa701a60 <col:4, col:10> '<dependent type>' lvalue
          (CXXThisExpr 0xa701a50 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
      (BinaryOperator 0xa701d18 <line:730:4, line:732:30> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa701b00 <line:730:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa701ac8 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa701ab8 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (ParenExpr 0xa701d00 <col:38, line:732:30> '_Bit_type *'
          (BinaryOperator 0xa701ce8 <line:730:39, line:732:29> '_Bit_type *' '+'
            (ImplicitCastExpr 0xa701cd8 <line:730:39> '_Bit_type *' <LValueToRValue>
              (DeclRefExpr 0xa701b34 <col:39> '_Bit_type *' lvalue Var 0xa701490 '__q' '_Bit_type *'))
            (ParenExpr 0xa701cc0 <col:45, line:732:29> 'unsigned int'
              (BinaryOperator 0xa701ca8 <line:730:46, line:732:28> 'unsigned int' '/'
                (ParenExpr 0xa701c30 <line:730:46, line:731:34> 'unsigned int'
                  (BinaryOperator 0xa701c18 <line:730:47, line:731:33> 'unsigned int' '-'
                    (BinaryOperator 0xa701bd8 <line:730:47, line:731:29> 'unsigned int' '+'
                      (ImplicitCastExpr 0xa701bb8 <line:730:47> 'size_type':'unsigned int' <LValueToRValue>
                        (DeclRefExpr 0xa701b4c <col:47> 'const size_type':'const unsigned int' lvalue Var 0xa701320 '__len' 'const size_type':'const unsigned int'))
                      (ImplicitCastExpr 0xa701bc8 <line:731:14, col:29> 'unsigned int' <IntegralCast>
                        (CXXFunctionalCastExpr 0xa701ba0 <col:14, col:29> 'int' functional cast to int <NoOp>
                          (ImplicitCastExpr 0xa701b90 <col:18> 'int' <IntegralCast>
                            (DeclRefExpr 0xa701b74 <col:18> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))
                    (ImplicitCastExpr 0xa701c08 <col:33> 'unsigned int' <IntegralCast>
                      (IntegerLiteral 0xa701bf0 <col:33> 'int' 1))))
                (ImplicitCastExpr 0xa701c98 <line:732:13, col:28> 'unsigned int' <IntegralCast>
                  (CXXFunctionalCastExpr 0xa701c80 <col:13, col:28> 'int' functional cast to int <NoOp>
                    (ImplicitCastExpr 0xa701c70 <col:17> 'int' <IntegralCast>
                      (DeclRefExpr 0xa701c54 <col:17> 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>' EnumConstant 0xa6b67a0 '_S_word_bit' 'enum std::<anonymous at /usr/include/c++/4.6/bits/stl_bvector.h:67:3>')))))))))
      (BinaryOperator 0xa701e38 <line:733:4, col:44> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa701d78 <col:4, col:18> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa701d40 <col:4, col:10> '<dependent type>' lvalue
            (CXXThisExpr 0xa701d30 <col:4> 'vector<_Bool, type-parameter-0-0> *' this)))
        (CXXTemporaryObjectExpr 0xa701e08 <col:29, col:44> 'iterator':'struct std::_Bit_iterator''void (_Bit_type *, unsigned int)'
          (ImplicitCastExpr 0xa701de8 <col:38> '_Bit_type *' <LValueToRValue>
            (DeclRefExpr 0xa701db8 <col:38> '_Bit_type *' lvalue Var 0xa701490 '__q' '_Bit_type *'))
          (ImplicitCastExpr 0xa701df8 <col:43> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa701dd0 <col:43> 'int' 0)))))))


}
namespace std {
    template <typename _Alloc = wchar_t> class allocator : public __gnu_cxx::new_allocator<wchar_t> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef wchar_t *pointer;
        typedef const wchar_t *const_pointer;
        typedef wchar_t &reference;
        typedef const wchar_t &const_reference;
        typedef wchar_t value_type;
        template <typename _Tp1 = wchar_t> struct rebind {
            struct rebind;
            typedef allocator<wchar_t> other;
        }
template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<wchar_t> &__a) throw();
        template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw();
    }
template <typename _Alloc = std::basic_string<char>> class allocator : public __gnu_cxx::new_allocator<basic_string<char> > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::basic_string<char> *pointer;
        typedef const std::basic_string<char> *const_pointer;
        typedef std::basic_string<char> &reference;
        typedef const std::basic_string<char> &const_reference;
        typedef std::basic_string<char> value_type;
        template <typename _Tp1 = std::basic_string<char>> struct rebind {
            struct rebind;
            typedef allocator<std::basic_string<char> > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<basic_string<char> >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::basic_string<char> > &__a) throw() : __gnu_cxx::new_allocator<basic_string<char> >((ImplicitCastExpr 0xa9eb6b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<class std::basic_string<char> >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9eb408 <col:39> 'const class std::allocator<class std::basic_string<char> >' lvalue ParmVar 0xa957fa0 '__a' 'const class std::allocator<class std::basic_string<char> > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::basic_string<char>> allocator(const allocator<std::basic_string<char> > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Alloc = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class allocator : public __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *pointer;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *const_pointer;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &reference;
        typedef const std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &const_reference;
        typedef std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > value_type;
        template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > >() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__a) throw();
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Alloc = void> class allocator {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef void *pointer;
        typedef const void *const_pointer;
        typedef void value_type;
        template <typename _Tp1> struct rebind {
            struct rebind;
            typedef allocator<_Tp1> other;
        };
    }
template <typename _Alloc = char> class allocator : public __gnu_cxx::new_allocator<char> {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef char *pointer;
        typedef const char *const_pointer;
        typedef char &reference;
        typedef const char &const_reference;
        typedef char value_type;
        template <typename _Tp1 = char> struct rebind {
            struct rebind;
            typedef allocator<char> other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw() : __gnu_cxx::new_allocator<char>() (CompoundStmt 0xa678168 </usr/include/c++/4.6/bits/allocator.h:107:27, col:29>)


        allocator(const std::allocator<char> &__a) throw() : __gnu_cxx::new_allocator<char>((ImplicitCastExpr 0xa9d03b0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<char>' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9d0104 <col:39> 'const class std::allocator<char>' lvalue ParmVar 0xa67ca40 '__a' 'const class std::allocator<char> &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = char> allocator(const allocator<char> &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Alloc = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> class allocator : public __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > {
        class allocator;
    public:
    public:
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *const_pointer;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &const_reference;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> struct rebind {
            struct rebind;
            typedef allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > other;
        }
template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct rebind {
            struct rebind;
            typedef allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > other;
        }
template <typename _Tp1> struct rebind;
        allocator() throw();
        allocator(const std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &__a) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >((ImplicitCastExpr 0xa9dedf0 </usr/include/c++/4.6/bits/allocator.h:110:39> 'const class __gnu_cxx::new_allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <DerivedToBase (new_allocator)>
  (DeclRefExpr 0xa9deb4c <col:39> 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9c1e00 '__a' 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &'))
) (CompoundStmt 0xa678280 </usr/include/c++/4.6/bits/allocator.h:110:44, col:46>)


        template <typename _Tp1 = std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> allocator(const allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &) throw() : __gnu_cxx::new_allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >() (CompoundStmt 0xa678290 </usr/include/c++/4.6/bits/allocator.h:113:51, col:53>)

template <typename _Tp1 = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> allocator(const allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw()template <typename _Tp1> allocator(const allocator<_Tp1> &) throw();
        void ~allocator() throw() (CompoundStmt 0xa6782a0 </usr/include/c++/4.6/bits/allocator.h:115:28, col:30>)


    }
template <typename _Alloc> class allocator;
    template <class _CharT = wchar_t> struct char_traits {
        struct char_traits;
        typedef wchar_t char_type;
        typedef wint_t int_type;
        typedef streamoff off_type;
        typedef wstreampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723ce8 </usr/include/c++/4.6/bits/char_traits.h:315:7, col:22>
  (BinaryOperator 0xa723cd0 <col:9, col:16> 'char_type':'wchar_t' lvalue '='
    (DeclRefExpr 0xa723c90 <col:9> 'char_type':'wchar_t' lvalue ParmVar 0xa722950 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa723cc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
      (DeclRefExpr 0xa723ca8 <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7229c0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723d78 </usr/include/c++/4.6/bits/char_traits.h:319:7, col:30>
  (ReturnStmt 0xa723d68 <col:9, col:24>
    (BinaryOperator 0xa723d50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa723d30 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723cfc <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ae0 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723d40 <col:24> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d14 <col:24> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722b30 '__c2' 'const char_type &')))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723e08 </usr/include/c++/4.6/bits/char_traits.h:323:7, col:29>
  (ReturnStmt 0xa723df8 <col:9, col:23>
    (BinaryOperator 0xa723de0 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa723dc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d8c <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722c50 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723dd0 <col:23> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723da4 <col:23> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ca0 '__c2' 'const char_type &')))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa723f70 </usr/include/c++/4.6/bits/char_traits.h:327:7, col:42>
  (ReturnStmt 0xa723f60 <col:9, col:39>
    (CallExpr 0xa723f08 <col:16, col:39> 'int'
      (ImplicitCastExpr 0xa723ef8 <col:16> 'int (*)(const wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723e9c <col:16> 'int (const wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b450 'wmemcmp' 'int (const wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa7134b0 'wmemcmp')))
      (ImplicitCastExpr 0xa723f30 <col:24> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e54 <col:24> 'const char_type *' lvalue ParmVar 0xa722da0 '__s1' 'const char_type *'))
      (ImplicitCastExpr 0xa723f40 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e6c <col:30> 'const char_type *' lvalue ParmVar 0xa722df0 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa723f50 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa723e84 <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa722e30 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa724518 </usr/include/c++/4.6/bits/char_traits.h:331:7, col:29>
  (ReturnStmt 0xa724508 <col:9, col:26>
    (CallExpr 0xa7244d8 <col:16, col:26> 'size_t':'unsigned int'
      (ImplicitCastExpr 0xa7244c8 <col:16> 'size_t (*)(const wchar_t *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723fd4 <col:16> 'size_t (const wchar_t *) throw()' lvalue Function 0xa70ad90 'wcslen' 'size_t (const wchar_t *) throw()' (UsingShadow 0xa712f00 'wcslen')))
      (ImplicitCastExpr 0xa7244f8 <col:23> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723fbc <col:23> 'const char_type *' lvalue ParmVar 0xa722f40 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa724658 </usr/include/c++/4.6/bits/char_traits.h:335:7, col:40>
  (ReturnStmt 0xa724648 <col:9, col:37>
    (ImplicitCastExpr 0xa724638 <col:16, col:37> 'const char_type *' <NoOp>
      (CallExpr 0xa7245e0 <col:16, col:37> 'wchar_t *'
        (ImplicitCastExpr 0xa7245d0 <col:16> 'wchar_t *(*)(const wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7245b0 <col:16> 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b2a0 'wmemchr' 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713910 'wmemchr')))
        (ImplicitCastExpr 0xa724608 <col:24> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa724568 <col:24> 'const char_type *' lvalue ParmVar 0xa723040 '__s' 'const char_type *'))
        (ImplicitCastExpr 0xa724618 <col:29> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724580 <col:29> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7230d0 '__a' 'const char_type &'))
        (ImplicitCastExpr 0xa724628 <col:34> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724598 <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723080 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7247c0 </usr/include/c++/4.6/bits/char_traits.h:339:7, col:43>
  (ReturnStmt 0xa7247b0 <col:9, col:40>
    (CallExpr 0xa724758 <col:16, col:40> 'wchar_t *'
      (ImplicitCastExpr 0xa724748 <col:16> 'wchar_t *(*)(wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7246ec <col:16> 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b7a0 'wmemmove' 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa713590 'wmemmove')))
      (ImplicitCastExpr 0xa724780 <col:25> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246a4 <col:25> 'char_type *' lvalue ParmVar 0xa723230 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa724790 <col:31> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246bc <col:31> 'const char_type *' lvalue ParmVar 0xa723280 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7247a0 <col:37> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7246d4 <col:37> 'size_t':'unsigned int' lvalue ParmVar 0xa7232c0 '__n' 'size_t':'unsigned int')))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa724900 </usr/include/c++/4.6/bits/char_traits.h:343:7, col:42>
  (ReturnStmt 0xa7248f0 <col:9, col:39>
    (CallExpr 0xa724898 <col:16, col:39> 'wchar_t *'
      (ImplicitCastExpr 0xa724888 <col:16> 'wchar_t *(*)(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724854 <col:16> 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' lvalue Function 0xa70b600 'wmemcpy' 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' (UsingShadow 0xa713520 'wmemcpy')))
      (ImplicitCastExpr 0xa7248c0 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72480c <col:24> 'char_type *' lvalue ParmVar 0xa7233d0 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa7248d0 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa724824 <col:30> 'const char_type *' lvalue ParmVar 0xa723420 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7248e0 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72483c <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa723460 '__n' 'size_t':'unsigned int')))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa724a60 </usr/include/c++/4.6/bits/char_traits.h:347:7, col:40>
  (ReturnStmt 0xa724a50 <col:9, col:37>
    (CallExpr 0xa7249f8 <col:16, col:37> 'wchar_t *'
      (ImplicitCastExpr 0xa7249e8 <col:16> 'wchar_t *(*)(wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724994 <col:16> 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b960 'wmemset' 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713600 'wmemset')))
      (ImplicitCastExpr 0xa724a20 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72494c <col:24> 'char_type *' lvalue ParmVar 0xa723540 '__s' 'char_type *'))
      (ImplicitCastExpr 0xa724a30 <col:29> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa724964 <col:29> 'char_type':'wchar_t' lvalue ParmVar 0xa7235c0 '__a' 'char_type':'wchar_t'))
      (ImplicitCastExpr 0xa724a40 <col:34> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72497c <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723580 '__n' 'size_t':'unsigned int')))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa724ae0 </usr/include/c++/4.6/bits/char_traits.h:351:7, col:32>
  (ReturnStmt 0xa724ad0 <col:9, col:29>
    (CXXFunctionalCastExpr 0xa724ab8 <col:16, col:29> 'char_type':'wchar_t' functional cast to char_type <NoOp>
      (ImplicitCastExpr 0xa724aa8 <col:26> 'char_type':'wchar_t' <IntegralCast>
        (ImplicitCastExpr 0xa724a98 <col:26> 'int_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724a80 <col:26> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723730 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa724b60 </usr/include/c++/4.6/bits/char_traits.h:355:7, col:31>
  (ReturnStmt 0xa724b50 <col:9, col:28>
    (CXXFunctionalCastExpr 0xa724b38 <col:16, col:28> 'int_type':'unsigned int' functional cast to int_type <NoOp>
      (ImplicitCastExpr 0xa724b28 <col:25> 'int_type':'unsigned int' <IntegralCast>
        (ImplicitCastExpr 0xa724b18 <col:25> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724b00 <col:25> 'const char_type':'const wchar_t' lvalue ParmVar 0xa723850 '__c' 'const char_type &'))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa724bf0 </usr/include/c++/4.6/bits/char_traits.h:359:7, col:30>
  (ReturnStmt 0xa724be0 <col:9, col:24>
    (BinaryOperator 0xa724bc8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa724ba8 <col:16> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b74 <col:16> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723970 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa724bb8 <col:24> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b8c <col:24> 'const int_type':'const unsigned int' lvalue ParmVar 0xa7239c0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa724c68 </usr/include/c++/4.6/bits/char_traits.h:363:7, col:45>
  (ReturnStmt 0xa724c58 <col:9, col:42>
    (CXXStaticCastExpr 0xa724c40 <col:16, col:42> 'int_type':'unsigned int' static_cast<int_type> <NoOp>
      (ParenExpr 0xa724c20 </usr/include/wchar.h:119:15, col:27> 'unsigned int'
        (IntegerLiteral 0xa724c08 <col:16> 'unsigned int' 4294967295)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa724e40 </usr/include/c++/4.6/bits/char_traits.h:367:7, col:51>
  (ReturnStmt 0xa724e30 <col:9, col:46>
    (ConditionalOperator 0xa724e10 <col:16, col:46> 'unsigned int'
      (CallExpr 0xa724d88 <col:16, col:38> '_Bool'
        (ImplicitCastExpr 0xa724d78 <col:16> '_Bool (*)(const int_type &, const int_type &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa724c7c <col:16> '_Bool (const int_type &, const int_type &)' lvalue CXXMethod 0xa723a60 'eq_int_type' '_Bool (const int_type &, const int_type &)'))
        (DeclRefExpr 0xa724c94 <col:28> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')
        (MaterializeTemporaryExpr 0xa724db0 <col:33, col:37> 'const int_type':'const unsigned int' lvalue
          (CallExpr 0xa724d18 <col:33, col:37> 'int_type':'unsigned int'
            (ImplicitCastExpr 0xa724d08 <col:33> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa724cac <col:33> 'int_type (void)' lvalue CXXMethod 0xa723b00 'eof' 'int_type (void)')))))
      (ImplicitCastExpr 0xa724e00 <col:42> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa724dc0 <col:42> 'int' 0))
      (ImplicitCastExpr 0xa724df0 <col:46> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724dd8 <col:46> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')))))


    }
template <class _CharT = char> struct char_traits {
        struct char_traits;
        typedef char char_type;
        typedef int int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fbc8 </usr/include/c++/4.6/bits/char_traits.h:244:7, col:22>
  (BinaryOperator 0xa71fbb0 <col:9, col:16> 'char_type':'char' lvalue '='
    (DeclRefExpr 0xa71fb70 <col:9> 'char_type':'char' lvalue ParmVar 0xa71e830 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa71fba0 <col:16> 'char_type':'char' <LValueToRValue>
      (DeclRefExpr 0xa71fb88 <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e8a0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fc78 </usr/include/c++/4.6/bits/char_traits.h:248:7, col:30>
  (ReturnStmt 0xa71fc68 <col:9, col:24>
    (BinaryOperator 0xa71fc50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa71fc20 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc10 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbdc <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e9c0 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fc40 <col:24> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc30 <col:24> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbf4 <col:24> 'const char_type':'const char' lvalue ParmVar 0xa71ea10 '__c2' 'const char_type &'))))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fd28 </usr/include/c++/4.6/bits/char_traits.h:252:7, col:29>
  (ReturnStmt 0xa71fd18 <col:9, col:23>
    (BinaryOperator 0xa71fd00 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa71fcd0 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fcc0 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fc8c <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71eb30 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fcf0 <col:23> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fce0 <col:23> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fca4 <col:23> 'const char_type':'const char' lvalue ParmVar 0xa71eb80 '__c2' 'const char_type &'))))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa71fe50 </usr/include/c++/4.6/bits/char_traits.h:256:7, col:51>
  (ReturnStmt 0xa71fe40 <col:9, col:48>
    (CallExpr 0xa71fdc8 <col:16, col:48> 'int'
      (ImplicitCastExpr 0xa71fdb8 <col:16> 'int (*)(const void *, const void *, unsigned int)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71fd3c <col:16> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)'))
      (ImplicitCastExpr 0xa71fe00 <col:33> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fdf0 <col:33> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd54 <col:33> 'const char_type *' lvalue ParmVar 0xa71ec80 '__s1' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe20 <col:39> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fe10 <col:39> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd6c <col:39> 'const char_type *' lvalue ParmVar 0xa71ecd0 '__s2' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe30 <col:45> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71fd84 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa71ed10 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa71ffe8 </usr/include/c++/4.6/bits/char_traits.h:260:7, col:39>
  (ReturnStmt 0xa71ffd8 <col:9, col:36>
    (CallExpr 0xa71ffa8 <col:16, col:36> 'unsigned int'
      (ImplicitCastExpr 0xa71ff98 <col:16> 'unsigned int (*)(const char *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71ff44 <col:16> 'unsigned int (const char *)' lvalue Function 0xa71fe70 '__builtin_strlen' 'unsigned int (const char *)'))
      (ImplicitCastExpr 0xa71ffc8 <col:33> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa71ff5c <col:33> 'const char_type *' lvalue ParmVar 0xa71ee20 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa7202a8 </usr/include/c++/4.6/bits/char_traits.h:264:7, col:80>
  (ReturnStmt 0xa720298 <col:9, col:77>
    (CXXStaticCastExpr 0xa720280 <col:16, col:77> 'const char_type *' static_cast<const char_type *> <BitCast>
      (CallExpr 0xa7201f8 <col:46, col:76> 'void *'
        (ImplicitCastExpr 0xa7201e8 <col:46> 'void *(*)(const void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720164 <col:46> 'void *(const void *, int, unsigned int)' lvalue Function 0xa720000 '__builtin_memchr' 'void *(const void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa720230 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720220 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72017c <col:63> 'const char_type *' lvalue ParmVar 0xa71ef20 '__s' 'const char_type *')))
        (ImplicitCastExpr 0xa720250 <col:68> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa720240 <col:68> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa720194 <col:68> 'const char_type':'const char' lvalue ParmVar 0xa71efb0 '__a' 'const char_type &')))
        (ImplicitCastExpr 0xa720260 <col:73> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7201ac <col:73> 'size_t':'unsigned int' lvalue ParmVar 0xa71ef60 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7203f8 </usr/include/c++/4.6/bits/char_traits.h:268:7, col:77>
  (ReturnStmt 0xa7203e8 <col:9, col:74>
    (CXXStaticCastExpr 0xa7203d0 <col:16, col:74> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa720348 <col:40, col:73> 'void *'
        (ImplicitCastExpr 0xa720338 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7202bc <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa720380 <col:58> 'void *' <BitCast>
          (ImplicitCastExpr 0xa720370 <col:58> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202d4 <col:58> 'char_type *' lvalue ParmVar 0xa71f110 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa7203a0 <col:64> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720390 <col:64> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202ec <col:64> 'const char_type *' lvalue ParmVar 0xa71f160 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa7203b0 <col:70> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa720304 <col:70> 'size_t':'unsigned int' lvalue ParmVar 0xa71f1a0 '__n' 'size_t':'unsigned int'))))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7220c8 </usr/include/c++/4.6/bits/char_traits.h:272:7, col:76>
  (ReturnStmt 0xa7220b8 <col:9, col:73>
    (CXXStaticCastExpr 0xa7220a0 <col:16, col:73> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722018 <col:40, col:72> 'void *'
        (ImplicitCastExpr 0xa722008 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720574 <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa720410 '__builtin_memcpy' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa722050 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722040 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72058c <col:57> 'char_type *' lvalue ParmVar 0xa71f2b0 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa722070 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa722060 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7205a4 <col:63> 'const char_type *' lvalue ParmVar 0xa71f300 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa722080 <col:69> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7205bc <col:69> 'size_t':'unsigned int' lvalue ParmVar 0xa71f340 '__n' 'size_t':'unsigned int'))))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa722218 </usr/include/c++/4.6/bits/char_traits.h:276:7, col:74>
  (ReturnStmt 0xa722208 <col:9, col:71>
    (CXXStaticCastExpr 0xa7221f0 <col:16, col:71> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722168 <col:40, col:70> 'void *'
        (ImplicitCastExpr 0xa722158 <col:40> 'void *(*)(void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7220dc <col:40> 'void *(void *, int, unsigned int)' lvalue Function 0xa655240 '__builtin_memset' 'void *(void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa7221a0 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722190 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7220f4 <col:57> 'char_type *' lvalue ParmVar 0xa71f420 '__s' 'char_type *')))
        (ImplicitCastExpr 0xa7221c0 <col:62> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa7221b0 <col:62> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa72210c <col:62> 'char_type':'char' lvalue ParmVar 0xa71f4a0 '__a' 'char_type':'char')))
        (ImplicitCastExpr 0xa7221d0 <col:67> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa722124 <col:67> 'size_t':'unsigned int' lvalue ParmVar 0xa71f460 '__n' 'size_t':'unsigned int'))))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa722298 </usr/include/c++/4.6/bits/char_traits.h:280:7, col:45>
  (ReturnStmt 0xa722288 <col:9, col:42>
    (CXXStaticCastExpr 0xa722270 <col:16, col:42> 'char_type':'char' static_cast<char_type> <NoOp>
      (ImplicitCastExpr 0xa722260 <col:39> 'char_type':'char' <IntegralCast>
        (ImplicitCastExpr 0xa722250 <col:39> 'int_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa72222c <col:39> 'const int_type':'const int' lvalue ParmVar 0xa71f610 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa722350 </usr/include/c++/4.6/bits/char_traits.h:286:7, col:72>
  (ReturnStmt 0xa722340 <col:9, col:69>
    (CXXStaticCastExpr 0xa722328 <col:16, col:69> 'int_type':'int' static_cast<int_type> <NoOp>
      (ImplicitCastExpr 0xa722318 <col:38, col:68> 'int_type':'int' <IntegralCast>
        (CXXStaticCastExpr 0xa7222f8 <col:38, col:68> 'unsigned char' static_cast<unsigned char> <NoOp>
          (ImplicitCastExpr 0xa7222e8 <col:65> 'unsigned char' <IntegralCast>
            (ImplicitCastExpr 0xa7222d8 <col:65> 'char_type':'char' <LValueToRValue>
              (DeclRefExpr 0xa7222ac <col:65> 'const char_type':'const char' lvalue ParmVar 0xa71f730 '__c' 'const char_type &'))))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa7223e0 </usr/include/c++/4.6/bits/char_traits.h:290:7, col:30>
  (ReturnStmt 0xa7223d0 <col:9, col:24>
    (BinaryOperator 0xa7223b8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa722398 <col:16> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722364 <col:16> 'const int_type':'const int' lvalue ParmVar 0xa71f850 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa7223a8 <col:24> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa72237c <col:24> 'const int_type':'const int' lvalue ParmVar 0xa71f8a0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa722458 </usr/include/c++/4.6/bits/char_traits.h:294:7, col:59>
  (ReturnStmt 0xa722448 <col:9, col:56>
    (CXXStaticCastExpr 0xa722430 <col:16, col:56> 'int_type':'int' static_cast<int_type> <NoOp>
      (UnaryOperator 0xa722410 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:1149:28, col:29> 'int' prefix '-'
        (IntegerLiteral 0xa7223f8 <col:29> 'int' 1)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa7225b8 </usr/include/c++/4.6/bits/char_traits.h:298:7, col:42>
  (ReturnStmt 0xa7225a8 <col:9, col:37>
    (ConditionalOperator 0xa722588 <col:16, col:37> 'int'
      (ParenExpr 0xa722530 <col:16, col:29> '_Bool'
        (BinaryOperator 0xa722518 <col:17, col:28> '_Bool' '=='
          (ImplicitCastExpr 0xa722508 <col:17> 'int_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa72246c <col:17> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &'))
          (CallExpr 0xa7224e8 <col:24, col:28> 'int_type':'int'
            (ImplicitCastExpr 0xa7224d8 <col:24> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa722484 <col:24> 'int_type (void)' lvalue CXXMethod 0xa71f9e0 'eof' 'int_type (void)')))))
      (IntegerLiteral 0xa722548 <col:33> 'int' 0)
      (ImplicitCastExpr 0xa722578 <col:37> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722560 <col:37> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &')))))


    }
template <class _CharT> struct char_traits;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> class basic_string {
        class basic_string;
        typedef typename allocator<wchar_t>::rebind<wchar_t>::other _CharT_alloc_type;
    public:
    public:
        typedef std::char_traits<wchar_t> traits_type;
        typedef typename char_traits<wchar_t>::char_type value_type;
        typedef std::allocator<wchar_t> allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<wchar_t> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<wchar_t> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep_base {
            struct _Rep;
            typedef typename allocator<wchar_t>::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const wchar_t _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep &_S_empty_rep();
            bool _M_is_leaked() const;
            bool _M_is_shared() const;
            void _M_set_leaked();
            void _M_set_sharable();
            void _M_set_length_and_sharable(size_type __n);
            wchar_t *_M_refdata() throw();
            wchar_t *_M_grab(const std::allocator<wchar_t> &__alloc1, const std::allocator<wchar_t> &__alloc2);
            static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep *_S_create(size_type, size_type, const std::allocator<wchar_t> &);
            void _M_dispose(const std::allocator<wchar_t> &__a);
            void _M_destroy(const std::allocator<wchar_t> &) throw();
            wchar_t *_M_refcopy() throw();
            wchar_t *_M_clone(const std::allocator<wchar_t> &, size_type __res);
        };
        struct _Alloc_hider :  std::allocator<wchar_t> {
            struct _Alloc_hider;
            _Alloc_hider(wchar_t *__dat, const std::allocator<wchar_t> &__a);
            wchar_t *_M_p;
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa86c438 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'unsigned int' static_cast<size_type> <NoOp>
  (ImplicitCastExpr 0xa86c428 <col:60, col:61> 'size_type':'unsigned int' <IntegralCast>
    (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
      (IntegerLiteral 0xa7c5128 <col:61> 'int' 1))))
;
    private:
    private:
        mutable std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider _M_dataplus;
        wchar_t *_M_data() const;
        wchar_t *_M_data(wchar_t *__p);
        std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep *_M_rep() const;
        iterator _M_ibegin() const;
        iterator _M_iend() const;
        void _M_leak();
        size_type _M_check(size_type __pos, const char *__s) const;
        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const;
        size_type _M_limit(size_type __pos, size_type __off) const;
        bool _M_disjunct(const wchar_t *__s) const;
        static void _M_copy(wchar_t *__d, const wchar_t *__s, size_type __n);
        static void _M_move(wchar_t *__d, const wchar_t *__s, size_type __n);
        static void _M_assign(wchar_t *__d, size_type __n, wchar_t __c);
        template <class _Iterator> static void _S_copy_chars(wchar_t *__p, _Iterator __k1, _Iterator __k2);
        static void _S_copy_chars(wchar_t *__p, iterator __k1, iterator __k2);
        static void _S_copy_chars(wchar_t *__p, const_iterator __k1, const_iterator __k2);
        static void _S_copy_chars(wchar_t *__p, wchar_t *__k1, wchar_t *__k2);
        static void _S_copy_chars(wchar_t *__p, const wchar_t *__k1, const wchar_t *__k2);
        static int _S_compare(size_type __n1, size_type __n2);
        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep &_S_empty_rep();
    public:
    public:
        basic_string();
        basic_string(const std::allocator<wchar_t> &__a);
        basic_string(const std::basic_string<wchar_t> &__str);
        basic_string(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        basic_string(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n, const std::allocator<wchar_t> &__a);
        basic_string(const wchar_t *__s, size_type __n, const std::allocator<wchar_t> &__a);
        basic_string(const wchar_t *__s, const std::allocator<wchar_t> &__a);
        basic_string(size_type __n, wchar_t __c, const std::allocator<wchar_t> &__a);
        template <class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const std::allocator<wchar_t> &__a);
        void ~basic_string();
        std::basic_string<wchar_t> &operator=(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &operator=(const wchar_t *__s);
        std::basic_string<wchar_t> &operator=(wchar_t __c);
        iterator begin();
        const_iterator begin() const;
        iterator end();
        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
    public:
    public:
        size_type size() const;
        size_type length() const;
        size_type max_size() const;
        void resize(size_type __n, wchar_t __c);
        void resize(size_type __n);
        size_type capacity() const;
        void reserve(size_type __res_arg);
        void clear();
        bool empty() const;
        const_reference operator[](size_type __pos) const;
        reference operator[](size_type __pos);
        const_reference at(size_type __n) const;
        reference at(size_type __n);
        std::basic_string<wchar_t> &operator+=(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &operator+=(const wchar_t *__s);
        std::basic_string<wchar_t> &operator+=(wchar_t __c);
        std::basic_string<wchar_t> &append(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &append(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        std::basic_string<wchar_t> &append(const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &append(const wchar_t *__s);
        std::basic_string<wchar_t> &append(size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &append(_InputIterator __first, _InputIterator __last);
        void push_back(wchar_t __c);
        std::basic_string<wchar_t> &assign(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &assign(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        std::basic_string<wchar_t> &assign(const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &assign(const wchar_t *__s);
        std::basic_string<wchar_t> &assign(size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &assign(_InputIterator __first, _InputIterator __last);
        void insert(iterator __p, size_type __n, wchar_t __c);
        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end);
        std::basic_string<wchar_t> &insert(size_type __pos1, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &insert(size_type __pos1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n);
        std::basic_string<wchar_t> &insert(size_type __pos, const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &insert(size_type __pos, const wchar_t *__s);
        std::basic_string<wchar_t> &insert(size_type __pos, size_type __n, wchar_t __c);
        iterator insert(iterator __p, wchar_t __c);
        std::basic_string<wchar_t> &erase(size_type __pos, size_type __n);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &replace(size_type __pos1, size_type __n1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n2);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, const wchar_t *__s, size_type __n2);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, const wchar_t *__s);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, size_type __n2, wchar_t __c);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__s);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, wchar_t *__k1, wchar_t *__k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__k1, const wchar_t *__k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2);
    private:
    private:
        template <class _Integer> std::basic_string<wchar_t> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type);
        template <class _InputIterator> std::basic_string<wchar_t> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        std::basic_string<wchar_t> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, wchar_t __c);
        std::basic_string<wchar_t> &_M_replace_safe(size_type __pos1, size_type __n1, const wchar_t *__s, size_type __n2);
        template <class _InIterator> static wchar_t *_S_construct_aux(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a, std::__false_type);
        template <class _Integer> static wchar_t *_S_construct_aux(_Integer __beg, _Integer __end, const std::allocator<wchar_t> &__a, std::__true_type);
        static wchar_t *_S_construct_aux_2(size_type __req, wchar_t __c, const std::allocator<wchar_t> &__a);
        template <class _InIterator> static wchar_t *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a);
        template <class _InIterator> static wchar_t *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a, std::input_iterator_tag);
        template <class _FwdIterator> static wchar_t *_S_construct(_FwdIterator __beg, _FwdIterator __end, const std::allocator<wchar_t> &__a, std::forward_iterator_tag);
        static wchar_t *_S_construct(size_type __req, wchar_t __c, const std::allocator<wchar_t> &__a);
    public:
    public:
        size_type copy(wchar_t *__s, size_type __n, size_type __pos) const;
        void swap(std::basic_string<wchar_t> &__s);
        const wchar_t *c_str() const;
        const wchar_t *data() const;
        allocator_type get_allocator() const;
        size_type find(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find(const wchar_t *__s, size_type __pos) const;
        size_type find(wchar_t __c, size_type __pos) const;
        size_type rfind(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type rfind(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type rfind(const wchar_t *__s, size_type __pos) const;
        size_type rfind(wchar_t __c, size_type __pos) const;
        size_type find_first_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_first_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const wchar_t *__s, size_type __pos) const;
        size_type find_first_of(wchar_t __c, size_type __pos) const;
        size_type find_last_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_last_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const wchar_t *__s, size_type __pos) const;
        size_type find_last_of(wchar_t __c, size_type __pos) const;
        size_type find_first_not_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_first_not_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const wchar_t *__s, size_type __pos) const;
        size_type find_first_not_of(wchar_t __c, size_type __pos) const;
        size_type find_last_not_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_last_not_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const wchar_t *__s, size_type __pos) const;
        size_type find_last_not_of(wchar_t __c, size_type __pos) const;
        std::basic_string<wchar_t> substr(size_type __pos, size_type __n) const;
        int compare(const std::basic_string<wchar_t> &__str) const;
        int compare(size_type __pos, size_type __n, const std::basic_string<wchar_t> &__str) const;
        int compare(size_type __pos1, size_type __n1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n2) const;
        int compare(const wchar_t *__s) const;
        int compare(size_type __pos, size_type __n1, const wchar_t *__s) const;
        int compare(size_type __pos, size_type __n1, const wchar_t *__s, size_type __n2) const;
    }
template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> class basic_string {
        class basic_string;
        typedef typename allocator<char>::rebind<char>::other _CharT_alloc_type;
    public:
    public:
        typedef std::char_traits<char> traits_type;
        typedef typename char_traits<char>::char_type value_type;
        typedef std::allocator<char> allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<char> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<char> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base {
            struct _Rep;
            typedef typename allocator<char>::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const char _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep &_S_empty_rep() (CompoundStmt 0xa9cff18 </usr/include/c++/4.6/bits/basic_string.h:176:9, line:182:2>
  (DeclStmt 0xa9cfd78 <line:180:4, col:62>
    0xa9cfba0 "void *__p =
      (CXXReinterpretCastExpr 0xa9cfd60 <col:16, col:61> 'void *' reinterpret_cast<void *> <BitCast>
        (UnaryOperator 0xa9cfd48 <col:40, col:41> 'size_type (*)[]' prefix '&'
          (DeclRefExpr 0xa9cfcf0 <col:41> 'size_type []' lvalue Var 0xa867b50 '_S_empty_rep_storage' 'size_type []')))")
  (ReturnStmt 0xa9cff08 <line:181:4, col:39>
    (UnaryOperator 0xa9cfef0 <col:11, col:39> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue prefix '*'
      (CXXReinterpretCastExpr 0xa9cfed8 <col:12, col:39> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' reinterpret_cast<struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *> <BitCast>
        (ImplicitCastExpr 0xa9cfec8 <col:36> 'void *' <LValueToRValue>
          (DeclRefExpr 0xa9cfeac <col:36> 'void *' lvalue Var 0xa9cfba0 '__p' 'void *'))))))


            bool _M_is_leaked() const;
            bool _M_is_shared() const;
            void _M_set_leaked();
            void _M_set_sharable();
            void _M_set_length_and_sharable(size_type __n);
            char *_M_refdata() throw() (CompoundStmt 0xa9d7f18 </usr/include/c++/4.6/bits/basic_string.h:217:2, col:48>
  (ReturnStmt 0xa9d7f08 <col:4, col:45>
    (CXXReinterpretCastExpr 0xa9d7ef0 <col:11, col:45> 'char *' reinterpret_cast<char *> <BitCast>
      (BinaryOperator 0xa9d7ed8 <col:37, col:44> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' '+'
        (CXXThisExpr 0xa9d7ec8 <col:37> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this)
        (IntegerLiteral 0xa7e5070 <col:44> 'int' 1)))))


            char *_M_grab(const std::allocator<char> &__alloc1, const std::allocator<char> &__alloc2);
            static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep *_S_create(size_type, size_type, const std::allocator<char> &);
            void _M_dispose(const std::allocator<char> &__a) (CompoundStmt 0xa9cfb88 </usr/include/c++/4.6/bits/basic_string.h:232:2, line:246:2>
  (IfStmt 0xa9cfb68 <line:234:4, line:245:6>
    <<<NULL>>>
    (ImplicitCastExpr 0xa9cf890 <line:234:8, col:55> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa9cf848 <col:8, col:55> 'long'
        (ImplicitCastExpr 0xa9cf838 <col:8> 'long (*)(long, long)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7e537c <col:8> 'long (long, long)' lvalue Function 0xa7e4b70 '__builtin_expect' 'long (long, long)'))
        (ImplicitCastExpr 0xa9cf870 <col:25, col:47> 'long' <IntegralCast>
          (BinaryOperator 0xa9cf800 <col:25, col:47> '_Bool' '!='
            (CXXThisExpr 0xa9cf658 <col:25> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this)
            (UnaryOperator 0xa9cf7e8 <col:33, col:47> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' prefix '&'
              (CallExpr 0xa9cf7c8 <col:34, col:47> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
                (ImplicitCastExpr 0xa9cf7b8 <col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa9cf780 <col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa867cd0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)'))))))
        (ImplicitCastExpr 0xa9cf880 <col:50> 'long' <IntegralCast>
          (CXXBoolLiteralExpr 0xa7e5470 <col:50> '_Bool' false))))
    (CompoundStmt 0xa9cfb50 <line:236:6, line:245:6>
      (NullStmt 0xa7e54a8 <line:238:67>)
      (IfStmt 0xa9cfb30 <line:239:8, line:244:3>
        <<<NULL>>>
        (BinaryOperator 0xa9cf988 <line:239:12, line:240:16> '_Bool' '<='
          (CallExpr 0xa9cf960 <line:239:12, line:240:11> '_Atomic_word':'int'
            (ImplicitCastExpr 0xa9cf950 <line:239:12, col:23> '_Atomic_word (*)(_Atomic_word *, int)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa7e54d8 <col:12, col:23> '_Atomic_word (_Atomic_word *, int)' lvalue Function 0xa7bf420 '__exchange_and_add_dispatch' '_Atomic_word (_Atomic_word *, int)'))
            (UnaryOperator 0xa9cf938 <col:51, col:58> '_Atomic_word *' prefix '&'
              (MemberExpr 0xa9cf918 <col:52, col:58> '_Atomic_word':'int' lvalue ->_M_refcount 0xa867530
                (ImplicitCastExpr 0xa9cf908 <col:52> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep_base *' <UncheckedDerivedToBase (_Rep_base)>
                  (CXXThisExpr 0xa9cf8e0 <col:52> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this))))
            (UnaryOperator 0xa7e5570 <line:240:9, col:10> 'int' prefix '-'
              (IntegerLiteral 0xa7e5558 <col:10> 'int' 1)))
          (IntegerLiteral 0xa7e55b0 <col:16> 'int' 0))
        (CompoundStmt 0xa9cfb18 <line:241:3, line:244:3>
          (NullStmt 0xa7e5630 <line:242:63>)
          (CXXMemberCallExpr 0xa9cfaf8 <line:243:5, col:19> 'void'
            (MemberExpr 0xa9cfac0 <col:5> '<bound member function type>' ->_M_destroy 0xa868960
              (CXXThisExpr 0xa9cf9a0 <col:5> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this))
            (DeclRefExpr 0xa9cfae0 <col:16> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue ParmVar 0xa868840 '__a' 'const class std::allocator<char> &')))
        <<<NULL>>>))
    <<<NULL>>>))


            void _M_destroy(const std::allocator<char> &) throw();
            char *_M_refcopy() throw();
            char *_M_clone(const std::allocator<char> &, size_type __res);
        };
        struct _Alloc_hider :  std::allocator<char> {
            struct _Alloc_hider;
            _Alloc_hider(char *__dat, const std::allocator<char> &__a) : std::allocator<char>((DeclRefExpr 0xa9d7f2c </usr/include/c++/4.6/bits/basic_string.h:269:11> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue ParmVar 0xa83b1a0 '__a' 'const class std::allocator<char> &')
), _M_p((ImplicitCastExpr 0xa9d80e0 </usr/include/c++/4.6/bits/basic_string.h:269:22> 'char *' <LValueToRValue>
  (DeclRefExpr 0xa9d7fb8 <col:22> 'char *' lvalue ParmVar 0xa83b130 '__dat' 'char *'))
) (CompoundStmt 0xa7e5a80 </usr/include/c++/4.6/bits/basic_string.h:269:29, col:31>)


            char *_M_p;
            inline void ~_Alloc_hider() throw() (CompoundStmt 0xa9cedb0 </usr/include/c++/4.6/bits/basic_string.h:266:14>)


            inline _Alloc_hider(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider &) throw();
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa83ae88 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'unsigned int' static_cast<size_type> <NoOp>
  (ImplicitCastExpr 0xa83ae78 <col:60, col:61> 'size_type':'unsigned int' <IntegralCast>
    (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
      (IntegerLiteral 0xa7c5128 <col:61> 'int' 1))))
;
    private:
    private:
        mutable std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider _M_dataplus;
        char *_M_data() const (CompoundStmt 0xa9cf5f0 </usr/include/c++/4.6/bits/basic_string.h:287:7, col:35>
  (ReturnStmt 0xa9cf5e0 <col:9, col:29>
    (ImplicitCastExpr 0xa9cf5d0 <col:17, col:29> 'char *' <LValueToRValue>
      (MemberExpr 0xa9cf5b0 <col:17, col:29> 'char *' lvalue ._M_p 0xa83b410
        (MemberExpr 0xa9cf590 <col:17> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Alloc_hider' lvalue ->_M_dataplus 0xa83b440
          (CXXThisExpr 0xa9cf470 <col:17> 'const class std::basic_string<char> *' this))))))


        char *_M_data(char *__p);
        std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep *_M_rep() const (CompoundStmt 0xa9cf458 </usr/include/c++/4.6/bits/basic_string.h:295:7, col:62>
  (ReturnStmt 0xa9cf448 <col:9, col:59>
    (UnaryOperator 0xa9cf430 <col:16, col:59> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' prefix '&'
      (ParenExpr 0xa9cf418 <col:17, col:59> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
        (ArraySubscriptExpr 0xa9cf400 <col:18, col:58> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
          (ParenExpr 0xa9cf3e8 <col:18, col:54> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
            (CXXReinterpretCastExpr 0xa9cf3d0 <col:19, col:53> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' reinterpret_cast<struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *> <BitCast>
              (CXXMemberCallExpr 0xa9cf3b0 <col:44, col:52> 'char *'
                (MemberExpr 0xa9cf390 <col:44> '<bound member function type>' ->_M_data 0xa83b4c0
                  (CXXThisExpr 0xa9cf380 <col:44> 'const class std::basic_string<char> *' this)))))
          (UnaryOperator 0xa7e5cf8 <col:56, col:57> 'int' prefix '-'
            (IntegerLiteral 0xa7e5ce0 <col:57> 'int' 1)))))))


        iterator _M_ibegin() const;
        iterator _M_iend() const;
        void _M_leak();
        size_type _M_check(size_type __pos, const char *__s) const;
        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const;
        size_type _M_limit(size_type __pos, size_type __off) const;
        bool _M_disjunct(const char *__s) const;
        static void _M_copy(char *__d, const char *__s, size_type __n);
        static void _M_move(char *__d, const char *__s, size_type __n);
        static void _M_assign(char *__d, size_type __n, char __c);
        template <class _Iterator> static void _S_copy_chars(char *__p, _Iterator __k1, _Iterator __k2);
        static void _S_copy_chars(char *__p, iterator __k1, iterator __k2);
        static void _S_copy_chars(char *__p, const_iterator __k1, const_iterator __k2);
        static void _S_copy_chars(char *__p, char *__k1, char *__k2);
        static void _S_copy_chars(char *__p, const char *__k1, const char *__k2);
        static int _S_compare(size_type __n1, size_type __n2) (CompoundStmt 0xa9e9098 </usr/include/c++/4.6/bits/basic_string.h:402:7, line:411:7>
  (DeclStmt 0xa9e8e98 <line:403:2, col:58>
    0xa9e8c70 "const difference_type __d =
      (CXXFunctionalCastExpr 0xa9e8e80 <col:30, col:57> 'difference_type':'int' functional cast to difference_type <NoOp>
        (ImplicitCastExpr 0xa9e8e70 <col:46, col:53> 'difference_type':'int' <IntegralCast>
          (BinaryOperator 0xa9e8e58 <col:46, col:53> 'unsigned int' '-'
            (ImplicitCastExpr 0xa9e8e38 <col:46> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9e8e04 <col:46> 'size_type':'unsigned int' lvalue ParmVar 0xa83e160 '__n1' 'size_type':'unsigned int'))
            (ImplicitCastExpr 0xa9e8e48 <col:53> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9e8e1c <col:53> 'size_type':'unsigned int' lvalue ParmVar 0xa83e2c0 '__n2' 'size_type':'unsigned int')))))")
  (IfStmt 0xa9e9078 <line:405:2, line:410:18>
    <<<NULL>>>
    (BinaryOperator 0xa9e8f20 <line:405:6, col:46> '_Bool' '>'
      (ImplicitCastExpr 0xa9e8f00 <col:6> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa9e8ee8 <col:6> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int'))
      (ImplicitCastExpr 0xa9e8f10 <col:12, col:46> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebc80 <col:12, col:46> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (ReturnStmt 0xa9e8f48 <line:406:4, col:45>
      (ImplicitCastExpr 0xa9e8f38 <col:11, col:45> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebda0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (IfStmt 0xa9e9058 <line:407:7, line:410:18>
      <<<NULL>>>
      (BinaryOperator 0xa9e8fd0 <line:407:11, col:51> '_Bool' '<'
        (ImplicitCastExpr 0xa9e8fb0 <col:11> 'difference_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa9e8f98 <col:11> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int'))
        (ImplicitCastExpr 0xa9e8fc0 <col:17, col:51> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebe90 <col:17, col:51> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa9e8ff8 <line:408:4, col:45>
        (ImplicitCastExpr 0xa9e8fe8 <col:11, col:45> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebfb0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa9e9048 <line:410:4, col:18>
        (CXXFunctionalCastExpr 0xa9e9030 <col:11, col:18> 'int' functional cast to int <NoOp>
          (ImplicitCastExpr 0xa9e9020 <col:15> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa9e9008 <col:15> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int')))))))


        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep &_S_empty_rep() (CompoundStmt 0xa9d7e60 </usr/include/c++/4.6/bits/basic_string.h:421:7, col:38>
  (ReturnStmt 0xa9d7e50 <col:9, col:35>
    (CallExpr 0xa9d7e30 <col:16, col:35> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
      (ImplicitCastExpr 0xa9d7e20 <col:16, col:22> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d7dfc <col:16, col:22> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa867cd0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)')))))


    public:
    public:
        basic_string() : _M_dataplus((CXXMemberCallExpr 0xa9d7938 </usr/include/c++/4.6/bits/basic_string.h:433:21, col:47> 'char *'
  (MemberExpr 0xa9d7914 <col:21, col:36> '<bound member function type>' ._M_refdata 0xa868110
    (CallExpr 0xa9d78f8 <col:21, col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
      (ImplicitCastExpr 0xa9d78e8 <col:21> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d78d0 <col:21> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa83eaa0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)')))))
, (MaterializeTemporaryExpr 0xa9d7c58 </usr/include/c++/4.6/bits/basic_string.h:433:50, col:57> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue
  (ImplicitCastExpr 0xa9d7c48 <col:50, col:57> 'const class std::allocator<char>':'const class std::allocator<char>' <NoOp>
    (CXXBindTemporaryExpr 0xa9d7998 <col:50, col:57> 'class std::allocator<char>':'class std::allocator<char>' (CXXTemporary 0xa9d7990)
      (CXXTemporaryObjectExpr 0xa9d7960 <col:50, col:57> 'class std::allocator<char>':'class std::allocator<char>''void (void) throw()'))))
) (CompoundStmt 0xa7ec230 </usr/include/c++/4.6/bits/basic_string.h:433:60, col:62>)


        basic_string(const std::allocator<char> &__a);
        basic_string(const std::basic_string<char> &__str);
        basic_string(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        basic_string(const std::basic_string<char> &__str, size_type __pos, size_type __n, const std::allocator<char> &__a);
        basic_string(const char *__s, size_type __n, const std::allocator<char> &__a);
        basic_string(const char *__s, const std::allocator<char> &__a);
        basic_string(size_type __n, char __c, const std::allocator<char> &__a);
        template <class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const std::allocator<char> &__a);
        void ~basic_string() (CompoundStmt 0xa9ced00 </usr/include/c++/4.6/bits/basic_string.h:533:7, col:54>
  (ExprWithCleanups 0xa9cece0 <col:9, col:51> 'void'
    (CXXTemporary 0xa9cec60)
    (CXXMemberCallExpr 0xa9cec78 <col:9, col:51> 'void'
      (MemberExpr 0xa9cebdc <col:9, col:19> '<bound member function type>' ->_M_dispose 0xa868890
        (CXXMemberCallExpr 0xa9cebb0 <col:9, col:16> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
          (MemberExpr 0xa9ceb90 <col:9> '<bound member function type>' ->_M_rep 0xa83b790
            (ImplicitCastExpr 0xa9cebd0 <col:9> 'const class std::basic_string<char> *' <NoOp>
              (CXXThisExpr 0xa9cea70 <col:9> 'class std::basic_string<char> *' this)))))
      (MaterializeTemporaryExpr 0xa9cecd0 <col:30, col:50> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue
        (ImplicitCastExpr 0xa9cecc0 <col:30, col:50> 'const class std::allocator<char>':'const class std::allocator<char>' <NoOp>
          (CXXBindTemporaryExpr 0xa9cec68 <col:30, col:50> 'allocator_type':'class std::allocator<char>' (CXXTemporary 0xa9cec60)
            (CXXMemberCallExpr 0xa9cec30 <col:30, col:50> 'allocator_type':'class std::allocator<char>'
              (MemberExpr 0xa9cec10 <col:30, col:36> '<bound member function type>' ->get_allocator 0xa6d9670
                (ImplicitCastExpr 0xa9cec50 <col:30> 'const class std::basic_string<char> *' <NoOp>
                  (CXXThisExpr 0xa9cec00 <col:30> 'class std::basic_string<char> *' this))))))))))


        std::basic_string<char> &operator=(const std::basic_string<char> &__str) (CompoundStmt 0xa9d81d8 </usr/include/c++/4.6/bits/basic_string.h:541:7, col:37>
  (ReturnStmt 0xa9d81c8 <col:9, col:34>
    (CXXMemberCallExpr 0xa9d81a8 <col:16, col:34> 'class std::basic_string<char>' lvalue
      (MemberExpr 0xa9d8188 <col:16, col:22> '<bound member function type>' ->assign 0xa846050
        (CXXThisExpr 0xa9d8110 <col:16> 'class std::basic_string<char> *' this))
      (DeclRefExpr 0xa9d8170 <col:29> 'const class std::basic_string<char>' lvalue ParmVar 0xa841270 '__str' 'const class std::basic_string<char> &'))))


        std::basic_string<char> &operator=(const char *__s);
        std::basic_string<char> &operator=(char __c);
        iterator begin();
        const_iterator begin() const;
        iterator end();
        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
    public:
    public:
        size_type size() const (CompoundStmt 0xa9d8fb0 </usr/include/c++/4.6/bits/basic_string.h:710:7, col:37>
  (ReturnStmt 0xa9d8fa0 <col:9, col:26>
    (ImplicitCastExpr 0xa9d8f90 <col:16, col:26> 'size_type':'unsigned int' <LValueToRValue>
      (MemberExpr 0xa9d8f70 <col:16, col:26> 'size_type':'unsigned int' lvalue ->_M_length 0xa8673b0
        (ImplicitCastExpr 0xa9d8f60 <col:16, col:23> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep_base *' <UncheckedDerivedToBase (_Rep_base)>
          (CXXMemberCallExpr 0xa9d8f40 <col:16, col:23> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
            (MemberExpr 0xa9d8f20 <col:16> '<bound member function type>' ->_M_rep 0xa83b790
              (CXXThisExpr 0xa9d8e00 <col:16> 'const class std::basic_string<char> *' this))))))))


        size_type length() const;
        size_type max_size() const;
        void resize(size_type __n, char __c);
        void resize(size_type __n) (CompoundStmt 0xa9d8de8 </usr/include/c++/4.6/bits/basic_string.h:748:7, col:38>
  (CXXMemberCallExpr 0xa9d8db0 <col:9, col:35> 'void'
    (MemberExpr 0xa9d8d90 <col:9, col:15> '<bound member function type>' ->resize 0xa842cd0
      (CXXThisExpr 0xa9d8d10 <col:9> 'class std::basic_string<char> *' this))
    (ImplicitCastExpr 0xa9d8dd8 <col:22> 'size_type':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa9d8d60 <col:22> 'size_type':'unsigned int' lvalue ParmVar 0xa842e60 '__n' 'size_type':'unsigned int'))
    (CXXScalarValueInitExpr 0xa9d8d80 <col:27, col:34> 'char':'char')))


        size_type capacity() const;
        void reserve(size_type __res_arg);
        void clear();
        bool empty() const (CompoundStmt 0xa9d82c8 </usr/include/c++/4.6/bits/basic_string.h:803:7, col:35>
  (ReturnStmt 0xa9d82b8 <col:9, col:32>
    (BinaryOperator 0xa9d82a0 <col:16, col:32> '_Bool' '=='
      (CXXMemberCallExpr 0xa9d8270 <col:16, col:27> 'size_type':'unsigned int'
        (MemberExpr 0xa9d8250 <col:16, col:22> '<bound member function type>' ->size 0xa842720
          (CXXThisExpr 0xa9d8240 <col:16> 'const class std::basic_string<char> *' this)))
      (ImplicitCastExpr 0xa9d8290 <col:32> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa7ed288 <col:32> 'int' 0)))))


        const_reference operator[](size_type __pos) const;
        reference operator[](size_type __pos);
        const_reference at(size_type __n) const;
        reference at(size_type __n);
        std::basic_string<char> &operator+=(const std::basic_string<char> &__str);
        std::basic_string<char> &operator+=(const char *__s);
        std::basic_string<char> &operator+=(char __c);
        std::basic_string<char> &append(const std::basic_string<char> &__str);
        std::basic_string<char> &append(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        std::basic_string<char> &append(const char *__s, size_type __n);
        std::basic_string<char> &append(const char *__s);
        std::basic_string<char> &append(size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &append(_InputIterator __first, _InputIterator __last);
        void push_back(char __c);
        std::basic_string<char> &assign(const std::basic_string<char> &__str);
        std::basic_string<char> &assign(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        std::basic_string<char> &assign(const char *__s, size_type __n);
        std::basic_string<char> &assign(const char *__s);
        std::basic_string<char> &assign(size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &assign(_InputIterator __first, _InputIterator __last);
        void insert(iterator __p, size_type __n, char __c);
        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end);
        std::basic_string<char> &insert(size_type __pos1, const std::basic_string<char> &__str);
        std::basic_string<char> &insert(size_type __pos1, const std::basic_string<char> &__str, size_type __pos2, size_type __n);
        std::basic_string<char> &insert(size_type __pos, const char *__s, size_type __n);
        std::basic_string<char> &insert(size_type __pos, const char *__s);
        std::basic_string<char> &insert(size_type __pos, size_type __n, char __c);
        iterator insert(iterator __p, char __c);
        std::basic_string<char> &erase(size_type __pos, size_type __n);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        std::basic_string<char> &replace(size_type __pos, size_type __n, const std::basic_string<char> &__str);
        std::basic_string<char> &replace(size_type __pos1, size_type __n1, const std::basic_string<char> &__str, size_type __pos2, size_type __n2);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, const char *__s, size_type __n2);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, const char *__s);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, size_type __n2, char __c);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const std::basic_string<char> &__str);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__s, size_type __n);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__s);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, char *__k1, char *__k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__k1, const char *__k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2);
    private:
    private:
        template <class _Integer> std::basic_string<char> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type);
        template <class _InputIterator> std::basic_string<char> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        std::basic_string<char> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, char __c);
        std::basic_string<char> &_M_replace_safe(size_type __pos1, size_type __n1, const char *__s, size_type __n2);
        template <class _InIterator> static char *_S_construct_aux(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a, std::__false_type);
        template <class _Integer> static char *_S_construct_aux(_Integer __beg, _Integer __end, const std::allocator<char> &__a, std::__true_type);
        static char *_S_construct_aux_2(size_type __req, char __c, const std::allocator<char> &__a);
        template <class _InIterator> static char *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a);
        template <class _InIterator> static char *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a, std::input_iterator_tag);
        template <class _FwdIterator> static char *_S_construct(_FwdIterator __beg, _FwdIterator __end, const std::allocator<char> &__a, std::forward_iterator_tag);
        static char *_S_construct(size_type __req, char __c, const std::allocator<char> &__a);
    public:
    public:
        size_type copy(char *__s, size_type __n, size_type __pos) const;
        void swap(std::basic_string<char> &__s);
        const char *c_str() const (CompoundStmt 0xa9d87f0 </usr/include/c++/4.6/bits/basic_string.h:1766:7, col:27>
  (ReturnStmt 0xa9d87e0 <col:9, col:24>
    (ImplicitCastExpr 0xa9d87d0 <col:16, col:24> 'const char *' <NoOp>
      (CXXMemberCallExpr 0xa9d87b0 <col:16, col:24> 'char *'
        (MemberExpr 0xa9d8790 <col:16> '<bound member function type>' ->_M_data 0xa83b4c0
          (CXXThisExpr 0xa9d8780 <col:16> 'const class std::basic_string<char> *' this))))))


        const char *data() const (CompoundStmt 0xa9e8b20 </usr/include/c++/4.6/bits/basic_string.h:1776:7, col:27>
  (ReturnStmt 0xa9e8b10 <col:9, col:24>
    (ImplicitCastExpr 0xa9e8b00 <col:16, col:24> 'const char *' <NoOp>
      (CXXMemberCallExpr 0xa9e8ae0 <col:16, col:24> 'char *'
        (MemberExpr 0xa9e8ac0 <col:16> '<bound member function type>' ->_M_data 0xa83b4c0
          (CXXThisExpr 0xa9e8ab0 <col:16> 'const class std::basic_string<char> *' this))))))


        allocator_type get_allocator() const (CompoundStmt 0xa9d00f0 </usr/include/c++/4.6/bits/basic_string.h:1783:7, col:29>
  (ReturnStmt 0xa9d00e0 <col:9, col:16>
    (CXXConstructExpr 0xa9d00b8 <col:16> 'allocator_type':'class std::allocator<char>''void (const class std::allocator<char> &) throw()'
      (ImplicitCastExpr 0xa9d00a8 <col:16> 'const class std::allocator<char>' lvalue <NoOp>
        (ImplicitCastExpr 0xa9d0098 <col:16> 'class std::allocator<char>' lvalue <DerivedToBase (allocator)>
          (MemberExpr 0xa9d0050 <col:16> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Alloc_hider' lvalue ->_M_dataplus 0xa83b440
            (CXXThisExpr 0xa9cff30 <col:16> 'const class std::basic_string<char> *' this)))))))


        size_type find(const char *__s, size_type __pos, size_type __n) const;
        size_type find(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find(const char *__s, size_type __pos) const;
        size_type find(char __c, size_type __pos) const;
        size_type rfind(const std::basic_string<char> &__str, size_type __pos) const;
        size_type rfind(const char *__s, size_type __pos, size_type __n) const;
        size_type rfind(const char *__s, size_type __pos) const;
        size_type rfind(char __c, size_type __pos) const;
        size_type find_first_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_first_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const char *__s, size_type __pos) const;
        size_type find_first_of(char __c, size_type __pos) const;
        size_type find_last_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_last_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const char *__s, size_type __pos) const;
        size_type find_last_of(char __c, size_type __pos) const;
        size_type find_first_not_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_first_not_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const char *__s, size_type __pos) const;
        size_type find_first_not_of(char __c, size_type __pos) const;
        size_type find_last_not_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_last_not_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const char *__s, size_type __pos) const;
        size_type find_last_not_of(char __c, size_type __pos) const;
        std::basic_string<char> substr(size_type __pos, size_type __n) const;
        int compare(const std::basic_string<char> &__str) const (CompoundStmt 0xa9e84b0 </usr/include/c++/4.6/bits/basic_string.h:2173:7, line:2182:7>
  (DeclStmt 0xa9e74e8 <line:2174:2, col:39>
    0xa9e7460 "const size_type __size =
      (CXXMemberCallExpr 0xa9e74c8 <col:27, col:38> 'size_type':'unsigned int'
        (MemberExpr 0xa9e74a8 <col:27, col:33> '<bound member function type>' ->size 0xa842720
          (CXXThisExpr 0xa9e7498 <col:27> 'const class std::basic_string<char> *' this)))")
  (DeclStmt 0xa9e76b0 <line:2175:2, col:40>
    0xa9e7620 "const size_type __osize =
      (CXXMemberCallExpr 0xa9e7690 <col:28, col:39> 'size_type':'unsigned int'
        (MemberExpr 0xa9e766c <col:28, col:34> '<bound member function type>' .size 0xa842720
          (DeclRefExpr 0xa9e7654 <col:28> 'const class std::basic_string<char>' lvalue ParmVar 0xa865930 '__str' 'const class std::basic_string<char> &')))")
  (DeclStmt 0xa9e7920 <line:2176:2, col:51>
    0xa9e77e0 "const size_type __len =
      (ImplicitCastExpr 0xa9e7910 <col:26, col:50> 'unsigned int':'unsigned int' <LValueToRValue>
        (CallExpr 0xa9e78e8 <col:26, col:50> 'const unsigned int':'const unsigned int' lvalue
          (ImplicitCastExpr 0xa9e78d8 <col:26, col:31> 'const unsigned int &(*)(const unsigned int &, const unsigned int &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9e78b0 <col:26, col:31> 'const unsigned int &(const unsigned int &, const unsigned int &)' lvalue Function 0xa65fdc0 'min' 'const unsigned int &(const unsigned int &, const unsigned int &)' (FunctionTemplate 0xa6435c0 'min')))
          (DeclRefExpr 0xa9e7850 <col:35> 'const size_type':'const unsigned int' lvalue Var 0xa9e7460 '__size' 'const size_type':'const unsigned int')
          (DeclRefExpr 0xa9e7868 <col:43> 'const size_type':'const unsigned int' lvalue Var 0xa9e7620 '__osize' 'const size_type':'const unsigned int')))")
  (DeclStmt 0xa9e81d0 <line:2178:2, col:64>
    0xa9e7930 "int __r =
      (CallExpr 0xa9e8188 <col:12, col:63> 'int'
        (ImplicitCastExpr 0xa9e8178 <col:12, col:25> 'int (*)(const char_type *, const char_type *, size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e7bdc <col:12, col:25> 'int (const char_type *, const char_type *, size_t)' lvalue CXXMethod 0xa71eda0 'compare' 'int (const char_type *, const char_type *, size_t)'))
        (ImplicitCastExpr 0xa9e81b0 <col:33, col:41> 'const char_type *' <NoOp>
          (CXXMemberCallExpr 0xa9e80d0 <col:33, col:41> 'char *'
            (MemberExpr 0xa9e80b0 <col:33> '<bound member function type>' ->_M_data 0xa83b4c0
              (CXXThisExpr 0xa9e80a0 <col:33> 'const class std::basic_string<char> *' this))))
        (CXXMemberCallExpr 0xa9e8128 <col:44, col:55> 'const char *'
          (MemberExpr 0xa9e8104 <col:44, col:50> '<bound member function type>' .data 0xa6d9490
            (DeclRefExpr 0xa9e80ec <col:44> 'const class std::basic_string<char>' lvalue ParmVar 0xa865930 '__str' 'const class std::basic_string<char> &')))
        (ImplicitCastExpr 0xa9e81c0 <col:58> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8144 <col:58> 'const size_type':'const unsigned int' lvalue Var 0xa9e77e0 '__len' 'const size_type':'const unsigned int')))")
  (IfStmt 0xa9e8458 <line:2179:2, line:2180:36>
    <<<NULL>>>
    (UnaryOperator 0xa9e8218 <line:2179:6, col:7> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9e8208 <col:7> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa9e81f8 <col:7> 'int' <LValueToRValue>
          (DeclRefExpr 0xa9e81e0 <col:7> 'int' lvalue Var 0xa9e7930 '__r' 'int'))))
    (BinaryOperator 0xa9e8440 <line:2180:4, col:36> 'int' lvalue '='
      (DeclRefExpr 0xa9e822c <col:4> 'int' lvalue Var 0xa9e7930 '__r' 'int')
      (CallExpr 0xa9e83f8 <col:10, col:36> 'int'
        (ImplicitCastExpr 0xa9e83e8 <col:10> 'int (*)(size_type, size_type)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e8360 <col:10> 'int (size_type, size_type)' lvalue CXXMethod 0xa83e340 '_S_compare' 'int (size_type, size_type)'))
        (ImplicitCastExpr 0xa9e8420 <col:21> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8378 <col:21> 'const size_type':'const unsigned int' lvalue Var 0xa9e7460 '__size' 'const size_type':'const unsigned int'))
        (ImplicitCastExpr 0xa9e8430 <col:29> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8390 <col:29> 'const size_type':'const unsigned int' lvalue Var 0xa9e7620 '__osize' 'const size_type':'const unsigned int'))))
    <<<NULL>>>)
  (ReturnStmt 0xa9e84a0 <line:2181:2, col:9>
    (ImplicitCastExpr 0xa9e8490 <col:9> 'int' <LValueToRValue>
      (DeclRefExpr 0xa9e8474 <col:9> 'int' lvalue Var 0xa9e7930 '__r' 'int'))))


        int compare(size_type __pos, size_type __n, const std::basic_string<char> &__str) const;
        int compare(size_type __pos1, size_type __n1, const std::basic_string<char> &__str, size_type __pos2, size_type __n2) const;
        int compare(const char *__s) const;
        int compare(size_type __pos, size_type __n1, const char *__s) const;
        int compare(size_type __pos, size_type __n1, const char *__s, size_type __n2) const;
    }
template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class basic_string;
    struct char_traits;
    typedef basic_string<char> string;
    struct char_traits;
    typedef basic_string<wchar_t> wstring;
}
typedef unsigned int wint_t;
typedef __mbstate_t mbstate_t;
extern "C" {
    struct tm;
    extern wchar_t *wcscpy(wchar_t *restrict __dest, const wchar_t *restrict __src) throw();
    extern wchar_t *wcsncpy(wchar_t *restrict __dest, const wchar_t *restrict __src, size_t __n) throw();
    extern wchar_t *wcscat(wchar_t *restrict __dest, const wchar_t *restrict __src) throw();
    extern wchar_t *wcsncat(wchar_t *restrict __dest, const wchar_t *restrict __src, size_t __n) throw();
    extern int wcscmp(const wchar_t *__s1, const wchar_t *__s2) throw();
    extern int wcsncmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n) throw();
    extern int wcscasecmp(const wchar_t *__s1, const wchar_t *__s2) throw();
    extern int wcsncasecmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n) throw();
    extern int wcscasecmp_l(const wchar_t *__s1, const wchar_t *__s2, __locale_t __loc) throw();
    extern int wcsncasecmp_l(const wchar_t *__s1, const wchar_t *__s2, size_t __n, __locale_t __loc) throw();
    extern int wcscoll(const wchar_t *__s1, const wchar_t *__s2) throw();
    extern size_t wcsxfrm(wchar_t *restrict __s1, const wchar_t *restrict __s2, size_t __n) throw();
    extern int wcscoll_l(const wchar_t *__s1, const wchar_t *__s2, __locale_t __loc) throw();
    extern size_t wcsxfrm_l(wchar_t *__s1, const wchar_t *__s2, size_t __n, __locale_t __loc) throw();
    extern wchar_t *wcsdup(const wchar_t *__s) throw();
    extern wchar_t *wcschr(const wchar_t *__wcs, wchar_t __wc) throw();
    extern wchar_t *wcsrchr(const wchar_t *__wcs, wchar_t __wc) throw();
    extern wchar_t *wcschrnul(const wchar_t *__s, wchar_t __wc) throw();
    extern size_t wcscspn(const wchar_t *__wcs, const wchar_t *__reject) throw();
    extern size_t wcsspn(const wchar_t *__wcs, const wchar_t *__accept) throw();
    extern wchar_t *wcspbrk(const wchar_t *__wcs, const wchar_t *__accept) throw();
    extern wchar_t *wcsstr(const wchar_t *__haystack, const wchar_t *__needle) throw();
    extern wchar_t *wcstok(wchar_t *restrict __s, const wchar_t *restrict __delim, wchar_t **restrict __ptr) throw();
    extern size_t wcslen(const wchar_t *__s) throw();
    extern wchar_t *wcswcs(const wchar_t *__haystack, const wchar_t *__needle) throw();
    extern size_t wcsnlen(const wchar_t *__s, size_t __maxlen) throw();
    extern wchar_t *wmemchr(const wchar_t *__s, wchar_t __c, size_t __n) throw();
    extern int wmemcmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n) throw();
    extern wchar_t *wmemcpy(wchar_t *restrict __s1, const wchar_t *restrict __s2, size_t __n) throw();
    extern wchar_t *wmemmove(wchar_t *__s1, const wchar_t *__s2, size_t __n) throw();
    extern wchar_t *wmemset(wchar_t *__s, wchar_t __c, size_t __n) throw();
    extern wchar_t *wmempcpy(wchar_t *restrict __s1, const wchar_t *restrict __s2, size_t __n) throw();
    extern wint_t btowc(int __c) throw();
    extern int wctob(wint_t __c) throw();
    extern int mbsinit(const mbstate_t *__ps) throw();
    extern size_t mbrtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n, mbstate_t *__p) throw();
    extern size_t wcrtomb(char *restrict __s, wchar_t __wc, mbstate_t *restrict __ps) throw();
    extern size_t __mbrlen(const char *restrict __s, size_t __n, mbstate_t *restrict __ps) throw();
    extern size_t mbrlen(const char *restrict __s, size_t __n, mbstate_t *restrict __ps) throw();
    extern size_t mbsrtowcs(wchar_t *restrict __dst, const char **restrict __src, size_t __len, mbstate_t *restrict __ps) throw();
    extern size_t wcsrtombs(char *restrict __dst, const wchar_t **restrict __src, size_t __len, mbstate_t *restrict __ps) throw();
    extern size_t mbsnrtowcs(wchar_t *restrict __dst, const char **restrict __src, size_t __nmc, size_t __len, mbstate_t *restrict __ps) throw();
    extern size_t wcsnrtombs(char *restrict __dst, const wchar_t **restrict __src, size_t __nwc, size_t __len, mbstate_t *restrict __ps) throw();
    extern int wcwidth(wchar_t __c) throw();
    extern int wcswidth(const wchar_t *__s, size_t __n) throw();
    extern double wcstod(const wchar_t *restrict __nptr, wchar_t **restrict __endptr) throw();
    extern float wcstof(const wchar_t *restrict __nptr, wchar_t **restrict __endptr) throw();
    extern long double wcstold(const wchar_t *restrict __nptr, wchar_t **restrict __endptr) throw();
    extern long wcstol(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base) throw();
    extern unsigned long wcstoul(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base) throw();
    extern long long wcstoll(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base) throw();
    extern unsigned long long wcstoull(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base) throw();
    extern long long wcstoq(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base) throw();
    extern unsigned long long wcstouq(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base) throw();
    extern long wcstol_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base, __locale_t __loc) throw();
    extern unsigned long wcstoul_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base, __locale_t __loc) throw();
    extern long long wcstoll_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base, __locale_t __loc) throw();
    extern unsigned long long wcstoull_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base, __locale_t __loc) throw();
    extern double wcstod_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, __locale_t __loc) throw();
    extern float wcstof_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, __locale_t __loc) throw();
    extern long double wcstold_l(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, __locale_t __loc) throw();
    extern wchar_t *wcpcpy(wchar_t *restrict __dest, const wchar_t *restrict __src) throw();
    extern wchar_t *wcpncpy(wchar_t *restrict __dest, const wchar_t *restrict __src, size_t __n) throw();
    extern __FILE *open_wmemstream(wchar_t **__bufloc, size_t *__sizeloc) throw();
    extern int fwide(__FILE *__fp, int __mode) throw();
    extern int fwprintf(__FILE *restrict __stream, const wchar_t *restrict __format, ...);
    extern int wprintf(const wchar_t *restrict __format, ...);
    extern int swprintf(wchar_t *restrict __s, size_t __n, const wchar_t *restrict __format, ...) throw();
    extern int vfwprintf(__FILE *restrict __s, const wchar_t *restrict __format, __gnuc_va_list __arg);
    extern int vwprintf(const wchar_t *restrict __format, __gnuc_va_list __arg);
    extern int vswprintf(wchar_t *restrict __s, size_t __n, const wchar_t *restrict __format, __gnuc_va_list __arg) throw();
    extern int fwscanf(__FILE *restrict __stream, const wchar_t *restrict __format, ...);
    extern int wscanf(const wchar_t *restrict __format, ...);
    extern int swscanf(const wchar_t *restrict __s, const wchar_t *restrict __format, ...) throw();
    extern int vfwscanf(__FILE *restrict __s, const wchar_t *restrict __format, __gnuc_va_list __arg);
    extern int vwscanf(const wchar_t *restrict __format, __gnuc_va_list __arg);
    extern int vswscanf(const wchar_t *restrict __s, const wchar_t *restrict __format, __gnuc_va_list __arg) throw();
    extern wint_t fgetwc(__FILE *__stream);
    extern wint_t getwc(__FILE *__stream);
    extern wint_t getwchar();
    extern wint_t fputwc(wchar_t __wc, __FILE *__stream);
    extern wint_t putwc(wchar_t __wc, __FILE *__stream);
    extern wint_t putwchar(wchar_t __wc);
    extern wchar_t *fgetws(wchar_t *restrict __ws, int __n, __FILE *restrict __stream);
    extern int fputws(const wchar_t *restrict __ws, __FILE *restrict __stream);
    extern wint_t ungetwc(wint_t __wc, __FILE *__stream);
    extern wint_t getwc_unlocked(__FILE *__stream);
    extern wint_t getwchar_unlocked();
    extern wint_t fgetwc_unlocked(__FILE *__stream);
    extern wint_t fputwc_unlocked(wchar_t __wc, __FILE *__stream);
    extern wint_t putwc_unlocked(wchar_t __wc, __FILE *__stream);
    extern wint_t putwchar_unlocked(wchar_t __wc);
    extern wchar_t *fgetws_unlocked(wchar_t *restrict __ws, int __n, __FILE *restrict __stream);
    extern int fputws_unlocked(const wchar_t *restrict __ws, __FILE *restrict __stream);
    extern size_t wcsftime(wchar_t *restrict __s, size_t __maxsize, const wchar_t *restrict __format, const struct tm *restrict __tp) throw();
    extern size_t wcsftime_l(wchar_t *restrict __s, size_t __maxsize, const wchar_t *restrict __format, const struct tm *restrict __tp, __locale_t __loc) throw();
}
namespace std {
    using ::mbstate_t;
    ;
}
namespace std {
    using ::wint_t;
    ;
    using ::btowc;
    ;
    using ::fgetwc;
    ;
    using ::fgetws;
    ;
    using ::fputwc;
    ;
    using ::fputws;
    ;
    using ::fwide;
    ;
    using ::fwprintf;
    ;
    using ::fwscanf;
    ;
    using ::getwc;
    ;
    using ::getwchar;
    ;
    using ::mbrlen;
    ;
    using ::mbrtowc;
    ;
    using ::mbsinit;
    ;
    using ::mbsrtowcs;
    ;
    using ::putwc;
    ;
    using ::putwchar;
    ;
    using ::swprintf;
    ;
    using ::swscanf;
    ;
    using ::ungetwc;
    ;
    using ::vfwprintf;
    ;
    using ::vfwscanf;
    ;
    using ::vswprintf;
    ;
    using ::vswscanf;
    ;
    using ::vwprintf;
    ;
    using ::vwscanf;
    ;
    using ::wcrtomb;
    ;
    using ::wcscat;
    ;
    using ::wcscmp;
    ;
    using ::wcscoll;
    ;
    using ::wcscpy;
    ;
    using ::wcscspn;
    ;
    using ::wcsftime;
    ;
    using ::wcslen;
    ;
    using ::wcsncat;
    ;
    using ::wcsncmp;
    ;
    using ::wcsncpy;
    ;
    using ::wcsrtombs;
    ;
    using ::wcsspn;
    ;
    using ::wcstod;
    ;
    using ::wcstof;
    ;
    using ::wcstok;
    ;
    using ::wcstol;
    ;
    using ::wcstoul;
    ;
    using ::wcsxfrm;
    ;
    using ::wctob;
    ;
    using ::wmemcmp;
    ;
    using ::wmemcpy;
    ;
    using ::wmemmove;
    ;
    using ::wmemset;
    ;
    using ::wprintf;
    ;
    using ::wscanf;
    ;
    using ::wcschr;
    ;
    using ::wcspbrk;
    ;
    using ::wcsrchr;
    ;
    using ::wcsstr;
    ;
    using ::wmemchr;
    ;
    inline wchar_t *wcschr(wchar_t *__p, wchar_t __c) (CompoundStmt 0xa713bd0 </usr/include/c++/4.6/cwchar:214:3, col:58>
  (ReturnStmt 0xa713bc0 <col:5, col:55>
    (CallExpr 0xa713b88 <col:12, col:55> 'wchar_t *'
      (ImplicitCastExpr 0xa713b78 <col:12> 'wchar_t *(*)(const wchar_t *, wchar_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa713b18 <col:12> 'wchar_t *(const wchar_t *, wchar_t) throw()' lvalue Function 0xa70a130 'wcschr' 'wchar_t *(const wchar_t *, wchar_t) throw()' (UsingShadow 0xa713750 'wcschr')))
      (CXXConstCastExpr 0xa713ae8 <col:19, col:49> 'const wchar_t *' const_cast<const wchar_t *> <NoOp>
        (ImplicitCastExpr 0xa713ad8 <col:46> 'wchar_t *' <LValueToRValue>
          (DeclRefExpr 0xa713ab0 <col:46> 'wchar_t *' lvalue ParmVar 0xa713950 '__p' 'wchar_t *')))
      (ImplicitCastExpr 0xa713bb0 <col:52> 'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa713b00 <col:52> 'wchar_t' lvalue ParmVar 0xa713990 '__c' 'wchar_t')))))


    inline wchar_t *wcspbrk(wchar_t *__s1, const wchar_t *__s2) (CompoundStmt 0xa714e80 </usr/include/c++/4.6/cwchar:218:3, col:61>
  (ReturnStmt 0xa714e70 <col:5, col:58>
    (CallExpr 0xa714e38 <col:12, col:58> 'wchar_t *'
      (ImplicitCastExpr 0xa714e28 <col:12> 'wchar_t *(*)(const wchar_t *, const wchar_t *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa714dd0 <col:12> 'wchar_t *(const wchar_t *, const wchar_t *) throw()' lvalue Function 0xa70a8c0 'wcspbrk' 'wchar_t *(const wchar_t *, const wchar_t *) throw()' (UsingShadow 0xa7137c0 'wcspbrk')))
      (CXXConstCastExpr 0xa714da0 <col:20, col:51> 'const wchar_t *' const_cast<const wchar_t *> <NoOp>
        (ImplicitCastExpr 0xa713d78 <col:47> 'wchar_t *' <LValueToRValue>
          (DeclRefExpr 0xa713d50 <col:47> 'wchar_t *' lvalue ParmVar 0xa713c00 '__s1' 'wchar_t *')))
      (ImplicitCastExpr 0xa714e60 <col:54> 'const wchar_t *' <LValueToRValue>
        (DeclRefExpr 0xa714db8 <col:54> 'const wchar_t *' lvalue ParmVar 0xa713c50 '__s2' 'const wchar_t *')))))


    inline wchar_t *wcsrchr(wchar_t *__p, wchar_t __c) (CompoundStmt 0xa7150d0 </usr/include/c++/4.6/cwchar:222:3, col:59>
  (ReturnStmt 0xa7150c0 <col:5, col:56>
    (CallExpr 0xa715088 <col:12, col:56> 'wchar_t *'
      (ImplicitCastExpr 0xa715078 <col:12> 'wchar_t *(*)(const wchar_t *, wchar_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa715058 <col:12> 'wchar_t *(const wchar_t *, wchar_t) throw()' lvalue Function 0xa70a290 'wcsrchr' 'wchar_t *(const wchar_t *, wchar_t) throw()' (UsingShadow 0xa713830 'wcsrchr')))
      (CXXConstCastExpr 0xa715028 <col:20, col:50> 'const wchar_t *' const_cast<const wchar_t *> <NoOp>
        (ImplicitCastExpr 0xa715018 <col:47> 'wchar_t *' <LValueToRValue>
          (DeclRefExpr 0xa714ff0 <col:47> 'wchar_t *' lvalue ParmVar 0xa714eb0 '__p' 'wchar_t *')))
      (ImplicitCastExpr 0xa7150b0 <col:53> 'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa715040 <col:53> 'wchar_t' lvalue ParmVar 0xa714ef0 '__c' 'wchar_t')))))


    inline wchar_t *wcsstr(wchar_t *__s1, const wchar_t *__s2) (CompoundStmt 0xa715330 </usr/include/c++/4.6/cwchar:226:3, col:60>
  (ReturnStmt 0xa715320 <col:5, col:57>
    (CallExpr 0xa7152e8 <col:12, col:57> 'wchar_t *'
      (ImplicitCastExpr 0xa7152d8 <col:12> 'wchar_t *(*)(const wchar_t *, const wchar_t *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7152b8 <col:12> 'wchar_t *(const wchar_t *, const wchar_t *) throw()' lvalue Function 0xa70aa30 'wcsstr' 'wchar_t *(const wchar_t *, const wchar_t *) throw()' (UsingShadow 0xa7138a0 'wcsstr')))
      (CXXConstCastExpr 0xa715288 <col:19, col:50> 'const wchar_t *' const_cast<const wchar_t *> <NoOp>
        (ImplicitCastExpr 0xa715278 <col:46> 'wchar_t *' <LValueToRValue>
          (DeclRefExpr 0xa715250 <col:46> 'wchar_t *' lvalue ParmVar 0xa715100 '__s1' 'wchar_t *')))
      (ImplicitCastExpr 0xa715310 <col:53> 'const wchar_t *' <LValueToRValue>
        (DeclRefExpr 0xa7152a0 <col:53> 'const wchar_t *' lvalue ParmVar 0xa715150 '__s2' 'const wchar_t *')))))


    inline wchar_t *wmemchr(wchar_t *__p, wchar_t __c, size_t __n) (CompoundStmt 0xa715660 </usr/include/c++/4.6/cwchar:230:3, col:64>
  (ReturnStmt 0xa715650 <col:5, col:61>
    (CallExpr 0xa715608 <col:12, col:61> 'wchar_t *'
      (ImplicitCastExpr 0xa7155f8 <col:12> 'wchar_t *(*)(const wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa715598 <col:12> 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b2a0 'wmemchr' 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713910 'wmemchr')))
      (CXXConstCastExpr 0xa715550 <col:20, col:50> 'const wchar_t *' const_cast<const wchar_t *> <NoOp>
        (ImplicitCastExpr 0xa715540 <col:47> 'wchar_t *' <LValueToRValue>
          (DeclRefExpr 0xa715518 <col:47> 'wchar_t *' lvalue ParmVar 0xa715360 '__p' 'wchar_t *')))
      (ImplicitCastExpr 0xa715630 <col:53> 'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa715568 <col:53> 'wchar_t' lvalue ParmVar 0xa7153a0 '__c' 'wchar_t'))
      (ImplicitCastExpr 0xa715640 <col:58> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa715580 <col:58> 'size_t':'unsigned int' lvalue ParmVar 0xa7153e0 '__n' 'size_t':'unsigned int')))))


}
namespace __gnu_cxx {
    using ::wcstold;
    ;
    using ::wcstoll;
    ;
    using ::wcstoull;
    ;
}
namespace std {
    using ::__gnu_cxx::wcstold;
    ;
    using ::__gnu_cxx::wcstoll;
    ;
    using ::__gnu_cxx::wcstoull;
    ;
}
namespace std {
    typedef long long streamoff;
    typedef ptrdiff_t streamsize;
    template <typename _StateT = __mbstate_t> class fpos
template <typename _StateT> class fpos {
        class fpos;
    private:
    private:
        streamoff _M_off;
        _StateT _M_state;
    public:
    public:
        fpos<_StateT>() : _M_off((IntegerLiteral 0xa716788 </usr/include/c++/4.6/bits/postypes.h:125:16> 'int' 0)
), _M_state() (CompoundStmt 0xa716820 </usr/include/c++/4.6/bits/postypes.h:125:31, col:33>)


        fpos<_StateT>(streamoff __off) : _M_off((DeclRefExpr 0xa716830 </usr/include/c++/4.6/bits/postypes.h:135:16> 'streamoff':'long long' lvalue ParmVar 0xa715f00 '__off' 'streamoff':'long long')
), _M_state() (CompoundStmt 0xa7168d0 </usr/include/c++/4.6/bits/postypes.h:135:35, col:37>)


        streamoff operator streamoff() const (CompoundStmt 0xa716958 </usr/include/c++/4.6/bits/postypes.h:138:34, col:51>
  (ReturnStmt 0xa716948 <col:36, col:43>
    (MemberExpr 0xa716924 <col:43> 'const streamoff':'const long long' lvalue ->_M_off 0xa715db0
      (CXXThisExpr 0xa7168f8 <col:43> 'const fpos<_StateT> *' this))))


        void state(_StateT __st) (CompoundStmt 0xa7169d0 </usr/include/c++/4.6/bits/postypes.h:143:7, col:26>
  (BinaryOperator 0xa7169b8 <col:9, col:20> '<dependent type>' '='
    (MemberExpr 0xa716980 <col:9> '_StateT' lvalue ->_M_state 0xa715df0
      (CXXThisExpr 0xa716970 <col:9> 'fpos<_StateT> *' this))
    (DeclRefExpr 0xa7169a0 <col:20> '_StateT' lvalue ParmVar 0xa7160f0 '__st' '_StateT')))


        _StateT state() const (CompoundStmt 0xa716a28 </usr/include/c++/4.6/bits/postypes.h:148:7, col:26>
  (ReturnStmt 0xa716a18 <col:9, col:16>
    (MemberExpr 0xa7169f8 <col:16> 'const _StateT' lvalue ->_M_state 0xa715df0
      (CXXThisExpr 0xa7169e8 <col:16> 'const fpos<_StateT> *' this))))


        fpos<_StateT> &operator+=(streamoff __off) (CompoundStmt 0xa716ae0 </usr/include/c++/4.6/bits/postypes.h:156:7, line:159:7>
  (CompoundAssignOperator 0xa716a88 <line:157:2, col:12> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (MemberExpr 0xa716a50 <col:2> 'streamoff':'long long' lvalue ->_M_off 0xa715db0
      (CXXThisExpr 0xa716a40 <col:2> 'fpos<_StateT> *' this))
    (DeclRefExpr 0xa716a70 <col:12> 'streamoff':'long long' lvalue ParmVar 0xa716280 '__off' 'streamoff':'long long'))
  (ReturnStmt 0xa716ad0 <line:158:2, col:10>
    (UnaryOperator 0xa716ab8 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa716aa8 <col:10> 'fpos<_StateT> *' this))))


        fpos<_StateT> &operator-=(streamoff __off) (CompoundStmt 0xa716b98 </usr/include/c++/4.6/bits/postypes.h:167:7, line:170:7>
  (CompoundAssignOperator 0xa716b40 <line:168:2, col:12> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (MemberExpr 0xa716b08 <col:2> 'streamoff':'long long' lvalue ->_M_off 0xa715db0
      (CXXThisExpr 0xa716af8 <col:2> 'fpos<_StateT> *' this))
    (DeclRefExpr 0xa716b28 <col:12> 'streamoff':'long long' lvalue ParmVar 0xa7163b0 '__off' 'streamoff':'long long'))
  (ReturnStmt 0xa716b88 <line:169:2, col:10>
    (UnaryOperator 0xa716b70 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa716b60 <col:10> 'fpos<_StateT> *' this))))


        fpos<_StateT> operator+(streamoff __off) const (CompoundStmt 0xa716cc8 </usr/include/c++/4.6/bits/postypes.h:180:7, line:184:7>
  (DeclStmt 0xa716c40 <line:181:2, col:19>
    0xa716bc0 "fpos<_StateT> __pos =
      (ParenListExpr 0xa716c20 <col:12, col:18> 'fpos<_StateT>'
        (UnaryOperator 0xa716c08 <col:13, col:14> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa716bf8 <col:14> 'const fpos<_StateT> *' this)))")
  (CompoundAssignOperator 0xa716c80 <line:182:2, col:11> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (DeclRefExpr 0xa716c50 <col:2> 'fpos<_StateT>' lvalue Var 0xa716bc0 '__pos' 'fpos<_StateT>')
    (DeclRefExpr 0xa716c68 <col:11> 'streamoff':'long long' lvalue ParmVar 0xa716480 '__off' 'streamoff':'long long'))
  (ReturnStmt 0xa716cb8 <line:183:2, col:9>
    (DeclRefExpr 0xa716ca0 <col:9> 'fpos<_StateT>' lvalue Var 0xa716bc0 '__pos' 'fpos<_StateT>')))


        fpos<_StateT> operator-(streamoff __off) const (CompoundStmt 0xa716e08 </usr/include/c++/4.6/bits/postypes.h:194:7, line:198:7>
  (DeclStmt 0xa716d70 <line:195:2, col:19>
    0xa716cf0 "fpos<_StateT> __pos =
      (ParenListExpr 0xa716d50 <col:12, col:18> 'fpos<_StateT>'
        (UnaryOperator 0xa716d38 <col:13, col:14> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa716d28 <col:14> 'const fpos<_StateT> *' this)))")
  (CompoundAssignOperator 0xa716dc0 <line:196:2, col:11> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
    (DeclRefExpr 0xa716d80 <col:2> 'fpos<_StateT>' lvalue Var 0xa716cf0 '__pos' 'fpos<_StateT>')
    (DeclRefExpr 0xa716da8 <col:11> 'streamoff':'long long' lvalue ParmVar 0xa716590 '__off' 'streamoff':'long long'))
  (ReturnStmt 0xa716df8 <line:197:2, col:9>
    (DeclRefExpr 0xa716de0 <col:9> 'fpos<_StateT>' lvalue Var 0xa716cf0 '__pos' 'fpos<_StateT>')))


        streamoff operator-(const fpos<_StateT> &__other) const (CompoundStmt 0xa716f20 </usr/include/c++/4.6/bits/postypes.h:207:7, col:41>
  (ReturnStmt 0xa716f10 <col:9, col:33>
    (CXXOperatorCallExpr 0xa716ee8 <col:16, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa716ea8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (MemberExpr 0xa716e38 <col:16> 'const streamoff':'const long long' lvalue ->_M_off 0xa715db0
        (CXXThisExpr 0xa716e28 <col:16> 'const fpos<_StateT> *' this))
      (CXXDependentScopeMemberExpr 0xa716e70 <col:25, col:33> '<dependent type>' lvalue
        (DeclRefExpr 0xa716e58 <col:25> 'const fpos<_StateT>' lvalue ParmVar 0xa716680 '__other' 'const fpos<_StateT> &')))))


    };
    template <typename _StateT> inline bool operator==(const fpos<_StateT> &__lhs, const fpos<_StateT> &__rhs) (CompoundStmt 0xa717358 </usr/include/c++/4.6/bits/postypes.h:218:5, col:52>
  (ReturnStmt 0xa717348 <col:7, col:49>
    (BinaryOperator 0xa717330 <col:14, col:49> '_Bool' '=='
      (CXXUnresolvedConstructExpr 0xa7172d0 <col:14, col:29> 'streamoff':'long long'
        (DeclRefExpr 0xa7172b8 <col:24> 'const fpos<_StateT>' lvalue ParmVar 0xa717080 '__lhs' 'const fpos<_StateT> &'))
      (CXXUnresolvedConstructExpr 0xa717310 <col:34, col:49> 'streamoff':'long long'
        (DeclRefExpr 0xa7172f8 <col:44> 'const fpos<_StateT>' lvalue ParmVar 0xa717180 '__rhs' 'const fpos<_StateT> &')))))

;
    template <typename _StateT> inline bool operator!=(const fpos<_StateT> &__lhs, const fpos<_StateT> &__rhs) (CompoundStmt 0xa717748 </usr/include/c++/4.6/bits/postypes.h:223:5, col:52>
  (ReturnStmt 0xa717738 <col:7, col:49>
    (BinaryOperator 0xa717720 <col:14, col:49> '_Bool' '!='
      (CXXUnresolvedConstructExpr 0xa7176c0 <col:14, col:29> 'streamoff':'long long'
        (DeclRefExpr 0xa7176a8 <col:24> 'const fpos<_StateT>' lvalue ParmVar 0xa717490 '__lhs' 'const fpos<_StateT> &'))
      (CXXUnresolvedConstructExpr 0xa717700 <col:34, col:49> 'streamoff':'long long'
        (DeclRefExpr 0xa7176e8 <col:44> 'const fpos<_StateT>' lvalue ParmVar 0xa717590 '__rhs' 'const fpos<_StateT> &')))))

;
    typedef fpos<mbstate_t> streampos;
    typedef fpos<mbstate_t> wstreampos;
}
namespace __gnu_cxx {
    template <typename _CharT> struct _Char_types {
        struct _Char_types;
        typedef unsigned long int_type;
        typedef std::streampos pos_type;
        typedef std::streamoff off_type;
        typedef std::mbstate_t state_type;
    };
    template <typename _CharT> struct char_traits {
        struct char_traits;
        typedef _CharT char_type;
        typedef typename _Char_types<_CharT>::int_type int_type;
        typedef typename _Char_types<_CharT>::pos_type pos_type;
        typedef typename _Char_types<_CharT>::off_type off_type;
        typedef typename _Char_types<_CharT>::state_type state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71ab58 </usr/include/c++/4.6/bits/char_traits.h:94:7, col:22>
  (BinaryOperator 0xa71ab40 <col:9, col:16> '<dependent type>' '='
    (DeclRefExpr 0xa71ab10 <col:9> 'char_type':'_CharT' lvalue ParmVar 0xa718630 '__c1' 'char_type &')
    (DeclRefExpr 0xa71ab28 <col:16> 'const char_type':'const _CharT' lvalue ParmVar 0xa7186a0 '__c2' 'const char_type &')))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71ac18 </usr/include/c++/4.6/bits/char_traits.h:98:7, col:30>
  (ReturnStmt 0xa71ac08 <col:9, col:24>
    (CXXOperatorCallExpr 0xa71abe0 <col:16, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa71aba0 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa633e20 0xa634430 0xa676080)
      (DeclRefExpr 0xa71ab6c <col:16> 'const char_type':'const _CharT' lvalue ParmVar 0xa7187c0 '__c1' 'const char_type &')
      (DeclRefExpr 0xa71ab84 <col:24> 'const char_type':'const _CharT' lvalue ParmVar 0xa718810 '__c2' 'const char_type &'))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71acd0 </usr/include/c++/4.6/bits/char_traits.h:102:7, col:29>
  (ReturnStmt 0xa71acc0 <col:9, col:23>
    (CXXOperatorCallExpr 0xa71ac98 <col:16, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa71ac60 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6354c0 0xa635a90)
      (DeclRefExpr 0xa71ac2c <col:16> 'const char_type':'const _CharT' lvalue ParmVar 0xa718910 '__c1' 'const char_type &')
      (DeclRefExpr 0xa71ac44 <col:23> 'const char_type':'const _CharT' lvalue ParmVar 0xa718960 '__c2' 'const char_type &'))))


        static int compare(const char_type *__s1, const char_type *__s2, std::size_t __n);
        static std::size_t length(const char_type *__s);
        static const char_type *find(const char_type *__s, std::size_t __n, const char_type &__a);
        static char_type *move(char_type *__s1, const char_type *__s2, std::size_t __n);
        static char_type *copy(char_type *__s1, const char_type *__s2, std::size_t __n);
        static char_type *assign(char_type *__s, std::size_t __n, char_type __a);
        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa71ad30 </usr/include/c++/4.6/bits/char_traits.h:124:7, col:45>
  (ReturnStmt 0xa71ad20 <col:9, col:42>
    (CXXStaticCastExpr 0xa71ad08 <col:16, col:42> 'char_type':'_CharT' static_cast<char_type> <Dependent>
      (DeclRefExpr 0xa71ace4 <col:39> 'const int_type':'const typename _Char_types<_CharT>::int_type' lvalue ParmVar 0xa71a590 '__c' 'const int_type &'))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa71ad90 </usr/include/c++/4.6/bits/char_traits.h:128:7, col:44>
  (ReturnStmt 0xa71ad80 <col:9, col:41>
    (CXXStaticCastExpr 0xa71ad68 <col:16, col:41> 'int_type':'typename _Char_types<_CharT>::int_type' static_cast<int_type> <Dependent>
      (DeclRefExpr 0xa71ad44 <col:38> 'const char_type':'const _CharT' lvalue ParmVar 0xa71a6b0 '__c' 'const char_type &'))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa71ae50 </usr/include/c++/4.6/bits/char_traits.h:132:7, col:30>
  (ReturnStmt 0xa71ae40 <col:9, col:24>
    (CXXOperatorCallExpr 0xa71ae18 <col:16, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa71add8 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa633e20 0xa634430 0xa676080)
      (DeclRefExpr 0xa71ada4 <col:16> 'const int_type':'const typename _Char_types<_CharT>::int_type' lvalue ParmVar 0xa71a7d0 '__c1' 'const int_type &')
      (DeclRefExpr 0xa71adbc <col:24> 'const int_type':'const typename _Char_types<_CharT>::int_type' lvalue ParmVar 0xa71a820 '__c2' 'const int_type &'))))


        static int_type eof() (CompoundStmt 0xa71aec8 </usr/include/c++/4.6/bits/char_traits.h:136:7, col:59>
  (ReturnStmt 0xa71aeb8 <col:9, col:56>
    (CXXStaticCastExpr 0xa71aea0 <col:16, col:56> 'int_type':'typename _Char_types<_CharT>::int_type' static_cast<int_type> <Dependent>
      (UnaryOperator 0xa71ae80 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:1149:28, col:29> 'int' prefix '-'
        (IntegerLiteral 0xa71ae68 <col:29> 'int' 1)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa71b028 </usr/include/c++/4.6/bits/char_traits.h:140:7, col:75>
  (ReturnStmt 0xa71b018 <col:9, col:72>
    (ConditionalOperator 0xa71aff8 <col:16, col:72> '<dependent type>'
      (UnaryOperator 0xa71af70 <col:16, col:39> '<dependent type>' prefix '!'
        (CallExpr 0xa71af48 <col:17, col:39> '<dependent type>'
          (DeclRefExpr 0xa71aedc <col:17> '_Bool (const int_type &, const int_type &)' lvalue CXXMethod 0xa71a8c0 'eq_int_type' '_Bool (const int_type &, const int_type &)')
          (DeclRefExpr 0xa71aef4 <col:29> 'const int_type':'const typename _Char_types<_CharT>::int_type' lvalue ParmVar 0xa71a9f0 '__c' 'const int_type &')
          (CallExpr 0xa71af28 <col:34, col:38> '<dependent type>'
            (DeclRefExpr 0xa71af0c <col:34> 'int_type (void)' lvalue CXXMethod 0xa71a980 'eof' 'int_type (void)'))))
      (DeclRefExpr 0xa71af84 <col:43> 'const int_type':'const typename _Char_types<_CharT>::int_type' lvalue ParmVar 0xa71a9f0 '__c' 'const int_type &')
      (CallExpr 0xa71afd8 <col:49, col:72> '<dependent type>'
        (DeclRefExpr 0xa71af9c <col:49> 'int_type (const char_type &)' lvalue CXXMethod 0xa71a750 'to_int_type' 'int_type (const char_type &)')
        (CXXUnresolvedConstructExpr 0xa71afc0 <col:61, col:71> 'char_type':'_CharT')))))


    };
    static int compare(const char_type *__s1, const char_type *__s2, std::size_t __n) (CompoundStmt 0xa71b770 </usr/include/c++/4.6/bits/char_traits.h:147:5, line:154:5>
  (ForStmt 0xa71b720 <line:148:7, line:152:11>
    (DeclStmt 0xa71b430 <line:148:12, col:31>
      0xa71b3d0 "std::size_t __i =
        (ImplicitCastExpr 0xa71b420 <col:30> 'std::size_t':'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa71b408 <col:30> 'int' 0))")
    <<<NULL>>>
    (BinaryOperator 0xa71b490 <col:33, col:39> '_Bool' '<'
      (ImplicitCastExpr 0xa71b470 <col:33> 'std::size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71b440 <col:33> 'std::size_t':'unsigned int' lvalue Var 0xa71b3d0 '__i' 'std::size_t':'unsigned int'))
      (ImplicitCastExpr 0xa71b480 <col:39> 'std::size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71b458 <col:39> 'std::size_t':'unsigned int' lvalue ParmVar 0xa71b2a0 '__n' 'std::size_t':'unsigned int')))
    (UnaryOperator 0xa71b4c0 <col:44, col:46> 'std::size_t':'unsigned int' lvalue prefix '++'
      (DeclRefExpr 0xa71b4a8 <col:46> 'std::size_t':'unsigned int' lvalue Var 0xa71b3d0 '__i' 'std::size_t':'unsigned int'))
    (IfStmt 0xa71b700 <line:149:2, line:152:11>
      <<<NULL>>>
      (CallExpr 0xa71b580 <line:149:6, col:29> '<dependent type>'
        (DeclRefExpr 0xa71b4d4 <col:6> '_Bool (const char_type &, const char_type &)' lvalue CXXMethod 0xa7189c0 'lt' '_Bool (const char_type &, const char_type &)')
        (ArraySubscriptExpr 0xa71b520 <col:9, col:17> '<dependent type>' lvalue
          (DeclRefExpr 0xa71b4ec <col:9> 'const char_type *' lvalue ParmVar 0xa71b1f0 '__s1' 'const char_type *')
          (DeclRefExpr 0xa71b504 <col:14> 'std::size_t':'unsigned int' lvalue Var 0xa71b3d0 '__i' 'std::size_t':'unsigned int'))
        (ArraySubscriptExpr 0xa71b568 <col:20, col:28> '<dependent type>' lvalue
          (DeclRefExpr 0xa71b534 <col:20> 'const char_type *' lvalue ParmVar 0xa71b240 '__s2' 'const char_type *')
          (DeclRefExpr 0xa71b54c <col:25> 'std::size_t':'unsigned int' lvalue Var 0xa71b3d0 '__i' 'std::size_t':'unsigned int')))
      (ReturnStmt 0xa71b5d8 <line:150:4, col:12>
        (UnaryOperator 0xa71b5c0 <col:11, col:12> 'int' prefix '-'
          (IntegerLiteral 0xa71b5a8 <col:12> 'int' 1)))
      (IfStmt 0xa71b6e0 <line:151:7, line:152:11>
        <<<NULL>>>
        (CallExpr 0xa71b690 <line:151:11, col:34> '<dependent type>'
          (DeclRefExpr 0xa71b5e8 <col:11> '_Bool (const char_type &, const char_type &)' lvalue CXXMethod 0xa7189c0 'lt' '_Bool (const char_type &, const char_type &)')
          (ArraySubscriptExpr 0xa71b630 <col:14, col:22> '<dependent type>' lvalue
            (DeclRefExpr 0xa71b600 <col:14> 'const char_type *' lvalue ParmVar 0xa71b240 '__s2' 'const char_type *')
            (DeclRefExpr 0xa71b618 <col:19> 'std::size_t':'unsigned int' lvalue Var 0xa71b3d0 '__i' 'std::size_t':'unsigned int'))
          (ArraySubscriptExpr 0xa71b678 <col:25, col:33> '<dependent type>' lvalue
            (DeclRefExpr 0xa71b644 <col:25> 'const char_type *' lvalue ParmVar 0xa71b1f0 '__s1' 'const char_type *')
            (DeclRefExpr 0xa71b65c <col:30> 'std::size_t':'unsigned int' lvalue Var 0xa71b3d0 '__i' 'std::size_t':'unsigned int')))
        (ReturnStmt 0xa71b6d0 <line:152:4, col:11>
          (IntegerLiteral 0xa71b6b8 <col:11> 'int' 1))
        <<<NULL>>>)))
  (ReturnStmt 0xa71b760 <line:153:7, col:14>
    (IntegerLiteral 0xa71b748 <col:14> 'int' 0)))


    static std::size_t length(const char_type *__p) (CompoundStmt 0xa71bc30 </usr/include/c++/4.6/bits/char_traits.h:160:5, line:165:5>
  (DeclStmt 0xa71bae0 <line:161:7, col:26>
    0xa71ba80 "std::size_t __i =
      (ImplicitCastExpr 0xa71bad0 <col:25> 'std::size_t':'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa71bab8 <col:25> 'int' 0))")
  (WhileStmt 0xa71bbe0 <line:162:7, line:163:11>
    <<<NULL>>>
    (UnaryOperator 0xa71bb98 <line:162:14, col:39> '<dependent type>' prefix '!'
      (CallExpr 0xa71bb70 <col:15, col:39> '<dependent type>'
        (DeclRefExpr 0xa71baf0 <col:15> '_Bool (const char_type &, const char_type &)' lvalue CXXMethod 0xa718890 'eq' '_Bool (const char_type &, const char_type &)')
        (ArraySubscriptExpr 0xa71bb38 <col:18, col:25> '<dependent type>' lvalue
          (DeclRefExpr 0xa71bb08 <col:18> 'const char_type *' lvalue ParmVar 0xa71b960 '__p' 'const char_type *')
          (DeclRefExpr 0xa71bb20 <col:22> 'std::size_t':'unsigned int' lvalue Var 0xa71ba80 '__i' 'std::size_t':'unsigned int'))
        (CXXUnresolvedConstructExpr 0xa71bb58 <col:28, col:38> 'char_type':'_CharT')))
    (UnaryOperator 0xa71bbc8 <line:163:9, col:11> 'std::size_t':'unsigned int' lvalue prefix '++'
      (DeclRefExpr 0xa71bbac <col:11> 'std::size_t':'unsigned int' lvalue Var 0xa71ba80 '__i' 'std::size_t':'unsigned int')))
  (ReturnStmt 0xa71bc20 <line:164:7, col:14>
    (ImplicitCastExpr 0xa71bc10 <col:14> 'std::size_t':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa71bbf4 <col:14> 'std::size_t':'unsigned int' lvalue Var 0xa71ba80 '__i' 'std::size_t':'unsigned int'))))


    static const typename char_traits<_CharT>::char_type *find(const char_type *__s, std::size_t __n, const char_type &__a) (CompoundStmt 0xa71c4d8 </usr/include/c++/4.6/bits/char_traits.h:171:5, line:176:5>
  (ForStmt 0xa71c488 <line:172:7, line:174:24>
    (DeclStmt 0xa71c280 <line:172:12, col:31>
      0xa71c220 "std::size_t __i =
        (ImplicitCastExpr 0xa71c270 <col:30> 'std::size_t':'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa71c258 <col:30> 'int' 0))")
    <<<NULL>>>
    (BinaryOperator 0xa71c2e0 <col:33, col:39> '_Bool' '<'
      (ImplicitCastExpr 0xa71c2c0 <col:33> 'std::size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71c290 <col:33> 'std::size_t':'unsigned int' lvalue Var 0xa71c220 '__i' 'std::size_t':'unsigned int'))
      (ImplicitCastExpr 0xa71c2d0 <col:39> 'std::size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71c2a8 <col:39> 'std::size_t':'unsigned int' lvalue ParmVar 0xa71bf70 '__n' 'std::size_t':'unsigned int')))
    (UnaryOperator 0xa71c310 <col:44, col:46> 'std::size_t':'unsigned int' lvalue prefix '++'
      (DeclRefExpr 0xa71c2f8 <col:46> 'std::size_t':'unsigned int' lvalue Var 0xa71c220 '__i' 'std::size_t':'unsigned int'))
    (IfStmt 0xa71c468 <line:173:9, line:174:24>
      <<<NULL>>>
      (CallExpr 0xa71c3a0 <line:173:13, col:29> '<dependent type>'
        (DeclRefExpr 0xa71c324 <col:13> '_Bool (const char_type &, const char_type &)' lvalue CXXMethod 0xa718890 'eq' '_Bool (const char_type &, const char_type &)')
        (ArraySubscriptExpr 0xa71c370 <col:16, col:23> '<dependent type>' lvalue
          (DeclRefExpr 0xa71c33c <col:16> 'const char_type *' lvalue ParmVar 0xa71bf10 '__s' 'const char_type *')
          (DeclRefExpr 0xa71c354 <col:20> 'std::size_t':'unsigned int' lvalue Var 0xa71c220 '__i' 'std::size_t':'unsigned int'))
        (DeclRefExpr 0xa71c384 <col:26> 'const char_type':'const _CharT' lvalue ParmVar 0xa71bfc0 '__a' 'const char_type &'))
      (ReturnStmt 0xa71c458 <line:174:11, col:24>
        (CXXOperatorCallExpr 0xa71c430 <col:18, col:24> '<dependent type>'
          (UnresolvedLookupExpr 0xa71c3f8 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63caf0)
          (DeclRefExpr 0xa71c3c4 <col:18> 'const char_type *' lvalue ParmVar 0xa71bf10 '__s' 'const char_type *')
          (DeclRefExpr 0xa71c3dc <col:24> 'std::size_t':'unsigned int' lvalue Var 0xa71c220 '__i' 'std::size_t':'unsigned int')))
      <<<NULL>>>))
  (ReturnStmt 0xa71c4c8 <line:175:7, col:14>
    (IntegerLiteral 0xa71c4b0 <col:14> 'int' 0)))


    static typename char_traits<_CharT>::char_type *move(char_type *__s1, const char_type *__s2, std::size_t __n) (CompoundStmt 0xa71cb70 </usr/include/c++/4.6/bits/char_traits.h:182:5, line:185:5>
  (ReturnStmt 0xa71cb60 <line:183:7, line:184:35>
    (CXXStaticCastExpr 0xa71cb48 <line:183:14, line:184:35> '_CharT *' static_cast<_CharT *> <Dependent>
      (CallExpr 0xa71caf8 <line:183:35, line:184:34> '<dependent type>'
        (DeclRefExpr 0xa71ca4c <line:183:35> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)')
        (DeclRefExpr 0xa71ca64 <col:53> 'char_type *' lvalue ParmVar 0xa71c770 '__s1' 'char_type *')
        (DeclRefExpr 0xa71ca7c <col:59> 'const char_type *' lvalue ParmVar 0xa71c7c0 '__s2' 'const char_type *')
        (BinaryOperator 0xa71cae0 <line:184:11, col:33> 'unsigned int' '*'
          (ImplicitCastExpr 0xa71cad0 <col:11> 'std::size_t':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa71ca94 <col:11> 'std::size_t':'unsigned int' lvalue ParmVar 0xa71c820 '__n' 'std::size_t':'unsigned int'))
          (UnaryExprOrTypeTraitExpr 0xa71cab8 <col:17, col:33> 'unsigned int' sizeof 'char_type':'_CharT'))))))


    static typename char_traits<_CharT>::char_type *copy(char_type *__s1, const char_type *__s2, std::size_t __n) (CompoundStmt 0xa71d258 </usr/include/c++/4.6/bits/char_traits.h:191:5, line:195:5>
  (CallExpr 0xa71d208 <line:193:7, col:39> '<dependent type>'
    (UnresolvedLookupExpr 0xa71d110 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa64d290)
    (DeclRefExpr 0xa71d144 <col:17> 'const char_type *' lvalue ParmVar 0xa71ce60 '__s2' 'const char_type *')
    (CXXOperatorCallExpr 0xa71d1c8 <col:23, col:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa71d190 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa63caf0)
      (DeclRefExpr 0xa71d15c <col:23> 'const char_type *' lvalue ParmVar 0xa71ce60 '__s2' 'const char_type *')
      (DeclRefExpr 0xa71d174 <col:30> 'std::size_t':'unsigned int' lvalue ParmVar 0xa71cec0 '__n' 'std::size_t':'unsigned int'))
    (DeclRefExpr 0xa71d1ec <col:35> 'char_type *' lvalue ParmVar 0xa71ce10 '__s1' 'char_type *'))
  (ReturnStmt 0xa71d248 <line:194:7, col:14>
    (DeclRefExpr 0xa71d230 <col:14> 'char_type *' lvalue ParmVar 0xa71ce10 '__s1' 'char_type *')))


    static typename char_traits<_CharT>::char_type *assign(char_type *__s, std::size_t __n, char_type __a) (CompoundStmt 0xa71d8b0 </usr/include/c++/4.6/bits/char_traits.h:201:5, line:205:5>
  (CallExpr 0xa71d860 <line:203:7, col:32> '<dependent type>'
    (UnresolvedLookupExpr 0xa71d7e0 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6580c0)
    (DeclRefExpr 0xa71d814 <col:19> 'char_type *' lvalue ParmVar 0xa71d4f0 '__s' 'char_type *')
    (DeclRefExpr 0xa71d82c <col:24> 'std::size_t':'unsigned int' lvalue ParmVar 0xa71d550 '__n' 'std::size_t':'unsigned int')
    (DeclRefExpr 0xa71d844 <col:29> 'char_type':'_CharT' lvalue ParmVar 0xa71d590 '__a' 'char_type':'_CharT'))
  (ReturnStmt 0xa71d8a0 <line:204:7, col:14>
    (DeclRefExpr 0xa71d888 <col:14> 'char_type *' lvalue ParmVar 0xa71d4f0 '__s' 'char_type *')))


}
namespace std {
    template <class _CharT = wchar_t> struct char_traits {
        struct char_traits;
        typedef wchar_t char_type;
        typedef wint_t int_type;
        typedef streamoff off_type;
        typedef wstreampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723ce8 </usr/include/c++/4.6/bits/char_traits.h:315:7, col:22>
  (BinaryOperator 0xa723cd0 <col:9, col:16> 'char_type':'wchar_t' lvalue '='
    (DeclRefExpr 0xa723c90 <col:9> 'char_type':'wchar_t' lvalue ParmVar 0xa722950 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa723cc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
      (DeclRefExpr 0xa723ca8 <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7229c0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723d78 </usr/include/c++/4.6/bits/char_traits.h:319:7, col:30>
  (ReturnStmt 0xa723d68 <col:9, col:24>
    (BinaryOperator 0xa723d50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa723d30 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723cfc <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ae0 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723d40 <col:24> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d14 <col:24> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722b30 '__c2' 'const char_type &')))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723e08 </usr/include/c++/4.6/bits/char_traits.h:323:7, col:29>
  (ReturnStmt 0xa723df8 <col:9, col:23>
    (BinaryOperator 0xa723de0 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa723dc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d8c <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722c50 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723dd0 <col:23> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723da4 <col:23> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ca0 '__c2' 'const char_type &')))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa723f70 </usr/include/c++/4.6/bits/char_traits.h:327:7, col:42>
  (ReturnStmt 0xa723f60 <col:9, col:39>
    (CallExpr 0xa723f08 <col:16, col:39> 'int'
      (ImplicitCastExpr 0xa723ef8 <col:16> 'int (*)(const wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723e9c <col:16> 'int (const wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b450 'wmemcmp' 'int (const wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa7134b0 'wmemcmp')))
      (ImplicitCastExpr 0xa723f30 <col:24> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e54 <col:24> 'const char_type *' lvalue ParmVar 0xa722da0 '__s1' 'const char_type *'))
      (ImplicitCastExpr 0xa723f40 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e6c <col:30> 'const char_type *' lvalue ParmVar 0xa722df0 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa723f50 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa723e84 <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa722e30 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa724518 </usr/include/c++/4.6/bits/char_traits.h:331:7, col:29>
  (ReturnStmt 0xa724508 <col:9, col:26>
    (CallExpr 0xa7244d8 <col:16, col:26> 'size_t':'unsigned int'
      (ImplicitCastExpr 0xa7244c8 <col:16> 'size_t (*)(const wchar_t *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723fd4 <col:16> 'size_t (const wchar_t *) throw()' lvalue Function 0xa70ad90 'wcslen' 'size_t (const wchar_t *) throw()' (UsingShadow 0xa712f00 'wcslen')))
      (ImplicitCastExpr 0xa7244f8 <col:23> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723fbc <col:23> 'const char_type *' lvalue ParmVar 0xa722f40 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa724658 </usr/include/c++/4.6/bits/char_traits.h:335:7, col:40>
  (ReturnStmt 0xa724648 <col:9, col:37>
    (ImplicitCastExpr 0xa724638 <col:16, col:37> 'const char_type *' <NoOp>
      (CallExpr 0xa7245e0 <col:16, col:37> 'wchar_t *'
        (ImplicitCastExpr 0xa7245d0 <col:16> 'wchar_t *(*)(const wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7245b0 <col:16> 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b2a0 'wmemchr' 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713910 'wmemchr')))
        (ImplicitCastExpr 0xa724608 <col:24> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa724568 <col:24> 'const char_type *' lvalue ParmVar 0xa723040 '__s' 'const char_type *'))
        (ImplicitCastExpr 0xa724618 <col:29> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724580 <col:29> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7230d0 '__a' 'const char_type &'))
        (ImplicitCastExpr 0xa724628 <col:34> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724598 <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723080 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7247c0 </usr/include/c++/4.6/bits/char_traits.h:339:7, col:43>
  (ReturnStmt 0xa7247b0 <col:9, col:40>
    (CallExpr 0xa724758 <col:16, col:40> 'wchar_t *'
      (ImplicitCastExpr 0xa724748 <col:16> 'wchar_t *(*)(wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7246ec <col:16> 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b7a0 'wmemmove' 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa713590 'wmemmove')))
      (ImplicitCastExpr 0xa724780 <col:25> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246a4 <col:25> 'char_type *' lvalue ParmVar 0xa723230 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa724790 <col:31> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246bc <col:31> 'const char_type *' lvalue ParmVar 0xa723280 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7247a0 <col:37> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7246d4 <col:37> 'size_t':'unsigned int' lvalue ParmVar 0xa7232c0 '__n' 'size_t':'unsigned int')))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa724900 </usr/include/c++/4.6/bits/char_traits.h:343:7, col:42>
  (ReturnStmt 0xa7248f0 <col:9, col:39>
    (CallExpr 0xa724898 <col:16, col:39> 'wchar_t *'
      (ImplicitCastExpr 0xa724888 <col:16> 'wchar_t *(*)(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724854 <col:16> 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' lvalue Function 0xa70b600 'wmemcpy' 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' (UsingShadow 0xa713520 'wmemcpy')))
      (ImplicitCastExpr 0xa7248c0 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72480c <col:24> 'char_type *' lvalue ParmVar 0xa7233d0 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa7248d0 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa724824 <col:30> 'const char_type *' lvalue ParmVar 0xa723420 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7248e0 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72483c <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa723460 '__n' 'size_t':'unsigned int')))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa724a60 </usr/include/c++/4.6/bits/char_traits.h:347:7, col:40>
  (ReturnStmt 0xa724a50 <col:9, col:37>
    (CallExpr 0xa7249f8 <col:16, col:37> 'wchar_t *'
      (ImplicitCastExpr 0xa7249e8 <col:16> 'wchar_t *(*)(wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724994 <col:16> 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b960 'wmemset' 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713600 'wmemset')))
      (ImplicitCastExpr 0xa724a20 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72494c <col:24> 'char_type *' lvalue ParmVar 0xa723540 '__s' 'char_type *'))
      (ImplicitCastExpr 0xa724a30 <col:29> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa724964 <col:29> 'char_type':'wchar_t' lvalue ParmVar 0xa7235c0 '__a' 'char_type':'wchar_t'))
      (ImplicitCastExpr 0xa724a40 <col:34> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72497c <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723580 '__n' 'size_t':'unsigned int')))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa724ae0 </usr/include/c++/4.6/bits/char_traits.h:351:7, col:32>
  (ReturnStmt 0xa724ad0 <col:9, col:29>
    (CXXFunctionalCastExpr 0xa724ab8 <col:16, col:29> 'char_type':'wchar_t' functional cast to char_type <NoOp>
      (ImplicitCastExpr 0xa724aa8 <col:26> 'char_type':'wchar_t' <IntegralCast>
        (ImplicitCastExpr 0xa724a98 <col:26> 'int_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724a80 <col:26> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723730 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa724b60 </usr/include/c++/4.6/bits/char_traits.h:355:7, col:31>
  (ReturnStmt 0xa724b50 <col:9, col:28>
    (CXXFunctionalCastExpr 0xa724b38 <col:16, col:28> 'int_type':'unsigned int' functional cast to int_type <NoOp>
      (ImplicitCastExpr 0xa724b28 <col:25> 'int_type':'unsigned int' <IntegralCast>
        (ImplicitCastExpr 0xa724b18 <col:25> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724b00 <col:25> 'const char_type':'const wchar_t' lvalue ParmVar 0xa723850 '__c' 'const char_type &'))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa724bf0 </usr/include/c++/4.6/bits/char_traits.h:359:7, col:30>
  (ReturnStmt 0xa724be0 <col:9, col:24>
    (BinaryOperator 0xa724bc8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa724ba8 <col:16> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b74 <col:16> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723970 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa724bb8 <col:24> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b8c <col:24> 'const int_type':'const unsigned int' lvalue ParmVar 0xa7239c0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa724c68 </usr/include/c++/4.6/bits/char_traits.h:363:7, col:45>
  (ReturnStmt 0xa724c58 <col:9, col:42>
    (CXXStaticCastExpr 0xa724c40 <col:16, col:42> 'int_type':'unsigned int' static_cast<int_type> <NoOp>
      (ParenExpr 0xa724c20 </usr/include/wchar.h:119:15, col:27> 'unsigned int'
        (IntegerLiteral 0xa724c08 <col:16> 'unsigned int' 4294967295)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa724e40 </usr/include/c++/4.6/bits/char_traits.h:367:7, col:51>
  (ReturnStmt 0xa724e30 <col:9, col:46>
    (ConditionalOperator 0xa724e10 <col:16, col:46> 'unsigned int'
      (CallExpr 0xa724d88 <col:16, col:38> '_Bool'
        (ImplicitCastExpr 0xa724d78 <col:16> '_Bool (*)(const int_type &, const int_type &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa724c7c <col:16> '_Bool (const int_type &, const int_type &)' lvalue CXXMethod 0xa723a60 'eq_int_type' '_Bool (const int_type &, const int_type &)'))
        (DeclRefExpr 0xa724c94 <col:28> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')
        (MaterializeTemporaryExpr 0xa724db0 <col:33, col:37> 'const int_type':'const unsigned int' lvalue
          (CallExpr 0xa724d18 <col:33, col:37> 'int_type':'unsigned int'
            (ImplicitCastExpr 0xa724d08 <col:33> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa724cac <col:33> 'int_type (void)' lvalue CXXMethod 0xa723b00 'eof' 'int_type (void)')))))
      (ImplicitCastExpr 0xa724e00 <col:42> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa724dc0 <col:42> 'int' 0))
      (ImplicitCastExpr 0xa724df0 <col:46> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724dd8 <col:46> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')))))


    }
template <class _CharT = char> struct char_traits {
        struct char_traits;
        typedef char char_type;
        typedef int int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fbc8 </usr/include/c++/4.6/bits/char_traits.h:244:7, col:22>
  (BinaryOperator 0xa71fbb0 <col:9, col:16> 'char_type':'char' lvalue '='
    (DeclRefExpr 0xa71fb70 <col:9> 'char_type':'char' lvalue ParmVar 0xa71e830 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa71fba0 <col:16> 'char_type':'char' <LValueToRValue>
      (DeclRefExpr 0xa71fb88 <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e8a0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fc78 </usr/include/c++/4.6/bits/char_traits.h:248:7, col:30>
  (ReturnStmt 0xa71fc68 <col:9, col:24>
    (BinaryOperator 0xa71fc50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa71fc20 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc10 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbdc <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e9c0 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fc40 <col:24> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc30 <col:24> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbf4 <col:24> 'const char_type':'const char' lvalue ParmVar 0xa71ea10 '__c2' 'const char_type &'))))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fd28 </usr/include/c++/4.6/bits/char_traits.h:252:7, col:29>
  (ReturnStmt 0xa71fd18 <col:9, col:23>
    (BinaryOperator 0xa71fd00 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa71fcd0 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fcc0 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fc8c <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71eb30 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fcf0 <col:23> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fce0 <col:23> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fca4 <col:23> 'const char_type':'const char' lvalue ParmVar 0xa71eb80 '__c2' 'const char_type &'))))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa71fe50 </usr/include/c++/4.6/bits/char_traits.h:256:7, col:51>
  (ReturnStmt 0xa71fe40 <col:9, col:48>
    (CallExpr 0xa71fdc8 <col:16, col:48> 'int'
      (ImplicitCastExpr 0xa71fdb8 <col:16> 'int (*)(const void *, const void *, unsigned int)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71fd3c <col:16> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)'))
      (ImplicitCastExpr 0xa71fe00 <col:33> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fdf0 <col:33> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd54 <col:33> 'const char_type *' lvalue ParmVar 0xa71ec80 '__s1' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe20 <col:39> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fe10 <col:39> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd6c <col:39> 'const char_type *' lvalue ParmVar 0xa71ecd0 '__s2' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe30 <col:45> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71fd84 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa71ed10 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa71ffe8 </usr/include/c++/4.6/bits/char_traits.h:260:7, col:39>
  (ReturnStmt 0xa71ffd8 <col:9, col:36>
    (CallExpr 0xa71ffa8 <col:16, col:36> 'unsigned int'
      (ImplicitCastExpr 0xa71ff98 <col:16> 'unsigned int (*)(const char *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71ff44 <col:16> 'unsigned int (const char *)' lvalue Function 0xa71fe70 '__builtin_strlen' 'unsigned int (const char *)'))
      (ImplicitCastExpr 0xa71ffc8 <col:33> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa71ff5c <col:33> 'const char_type *' lvalue ParmVar 0xa71ee20 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa7202a8 </usr/include/c++/4.6/bits/char_traits.h:264:7, col:80>
  (ReturnStmt 0xa720298 <col:9, col:77>
    (CXXStaticCastExpr 0xa720280 <col:16, col:77> 'const char_type *' static_cast<const char_type *> <BitCast>
      (CallExpr 0xa7201f8 <col:46, col:76> 'void *'
        (ImplicitCastExpr 0xa7201e8 <col:46> 'void *(*)(const void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720164 <col:46> 'void *(const void *, int, unsigned int)' lvalue Function 0xa720000 '__builtin_memchr' 'void *(const void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa720230 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720220 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72017c <col:63> 'const char_type *' lvalue ParmVar 0xa71ef20 '__s' 'const char_type *')))
        (ImplicitCastExpr 0xa720250 <col:68> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa720240 <col:68> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa720194 <col:68> 'const char_type':'const char' lvalue ParmVar 0xa71efb0 '__a' 'const char_type &')))
        (ImplicitCastExpr 0xa720260 <col:73> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7201ac <col:73> 'size_t':'unsigned int' lvalue ParmVar 0xa71ef60 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7203f8 </usr/include/c++/4.6/bits/char_traits.h:268:7, col:77>
  (ReturnStmt 0xa7203e8 <col:9, col:74>
    (CXXStaticCastExpr 0xa7203d0 <col:16, col:74> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa720348 <col:40, col:73> 'void *'
        (ImplicitCastExpr 0xa720338 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7202bc <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa720380 <col:58> 'void *' <BitCast>
          (ImplicitCastExpr 0xa720370 <col:58> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202d4 <col:58> 'char_type *' lvalue ParmVar 0xa71f110 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa7203a0 <col:64> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720390 <col:64> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202ec <col:64> 'const char_type *' lvalue ParmVar 0xa71f160 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa7203b0 <col:70> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa720304 <col:70> 'size_t':'unsigned int' lvalue ParmVar 0xa71f1a0 '__n' 'size_t':'unsigned int'))))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7220c8 </usr/include/c++/4.6/bits/char_traits.h:272:7, col:76>
  (ReturnStmt 0xa7220b8 <col:9, col:73>
    (CXXStaticCastExpr 0xa7220a0 <col:16, col:73> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722018 <col:40, col:72> 'void *'
        (ImplicitCastExpr 0xa722008 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720574 <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa720410 '__builtin_memcpy' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa722050 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722040 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72058c <col:57> 'char_type *' lvalue ParmVar 0xa71f2b0 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa722070 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa722060 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7205a4 <col:63> 'const char_type *' lvalue ParmVar 0xa71f300 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa722080 <col:69> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7205bc <col:69> 'size_t':'unsigned int' lvalue ParmVar 0xa71f340 '__n' 'size_t':'unsigned int'))))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa722218 </usr/include/c++/4.6/bits/char_traits.h:276:7, col:74>
  (ReturnStmt 0xa722208 <col:9, col:71>
    (CXXStaticCastExpr 0xa7221f0 <col:16, col:71> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722168 <col:40, col:70> 'void *'
        (ImplicitCastExpr 0xa722158 <col:40> 'void *(*)(void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7220dc <col:40> 'void *(void *, int, unsigned int)' lvalue Function 0xa655240 '__builtin_memset' 'void *(void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa7221a0 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722190 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7220f4 <col:57> 'char_type *' lvalue ParmVar 0xa71f420 '__s' 'char_type *')))
        (ImplicitCastExpr 0xa7221c0 <col:62> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa7221b0 <col:62> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa72210c <col:62> 'char_type':'char' lvalue ParmVar 0xa71f4a0 '__a' 'char_type':'char')))
        (ImplicitCastExpr 0xa7221d0 <col:67> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa722124 <col:67> 'size_t':'unsigned int' lvalue ParmVar 0xa71f460 '__n' 'size_t':'unsigned int'))))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa722298 </usr/include/c++/4.6/bits/char_traits.h:280:7, col:45>
  (ReturnStmt 0xa722288 <col:9, col:42>
    (CXXStaticCastExpr 0xa722270 <col:16, col:42> 'char_type':'char' static_cast<char_type> <NoOp>
      (ImplicitCastExpr 0xa722260 <col:39> 'char_type':'char' <IntegralCast>
        (ImplicitCastExpr 0xa722250 <col:39> 'int_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa72222c <col:39> 'const int_type':'const int' lvalue ParmVar 0xa71f610 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa722350 </usr/include/c++/4.6/bits/char_traits.h:286:7, col:72>
  (ReturnStmt 0xa722340 <col:9, col:69>
    (CXXStaticCastExpr 0xa722328 <col:16, col:69> 'int_type':'int' static_cast<int_type> <NoOp>
      (ImplicitCastExpr 0xa722318 <col:38, col:68> 'int_type':'int' <IntegralCast>
        (CXXStaticCastExpr 0xa7222f8 <col:38, col:68> 'unsigned char' static_cast<unsigned char> <NoOp>
          (ImplicitCastExpr 0xa7222e8 <col:65> 'unsigned char' <IntegralCast>
            (ImplicitCastExpr 0xa7222d8 <col:65> 'char_type':'char' <LValueToRValue>
              (DeclRefExpr 0xa7222ac <col:65> 'const char_type':'const char' lvalue ParmVar 0xa71f730 '__c' 'const char_type &'))))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa7223e0 </usr/include/c++/4.6/bits/char_traits.h:290:7, col:30>
  (ReturnStmt 0xa7223d0 <col:9, col:24>
    (BinaryOperator 0xa7223b8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa722398 <col:16> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722364 <col:16> 'const int_type':'const int' lvalue ParmVar 0xa71f850 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa7223a8 <col:24> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa72237c <col:24> 'const int_type':'const int' lvalue ParmVar 0xa71f8a0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa722458 </usr/include/c++/4.6/bits/char_traits.h:294:7, col:59>
  (ReturnStmt 0xa722448 <col:9, col:56>
    (CXXStaticCastExpr 0xa722430 <col:16, col:56> 'int_type':'int' static_cast<int_type> <NoOp>
      (UnaryOperator 0xa722410 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:1149:28, col:29> 'int' prefix '-'
        (IntegerLiteral 0xa7223f8 <col:29> 'int' 1)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa7225b8 </usr/include/c++/4.6/bits/char_traits.h:298:7, col:42>
  (ReturnStmt 0xa7225a8 <col:9, col:37>
    (ConditionalOperator 0xa722588 <col:16, col:37> 'int'
      (ParenExpr 0xa722530 <col:16, col:29> '_Bool'
        (BinaryOperator 0xa722518 <col:17, col:28> '_Bool' '=='
          (ImplicitCastExpr 0xa722508 <col:17> 'int_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa72246c <col:17> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &'))
          (CallExpr 0xa7224e8 <col:24, col:28> 'int_type':'int'
            (ImplicitCastExpr 0xa7224d8 <col:24> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa722484 <col:24> 'int_type (void)' lvalue CXXMethod 0xa71f9e0 'eof' 'int_type (void)')))))
      (IntegerLiteral 0xa722548 <col:33> 'int' 0)
      (ImplicitCastExpr 0xa722578 <col:37> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722560 <col:37> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &')))))


    }
template <class _CharT> struct char_traits : public __gnu_cxx::char_traits<_CharT> {
        struct char_traits;
    };
    struct char_traits {
        struct char_traits;
        typedef char char_type;
        typedef int int_type;
        typedef streampos pos_type;
        typedef streamoff off_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fbc8 </usr/include/c++/4.6/bits/char_traits.h:244:7, col:22>
  (BinaryOperator 0xa71fbb0 <col:9, col:16> 'char_type':'char' lvalue '='
    (DeclRefExpr 0xa71fb70 <col:9> 'char_type':'char' lvalue ParmVar 0xa71e830 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa71fba0 <col:16> 'char_type':'char' <LValueToRValue>
      (DeclRefExpr 0xa71fb88 <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e8a0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fc78 </usr/include/c++/4.6/bits/char_traits.h:248:7, col:30>
  (ReturnStmt 0xa71fc68 <col:9, col:24>
    (BinaryOperator 0xa71fc50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa71fc20 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc10 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbdc <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71e9c0 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fc40 <col:24> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fc30 <col:24> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fbf4 <col:24> 'const char_type':'const char' lvalue ParmVar 0xa71ea10 '__c2' 'const char_type &'))))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa71fd28 </usr/include/c++/4.6/bits/char_traits.h:252:7, col:29>
  (ReturnStmt 0xa71fd18 <col:9, col:23>
    (BinaryOperator 0xa71fd00 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa71fcd0 <col:16> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fcc0 <col:16> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fc8c <col:16> 'const char_type':'const char' lvalue ParmVar 0xa71eb30 '__c1' 'const char_type &')))
      (ImplicitCastExpr 0xa71fcf0 <col:23> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa71fce0 <col:23> 'char_type':'char' <LValueToRValue>
          (DeclRefExpr 0xa71fca4 <col:23> 'const char_type':'const char' lvalue ParmVar 0xa71eb80 '__c2' 'const char_type &'))))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa71fe50 </usr/include/c++/4.6/bits/char_traits.h:256:7, col:51>
  (ReturnStmt 0xa71fe40 <col:9, col:48>
    (CallExpr 0xa71fdc8 <col:16, col:48> 'int'
      (ImplicitCastExpr 0xa71fdb8 <col:16> 'int (*)(const void *, const void *, unsigned int)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71fd3c <col:16> 'int (const void *, const void *, unsigned int)' lvalue Function 0xa659530 '__builtin_memcmp' 'int (const void *, const void *, unsigned int)'))
      (ImplicitCastExpr 0xa71fe00 <col:33> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fdf0 <col:33> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd54 <col:33> 'const char_type *' lvalue ParmVar 0xa71ec80 '__s1' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe20 <col:39> 'const void *' <BitCast>
        (ImplicitCastExpr 0xa71fe10 <col:39> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa71fd6c <col:39> 'const char_type *' lvalue ParmVar 0xa71ecd0 '__s2' 'const char_type *')))
      (ImplicitCastExpr 0xa71fe30 <col:45> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa71fd84 <col:45> 'size_t':'unsigned int' lvalue ParmVar 0xa71ed10 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa71ffe8 </usr/include/c++/4.6/bits/char_traits.h:260:7, col:39>
  (ReturnStmt 0xa71ffd8 <col:9, col:36>
    (CallExpr 0xa71ffa8 <col:16, col:36> 'unsigned int'
      (ImplicitCastExpr 0xa71ff98 <col:16> 'unsigned int (*)(const char *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa71ff44 <col:16> 'unsigned int (const char *)' lvalue Function 0xa71fe70 '__builtin_strlen' 'unsigned int (const char *)'))
      (ImplicitCastExpr 0xa71ffc8 <col:33> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa71ff5c <col:33> 'const char_type *' lvalue ParmVar 0xa71ee20 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa7202a8 </usr/include/c++/4.6/bits/char_traits.h:264:7, col:80>
  (ReturnStmt 0xa720298 <col:9, col:77>
    (CXXStaticCastExpr 0xa720280 <col:16, col:77> 'const char_type *' static_cast<const char_type *> <BitCast>
      (CallExpr 0xa7201f8 <col:46, col:76> 'void *'
        (ImplicitCastExpr 0xa7201e8 <col:46> 'void *(*)(const void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720164 <col:46> 'void *(const void *, int, unsigned int)' lvalue Function 0xa720000 '__builtin_memchr' 'void *(const void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa720230 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720220 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72017c <col:63> 'const char_type *' lvalue ParmVar 0xa71ef20 '__s' 'const char_type *')))
        (ImplicitCastExpr 0xa720250 <col:68> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa720240 <col:68> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa720194 <col:68> 'const char_type':'const char' lvalue ParmVar 0xa71efb0 '__a' 'const char_type &')))
        (ImplicitCastExpr 0xa720260 <col:73> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7201ac <col:73> 'size_t':'unsigned int' lvalue ParmVar 0xa71ef60 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7203f8 </usr/include/c++/4.6/bits/char_traits.h:268:7, col:77>
  (ReturnStmt 0xa7203e8 <col:9, col:74>
    (CXXStaticCastExpr 0xa7203d0 <col:16, col:74> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa720348 <col:40, col:73> 'void *'
        (ImplicitCastExpr 0xa720338 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7202bc <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa648f20 '__builtin_memmove' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa720380 <col:58> 'void *' <BitCast>
          (ImplicitCastExpr 0xa720370 <col:58> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202d4 <col:58> 'char_type *' lvalue ParmVar 0xa71f110 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa7203a0 <col:64> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa720390 <col:64> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7202ec <col:64> 'const char_type *' lvalue ParmVar 0xa71f160 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa7203b0 <col:70> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa720304 <col:70> 'size_t':'unsigned int' lvalue ParmVar 0xa71f1a0 '__n' 'size_t':'unsigned int'))))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7220c8 </usr/include/c++/4.6/bits/char_traits.h:272:7, col:76>
  (ReturnStmt 0xa7220b8 <col:9, col:73>
    (CXXStaticCastExpr 0xa7220a0 <col:16, col:73> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722018 <col:40, col:72> 'void *'
        (ImplicitCastExpr 0xa722008 <col:40> 'void *(*)(void *, const void *, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa720574 <col:40> 'void *(void *, const void *, unsigned int)' lvalue Function 0xa720410 '__builtin_memcpy' 'void *(void *, const void *, unsigned int)'))
        (ImplicitCastExpr 0xa722050 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722040 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa72058c <col:57> 'char_type *' lvalue ParmVar 0xa71f2b0 '__s1' 'char_type *')))
        (ImplicitCastExpr 0xa722070 <col:63> 'const void *' <BitCast>
          (ImplicitCastExpr 0xa722060 <col:63> 'const char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7205a4 <col:63> 'const char_type *' lvalue ParmVar 0xa71f300 '__s2' 'const char_type *')))
        (ImplicitCastExpr 0xa722080 <col:69> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa7205bc <col:69> 'size_t':'unsigned int' lvalue ParmVar 0xa71f340 '__n' 'size_t':'unsigned int'))))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa722218 </usr/include/c++/4.6/bits/char_traits.h:276:7, col:74>
  (ReturnStmt 0xa722208 <col:9, col:71>
    (CXXStaticCastExpr 0xa7221f0 <col:16, col:71> 'char_type *' static_cast<char_type *> <BitCast>
      (CallExpr 0xa722168 <col:40, col:70> 'void *'
        (ImplicitCastExpr 0xa722158 <col:40> 'void *(*)(void *, int, unsigned int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7220dc <col:40> 'void *(void *, int, unsigned int)' lvalue Function 0xa655240 '__builtin_memset' 'void *(void *, int, unsigned int)'))
        (ImplicitCastExpr 0xa7221a0 <col:57> 'void *' <BitCast>
          (ImplicitCastExpr 0xa722190 <col:57> 'char_type *' <LValueToRValue>
            (DeclRefExpr 0xa7220f4 <col:57> 'char_type *' lvalue ParmVar 0xa71f420 '__s' 'char_type *')))
        (ImplicitCastExpr 0xa7221c0 <col:62> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa7221b0 <col:62> 'char_type':'char' <LValueToRValue>
            (DeclRefExpr 0xa72210c <col:62> 'char_type':'char' lvalue ParmVar 0xa71f4a0 '__a' 'char_type':'char')))
        (ImplicitCastExpr 0xa7221d0 <col:67> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa722124 <col:67> 'size_t':'unsigned int' lvalue ParmVar 0xa71f460 '__n' 'size_t':'unsigned int'))))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa722298 </usr/include/c++/4.6/bits/char_traits.h:280:7, col:45>
  (ReturnStmt 0xa722288 <col:9, col:42>
    (CXXStaticCastExpr 0xa722270 <col:16, col:42> 'char_type':'char' static_cast<char_type> <NoOp>
      (ImplicitCastExpr 0xa722260 <col:39> 'char_type':'char' <IntegralCast>
        (ImplicitCastExpr 0xa722250 <col:39> 'int_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa72222c <col:39> 'const int_type':'const int' lvalue ParmVar 0xa71f610 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa722350 </usr/include/c++/4.6/bits/char_traits.h:286:7, col:72>
  (ReturnStmt 0xa722340 <col:9, col:69>
    (CXXStaticCastExpr 0xa722328 <col:16, col:69> 'int_type':'int' static_cast<int_type> <NoOp>
      (ImplicitCastExpr 0xa722318 <col:38, col:68> 'int_type':'int' <IntegralCast>
        (CXXStaticCastExpr 0xa7222f8 <col:38, col:68> 'unsigned char' static_cast<unsigned char> <NoOp>
          (ImplicitCastExpr 0xa7222e8 <col:65> 'unsigned char' <IntegralCast>
            (ImplicitCastExpr 0xa7222d8 <col:65> 'char_type':'char' <LValueToRValue>
              (DeclRefExpr 0xa7222ac <col:65> 'const char_type':'const char' lvalue ParmVar 0xa71f730 '__c' 'const char_type &'))))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa7223e0 </usr/include/c++/4.6/bits/char_traits.h:290:7, col:30>
  (ReturnStmt 0xa7223d0 <col:9, col:24>
    (BinaryOperator 0xa7223b8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa722398 <col:16> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722364 <col:16> 'const int_type':'const int' lvalue ParmVar 0xa71f850 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa7223a8 <col:24> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa72237c <col:24> 'const int_type':'const int' lvalue ParmVar 0xa71f8a0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa722458 </usr/include/c++/4.6/bits/char_traits.h:294:7, col:59>
  (ReturnStmt 0xa722448 <col:9, col:56>
    (CXXStaticCastExpr 0xa722430 <col:16, col:56> 'int_type':'int' static_cast<int_type> <NoOp>
      (UnaryOperator 0xa722410 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:1149:28, col:29> 'int' prefix '-'
        (IntegerLiteral 0xa7223f8 <col:29> 'int' 1)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa7225b8 </usr/include/c++/4.6/bits/char_traits.h:298:7, col:42>
  (ReturnStmt 0xa7225a8 <col:9, col:37>
    (ConditionalOperator 0xa722588 <col:16, col:37> 'int'
      (ParenExpr 0xa722530 <col:16, col:29> '_Bool'
        (BinaryOperator 0xa722518 <col:17, col:28> '_Bool' '=='
          (ImplicitCastExpr 0xa722508 <col:17> 'int_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa72246c <col:17> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &'))
          (CallExpr 0xa7224e8 <col:24, col:28> 'int_type':'int'
            (ImplicitCastExpr 0xa7224d8 <col:24> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa722484 <col:24> 'int_type (void)' lvalue CXXMethod 0xa71f9e0 'eof' 'int_type (void)')))))
      (IntegerLiteral 0xa722548 <col:33> 'int' 0)
      (ImplicitCastExpr 0xa722578 <col:37> 'int_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa722560 <col:37> 'const int_type':'const int' lvalue ParmVar 0xa71fa50 '__c' 'const int_type &')))))


    };
    struct char_traits {
        struct char_traits;
        typedef wchar_t char_type;
        typedef wint_t int_type;
        typedef streamoff off_type;
        typedef wstreampos pos_type;
        typedef mbstate_t state_type;
        static void assign(char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723ce8 </usr/include/c++/4.6/bits/char_traits.h:315:7, col:22>
  (BinaryOperator 0xa723cd0 <col:9, col:16> 'char_type':'wchar_t' lvalue '='
    (DeclRefExpr 0xa723c90 <col:9> 'char_type':'wchar_t' lvalue ParmVar 0xa722950 '__c1' 'char_type &')
    (ImplicitCastExpr 0xa723cc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
      (DeclRefExpr 0xa723ca8 <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7229c0 '__c2' 'const char_type &'))))


        static bool eq(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723d78 </usr/include/c++/4.6/bits/char_traits.h:319:7, col:30>
  (ReturnStmt 0xa723d68 <col:9, col:24>
    (BinaryOperator 0xa723d50 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa723d30 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723cfc <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ae0 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723d40 <col:24> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d14 <col:24> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722b30 '__c2' 'const char_type &')))))


        static bool lt(const char_type &__c1, const char_type &__c2) (CompoundStmt 0xa723e08 </usr/include/c++/4.6/bits/char_traits.h:323:7, col:29>
  (ReturnStmt 0xa723df8 <col:9, col:23>
    (BinaryOperator 0xa723de0 <col:16, col:23> '_Bool' '<'
      (ImplicitCastExpr 0xa723dc0 <col:16> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723d8c <col:16> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722c50 '__c1' 'const char_type &'))
      (ImplicitCastExpr 0xa723dd0 <col:23> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa723da4 <col:23> 'const char_type':'const wchar_t' lvalue ParmVar 0xa722ca0 '__c2' 'const char_type &')))))


        static int compare(const char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa723f70 </usr/include/c++/4.6/bits/char_traits.h:327:7, col:42>
  (ReturnStmt 0xa723f60 <col:9, col:39>
    (CallExpr 0xa723f08 <col:16, col:39> 'int'
      (ImplicitCastExpr 0xa723ef8 <col:16> 'int (*)(const wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723e9c <col:16> 'int (const wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b450 'wmemcmp' 'int (const wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa7134b0 'wmemcmp')))
      (ImplicitCastExpr 0xa723f30 <col:24> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e54 <col:24> 'const char_type *' lvalue ParmVar 0xa722da0 '__s1' 'const char_type *'))
      (ImplicitCastExpr 0xa723f40 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723e6c <col:30> 'const char_type *' lvalue ParmVar 0xa722df0 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa723f50 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa723e84 <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa722e30 '__n' 'size_t':'unsigned int')))))


        static size_t length(const char_type *__s) (CompoundStmt 0xa724518 </usr/include/c++/4.6/bits/char_traits.h:331:7, col:29>
  (ReturnStmt 0xa724508 <col:9, col:26>
    (CallExpr 0xa7244d8 <col:16, col:26> 'size_t':'unsigned int'
      (ImplicitCastExpr 0xa7244c8 <col:16> 'size_t (*)(const wchar_t *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa723fd4 <col:16> 'size_t (const wchar_t *) throw()' lvalue Function 0xa70ad90 'wcslen' 'size_t (const wchar_t *) throw()' (UsingShadow 0xa712f00 'wcslen')))
      (ImplicitCastExpr 0xa7244f8 <col:23> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa723fbc <col:23> 'const char_type *' lvalue ParmVar 0xa722f40 '__s' 'const char_type *')))))


        static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) (CompoundStmt 0xa724658 </usr/include/c++/4.6/bits/char_traits.h:335:7, col:40>
  (ReturnStmt 0xa724648 <col:9, col:37>
    (ImplicitCastExpr 0xa724638 <col:16, col:37> 'const char_type *' <NoOp>
      (CallExpr 0xa7245e0 <col:16, col:37> 'wchar_t *'
        (ImplicitCastExpr 0xa7245d0 <col:16> 'wchar_t *(*)(const wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7245b0 <col:16> 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b2a0 'wmemchr' 'wchar_t *(const wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713910 'wmemchr')))
        (ImplicitCastExpr 0xa724608 <col:24> 'const char_type *' <LValueToRValue>
          (DeclRefExpr 0xa724568 <col:24> 'const char_type *' lvalue ParmVar 0xa723040 '__s' 'const char_type *'))
        (ImplicitCastExpr 0xa724618 <col:29> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724580 <col:29> 'const char_type':'const wchar_t' lvalue ParmVar 0xa7230d0 '__a' 'const char_type &'))
        (ImplicitCastExpr 0xa724628 <col:34> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724598 <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723080 '__n' 'size_t':'unsigned int'))))))


        static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa7247c0 </usr/include/c++/4.6/bits/char_traits.h:339:7, col:43>
  (ReturnStmt 0xa7247b0 <col:9, col:40>
    (CallExpr 0xa724758 <col:16, col:40> 'wchar_t *'
      (ImplicitCastExpr 0xa724748 <col:16> 'wchar_t *(*)(wchar_t *, const wchar_t *, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7246ec <col:16> 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' lvalue Function 0xa70b7a0 'wmemmove' 'wchar_t *(wchar_t *, const wchar_t *, size_t) throw()' (UsingShadow 0xa713590 'wmemmove')))
      (ImplicitCastExpr 0xa724780 <col:25> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246a4 <col:25> 'char_type *' lvalue ParmVar 0xa723230 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa724790 <col:31> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa7246bc <col:31> 'const char_type *' lvalue ParmVar 0xa723280 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7247a0 <col:37> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7246d4 <col:37> 'size_t':'unsigned int' lvalue ParmVar 0xa7232c0 '__n' 'size_t':'unsigned int')))))


        static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) (CompoundStmt 0xa724900 </usr/include/c++/4.6/bits/char_traits.h:343:7, col:42>
  (ReturnStmt 0xa7248f0 <col:9, col:39>
    (CallExpr 0xa724898 <col:16, col:39> 'wchar_t *'
      (ImplicitCastExpr 0xa724888 <col:16> 'wchar_t *(*)(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724854 <col:16> 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' lvalue Function 0xa70b600 'wmemcpy' 'wchar_t *(wchar_t *restrict, const wchar_t *restrict, size_t) throw()' (UsingShadow 0xa713520 'wmemcpy')))
      (ImplicitCastExpr 0xa7248c0 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72480c <col:24> 'char_type *' lvalue ParmVar 0xa7233d0 '__s1' 'char_type *'))
      (ImplicitCastExpr 0xa7248d0 <col:30> 'const char_type *' <LValueToRValue>
        (DeclRefExpr 0xa724824 <col:30> 'const char_type *' lvalue ParmVar 0xa723420 '__s2' 'const char_type *'))
      (ImplicitCastExpr 0xa7248e0 <col:36> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72483c <col:36> 'size_t':'unsigned int' lvalue ParmVar 0xa723460 '__n' 'size_t':'unsigned int')))))


        static char_type *assign(char_type *__s, size_t __n, char_type __a) (CompoundStmt 0xa724a60 </usr/include/c++/4.6/bits/char_traits.h:347:7, col:40>
  (ReturnStmt 0xa724a50 <col:9, col:37>
    (CallExpr 0xa7249f8 <col:16, col:37> 'wchar_t *'
      (ImplicitCastExpr 0xa7249e8 <col:16> 'wchar_t *(*)(wchar_t *, wchar_t, size_t) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa724994 <col:16> 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' lvalue Function 0xa70b960 'wmemset' 'wchar_t *(wchar_t *, wchar_t, size_t) throw()' (UsingShadow 0xa713600 'wmemset')))
      (ImplicitCastExpr 0xa724a20 <col:24> 'char_type *' <LValueToRValue>
        (DeclRefExpr 0xa72494c <col:24> 'char_type *' lvalue ParmVar 0xa723540 '__s' 'char_type *'))
      (ImplicitCastExpr 0xa724a30 <col:29> 'char_type':'wchar_t' <LValueToRValue>
        (DeclRefExpr 0xa724964 <col:29> 'char_type':'wchar_t' lvalue ParmVar 0xa7235c0 '__a' 'char_type':'wchar_t'))
      (ImplicitCastExpr 0xa724a40 <col:34> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa72497c <col:34> 'size_t':'unsigned int' lvalue ParmVar 0xa723580 '__n' 'size_t':'unsigned int')))))


        static char_type to_char_type(const int_type &__c) (CompoundStmt 0xa724ae0 </usr/include/c++/4.6/bits/char_traits.h:351:7, col:32>
  (ReturnStmt 0xa724ad0 <col:9, col:29>
    (CXXFunctionalCastExpr 0xa724ab8 <col:16, col:29> 'char_type':'wchar_t' functional cast to char_type <NoOp>
      (ImplicitCastExpr 0xa724aa8 <col:26> 'char_type':'wchar_t' <IntegralCast>
        (ImplicitCastExpr 0xa724a98 <col:26> 'int_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa724a80 <col:26> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723730 '__c' 'const int_type &'))))))


        static int_type to_int_type(const char_type &__c) (CompoundStmt 0xa724b60 </usr/include/c++/4.6/bits/char_traits.h:355:7, col:31>
  (ReturnStmt 0xa724b50 <col:9, col:28>
    (CXXFunctionalCastExpr 0xa724b38 <col:16, col:28> 'int_type':'unsigned int' functional cast to int_type <NoOp>
      (ImplicitCastExpr 0xa724b28 <col:25> 'int_type':'unsigned int' <IntegralCast>
        (ImplicitCastExpr 0xa724b18 <col:25> 'char_type':'wchar_t' <LValueToRValue>
          (DeclRefExpr 0xa724b00 <col:25> 'const char_type':'const wchar_t' lvalue ParmVar 0xa723850 '__c' 'const char_type &'))))))


        static bool eq_int_type(const int_type &__c1, const int_type &__c2) (CompoundStmt 0xa724bf0 </usr/include/c++/4.6/bits/char_traits.h:359:7, col:30>
  (ReturnStmt 0xa724be0 <col:9, col:24>
    (BinaryOperator 0xa724bc8 <col:16, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa724ba8 <col:16> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b74 <col:16> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723970 '__c1' 'const int_type &'))
      (ImplicitCastExpr 0xa724bb8 <col:24> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724b8c <col:24> 'const int_type':'const unsigned int' lvalue ParmVar 0xa7239c0 '__c2' 'const int_type &')))))


        static int_type eof() (CompoundStmt 0xa724c68 </usr/include/c++/4.6/bits/char_traits.h:363:7, col:45>
  (ReturnStmt 0xa724c58 <col:9, col:42>
    (CXXStaticCastExpr 0xa724c40 <col:16, col:42> 'int_type':'unsigned int' static_cast<int_type> <NoOp>
      (ParenExpr 0xa724c20 </usr/include/wchar.h:119:15, col:27> 'unsigned int'
        (IntegerLiteral 0xa724c08 <col:16> 'unsigned int' 4294967295)))))


        static int_type not_eof(const int_type &__c) (CompoundStmt 0xa724e40 </usr/include/c++/4.6/bits/char_traits.h:367:7, col:51>
  (ReturnStmt 0xa724e30 <col:9, col:46>
    (ConditionalOperator 0xa724e10 <col:16, col:46> 'unsigned int'
      (CallExpr 0xa724d88 <col:16, col:38> '_Bool'
        (ImplicitCastExpr 0xa724d78 <col:16> '_Bool (*)(const int_type &, const int_type &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa724c7c <col:16> '_Bool (const int_type &, const int_type &)' lvalue CXXMethod 0xa723a60 'eq_int_type' '_Bool (const int_type &, const int_type &)'))
        (DeclRefExpr 0xa724c94 <col:28> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')
        (MaterializeTemporaryExpr 0xa724db0 <col:33, col:37> 'const int_type':'const unsigned int' lvalue
          (CallExpr 0xa724d18 <col:33, col:37> 'int_type':'unsigned int'
            (ImplicitCastExpr 0xa724d08 <col:33> 'int_type (*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa724cac <col:33> 'int_type (void)' lvalue CXXMethod 0xa723b00 'eof' 'int_type (void)')))))
      (ImplicitCastExpr 0xa724e00 <col:42> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa724dc0 <col:42> 'int' 0))
      (ImplicitCastExpr 0xa724df0 <col:46> 'int_type':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa724dd8 <col:46> 'const int_type':'const unsigned int' lvalue ParmVar 0xa723b70 '__c' 'const int_type &')))))


    };
}
extern unsigned int __builtin_strlen(const char *);
extern void *__builtin_memchr(const void *, int, unsigned int);
extern void *__builtin_memcpy(void *, const void *, unsigned int);
namespace std {
    using ::lconv;
    ;
    using ::setlocale;
    ;
    using ::localeconv;
    ;
}
namespace __gnu_cxx {
    extern "C" extern typeof (uselocale) __uselocale
}
namespace std {
    typedef __locale_t __c_locale;
    inline int __convert_from_v(const __c_locale &__cloc, char *__out, const int __size, const char *__fmt, ...) (CompoundStmt 0xa725f80 </usr/include/c++/4.6//i686-linux-gnu/bits/c++locale.h:73:3, line:109:3>
  (DeclStmt 0xa7256f8 <line:75:5, col:54>
    0xa7255f0 "__c_locale __old =
      (CallExpr 0xa7256c8 <col:24, col:53> '__locale_t':'struct __locale_struct *'
        (ImplicitCastExpr 0xa7256b8 <col:24, col:35> 'typeof (uselocale) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa725648 <col:24, col:35> 'typeof (uselocale)':'__locale_t (__locale_t) throw()' lvalue Function 0xa725140 '__uselocale' 'typeof (uselocale)':'__locale_t (__locale_t) throw()'))
        (ImplicitCastExpr 0xa7256e8 <col:47> '__c_locale':'struct __locale_struct *' <LValueToRValue>
          (DeclRefExpr 0xa725668 <col:47> 'const __c_locale':'struct __locale_struct *const' lvalue ParmVar 0xa725340 '__cloc' 'const __c_locale &')))")
  (DeclStmt 0xa725748 <line:88:5, col:29>
    0xa725710 "__builtin_va_list __args")
  (CallExpr 0xa725948 <line:89:5, col:37> '_Bool'
    (ImplicitCastExpr 0xa725938 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa7258b4 <col:5> 'void (__builtin_va_list &, ...)' lvalue Function 0xa7257e0 '__builtin_va_start' 'void (__builtin_va_list &, ...)'))
    (DeclRefExpr 0xa7258cc <col:24> '__builtin_va_list':'char *' lvalue Var 0xa725710 '__args' '__builtin_va_list':'char *')
    (DeclRefExpr 0xa7258e4 <col:32> 'const char *' lvalue ParmVar 0xa7254b0 '__fmt' 'const char *'))
  (DeclStmt 0xa725cd8 <line:92:5, col:72>
    0xa725980 "const int __ret =
      (CallExpr 0xa725c58 <col:23, col:71> 'int'
        (ImplicitCastExpr 0xa725c48 <col:23> 'int (*)(char *, unsigned int, const char *, __builtin_va_list)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa725b90 <col:23> 'int (char *, unsigned int, const char *, __builtin_va_list)' lvalue Function 0xa7259c0 '__builtin_vsnprintf' 'int (char *, unsigned int, const char *, __builtin_va_list)'))
        (ImplicitCastExpr 0xa725c88 <col:43> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa725ba8 <col:43> 'char *' lvalue ParmVar 0xa7253d0 '__out' 'char *'))
        (ImplicitCastExpr 0xa725ca8 <col:50> 'unsigned int' <IntegralCast>
          (ImplicitCastExpr 0xa725c98 <col:50> 'int' <LValueToRValue>
            (DeclRefExpr 0xa725bc0 <col:50> 'const int' lvalue ParmVar 0xa725420 '__size' 'const int')))
        (ImplicitCastExpr 0xa725cb8 <col:58> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa725bd8 <col:58> 'const char *' lvalue ParmVar 0xa7254b0 '__fmt' 'const char *'))
        (ImplicitCastExpr 0xa725cc8 <col:65> '__builtin_va_list':'char *' <LValueToRValue>
          (DeclRefExpr 0xa725bf0 <col:65> '__builtin_va_list':'char *' lvalue Var 0xa725710 '__args' '__builtin_va_list':'char *')))")
  (CallExpr 0xa725e88 <line:97:5, col:28> 'void'
    (ImplicitCastExpr 0xa725e78 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa725e04 <col:5> 'void (__builtin_va_list &)' lvalue Function 0xa725d30 '__builtin_va_end' 'void (__builtin_va_list &)'))
    (DeclRefExpr 0xa725e1c <col:22> '__builtin_va_list':'char *' lvalue Var 0xa725710 '__args' '__builtin_va_list':'char *'))
  (CallExpr 0xa725f18 <line:100:5, col:33> '__locale_t':'struct __locale_struct *'
    (ImplicitCastExpr 0xa725f08 <col:5, col:16> 'typeof (uselocale) *' <FunctionToPointerDecay>
      (DeclRefExpr 0xa725ecc <col:5, col:16> 'typeof (uselocale)':'__locale_t (__locale_t) throw()' lvalue Function 0xa725140 '__uselocale' 'typeof (uselocale)':'__locale_t (__locale_t) throw()'))
    (ImplicitCastExpr 0xa725f38 <col:28> '__c_locale':'struct __locale_struct *' <LValueToRValue>
      (DeclRefExpr 0xa725eec <col:28> '__c_locale':'struct __locale_struct *' lvalue Var 0xa7255f0 '__old' '__c_locale':'struct __locale_struct *')))
  (ReturnStmt 0xa725f70 <line:108:5, col:12>
    (ImplicitCastExpr 0xa725f60 <col:12> 'int' <LValueToRValue>
      (DeclRefExpr 0xa725f44 <col:12> 'const int' lvalue Var 0xa725980 '__ret' 'const int'))))


}
extern void __builtin_va_start(__builtin_va_list &, ...);
extern int __builtin_vsnprintf(char *, unsigned int, const char *, __builtin_va_list);
extern void __builtin_va_end(__builtin_va_list &);
namespace std {
    class ios_base;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_ios
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_ios
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_ios;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_streambuf
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_streambuf
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_streambuf;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_istream
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_istream
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_istream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_ostream
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_ostream
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_ostream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_iostream
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_iostream
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_iostream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> class basic_stringbuf
template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> class basic_stringbuf
template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class basic_stringbuf;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> class basic_istringstream
template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> class basic_istringstream
template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class basic_istringstream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> class basic_ostringstream
template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> class basic_ostringstream
template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class basic_ostringstream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> class basic_stringstream
template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> class basic_stringstream
template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class basic_stringstream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_filebuf
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_filebuf
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_filebuf;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_ifstream
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_ifstream
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_ifstream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_ofstream
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_ofstream
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_ofstream;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> class basic_fstream
template <typename _CharT = char, typename _Traits = std::char_traits<char>> class basic_fstream
template <typename _CharT, typename _Traits = char_traits<_CharT>> class basic_fstream;
    template <typename _CharT, typename _Traits = char_traits<_CharT>> class istreambuf_iterator;
    template <typename _CharT, typename _Traits = char_traits<_CharT>> class ostreambuf_iterator;
    typedef basic_ios<char> ios;
    typedef basic_streambuf<char> streambuf;
    typedef basic_istream<char> istream;
    typedef basic_ostream<char> ostream;
    typedef basic_iostream<char> iostream;
    typedef basic_stringbuf<char> stringbuf;
    typedef basic_istringstream<char> istringstream;
    typedef basic_ostringstream<char> ostringstream;
    typedef basic_stringstream<char> stringstream;
    typedef basic_filebuf<char> filebuf;
    typedef basic_ifstream<char> ifstream;
    typedef basic_ofstream<char> ofstream;
    typedef basic_fstream<char> fstream;
    typedef basic_ios<wchar_t> wios;
    typedef basic_streambuf<wchar_t> wstreambuf;
    typedef basic_istream<wchar_t> wistream;
    typedef basic_ostream<wchar_t> wostream;
    typedef basic_iostream<wchar_t> wiostream;
    typedef basic_stringbuf<wchar_t> wstringbuf;
    typedef basic_istringstream<wchar_t> wistringstream;
    typedef basic_ostringstream<wchar_t> wostringstream;
    typedef basic_stringstream<wchar_t> wstringstream;
    typedef basic_filebuf<wchar_t> wfilebuf;
    typedef basic_ifstream<wchar_t> wifstream;
    typedef basic_ofstream<wchar_t> wofstream;
    typedef basic_fstream<wchar_t> wfstream;
}
extern "C" {
    enum  {
        _ISupper = (ImplicitCastExpr 0xa73c728 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa734aa0 <col:23, col:77> 'int'
    (ConditionalOperator 0xa734a80 <col:24, col:76> 'int'
      (BinaryOperator 0xa7348e8 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa7348b8 <col:24, col:28> 'int'
          (IntegerLiteral 0xa7348a0 <line:50:22> 'int' 0))
        (IntegerLiteral 0xa7348d0 <line:45:32> 'int' 8))
      (ParenExpr 0xa7349a8 <col:36, col:54> 'int'
        (BinaryOperator 0xa734990 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa734960 <col:37, col:48> 'int'
            (BinaryOperator 0xa734948 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa734900 <col:38> 'int' 1)
              (ParenExpr 0xa734930 <col:43, col:47> 'int'
                (IntegerLiteral 0xa734918 <line:50:22> 'int' 0))))
          (IntegerLiteral 0xa734978 <line:45:53> 'int' 8)))
      (ParenExpr 0xa734a68 <col:58, col:76> 'int'
        (BinaryOperator 0xa734a50 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa734a20 <col:59, col:70> 'int'
            (BinaryOperator 0xa734a08 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa7349c0 <col:60> 'int' 1)
              (ParenExpr 0xa7349f0 <col:65, col:69> 'int'
                (IntegerLiteral 0xa7349d8 <line:50:22> 'int' 0))))
          (IntegerLiteral 0xa734a38 <line:45:75> 'int' 8))))))
,
        _ISlower = (ImplicitCastExpr 0xa73c738 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73afb8 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73af98 <col:24, col:76> 'int'
      (BinaryOperator 0xa734b40 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa734b10 <col:24, col:28> 'int'
          (IntegerLiteral 0xa734af8 <line:51:22> 'int' 1))
        (IntegerLiteral 0xa734b28 <line:45:32> 'int' 8))
      (ParenExpr 0xa734c00 <col:36, col:54> 'int'
        (BinaryOperator 0xa734be8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa734bb8 <col:37, col:48> 'int'
            (BinaryOperator 0xa734ba0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa734b58 <col:38> 'int' 1)
              (ParenExpr 0xa734b88 <col:43, col:47> 'int'
                (IntegerLiteral 0xa734b70 <line:51:22> 'int' 1))))
          (IntegerLiteral 0xa734bd0 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73af80 <col:58, col:76> 'int'
        (BinaryOperator 0xa734ca8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa734c78 <col:59, col:70> 'int'
            (BinaryOperator 0xa734c60 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa734c18 <col:60> 'int' 1)
              (ParenExpr 0xa734c48 <col:65, col:69> 'int'
                (IntegerLiteral 0xa734c30 <line:51:22> 'int' 1))))
          (IntegerLiteral 0xa734c90 <line:45:75> 'int' 8))))))
,
        _ISalpha = (ImplicitCastExpr 0xa73c748 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73b208 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73b1e8 <col:24, col:76> 'int'
      (BinaryOperator 0xa73b050 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73b020 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73b008 <line:52:22> 'int' 2))
        (IntegerLiteral 0xa73b038 <line:45:32> 'int' 8))
      (ParenExpr 0xa73b110 <col:36, col:54> 'int'
        (BinaryOperator 0xa73b0f8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73b0c8 <col:37, col:48> 'int'
            (BinaryOperator 0xa73b0b0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73b068 <col:38> 'int' 1)
              (ParenExpr 0xa73b098 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73b080 <line:52:22> 'int' 2))))
          (IntegerLiteral 0xa73b0e0 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73b1d0 <col:58, col:76> 'int'
        (BinaryOperator 0xa73b1b8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73b188 <col:59, col:70> 'int'
            (BinaryOperator 0xa73b170 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73b128 <col:60> 'int' 1)
              (ParenExpr 0xa73b158 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73b140 <line:52:22> 'int' 2))))
          (IntegerLiteral 0xa73b1a0 <line:45:75> 'int' 8))))))
,
        _ISdigit = (ImplicitCastExpr 0xa73c758 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73b458 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73b438 <col:24, col:76> 'int'
      (BinaryOperator 0xa73b2a0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73b270 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73b258 <line:53:22> 'int' 3))
        (IntegerLiteral 0xa73b288 <line:45:32> 'int' 8))
      (ParenExpr 0xa73b360 <col:36, col:54> 'int'
        (BinaryOperator 0xa73b348 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73b318 <col:37, col:48> 'int'
            (BinaryOperator 0xa73b300 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73b2b8 <col:38> 'int' 1)
              (ParenExpr 0xa73b2e8 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73b2d0 <line:53:22> 'int' 3))))
          (IntegerLiteral 0xa73b330 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73b420 <col:58, col:76> 'int'
        (BinaryOperator 0xa73b408 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73b3d8 <col:59, col:70> 'int'
            (BinaryOperator 0xa73b3c0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73b378 <col:60> 'int' 1)
              (ParenExpr 0xa73b3a8 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73b390 <line:53:22> 'int' 3))))
          (IntegerLiteral 0xa73b3f0 <line:45:75> 'int' 8))))))
,
        _ISxdigit = (ImplicitCastExpr 0xa73c768 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73b6a8 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73b688 <col:24, col:76> 'int'
      (BinaryOperator 0xa73b4f0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73b4c0 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73b4a8 <line:54:23> 'int' 4))
        (IntegerLiteral 0xa73b4d8 <line:45:32> 'int' 8))
      (ParenExpr 0xa73b5b0 <col:36, col:54> 'int'
        (BinaryOperator 0xa73b598 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73b568 <col:37, col:48> 'int'
            (BinaryOperator 0xa73b550 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73b508 <col:38> 'int' 1)
              (ParenExpr 0xa73b538 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73b520 <line:54:23> 'int' 4))))
          (IntegerLiteral 0xa73b580 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73b670 <col:58, col:76> 'int'
        (BinaryOperator 0xa73b658 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73b628 <col:59, col:70> 'int'
            (BinaryOperator 0xa73b610 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73b5c8 <col:60> 'int' 1)
              (ParenExpr 0xa73b5f8 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73b5e0 <line:54:23> 'int' 4))))
          (IntegerLiteral 0xa73b640 <line:45:75> 'int' 8))))))
,
        _ISspace = (ImplicitCastExpr 0xa73c778 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73b8f8 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73b8d8 <col:24, col:76> 'int'
      (BinaryOperator 0xa73b740 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73b710 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73b6f8 <line:55:22> 'int' 5))
        (IntegerLiteral 0xa73b728 <line:45:32> 'int' 8))
      (ParenExpr 0xa73b800 <col:36, col:54> 'int'
        (BinaryOperator 0xa73b7e8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73b7b8 <col:37, col:48> 'int'
            (BinaryOperator 0xa73b7a0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73b758 <col:38> 'int' 1)
              (ParenExpr 0xa73b788 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73b770 <line:55:22> 'int' 5))))
          (IntegerLiteral 0xa73b7d0 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73b8c0 <col:58, col:76> 'int'
        (BinaryOperator 0xa73b8a8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73b878 <col:59, col:70> 'int'
            (BinaryOperator 0xa73b860 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73b818 <col:60> 'int' 1)
              (ParenExpr 0xa73b848 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73b830 <line:55:22> 'int' 5))))
          (IntegerLiteral 0xa73b890 <line:45:75> 'int' 8))))))
,
        _ISprint = (ImplicitCastExpr 0xa73c788 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73bb48 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73bb28 <col:24, col:76> 'int'
      (BinaryOperator 0xa73b990 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73b960 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73b948 <line:56:22> 'int' 6))
        (IntegerLiteral 0xa73b978 <line:45:32> 'int' 8))
      (ParenExpr 0xa73ba50 <col:36, col:54> 'int'
        (BinaryOperator 0xa73ba38 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73ba08 <col:37, col:48> 'int'
            (BinaryOperator 0xa73b9f0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73b9a8 <col:38> 'int' 1)
              (ParenExpr 0xa73b9d8 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73b9c0 <line:56:22> 'int' 6))))
          (IntegerLiteral 0xa73ba20 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73bb10 <col:58, col:76> 'int'
        (BinaryOperator 0xa73baf8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73bac8 <col:59, col:70> 'int'
            (BinaryOperator 0xa73bab0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73ba68 <col:60> 'int' 1)
              (ParenExpr 0xa73ba98 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73ba80 <line:56:22> 'int' 6))))
          (IntegerLiteral 0xa73bae0 <line:45:75> 'int' 8))))))
,
        _ISgraph = (ImplicitCastExpr 0xa73c798 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73bd98 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73bd78 <col:24, col:76> 'int'
      (BinaryOperator 0xa73bbe0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73bbb0 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73bb98 <line:57:22> 'int' 7))
        (IntegerLiteral 0xa73bbc8 <line:45:32> 'int' 8))
      (ParenExpr 0xa73bca0 <col:36, col:54> 'int'
        (BinaryOperator 0xa73bc88 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73bc58 <col:37, col:48> 'int'
            (BinaryOperator 0xa73bc40 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73bbf8 <col:38> 'int' 1)
              (ParenExpr 0xa73bc28 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73bc10 <line:57:22> 'int' 7))))
          (IntegerLiteral 0xa73bc70 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73bd60 <col:58, col:76> 'int'
        (BinaryOperator 0xa73bd48 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73bd18 <col:59, col:70> 'int'
            (BinaryOperator 0xa73bd00 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73bcb8 <col:60> 'int' 1)
              (ParenExpr 0xa73bce8 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73bcd0 <line:57:22> 'int' 7))))
          (IntegerLiteral 0xa73bd30 <line:45:75> 'int' 8))))))
,
        _ISblank = (ImplicitCastExpr 0xa73c7a8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73bfe8 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73bfc8 <col:24, col:76> 'int'
      (BinaryOperator 0xa73be30 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73be00 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73bde8 <line:58:22> 'int' 8))
        (IntegerLiteral 0xa73be18 <line:45:32> 'int' 8))
      (ParenExpr 0xa73bef0 <col:36, col:54> 'int'
        (BinaryOperator 0xa73bed8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73bea8 <col:37, col:48> 'int'
            (BinaryOperator 0xa73be90 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73be48 <col:38> 'int' 1)
              (ParenExpr 0xa73be78 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73be60 <line:58:22> 'int' 8))))
          (IntegerLiteral 0xa73bec0 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73bfb0 <col:58, col:76> 'int'
        (BinaryOperator 0xa73bf98 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73bf68 <col:59, col:70> 'int'
            (BinaryOperator 0xa73bf50 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73bf08 <col:60> 'int' 1)
              (ParenExpr 0xa73bf38 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73bf20 <line:58:22> 'int' 8))))
          (IntegerLiteral 0xa73bf80 <line:45:75> 'int' 8))))))
,
        _IScntrl = (ImplicitCastExpr 0xa73c7b8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73c238 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73c218 <col:24, col:76> 'int'
      (BinaryOperator 0xa73c080 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73c050 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73c038 <line:59:22> 'int' 9))
        (IntegerLiteral 0xa73c068 <line:45:32> 'int' 8))
      (ParenExpr 0xa73c140 <col:36, col:54> 'int'
        (BinaryOperator 0xa73c128 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73c0f8 <col:37, col:48> 'int'
            (BinaryOperator 0xa73c0e0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73c098 <col:38> 'int' 1)
              (ParenExpr 0xa73c0c8 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73c0b0 <line:59:22> 'int' 9))))
          (IntegerLiteral 0xa73c110 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73c200 <col:58, col:76> 'int'
        (BinaryOperator 0xa73c1e8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73c1b8 <col:59, col:70> 'int'
            (BinaryOperator 0xa73c1a0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73c158 <col:60> 'int' 1)
              (ParenExpr 0xa73c188 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73c170 <line:59:22> 'int' 9))))
          (IntegerLiteral 0xa73c1d0 <line:45:75> 'int' 8))))))
,
        _ISpunct = (ImplicitCastExpr 0xa73c7c8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73c488 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73c468 <col:24, col:76> 'int'
      (BinaryOperator 0xa73c2d0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73c2a0 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73c288 <line:60:22> 'int' 10))
        (IntegerLiteral 0xa73c2b8 <line:45:32> 'int' 8))
      (ParenExpr 0xa73c390 <col:36, col:54> 'int'
        (BinaryOperator 0xa73c378 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73c348 <col:37, col:48> 'int'
            (BinaryOperator 0xa73c330 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73c2e8 <col:38> 'int' 1)
              (ParenExpr 0xa73c318 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73c300 <line:60:22> 'int' 10))))
          (IntegerLiteral 0xa73c360 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73c450 <col:58, col:76> 'int'
        (BinaryOperator 0xa73c438 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73c408 <col:59, col:70> 'int'
            (BinaryOperator 0xa73c3f0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73c3a8 <col:60> 'int' 1)
              (ParenExpr 0xa73c3d8 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73c3c0 <line:60:22> 'int' 10))))
          (IntegerLiteral 0xa73c420 <line:45:75> 'int' 8))))))
,
        _ISalnum = (ImplicitCastExpr 0xa73c7d8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0xa73c6d8 <col:23, col:77> 'int'
    (ConditionalOperator 0xa73c6b8 <col:24, col:76> 'int'
      (BinaryOperator 0xa73c520 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0xa73c4f0 <col:24, col:28> 'int'
          (IntegerLiteral 0xa73c4d8 <line:61:22> 'int' 11))
        (IntegerLiteral 0xa73c508 <line:45:32> 'int' 8))
      (ParenExpr 0xa73c5e0 <col:36, col:54> 'int'
        (BinaryOperator 0xa73c5c8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0xa73c598 <col:37, col:48> 'int'
            (BinaryOperator 0xa73c580 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0xa73c538 <col:38> 'int' 1)
              (ParenExpr 0xa73c568 <col:43, col:47> 'int'
                (IntegerLiteral 0xa73c550 <line:61:22> 'int' 11))))
          (IntegerLiteral 0xa73c5b0 <line:45:53> 'int' 8)))
      (ParenExpr 0xa73c6a0 <col:58, col:76> 'int'
        (BinaryOperator 0xa73c688 <col:59, col:75> 'int' '>>'
          (ParenExpr 0xa73c658 <col:59, col:70> 'int'
            (BinaryOperator 0xa73c640 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0xa73c5f8 <col:60> 'int' 1)
              (ParenExpr 0xa73c628 <col:65, col:69> 'int'
                (IntegerLiteral 0xa73c610 <line:61:22> 'int' 11))))
          (IntegerLiteral 0xa73c670 <line:45:75> 'int' 8))))))

    };
    extern const unsigned short **__ctype_b_loc() throw();
    extern const __int32_t **__ctype_tolower_loc() throw();
    extern const __int32_t **__ctype_toupper_loc() throw();
    extern int isalnum(int) throw();
    extern int isalpha(int) throw();
    extern int iscntrl(int) throw();
    extern int isdigit(int) throw();
    extern int islower(int) throw();
    extern int isgraph(int) throw();
    extern int isprint(int) throw();
    extern int ispunct(int) throw();
    extern int isspace(int) throw();
    extern int isupper(int) throw();
    extern int isxdigit(int) throw();
    extern int tolower(int __c) throw();
    extern int toupper(int __c) throw();
    extern int isblank(int) throw();
    extern int isctype(int __c, int __mask) throw();
    extern int isascii(int __c) throw();
    extern int toascii(int __c) throw();
    extern int _toupper(int) throw();
    extern int _tolower(int) throw();
    extern int isalnum_l(int, __locale_t) throw();
    extern int isalpha_l(int, __locale_t) throw();
    extern int iscntrl_l(int, __locale_t) throw();
    extern int isdigit_l(int, __locale_t) throw();
    extern int islower_l(int, __locale_t) throw();
    extern int isgraph_l(int, __locale_t) throw();
    extern int isprint_l(int, __locale_t) throw();
    extern int ispunct_l(int, __locale_t) throw();
    extern int isspace_l(int, __locale_t) throw();
    extern int isupper_l(int, __locale_t) throw();
    extern int isxdigit_l(int, __locale_t) throw();
    extern int isblank_l(int, __locale_t) throw();
    extern int __tolower_l(int __c, __locale_t __l) throw();
    extern int tolower_l(int __c, __locale_t __l) throw();
    extern int __toupper_l(int __c, __locale_t __l) throw();
    extern int toupper_l(int __c, __locale_t __l) throw();
}
namespace std {
    using ::isalnum;
    ;
    using ::isalpha;
    ;
    using ::iscntrl;
    ;
    using ::isdigit;
    ;
    using ::isgraph;
    ;
    using ::islower;
    ;
    using ::isprint;
    ;
    using ::ispunct;
    ;
    using ::isspace;
    ;
    using ::isupper;
    ;
    using ::isxdigit;
    ;
    using ::tolower;
    ;
    using ::toupper;
    ;
}
namespace std {
    class locale;
    template <typename _Facet> bool has_facet(const std::locale &) throw();
    template <typename _Facet> const _Facet &use_facet(const std::locale &);
    template <typename _CharT> bool isspace(_CharT, const std::locale &);
    template <typename _CharT> bool isprint(_CharT, const std::locale &);
    template <typename _CharT> bool iscntrl(_CharT, const std::locale &);
    template <typename _CharT> bool isupper(_CharT, const std::locale &);
    template <typename _CharT> bool islower(_CharT, const std::locale &);
    template <typename _CharT> bool isalpha(_CharT, const std::locale &);
    template <typename _CharT> bool isdigit(_CharT, const std::locale &);
    template <typename _CharT> bool ispunct(_CharT, const std::locale &);
    template <typename _CharT> bool isxdigit(_CharT, const std::locale &);
    template <typename _CharT> bool isalnum(_CharT, const std::locale &);
    template <typename _CharT> bool isgraph(_CharT, const std::locale &);
    template <typename _CharT> _CharT toupper(_CharT, const std::locale &);
    template <typename _CharT> _CharT tolower(_CharT, const std::locale &);
    class ctype_base;
    template <typename _CharT = wchar_t> class ctype
template <typename _CharT = char> class ctype
template <typename _CharT> class ctype;
    class ctype;
    class ctype;
    template <typename _CharT> class ctype_byname;
    class codecvt_base;
    template <typename _InternT = wchar_t, typename _ExternT = char, typename _StateT = __mbstate_t> class codecvt
template <typename _InternT = char, typename _ExternT = char, typename _StateT = __mbstate_t> class codecvt
template <typename _InternT, typename _ExternT, typename _StateT> class codecvt;
    class codecvt;
    class codecvt;
    template <typename _InternT, typename _ExternT, typename _StateT> class codecvt_byname;
    template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>> class num_get;
    template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>> class num_put;
    template <typename _CharT> class numpunct;
    template <typename _CharT> class numpunct_byname;
    template <typename _CharT> class collate;
    template <typename _CharT> class collate_byname;
    class time_base;
    template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>> class time_get;
    template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>> class time_get_byname;
    template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>> class time_put;
    template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>> class time_put_byname;
    class money_base;
    template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>> class money_get;
    template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>> class money_put;
    template <typename _CharT, bool _Intl = (CXXBoolLiteralExpr 0xa747a88 </usr/include/c++/4.6/bits/localefwd.h:176:42> '_Bool' false)
> class moneypunct;
    template <typename _CharT, bool _Intl = (CXXBoolLiteralExpr 0xa747cd8 </usr/include/c++/4.6/bits/localefwd.h:178:42> '_Bool' false)
> class moneypunct_byname;
    class messages_base;
    template <typename _CharT> class messages;
    template <typename _CharT> class messages_byname;
}
namespace __cxxabiv1 {
    class __forced_unwind {
        class __forced_unwind;
        virtual void ~__forced_unwind() throw();
        virtual void __pure_dummy() = 0;
        inline __cxxabiv1::__forced_unwind &operator=(const __cxxabiv1::__forced_unwind &) throw();
    };
}
namespace std {
    template <typename _CharT, typename _Traits> inline void __ostream_write(basic_ostream<_CharT, _Traits> &__out, const _CharT *__s, streamsize __n) (CompoundStmt 0xa74c850 </usr/include/c++/4.6/bits/ostream_insert.h:45:5, line:52:5>
  (DeclStmt 0xa74c4a0 <line:46:7, col:66>
    0xa74c470 "typedef basic_ostream<_CharT, _Traits> __ostream_type")
  (DeclStmt 0xa74c590 <line:47:7, col:62>
    0xa74c560 "typedef typename __ostream_type::ios_base __ios_base")
  (DeclStmt 0xa74c6e8 <line:49:7, col:62>
    0xa74c5b0 "const streamsize __put =
      (CallExpr 0xa74c6c0 <col:32, col:61> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa74c658 <col:32, col:47> '<dependent type>' lvalue
          (CallExpr 0xa74c638 <col:32, col:44> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa74c600 <col:32, col:38> '<dependent type>' lvalue
              (DeclRefExpr 0xa74c5e4 <col:32> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74c130 '__out' 'basic_ostream<_CharT, _Traits> &'))))
        (DeclRefExpr 0xa74c68c <col:53> 'const _CharT *' lvalue ParmVar 0xa74c1a0 '__s' 'const _CharT *')
        (DeclRefExpr 0xa74c6a4 <col:58> 'streamsize':'int' lvalue ParmVar 0xa74c200 '__n' 'streamsize':'int'))")
  (IfStmt 0xa74c830 <line:50:7, line:51:35>
    <<<NULL>>>
    (BinaryOperator 0xa74c748 <line:50:11, col:20> '_Bool' '!='
      (ImplicitCastExpr 0xa74c728 <col:11> 'streamsize':'int' <LValueToRValue>
        (DeclRefExpr 0xa74c6f8 <col:11> 'const streamsize':'const int' lvalue Var 0xa74c5b0 '__put' 'const streamsize':'const int'))
      (ImplicitCastExpr 0xa74c738 <col:20> 'streamsize':'int' <LValueToRValue>
        (DeclRefExpr 0xa74c710 <col:20> 'streamsize':'int' lvalue ParmVar 0xa74c200 '__n' 'streamsize':'int')))
    (CallExpr 0xa74c810 <line:51:2, col:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa74c778 <col:2, col:8> '<dependent type>' lvalue
        (DeclRefExpr 0xa74c760 <col:2> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74c130 '__out' 'basic_ostream<_CharT, _Traits> &'))
      (DependentScopeDeclRefExpr 0xa74c7e8 <col:17, col:29> '<dependent type>' lvalue))
    <<<NULL>>>))

;
    template <typename _CharT, typename _Traits> inline void __ostream_fill(basic_ostream<_CharT, _Traits> &__out, streamsize __n) (CompoundStmt 0xa74d320 </usr/include/c++/4.6/bits/ostream_insert.h:57:5, line:71:5>
  (DeclStmt 0xa74cd00 <line:58:7, col:66>
    0xa74ccd0 "typedef basic_ostream<_CharT, _Traits> __ostream_type")
  (DeclStmt 0xa74cdc0 <line:59:7, col:62>
    0xa74cd90 "typedef typename __ostream_type::ios_base __ios_base")
  (DeclStmt 0xa74ce88 <line:61:7, col:38>
    0xa74cde0 "const _CharT __c =
      (CallExpr 0xa74ce68 <col:26, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa74ce30 <col:26, col:32> '<dependent type>' lvalue
          (DeclRefExpr 0xa74ce14 <col:26> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74ca50 '__out' 'basic_ostream<_CharT, _Traits> &')))")
  (ForStmt 0xa74d2f8 <line:62:7, line:70:2>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa74ced8 <line:62:14, col:20> '_Bool' '>'
      (ImplicitCastExpr 0xa74cec8 <col:14> 'streamsize':'int' <LValueToRValue>
        (DeclRefExpr 0xa74ce98 <col:14> 'streamsize':'int' lvalue ParmVar 0xa74ca90 '__n' 'streamsize':'int'))
      (IntegerLiteral 0xa74ceb0 <col:20> 'int' 0))
    (UnaryOperator 0xa74cf08 <col:23, col:25> 'streamsize':'int' lvalue prefix '--'
      (DeclRefExpr 0xa74cef0 <col:25> 'streamsize':'int' lvalue ParmVar 0xa74ca90 '__n' 'streamsize':'int'))
    (CompoundStmt 0xa74d2e0 <line:63:2, line:70:2>
      (DeclStmt 0xa74d0c8 <line:64:4, col:70>
        0xa74cfb0 "const typename _Traits::int_type __put =
          (CallExpr 0xa74d0a8 <col:45, col:69> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa74d058 <col:45, col:60> '<dependent type>' lvalue
              (CallExpr 0xa74d038 <col:45, col:57> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa74d000 <col:45, col:51> '<dependent type>' lvalue
                  (DeclRefExpr 0xa74cfe4 <col:45> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74ca50 '__out' 'basic_ostream<_CharT, _Traits> &'))))
            (DeclRefExpr 0xa74d08c <col:66> 'const _CharT' lvalue Var 0xa74cde0 '__c' 'const _CharT'))")
      (IfStmt 0xa74d2c0 <line:65:4, line:69:6>
        <<<NULL>>>
        (CallExpr 0xa74d1a8 <line:65:8, col:50> '<dependent type>'
          (DependentScopeDeclRefExpr 0xa74d100 <col:8, col:17> '<dependent type>' lvalue)
          (DeclRefExpr 0xa74d124 <col:29> 'const typename _Traits::int_type' lvalue Var 0xa74cfb0 '__put' 'const typename _Traits::int_type')
          (CallExpr 0xa74d188 <col:36, col:49> '<dependent type>'
            (DependentScopeDeclRefExpr 0xa74d160 <col:36, col:45> '<dependent type>' lvalue)))
        (CompoundStmt 0xa74d2a8 <line:66:6, line:69:6>
          (CallExpr 0xa74d280 <line:67:8, col:41> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa74d1e8 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa74d1cc <col:8> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74ca50 '__out' 'basic_ostream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa74d258 <col:23, col:35> '<dependent type>' lvalue))
          (BreakStmt 0xa74d2a0 <line:68:8>))
        <<<NULL>>>))))

;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>> basic_ostream<wchar_t, std::char_traits<wchar_t> > &__ostream_insert(basic_ostream<wchar_t, std::char_traits<wchar_t> > &__out, const wchar_t *__s, streamsize __n)template <typename _CharT = char, typename _Traits = std::char_traits<char>> basic_ostream<char, std::char_traits<char> > &__ostream_insert(basic_ostream<char, std::char_traits<char> > &__out, const char *__s, streamsize __n)template <typename _CharT, typename _Traits> basic_ostream<_CharT, _Traits> &__ostream_insert(basic_ostream<_CharT, _Traits> &__out, const _CharT *__s, streamsize __n) (CompoundStmt 0xa74e738 </usr/include/c++/4.6/bits/ostream_insert.h:77:5, line:112:5>
  (DeclStmt 0xa74d9a0 <line:78:7, col:66>
    0xa74d970 "typedef basic_ostream<_CharT, _Traits> __ostream_type")
  (DeclStmt 0xa74da60 <line:79:7, col:62>
    0xa74da30 "typedef typename __ostream_type::ios_base __ios_base")
  (DeclStmt 0xa74db60 <line:81:7, col:52>
    0xa74daf0 "typename __ostream_type::sentry __cerb =
      (ParenListExpr 0xa74db40 <col:45, col:51> 'typename __ostream_type::sentry'
        (DeclRefExpr 0xa74db24 <col:46> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &'))")
  (IfStmt 0xa74e6f0 <line:82:7, line:110:2>
    <<<NULL>>>
    (DeclRefExpr 0xa74db70 <line:82:11> 'typename __ostream_type::sentry' lvalue Var 0xa74daf0 '__cerb' 'typename __ostream_type::sentry')
    (CompoundStmt 0xa74e6d0 <line:83:2, line:110:2>
      (IfStmt 0xa74e4a0 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/ostream_insert.h:102:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa74db88 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
        (CompoundStmt 0xa74e480 </usr/include/c++/4.6/bits/ostream_insert.h:85:6, line:102:6>
          (DeclStmt 0xa74dc48 <line:86:8, col:44>
            0xa74dba0 "const streamsize __w =
              (CallExpr 0xa74dc28 <col:31, col:43> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa74dbf0 <col:31, col:37> '<dependent type>' lvalue
                  (DeclRefExpr 0xa74dbd4 <col:31> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')))")
          (IfStmt 0xa74e3d8 <line:87:8, line:100:34>
            <<<NULL>>>
            (BinaryOperator 0xa74dca8 <line:87:12, col:18> '_Bool' '>'
              (ImplicitCastExpr 0xa74dc88 <col:12> 'streamsize':'int' <LValueToRValue>
                (DeclRefExpr 0xa74dc58 <col:12> 'const streamsize':'const int' lvalue Var 0xa74dba0 '__w' 'const streamsize':'const int'))
              (ImplicitCastExpr 0xa74dc98 <col:18> 'streamsize':'int' <LValueToRValue>
                (DeclRefExpr 0xa74dc70 <col:18> 'streamsize':'int' lvalue ParmVar 0xa74d6b0 '__n' 'streamsize':'int')))
            (CompoundStmt 0xa74e310 <line:88:3, line:98:3>
              (DeclStmt 0xa74dee8 <line:89:5, line:91:32>
                0xa74dcd0 "const bool __left =
                  (ParenExpr 0xa74ded0 <line:89:25, line:91:31> '<dependent type>'
                    (CXXOperatorCallExpr 0xa74dea8 <line:89:26, line:91:27> '<dependent type>'
                      (UnresolvedLookupExpr 0xa74de58 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
                      (ParenExpr 0xa74ddf8 <line:89:26, line:90:31> '<dependent type>'
                        (BinaryOperator 0xa74dde0 <line:89:27, line:90:20> '<dependent type>' '&'
                          (CallExpr 0xa74dd58 <line:89:27, col:39> '<dependent type>'
                            (CXXDependentScopeMemberExpr 0xa74dd20 <col:27, col:33> '<dependent type>' lvalue
                              (DeclRefExpr 0xa74dd04 <col:27> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')))
                          (DependentScopeDeclRefExpr 0xa74ddb8 <line:90:8, col:20> '<dependent type>' lvalue)))
                      (DependentScopeDeclRefExpr 0xa74de30 <line:91:15, col:27> '<dependent type>' lvalue)))")
              (IfStmt 0xa74e018 <line:92:5, line:93:38>
                <<<NULL>>>
                (UnaryOperator 0xa74df20 <line:92:9, col:10> '_Bool' prefix '!'
                  (ImplicitCastExpr 0xa74df10 <col:10> '_Bool' <LValueToRValue>
                    (DeclRefExpr 0xa74def8 <col:10> 'const _Bool' lvalue Var 0xa74dcd0 '__left' 'const _Bool')))
                (CallExpr 0xa74dff0 <line:93:7, col:38> '<dependent type>'
                  (UnresolvedLookupExpr 0xa74df38 <col:7> '<overloaded function type>' lvalue (ADL) = '1' 0xa74cb90)
                  (DeclRefExpr 0xa74df6c <col:22> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')
                  (BinaryOperator 0xa74dfd8 <col:29, col:35> 'int' '-'
                    (ImplicitCastExpr 0xa74dfb8 <col:29> 'streamsize':'int' <LValueToRValue>
                      (DeclRefExpr 0xa74df84 <col:29> 'const streamsize':'const int' lvalue Var 0xa74dba0 '__w' 'const streamsize':'const int'))
                    (ImplicitCastExpr 0xa74dfc8 <col:35> 'streamsize':'int' <LValueToRValue>
                      (DeclRefExpr 0xa74df9c <col:35> 'streamsize':'int' lvalue ParmVar 0xa74d6b0 '__n' 'streamsize':'int'))))
                <<<NULL>>>)
              (IfStmt 0xa74e150 <line:94:5, line:95:38>
                <<<NULL>>>
                (CallExpr 0xa74e088 <line:94:9, col:20> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa74e050 <col:9, col:15> '<dependent type>' lvalue
                    (DeclRefExpr 0xa74e034 <col:9> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')))
                (CallExpr 0xa74e128 <line:95:7, col:38> '<dependent type>'
                  (UnresolvedLookupExpr 0xa74e0a8 <col:7> '<overloaded function type>' lvalue (ADL) = '1' 0xa74c320)
                  (DeclRefExpr 0xa74e0dc <col:23> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')
                  (DeclRefExpr 0xa74e0f4 <col:30> 'const _CharT *' lvalue ParmVar 0xa74d670 '__s' 'const _CharT *')
                  (DeclRefExpr 0xa74e10c <col:35> 'streamsize':'int' lvalue ParmVar 0xa74d6b0 '__n' 'streamsize':'int'))
                <<<NULL>>>)
              (IfStmt 0xa74e2f0 <line:96:5, line:97:38>
                <<<NULL>>>
                (BinaryOperator 0xa74e1f8 <line:96:9, col:30> '<dependent type>' '&&'
                  (DeclRefExpr 0xa74e16c <col:9> 'const _Bool' lvalue Var 0xa74dcd0 '__left' 'const _Bool')
                  (CallExpr 0xa74e1d8 <col:19, col:30> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa74e1a0 <col:19, col:25> '<dependent type>' lvalue
                      (DeclRefExpr 0xa74e184 <col:19> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &'))))
                (CallExpr 0xa74e2c8 <line:97:7, col:38> '<dependent type>'
                  (UnresolvedLookupExpr 0xa74e210 <col:7> '<overloaded function type>' lvalue (ADL) = '1' 0xa74cb90)
                  (DeclRefExpr 0xa74e244 <col:22> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')
                  (BinaryOperator 0xa74e2b0 <col:29, col:35> 'int' '-'
                    (ImplicitCastExpr 0xa74e290 <col:29> 'streamsize':'int' <LValueToRValue>
                      (DeclRefExpr 0xa74e25c <col:29> 'const streamsize':'const int' lvalue Var 0xa74dba0 '__w' 'const streamsize':'const int'))
                    (ImplicitCastExpr 0xa74e2a0 <col:35> 'streamsize':'int' <LValueToRValue>
                      (DeclRefExpr 0xa74e274 <col:35> 'streamsize':'int' lvalue ParmVar 0xa74d6b0 '__n' 'streamsize':'int'))))
                <<<NULL>>>))
            (CallExpr 0xa74e3b0 <line:100:3, col:34> '<dependent type>'
              (UnresolvedLookupExpr 0xa74e330 <col:3> '<overloaded function type>' lvalue (ADL) = '1' 0xa74c320)
              (DeclRefExpr 0xa74e364 <col:19> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')
              (DeclRefExpr 0xa74e37c <col:26> 'const _CharT *' lvalue ParmVar 0xa74d670 '__s' 'const _CharT *')
              (DeclRefExpr 0xa74e394 <col:31> 'streamsize':'int' lvalue ParmVar 0xa74d6b0 '__n' 'streamsize':'int')))
          (CallExpr 0xa74e460 <line:101:8, col:21> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa74e410 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa74e3f4 <col:8> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &'))
            (IntegerLiteral 0xa74e448 <col:20> 'int' 0)))
        <<<NULL>>>)
      (IfStmt 0xa74e5b0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/ostream_insert.h:107:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa74e4c0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa74e598 </usr/include/c++/4.6/bits/ostream_insert.h:104:6, line:107:6>
          (CallExpr 0xa74e568 <line:105:8, col:44> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa74e4e8 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa74e4d0 <col:8> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa74e540 <col:26, col:38> '<dependent type>' lvalue))
          (NullStmt 0xa74e588 <line:106:31>))
        <<<NULL>>>)
      (IfStmt 0xa74e6b0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/ostream_insert.h:109:47>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa74e5d0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa74e698 </usr/include/c++/4.6/bits/ostream_insert.h:109:6, col:47>
          (CallExpr 0xa74e678 <col:8, col:44> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa74e5f8 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa74e5e0 <col:8> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa74e650 <col:26, col:38> '<dependent type>' lvalue)))
        <<<NULL>>>))
    <<<NULL>>>)
  (ReturnStmt 0xa74e728 <line:111:7, col:14>
    (DeclRefExpr 0xa74e70c <col:14> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa74d600 '__out' 'basic_ostream<_CharT, _Traits> &')))

;
}
namespace std {
    template <typename _Arg = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename _Result = const std::basic_string<char>> struct unary_function {
        struct unary_function;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > argument_type;
        typedef const std::basic_string<char> result_type;
        inline unary_function() throw();
        inline unary_function(const std::unary_function<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, const std::basic_string<char> > &) throw();
    }
template <typename _Arg, typename _Result> struct unary_function {
        struct unary_function;
        typedef _Arg argument_type;
        typedef _Result result_type;
    };
    template <typename _Arg1 = std::basic_string<char>, typename _Arg2 = std::basic_string<char>, typename _Result = bool> struct binary_function {
        struct binary_function;
        typedef std::basic_string<char> first_argument_type;
        typedef std::basic_string<char> second_argument_type;
        typedef bool result_type;
        inline binary_function(const std::binary_function<std::basic_string<char>, std::basic_string<char>, bool> &) throw() (CompoundStmt 0xa9e67a0 </usr/include/c++/4.6/bits/stl_function.h:115:12>)


        inline void ~binary_function() throw();
        inline binary_function() throw();
    }
template <typename _Arg1, typename _Arg2, typename _Result> struct binary_function {
        struct binary_function;
        typedef _Arg1 first_argument_type;
        typedef _Arg2 second_argument_type;
        typedef _Result result_type;
    };
    template <typename _Tp> struct plus : public binary_function<_Tp, _Tp, _Tp> {
        struct plus;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa750ed8 </usr/include/c++/4.6/bits/stl_function.h:145:7, col:27>
  (ReturnStmt 0xa750ec8 <col:9, col:22>
    (CXXOperatorCallExpr 0xa750ea0 <col:16, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa750e60 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
      (DeclRefExpr 0xa750e30 <col:16> 'const _Tp' lvalue ParmVar 0xa750cc0 '__x' 'const _Tp &')
      (DeclRefExpr 0xa750e48 <col:22> 'const _Tp' lvalue ParmVar 0xa750d10 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct minus : public binary_function<_Tp, _Tp, _Tp> {
        struct minus;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa7514b8 </usr/include/c++/4.6/bits/stl_function.h:154:7, col:27>
  (ReturnStmt 0xa7514a8 <col:9, col:22>
    (CXXOperatorCallExpr 0xa751480 <col:16, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa751440 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (DeclRefExpr 0xa751410 <col:16> 'const _Tp' lvalue ParmVar 0xa7512c0 '__x' 'const _Tp &')
      (DeclRefExpr 0xa751428 <col:22> 'const _Tp' lvalue ParmVar 0xa751310 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct multiplies : public binary_function<_Tp, _Tp, _Tp> {
        struct multiplies;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa751a48 </usr/include/c++/4.6/bits/stl_function.h:163:7, col:27>
  (ReturnStmt 0xa751a38 <col:9, col:22>
    (BinaryOperator 0xa751a20 <col:16, col:22> '<dependent type>' '*'
      (DeclRefExpr 0xa7519f0 <col:16> 'const _Tp' lvalue ParmVar 0xa7518a0 '__x' 'const _Tp &')
      (DeclRefExpr 0xa751a08 <col:22> 'const _Tp' lvalue ParmVar 0xa7518f0 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct divides : public binary_function<_Tp, _Tp, _Tp> {
        struct divides;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa751fd8 </usr/include/c++/4.6/bits/stl_function.h:172:7, col:27>
  (ReturnStmt 0xa751fc8 <col:9, col:22>
    (BinaryOperator 0xa751fb0 <col:16, col:22> '<dependent type>' '/'
      (DeclRefExpr 0xa751f80 <col:16> 'const _Tp' lvalue ParmVar 0xa751e30 '__x' 'const _Tp &')
      (DeclRefExpr 0xa751f98 <col:22> 'const _Tp' lvalue ParmVar 0xa751e80 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct modulus : public binary_function<_Tp, _Tp, _Tp> {
        struct modulus;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa752568 </usr/include/c++/4.6/bits/stl_function.h:181:7, col:27>
  (ReturnStmt 0xa752558 <col:9, col:22>
    (BinaryOperator 0xa752540 <col:16, col:22> '<dependent type>' '%'
      (DeclRefExpr 0xa752510 <col:16> 'const _Tp' lvalue ParmVar 0xa7523c0 '__x' 'const _Tp &')
      (DeclRefExpr 0xa752528 <col:22> 'const _Tp' lvalue ParmVar 0xa752410 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct negate : public unary_function<_Tp, _Tp> {
        struct negate;
        _Tp operator()(const _Tp &__x) const (CompoundStmt 0xa752b08 </usr/include/c++/4.6/bits/stl_function.h:190:7, col:22>
  (ReturnStmt 0xa752af8 <col:9, col:17>
    (CXXOperatorCallExpr 0xa752ad8 <col:16, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa752a98 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (DeclRefExpr 0xa752a80 <col:17> 'const _Tp' lvalue ParmVar 0xa752960 '__x' 'const _Tp &'))))


    };
    template <typename _Tp> struct equal_to : public binary_function<_Tp, _Tp, bool> {
        struct equal_to;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa753178 </usr/include/c++/4.6/bits/stl_function.h:209:7, col:28>
  (ReturnStmt 0xa753168 <col:9, col:23>
    (CXXOperatorCallExpr 0xa753140 <col:16, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa7530f0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (DeclRefExpr 0xa7530c0 <col:16> 'const _Tp' lvalue ParmVar 0xa752f50 '__x' 'const _Tp &')
      (DeclRefExpr 0xa7530d8 <col:23> 'const _Tp' lvalue ParmVar 0xa752fa0 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct not_equal_to : public binary_function<_Tp, _Tp, bool> {
        struct not_equal_to;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa753768 </usr/include/c++/4.6/bits/stl_function.h:218:7, col:28>
  (ReturnStmt 0xa753758 <col:9, col:23>
    (CXXOperatorCallExpr 0xa753730 <col:16, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa7536e0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670)
      (DeclRefExpr 0xa7536b0 <col:16> 'const _Tp' lvalue ParmVar 0xa753560 '__x' 'const _Tp &')
      (DeclRefExpr 0xa7536c8 <col:23> 'const _Tp' lvalue ParmVar 0xa7535b0 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct greater : public binary_function<_Tp, _Tp, bool> {
        struct greater;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa753d48 </usr/include/c++/4.6/bits/stl_function.h:227:7, col:27>
  (ReturnStmt 0xa753d38 <col:9, col:22>
    (CXXOperatorCallExpr 0xa753d10 <col:16, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa753cd0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa753ca0 <col:16> 'const _Tp' lvalue ParmVar 0xa753b50 '__x' 'const _Tp &')
      (DeclRefExpr 0xa753cb8 <col:22> 'const _Tp' lvalue ParmVar 0xa753ba0 '__y' 'const _Tp &'))))


    };
    template <typename _Tp = std::basic_string<char>> struct less : public binary_function<std::basic_string<char>, std::basic_string<char>, bool> {
        struct less;
        bool operator()(const std::basic_string<char> &__x, const std::basic_string<char> &__y) const (CompoundStmt 0xa9e71e0 </usr/include/c++/4.6/bits/stl_function.h:236:7, col:27>
  (ReturnStmt 0xa9e71d0 <col:9, col:22>
    (CXXOperatorCallExpr 0xa9e71a8 <col:16, col:22> '_Bool'
      (ImplicitCastExpr 0xa9e7198 <col:20, <invalid sloc>> '_Bool (*)(const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &, const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9e7148 <col:20, <invalid sloc>> '_Bool (const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &, const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &)' lvalue Function 0xa9e7070 'operator<' '_Bool (const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &, const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &)'))
      (DeclRefExpr 0xa9e6ce8 <col:16> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ParmVar 0xa9b64d0 '__x' 'const class std::basic_string<char> &')
      (DeclRefExpr 0xa9e6d00 <col:22> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ParmVar 0xa9b6520 '__y' 'const class std::basic_string<char> &'))))


        inline less(const std::less<std::basic_string<char> > &) throw() : binary_function<std::basic_string<char>, std::basic_string<char>, bool>((ImplicitCastExpr 0xa9e6790 </usr/include/c++/4.6/bits/stl_function.h:232:12> 'const binary_function<class std::basic_string<char>, class std::basic_string<char>, _Bool>':'const struct std::binary_function<class std::basic_string<char>, class std::basic_string<char>, _Bool>' lvalue <UncheckedDerivedToBase (binary_function)>
  (DeclRefExpr 0xa9e6774 <col:12> 'const struct std::less<class std::basic_string<char> >' lvalue ParmVar 0xa9d9970 '' 'const struct std::less<class std::basic_string<char> > &'))
) (CompoundStmt 0xa9e6850 </usr/include/c++/4.6/bits/stl_function.h:232:12>)


        inline void ~less() throw();
        inline less() throw();
    }
template <typename _Tp> struct less : public binary_function<_Tp, _Tp, bool> {
        struct less;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa754328 </usr/include/c++/4.6/bits/stl_function.h:236:7, col:27>
  (ReturnStmt 0xa754318 <col:9, col:22>
    (CXXOperatorCallExpr 0xa7542f0 <col:16, col:22> '<dependent type>'
      (UnresolvedLookupExpr 0xa7542b0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (DeclRefExpr 0xa754280 <col:16> 'const _Tp' lvalue ParmVar 0xa754130 '__x' 'const _Tp &')
      (DeclRefExpr 0xa754298 <col:22> 'const _Tp' lvalue ParmVar 0xa754180 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct greater_equal : public binary_function<_Tp, _Tp, bool> {
        struct greater_equal;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa754908 </usr/include/c++/4.6/bits/stl_function.h:245:7, col:28>
  (ReturnStmt 0xa7548f8 <col:9, col:23>
    (CXXOperatorCallExpr 0xa7548d0 <col:16, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa754890 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (DeclRefExpr 0xa754860 <col:16> 'const _Tp' lvalue ParmVar 0xa754710 '__x' 'const _Tp &')
      (DeclRefExpr 0xa754878 <col:23> 'const _Tp' lvalue ParmVar 0xa754760 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct less_equal : public binary_function<_Tp, _Tp, bool> {
        struct less_equal;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa7592a8 </usr/include/c++/4.6/bits/stl_function.h:254:7, col:28>
  (ReturnStmt 0xa759298 <col:9, col:23>
    (CXXOperatorCallExpr 0xa759270 <col:16, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa759230 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0)
      (DeclRefExpr 0xa759200 <col:16> 'const _Tp' lvalue ParmVar 0xa7590b0 '__x' 'const _Tp &')
      (DeclRefExpr 0xa759218 <col:23> 'const _Tp' lvalue ParmVar 0xa759100 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct logical_and : public binary_function<_Tp, _Tp, bool> {
        struct logical_and;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa759838 </usr/include/c++/4.6/bits/stl_function.h:273:7, col:28>
  (ReturnStmt 0xa759828 <col:9, col:23>
    (BinaryOperator 0xa759810 <col:16, col:23> '<dependent type>' '&&'
      (DeclRefExpr 0xa7597e0 <col:16> 'const _Tp' lvalue ParmVar 0xa759690 '__x' 'const _Tp &')
      (DeclRefExpr 0xa7597f8 <col:23> 'const _Tp' lvalue ParmVar 0xa7596e0 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct logical_or : public binary_function<_Tp, _Tp, bool> {
        struct logical_or;
        bool operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa759dc8 </usr/include/c++/4.6/bits/stl_function.h:282:7, col:28>
  (ReturnStmt 0xa759db8 <col:9, col:23>
    (BinaryOperator 0xa759da0 <col:16, col:23> '<dependent type>' '||'
      (DeclRefExpr 0xa759d70 <col:16> 'const _Tp' lvalue ParmVar 0xa759c20 '__x' 'const _Tp &')
      (DeclRefExpr 0xa759d88 <col:23> 'const _Tp' lvalue ParmVar 0xa759c70 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct logical_not : public unary_function<_Tp, bool> {
        struct logical_not;
        bool operator()(const _Tp &__x) const (CompoundStmt 0xa75a320 </usr/include/c++/4.6/bits/stl_function.h:291:7, col:22>
  (ReturnStmt 0xa75a310 <col:9, col:17>
    (UnaryOperator 0xa75a2f8 <col:16, col:17> '<dependent type>' prefix '!'
      (DeclRefExpr 0xa75a2e0 <col:17> 'const _Tp' lvalue ParmVar 0xa75a1c0 '__x' 'const _Tp &'))))


    };
    template <typename _Tp> struct bit_and : public binary_function<_Tp, _Tp, _Tp> {
        struct bit_and;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa75a8b8 </usr/include/c++/4.6/bits/stl_function.h:302:7, col:27>
  (ReturnStmt 0xa75a8a8 <col:9, col:22>
    (BinaryOperator 0xa75a890 <col:16, col:22> '<dependent type>' '&'
      (DeclRefExpr 0xa75a860 <col:16> 'const _Tp' lvalue ParmVar 0xa75a710 '__x' 'const _Tp &')
      (DeclRefExpr 0xa75a878 <col:22> 'const _Tp' lvalue ParmVar 0xa75a760 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct bit_or : public binary_function<_Tp, _Tp, _Tp> {
        struct bit_or;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa75ae48 </usr/include/c++/4.6/bits/stl_function.h:310:7, col:27>
  (ReturnStmt 0xa75ae38 <col:9, col:22>
    (BinaryOperator 0xa75ae20 <col:16, col:22> '<dependent type>' '|'
      (DeclRefExpr 0xa75adf0 <col:16> 'const _Tp' lvalue ParmVar 0xa75aca0 '__x' 'const _Tp &')
      (DeclRefExpr 0xa75ae08 <col:22> 'const _Tp' lvalue ParmVar 0xa75acf0 '__y' 'const _Tp &'))))


    };
    template <typename _Tp> struct bit_xor : public binary_function<_Tp, _Tp, _Tp> {
        struct bit_xor;
        _Tp operator()(const _Tp &__x, const _Tp &__y) const (CompoundStmt 0xa75b3d8 </usr/include/c++/4.6/bits/stl_function.h:318:7, col:27>
  (ReturnStmt 0xa75b3c8 <col:9, col:22>
    (BinaryOperator 0xa75b3b0 <col:16, col:22> '<dependent type>' '^'
      (DeclRefExpr 0xa75b380 <col:16> 'const _Tp' lvalue ParmVar 0xa75b230 '__x' 'const _Tp &')
      (DeclRefExpr 0xa75b398 <col:22> 'const _Tp' lvalue ParmVar 0xa75b280 '__y' 'const _Tp &'))))


    };
    template <typename _Predicate> class unary_negate : public unary_function<typename _Predicate::argument_type, bool> {
        class unary_negate;
    protected:
    protected:
        _Predicate _M_pred;
    public:
    public:
        unary_negate<_Predicate>(const _Predicate &__x) : _M_pred((DeclRefExpr 0xa75bb94 </usr/include/c++/4.6/bits/stl_function.h:360:53> 'const _Predicate' lvalue ParmVar 0xa75b910 '__x' 'const _Predicate &')
) (CompoundStmt 0xa75bbf0 </usr/include/c++/4.6/bits/stl_function.h:360:58, col:60>)


        bool operator()(const typename _Predicate::argument_type &__x) const (CompoundStmt 0xa75bcc8 </usr/include/c++/4.6/bits/stl_function.h:364:7, col:31>
  (ReturnStmt 0xa75bcb8 <col:9, col:28>
    (UnaryOperator 0xa75bca0 <col:16, col:28> '<dependent type>' prefix '!'
      (CallExpr 0xa75bc80 <col:17, col:28> '<dependent type>'
        (MemberExpr 0xa75bc44 <col:17> 'const _Predicate' lvalue ->_M_pred 0xa75b870
          (CXXThisExpr 0xa75bc18 <col:17> 'const unary_negate<_Predicate> *' this))
        (DeclRefExpr 0xa75bc64 <col:25> 'const typename _Predicate::argument_type' lvalue ParmVar 0xa75ba90 '__x' 'const typename _Predicate::argument_type &')))))


    };
    template <typename _Predicate> inline unary_negate<_Predicate> not1(const _Predicate &__pred) (CompoundStmt 0xa75c028 </usr/include/c++/4.6/bits/stl_function.h:371:5, col:48>
  (ReturnStmt 0xa75c018 <col:7, col:45>
    (CXXUnresolvedConstructExpr 0xa75bff8 <col:14, col:45> 'unary_negate<_Predicate>'
      (DeclRefExpr 0xa75bfe0 <col:39> 'const _Predicate' lvalue ParmVar 0xa75bdf0 '__pred' 'const _Predicate &'))))

;
    template <typename _Predicate> class binary_negate : public binary_function<typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool> {
        class binary_negate;
    protected:
    protected:
        _Predicate _M_pred;
    public:
    public:
        binary_negate<_Predicate>(const _Predicate &__x) : _M_pred((DeclRefExpr 0xa75c958 </usr/include/c++/4.6/bits/stl_function.h:384:54> 'const _Predicate' lvalue ParmVar 0xa75c620 '__x' 'const _Predicate &')
) (CompoundStmt 0xa75c9b0 </usr/include/c++/4.6/bits/stl_function.h:384:59, col:61>)


        bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &__y) const (CompoundStmt 0xa75caa8 </usr/include/c++/4.6/bits/stl_function.h:389:7, col:36>
  (ReturnStmt 0xa75ca98 <col:9, col:33>
    (UnaryOperator 0xa75ca80 <col:16, col:33> '<dependent type>' prefix '!'
      (CallExpr 0xa75ca58 <col:17, col:33> '<dependent type>'
        (MemberExpr 0xa75ca04 <col:17> 'const _Predicate' lvalue ->_M_pred 0xa75c580
          (CXXThisExpr 0xa75c9d8 <col:17> 'const binary_negate<_Predicate> *' this))
        (DeclRefExpr 0xa75ca24 <col:25> 'const typename _Predicate::first_argument_type' lvalue ParmVar 0xa75c7a0 '__x' 'const typename _Predicate::first_argument_type &')
        (DeclRefExpr 0xa75ca3c <col:30> 'const typename _Predicate::second_argument_type' lvalue ParmVar 0xa75c850 '__y' 'const typename _Predicate::second_argument_type &')))))


    };
    template <typename _Predicate> inline binary_negate<_Predicate> not2(const _Predicate &__pred) (CompoundStmt 0xa75ce08 </usr/include/c++/4.6/bits/stl_function.h:396:5, col:49>
  (ReturnStmt 0xa75cdf8 <col:7, col:46>
    (CXXUnresolvedConstructExpr 0xa75cdd8 <col:14, col:46> 'binary_negate<_Predicate>'
      (DeclRefExpr 0xa75cdc0 <col:40> 'const _Predicate' lvalue ParmVar 0xa75cbd0 '__pred' 'const _Predicate &'))))

;
    template <typename _Arg, typename _Result> class pointer_to_unary_function : public unary_function<_Arg, _Result> {
        class pointer_to_unary_function;
    protected:
    protected:
        _Result (*_M_ptr)(_Arg);
    public:
    public:
        pointer_to_unary_function<_Arg, _Result>() (CompoundStmt 0xa7615f8 </usr/include/c++/4.6/bits/stl_function.h:429:35, col:37>)


        pointer_to_unary_function<_Arg, _Result>(_Result (*__x)(_Arg)) : _M_ptr((DeclRefExpr 0xa761608 </usr/include/c++/4.6/bits/stl_function.h:433:16> '_Result (*)(_Arg)' lvalue ParmVar 0xa7613d0 '__x' '_Result (*)(_Arg)')
) (CompoundStmt 0xa761660 </usr/include/c++/4.6/bits/stl_function.h:433:21, col:23>)


        _Result operator()(_Arg __x) const (CompoundStmt 0xa761720 </usr/include/c++/4.6/bits/stl_function.h:437:7, col:29>
  (ReturnStmt 0xa761710 <col:9, col:26>
    (CallExpr 0xa7616f0 <col:16, col:26> '<dependent type>'
      (MemberExpr 0xa7616b4 <col:16> '_Result (*const)(_Arg)' lvalue ->_M_ptr 0xa761260
        (CXXThisExpr 0xa761688 <col:16> 'const pointer_to_unary_function<_Arg, _Result> *' this))
      (DeclRefExpr 0xa7616d4 <col:23> '_Arg' lvalue ParmVar 0xa7614f0 '__x' '_Arg'))))


    };
    template <typename _Arg, typename _Result> inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg)) (CompoundStmt 0xa761c30 </usr/include/c++/4.6/bits/stl_function.h:444:5, col:61>
  (ReturnStmt 0xa761c20 <col:7, col:58>
    (CXXUnresolvedConstructExpr 0xa761c00 <col:14, col:58> 'pointer_to_unary_function<_Arg, _Result>'
      (DeclRefExpr 0xa761be8 <col:55> '_Result (*)(_Arg)' lvalue ParmVar 0xa761990 '__x' '_Result (*)(_Arg)'))))

;
    template <typename _Arg1, typename _Arg2, typename _Result> class pointer_to_binary_function : public binary_function<_Arg1, _Arg2, _Result> {
        class pointer_to_binary_function;
    protected:
    protected:
        _Result (*_M_ptr)(_Arg1, _Arg2);
    public:
    public:
        pointer_to_binary_function<_Arg1, _Arg2, _Result>() (CompoundStmt 0xa762698 </usr/include/c++/4.6/bits/stl_function.h:455:36, col:38>)


        pointer_to_binary_function<_Arg1, _Arg2, _Result>(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr((DeclRefExpr 0xa7626a8 </usr/include/c++/4.6/bits/stl_function.h:459:16> '_Result (*)(_Arg1, _Arg2)' lvalue ParmVar 0xa762430 '__x' '_Result (*)(_Arg1, _Arg2)')
) (CompoundStmt 0xa762700 </usr/include/c++/4.6/bits/stl_function.h:459:21, col:23>)


        _Result operator()(_Arg1 __x, _Arg2 __y) const (CompoundStmt 0xa7627e0 </usr/include/c++/4.6/bits/stl_function.h:463:7, col:34>
  (ReturnStmt 0xa7627d0 <col:9, col:31>
    (CallExpr 0xa7627a8 <col:16, col:31> '<dependent type>'
      (MemberExpr 0xa762754 <col:16> '_Result (*const)(_Arg1, _Arg2)' lvalue ->_M_ptr 0xa762280
        (CXXThisExpr 0xa762728 <col:16> 'const pointer_to_binary_function<_Arg1, _Arg2, _Result> *' this))
      (DeclRefExpr 0xa762774 <col:23> '_Arg1' lvalue ParmVar 0xa762550 '__x' '_Arg1')
      (DeclRefExpr 0xa76278c <col:28> '_Arg2' lvalue ParmVar 0xa762590 '__y' '_Arg2'))))


    };
    template <typename _Arg1, typename _Arg2, typename _Result> inline pointer_to_binary_function<_Arg1, _Arg2, _Result> ptr_fun(_Result (*__x)(_Arg1, _Arg2)) (CompoundStmt 0xa762e38 </usr/include/c++/4.6/bits/stl_function.h:470:5, col:70>
  (ReturnStmt 0xa762e28 <col:7, col:67>
    (CXXUnresolvedConstructExpr 0xa762e08 <col:14, col:67> 'pointer_to_binary_function<_Arg1, _Arg2, _Result>'
      (DeclRefExpr 0xa762df0 <col:64> '_Result (*)(_Arg1, _Arg2)' lvalue ParmVar 0xa762b30 '__x' '_Result (*)(_Arg1, _Arg2)'))))

;
    template <typename _Tp> struct _Identity : public unary_function<_Tp, _Tp> {
        struct _Identity;
        _Tp &operator()(_Tp &__x) const (CompoundStmt 0xa763468 </usr/include/c++/4.6/bits/stl_function.h:478:7, col:21>
  (ReturnStmt 0xa763458 <col:9, col:16>
    (DeclRefExpr 0xa763440 <col:16> '_Tp' lvalue ParmVar 0xa7631e0 '__x' '_Tp &')))


        const _Tp &operator()(const _Tp &__x) const (CompoundStmt 0xa7634a8 </usr/include/c++/4.6/bits/stl_function.h:482:7, col:21>
  (ReturnStmt 0xa763498 <col:9, col:16>
    (DeclRefExpr 0xa76347c <col:16> 'const _Tp' lvalue ParmVar 0xa763320 '__x' 'const _Tp &')))


    };
    template <typename _Pair = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct _Select1st : public unary_function<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > >::first_type> {
        struct _Select1st;
        typename pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > >::first_type &operator()(std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__x) const;
        const typename pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > >::first_type &operator()(const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &__x) const (CompoundStmt 0xa9e62e8 </usr/include/c++/4.6/bits/stl_function.h:495:7, col:27>
  (ReturnStmt 0xa9e62d8 <col:9, col:20>
    (MemberExpr 0xa9e62b4 <col:16, col:20> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue .first 0xaa29e30
      (DeclRefExpr 0xa9e629c <col:16> 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9e56f0 '__x' 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &'))))


        inline _Select1st() throw();
        inline _Select1st(const std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw();
    }
template <typename _Pair> struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {
        struct _Select1st;
        typename _Pair::first_type &operator()(_Pair &__x) const (CompoundStmt 0xa763cd0 </usr/include/c++/4.6/bits/stl_function.h:491:7, col:27>
  (ReturnStmt 0xa763cc0 <col:9, col:20>
    (CXXDependentScopeMemberExpr 0xa763c88 <col:16, col:20> '<dependent type>' lvalue
      (DeclRefExpr 0xa763c70 <col:16> '_Pair' lvalue ParmVar 0xa763950 '__x' '_Pair &'))))


        const typename _Pair::first_type &operator()(const _Pair &__x) const (CompoundStmt 0xa763d48 </usr/include/c++/4.6/bits/stl_function.h:495:7, col:27>
  (ReturnStmt 0xa763d38 <col:9, col:20>
    (CXXDependentScopeMemberExpr 0xa763d00 <col:16, col:20> '<dependent type>' lvalue
      (DeclRefExpr 0xa763ce4 <col:16> 'const _Pair' lvalue ParmVar 0xa763b00 '__x' 'const _Pair &'))))


    };
    template <typename _Pair> struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type> {
        struct _Select2nd;
        typename _Pair::second_type &operator()(_Pair &__x) const (CompoundStmt 0xa764570 </usr/include/c++/4.6/bits/stl_function.h:516:7, col:28>
  (ReturnStmt 0xa764560 <col:9, col:20>
    (CXXDependentScopeMemberExpr 0xa764528 <col:16, col:20> '<dependent type>' lvalue
      (DeclRefExpr 0xa764510 <col:16> '_Pair' lvalue ParmVar 0xa7641f0 '__x' '_Pair &'))))


        const typename _Pair::second_type &operator()(const _Pair &__x) const (CompoundStmt 0xa7645e8 </usr/include/c++/4.6/bits/stl_function.h:520:7, col:28>
  (ReturnStmt 0xa7645d8 <col:9, col:20>
    (CXXDependentScopeMemberExpr 0xa7645a0 <col:16, col:20> '<dependent type>' lvalue
      (DeclRefExpr 0xa764584 <col:16> 'const _Pair' lvalue ParmVar 0xa7643a0 '__x' 'const _Pair &'))))


    };
    template <typename _Ret, typename _Tp> class mem_fun_t : public unary_function<_Tp *, _Ret> {
        class mem_fun_t;
    public:
    public:
        mem_fun_t<_Ret, _Tp>(_Ret (_Tp::*__pf)()) : _M_f((DeclRefExpr 0xa766a30 </usr/include/c++/4.6/bits/stl_function.h:547:14> '_Ret (_Tp::*)(void)' lvalue ParmVar 0xa764b90 '__pf' '_Ret (_Tp::*)(void)')
) (CompoundStmt 0xa766a90 </usr/include/c++/4.6/bits/stl_function.h:547:20, col:22>)


        _Ret operator()(_Tp *__p) const (CompoundStmt 0xa766b88 </usr/include/c++/4.6/bits/stl_function.h:551:7, col:32>
  (ReturnStmt 0xa766b78 <col:9, col:29>
    (CallExpr 0xa766b58 <col:16, col:29> '<dependent type>'
      (ParenExpr 0xa766b40 <col:16, col:27> '<dependent type>'
        (BinaryOperator 0xa766b28 <col:17, col:23> '<dependent type>' '->*'
          (DeclRefExpr 0xa766aa0 <col:17> '_Tp *' lvalue ParmVar 0xa764cc0 '__p' '_Tp *')
          (MemberExpr 0xa766b04 <col:23> '_Ret (_Tp::*const)(void)' lvalue ->_M_f 0xa766a00
            (CXXThisExpr 0xa766ad8 <col:23> 'const mem_fun_t<_Ret, _Tp> *' this)))))))


    private:
    private:
        _Ret (_Tp::*_M_f)();
    };
    template <typename _Ret, typename _Tp> class const_mem_fun_t : public unary_function<const _Tp *, _Ret> {
        class const_mem_fun_t;
    public:
    public:
        const_mem_fun_t<_Ret, _Tp>(_Ret (_Tp::*__pf)() const) : _M_f((DeclRefExpr 0xa767400 </usr/include/c++/4.6/bits/stl_function.h:565:14> '_Ret (_Tp::*)(void) const' lvalue ParmVar 0xa767110 '__pf' '_Ret (_Tp::*)(void) const')
) (CompoundStmt 0xa767460 </usr/include/c++/4.6/bits/stl_function.h:565:20, col:22>)


        _Ret operator()(const _Tp *__p) const (CompoundStmt 0xa767558 </usr/include/c++/4.6/bits/stl_function.h:569:7, col:32>
  (ReturnStmt 0xa767548 <col:9, col:29>
    (CallExpr 0xa767528 <col:16, col:29> '<dependent type>'
      (ParenExpr 0xa767510 <col:16, col:27> '<dependent type>'
        (BinaryOperator 0xa7674f8 <col:17, col:23> '<dependent type>' '->*'
          (DeclRefExpr 0xa767470 <col:17> 'const _Tp *' lvalue ParmVar 0xa767240 '__p' 'const _Tp *')
          (MemberExpr 0xa7674d4 <col:23> '_Ret (_Tp::*const)(void) const' lvalue ->_M_f 0xa7673d0
            (CXXThisExpr 0xa7674a8 <col:23> 'const const_mem_fun_t<_Ret, _Tp> *' this)))))))


    private:
    private:
        _Ret (_Tp::*_M_f)() const;
    };
    template <typename _Ret, typename _Tp> class mem_fun_ref_t : public unary_function<_Tp, _Ret> {
        class mem_fun_ref_t;
    public:
    public:
        mem_fun_ref_t<_Ret, _Tp>(_Ret (_Tp::*__pf)()) : _M_f((DeclRefExpr 0xa767d90 </usr/include/c++/4.6/bits/stl_function.h:583:14> '_Ret (_Tp::*)(void)' lvalue ParmVar 0xa767aa0 '__pf' '_Ret (_Tp::*)(void)')
) (CompoundStmt 0xa767df0 </usr/include/c++/4.6/bits/stl_function.h:583:20, col:22>)


        _Ret operator()(_Tp &__r) const (CompoundStmt 0xa767ee8 </usr/include/c++/4.6/bits/stl_function.h:587:7, col:31>
  (ReturnStmt 0xa767ed8 <col:9, col:28>
    (CallExpr 0xa767eb8 <col:16, col:28> '<dependent type>'
      (ParenExpr 0xa767ea0 <col:16, col:26> '<dependent type>'
        (BinaryOperator 0xa767e88 <col:17, col:22> '<dependent type>' '.*'
          (DeclRefExpr 0xa767e00 <col:17> '_Tp' lvalue ParmVar 0xa767bd0 '__r' '_Tp &')
          (MemberExpr 0xa767e64 <col:22> '_Ret (_Tp::*const)(void)' lvalue ->_M_f 0xa767d60
            (CXXThisExpr 0xa767e38 <col:22> 'const mem_fun_ref_t<_Ret, _Tp> *' this)))))))


    private:
    private:
        _Ret (_Tp::*_M_f)();
    };
    template <typename _Ret, typename _Tp> class const_mem_fun_ref_t : public unary_function<_Tp, _Ret> {
        class const_mem_fun_ref_t;
    public:
    public:
        const_mem_fun_ref_t<_Ret, _Tp>(_Ret (_Tp::*__pf)() const) : _M_f((DeclRefExpr 0xa7686d0 </usr/include/c++/4.6/bits/stl_function.h:601:14> '_Ret (_Tp::*)(void) const' lvalue ParmVar 0xa7683e0 '__pf' '_Ret (_Tp::*)(void) const')
) (CompoundStmt 0xa768730 </usr/include/c++/4.6/bits/stl_function.h:601:20, col:22>)


        _Ret operator()(const _Tp &__r) const (CompoundStmt 0xa768828 </usr/include/c++/4.6/bits/stl_function.h:605:7, col:31>
  (ReturnStmt 0xa768818 <col:9, col:28>
    (CallExpr 0xa7687f8 <col:16, col:28> '<dependent type>'
      (ParenExpr 0xa7687e0 <col:16, col:26> '<dependent type>'
        (BinaryOperator 0xa7687c8 <col:17, col:22> '<dependent type>' '.*'
          (DeclRefExpr 0xa768740 <col:17> 'const _Tp' lvalue ParmVar 0xa768510 '__r' 'const _Tp &')
          (MemberExpr 0xa7687a4 <col:22> '_Ret (_Tp::*const)(void) const' lvalue ->_M_f 0xa7686a0
            (CXXThisExpr 0xa768778 <col:22> 'const const_mem_fun_ref_t<_Ret, _Tp> *' this)))))))


    private:
    private:
        _Ret (_Tp::*_M_f)() const;
    };
    template <typename _Ret, typename _Tp, typename _Arg> class mem_fun1_t : public binary_function<_Tp *, _Arg, _Ret> {
        class mem_fun1_t;
    public:
    public:
        mem_fun1_t<_Ret, _Tp, _Arg>(_Ret (_Tp::*__pf)(_Arg)) : _M_f((DeclRefExpr 0xa769250 </usr/include/c++/4.6/bits/stl_function.h:619:14> '_Ret (_Tp::*)(_Arg)' lvalue ParmVar 0xa768ee0 '__pf' '_Ret (_Tp::*)(_Arg)')
) (CompoundStmt 0xa7692b0 </usr/include/c++/4.6/bits/stl_function.h:619:20, col:22>)


        _Ret operator()(_Tp *__p, _Arg __x) const (CompoundStmt 0xa7693c0 </usr/include/c++/4.6/bits/stl_function.h:623:7, col:35>
  (ReturnStmt 0xa7693b0 <col:9, col:32>
    (CallExpr 0xa769390 <col:16, col:32> '<dependent type>'
      (ParenExpr 0xa769360 <col:16, col:27> '<dependent type>'
        (BinaryOperator 0xa769348 <col:17, col:23> '<dependent type>' '->*'
          (DeclRefExpr 0xa7692c0 <col:17> '_Tp *' lvalue ParmVar 0xa769010 '__p' '_Tp *')
          (MemberExpr 0xa769324 <col:23> '_Ret (_Tp::*const)(_Arg)' lvalue ->_M_f 0xa769220
            (CXXThisExpr 0xa7692f8 <col:23> 'const mem_fun1_t<_Ret, _Tp, _Arg> *' this))))
      (DeclRefExpr 0xa769374 <col:29> '_Arg' lvalue ParmVar 0xa769050 '__x' '_Arg'))))


    private:
    private:
        _Ret (_Tp::*_M_f)(_Arg);
    };
    template <typename _Ret, typename _Tp, typename _Arg> class const_mem_fun1_t : public binary_function<const _Tp *, _Arg, _Ret> {
        class const_mem_fun1_t;
    public:
    public:
        const_mem_fun1_t<_Ret, _Tp, _Arg>(_Ret (_Tp::*__pf)(_Arg) const) : _M_f((DeclRefExpr 0xa769df0 </usr/include/c++/4.6/bits/stl_function.h:637:14> '_Ret (_Tp::*)(_Arg) const' lvalue ParmVar 0xa769a80 '__pf' '_Ret (_Tp::*)(_Arg) const')
) (CompoundStmt 0xa769e50 </usr/include/c++/4.6/bits/stl_function.h:637:20, col:22>)


        _Ret operator()(const _Tp *__p, _Arg __x) const (CompoundStmt 0xa769f60 </usr/include/c++/4.6/bits/stl_function.h:641:7, col:35>
  (ReturnStmt 0xa769f50 <col:9, col:32>
    (CallExpr 0xa769f30 <col:16, col:32> '<dependent type>'
      (ParenExpr 0xa769f00 <col:16, col:27> '<dependent type>'
        (BinaryOperator 0xa769ee8 <col:17, col:23> '<dependent type>' '->*'
          (DeclRefExpr 0xa769e60 <col:17> 'const _Tp *' lvalue ParmVar 0xa769bb0 '__p' 'const _Tp *')
          (MemberExpr 0xa769ec4 <col:23> '_Ret (_Tp::*const)(_Arg) const' lvalue ->_M_f 0xa769dc0
            (CXXThisExpr 0xa769e98 <col:23> 'const const_mem_fun1_t<_Ret, _Tp, _Arg> *' this))))
      (DeclRefExpr 0xa769f14 <col:29> '_Arg' lvalue ParmVar 0xa769bf0 '__x' '_Arg'))))


    private:
    private:
        _Ret (_Tp::*_M_f)(_Arg) const;
    };
    template <typename _Ret, typename _Tp, typename _Arg> class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret> {
        class mem_fun1_ref_t;
    public:
    public:
        mem_fun1_ref_t<_Ret, _Tp, _Arg>(_Ret (_Tp::*__pf)(_Arg)) : _M_f((DeclRefExpr 0xa76cbf0 </usr/include/c++/4.6/bits/stl_function.h:655:14> '_Ret (_Tp::*)(_Arg)' lvalue ParmVar 0xa76a5c0 '__pf' '_Ret (_Tp::*)(_Arg)')
) (CompoundStmt 0xa76cc50 </usr/include/c++/4.6/bits/stl_function.h:655:20, col:22>)


        _Ret operator()(_Tp &__r, _Arg __x) const (CompoundStmt 0xa76cd60 </usr/include/c++/4.6/bits/stl_function.h:659:7, col:34>
  (ReturnStmt 0xa76cd50 <col:9, col:31>
    (CallExpr 0xa76cd30 <col:16, col:31> '<dependent type>'
      (ParenExpr 0xa76cd00 <col:16, col:26> '<dependent type>'
        (BinaryOperator 0xa76cce8 <col:17, col:22> '<dependent type>' '.*'
          (DeclRefExpr 0xa76cc60 <col:17> '_Tp' lvalue ParmVar 0xa76a6f0 '__r' '_Tp &')
          (MemberExpr 0xa76ccc4 <col:22> '_Ret (_Tp::*const)(_Arg)' lvalue ->_M_f 0xa76cbc0
            (CXXThisExpr 0xa76cc98 <col:22> 'const mem_fun1_ref_t<_Ret, _Tp, _Arg> *' this))))
      (DeclRefExpr 0xa76cd14 <col:28> '_Arg' lvalue ParmVar 0xa76a730 '__x' '_Arg'))))


    private:
    private:
        _Ret (_Tp::*_M_f)(_Arg);
    };
    template <typename _Ret, typename _Tp, typename _Arg> class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret> {
        class const_mem_fun1_ref_t;
    public:
    public:
        const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(_Ret (_Tp::*__pf)(_Arg) const) : _M_f((DeclRefExpr 0xa76d6d0 </usr/include/c++/4.6/bits/stl_function.h:673:14> '_Ret (_Tp::*)(_Arg) const' lvalue ParmVar 0xa76d360 '__pf' '_Ret (_Tp::*)(_Arg) const')
) (CompoundStmt 0xa76d730 </usr/include/c++/4.6/bits/stl_function.h:673:20, col:22>)


        _Ret operator()(const _Tp &__r, _Arg __x) const (CompoundStmt 0xa76d840 </usr/include/c++/4.6/bits/stl_function.h:677:7, col:34>
  (ReturnStmt 0xa76d830 <col:9, col:31>
    (CallExpr 0xa76d810 <col:16, col:31> '<dependent type>'
      (ParenExpr 0xa76d7e0 <col:16, col:26> '<dependent type>'
        (BinaryOperator 0xa76d7c8 <col:17, col:22> '<dependent type>' '.*'
          (DeclRefExpr 0xa76d740 <col:17> 'const _Tp' lvalue ParmVar 0xa76d490 '__r' 'const _Tp &')
          (MemberExpr 0xa76d7a4 <col:22> '_Ret (_Tp::*const)(_Arg) const' lvalue ->_M_f 0xa76d6a0
            (CXXThisExpr 0xa76d778 <col:22> 'const const_mem_fun1_ref_t<_Ret, _Tp, _Arg> *' this))))
      (DeclRefExpr 0xa76d7f4 <col:28> '_Arg' lvalue ParmVar 0xa76d4d0 '__x' '_Arg'))))


    private:
    private:
        _Ret (_Tp::*_M_f)(_Arg) const;
    };
    template <typename _Ret, typename _Tp> inline mem_fun_t<_Ret, _Tp> mem_fun(_Ret (_Tp::*__f)()) (CompoundStmt 0xa76dd40 </usr/include/c++/4.6/bits/stl_function.h:688:5, col:41>
  (ReturnStmt 0xa76dd30 <col:7, col:38>
    (CXXUnresolvedConstructExpr 0xa76dd10 <col:14, col:38> 'mem_fun_t<_Ret, _Tp>'
      (DeclRefExpr 0xa76dcf8 <col:35> '_Ret (_Tp::*)(void)' lvalue ParmVar 0xa76daa0 '__f' '_Ret (_Tp::*)(void)'))))

;
    template <typename _Ret, typename _Tp> inline const_mem_fun_t<_Ret, _Tp> mem_fun(_Ret (_Tp::*__f)() const) (CompoundStmt 0xa76e240 </usr/include/c++/4.6/bits/stl_function.h:693:5, col:47>
  (ReturnStmt 0xa76e230 <col:7, col:44>
    (CXXUnresolvedConstructExpr 0xa76e210 <col:14, col:44> 'const_mem_fun_t<_Ret, _Tp>'
      (DeclRefExpr 0xa76e1f8 <col:41> '_Ret (_Tp::*)(void) const' lvalue ParmVar 0xa76dfa0 '__f' '_Ret (_Tp::*)(void) const'))))

;
    template <typename _Ret, typename _Tp> inline mem_fun_ref_t<_Ret, _Tp> mem_fun_ref(_Ret (_Tp::*__f)()) (CompoundStmt 0xa76e740 </usr/include/c++/4.6/bits/stl_function.h:698:5, col:45>
  (ReturnStmt 0xa76e730 <col:7, col:42>
    (CXXUnresolvedConstructExpr 0xa76e710 <col:14, col:42> 'mem_fun_ref_t<_Ret, _Tp>'
      (DeclRefExpr 0xa76e6f8 <col:39> '_Ret (_Tp::*)(void)' lvalue ParmVar 0xa76e4a0 '__f' '_Ret (_Tp::*)(void)'))))

;
    template <typename _Ret, typename _Tp> inline const_mem_fun_ref_t<_Ret, _Tp> mem_fun_ref(_Ret (_Tp::*__f)() const) (CompoundStmt 0xa76ec40 </usr/include/c++/4.6/bits/stl_function.h:703:5, col:51>
  (ReturnStmt 0xa76ec30 <col:7, col:48>
    (CXXUnresolvedConstructExpr 0xa76ec10 <col:14, col:48> 'const_mem_fun_ref_t<_Ret, _Tp>'
      (DeclRefExpr 0xa76ebf8 <col:45> '_Ret (_Tp::*)(void) const' lvalue ParmVar 0xa76e9a0 '__f' '_Ret (_Tp::*)(void) const'))))

;
    template <typename _Ret, typename _Tp, typename _Arg> inline mem_fun1_t<_Ret, _Tp, _Arg> mem_fun(_Ret (_Tp::*__f)(_Arg)) (CompoundStmt 0xa76f288 </usr/include/c++/4.6/bits/stl_function.h:708:5, col:48>
  (ReturnStmt 0xa76f278 <col:7, col:45>
    (CXXUnresolvedConstructExpr 0xa76f258 <col:14, col:45> 'mem_fun1_t<_Ret, _Tp, _Arg>'
      (DeclRefExpr 0xa76f240 <col:42> '_Ret (_Tp::*)(_Arg)' lvalue ParmVar 0xa76ef80 '__f' '_Ret (_Tp::*)(_Arg)'))))

;
    template <typename _Ret, typename _Tp, typename _Arg> inline const_mem_fun1_t<_Ret, _Tp, _Arg> mem_fun(_Ret (_Tp::*__f)(_Arg) const) (CompoundStmt 0xa76f8c8 </usr/include/c++/4.6/bits/stl_function.h:713:5, col:54>
  (ReturnStmt 0xa76f8b8 <col:7, col:51>
    (CXXUnresolvedConstructExpr 0xa76f898 <col:14, col:51> 'const_mem_fun1_t<_Ret, _Tp, _Arg>'
      (DeclRefExpr 0xa76f880 <col:48> '_Ret (_Tp::*)(_Arg) const' lvalue ParmVar 0xa76f5c0 '__f' '_Ret (_Tp::*)(_Arg) const'))))

;
    template <typename _Ret, typename _Tp, typename _Arg> inline mem_fun1_ref_t<_Ret, _Tp, _Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) (CompoundStmt 0xa76ff08 </usr/include/c++/4.6/bits/stl_function.h:718:5, col:52>
  (ReturnStmt 0xa76fef8 <col:7, col:49>
    (CXXUnresolvedConstructExpr 0xa76fed8 <col:14, col:49> 'mem_fun1_ref_t<_Ret, _Tp, _Arg>'
      (DeclRefExpr 0xa76fec0 <col:46> '_Ret (_Tp::*)(_Arg)' lvalue ParmVar 0xa76fc00 '__f' '_Ret (_Tp::*)(_Arg)'))))

;
    template <typename _Ret, typename _Tp, typename _Arg> inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) (CompoundStmt 0xa770548 </usr/include/c++/4.6/bits/stl_function.h:723:5, col:58>
  (ReturnStmt 0xa770538 <col:7, col:55>
    (CXXUnresolvedConstructExpr 0xa770518 <col:14, col:55> 'const_mem_fun1_ref_t<_Ret, _Tp, _Arg>'
      (DeclRefExpr 0xa770500 <col:52> '_Ret (_Tp::*)(_Arg) const' lvalue ParmVar 0xa770240 '__f' '_Ret (_Tp::*)(_Arg) const'))))

;
}
namespace std {
    template <typename _Operation> class binder1st : public unary_function<typename _Operation::second_argument_type, typename _Operation::result_type> {
        class binder1st;
    protected:
    protected:
        _Operation op;
        typename _Operation::first_argument_type value;
    public:
    public:
        binder1st<_Operation>(const _Operation &__x, const typename _Operation::first_argument_type &__y) : op((DeclRefExpr 0xa775434 </usr/include/c++/4.6/backward/binders.h:111:12> 'const _Operation' lvalue ParmVar 0xa774f30 '__x' 'const _Operation &')
), value((DeclRefExpr 0xa775488 </usr/include/c++/4.6/backward/binders.h:111:24> 'const typename _Operation::first_argument_type' lvalue ParmVar 0xa774fc0 '__y' 'const typename _Operation::first_argument_type &')
) (CompoundStmt 0xa7754e0 </usr/include/c++/4.6/backward/binders.h:111:29, col:31>)


        typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const (CompoundStmt 0xa7755d8 </usr/include/c++/4.6/backward/binders.h:115:7, col:32>
  (ReturnStmt 0xa7755c8 <col:9, col:29>
    (CallExpr 0xa7755a0 <col:16, col:29> '<dependent type>'
      (MemberExpr 0xa775534 <col:16> 'const _Operation' lvalue ->op 0xa770af0
        (CXXThisExpr 0xa775508 <col:16> 'const binder1st<_Operation> *' this))
      (MemberExpr 0xa775568 <col:19> 'const typename _Operation::first_argument_type' lvalue ->value 0xa770b80
        (CXXThisExpr 0xa775558 <col:19> 'const binder1st<_Operation> *' this))
      (DeclRefExpr 0xa775588 <col:26> 'const typename _Operation::second_argument_type' lvalue ParmVar 0xa775160 '__x' 'const typename _Operation::second_argument_type &'))))


        typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const (CompoundStmt 0xa7756a0 </usr/include/c++/4.6/backward/binders.h:121:7, col:32>
  (ReturnStmt 0xa775690 <col:9, col:29>
    (CallExpr 0xa775668 <col:16, col:29> '<dependent type>'
      (MemberExpr 0xa775600 <col:16> 'const _Operation' lvalue ->op 0xa770af0
        (CXXThisExpr 0xa7755f0 <col:16> 'const binder1st<_Operation> *' this))
      (MemberExpr 0xa775630 <col:19> 'const typename _Operation::first_argument_type' lvalue ->value 0xa770b80
        (CXXThisExpr 0xa775620 <col:19> 'const binder1st<_Operation> *' this))
      (DeclRefExpr 0xa775650 <col:26> 'typename _Operation::second_argument_type' lvalue ParmVar 0xa775320 '__x' 'typename _Operation::second_argument_type &'))))


    };
    template <typename _Operation, typename _Tp> inline binder1st<_Operation> bind1st(const _Operation &__fn, const _Tp &__x) (CompoundStmt 0xa775bf0 </usr/include/c++/4.6/backward/binders.h:128:5, line:131:5>
  (DeclStmt 0xa775a90 <line:129:7, col:66>
    0xa775a60 "typedef typename _Operation::first_argument_type _Arg1_type")
  (ReturnStmt 0xa775be0 <line:130:7, col:57>
    (CXXUnresolvedConstructExpr 0xa775bc0 <col:14, col:57> 'binder1st<_Operation>'
      (DeclRefExpr 0xa775b50 <col:36> 'const _Operation' lvalue ParmVar 0xa775830 '__fn' 'const _Operation &')
      (CXXUnresolvedConstructExpr 0xa775ba0 <col:42, col:56> '_Arg1_type':'typename _Operation::first_argument_type'
        (DeclRefExpr 0xa775b88 <col:53> 'const _Tp' lvalue ParmVar 0xa7758a0 '__x' 'const _Tp &')))))

;
    template <typename _Operation> class binder2nd : public unary_function<typename _Operation::first_argument_type, typename _Operation::result_type> {
        class binder2nd;
    protected:
    protected:
        _Operation op;
        typename _Operation::second_argument_type value;
    public:
    public:
        binder2nd<_Operation>(const _Operation &__x, const typename _Operation::second_argument_type &__y) : op((DeclRefExpr 0xa776704 </usr/include/c++/4.6/backward/binders.h:146:12> 'const _Operation' lvalue ParmVar 0xa776200 '__x' 'const _Operation &')
), value((DeclRefExpr 0xa776758 </usr/include/c++/4.6/backward/binders.h:146:24> 'const typename _Operation::second_argument_type' lvalue ParmVar 0xa776290 '__y' 'const typename _Operation::second_argument_type &')
) (CompoundStmt 0xa7767b0 </usr/include/c++/4.6/backward/binders.h:146:29, col:31>)


        typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const (CompoundStmt 0xa7768a8 </usr/include/c++/4.6/backward/binders.h:150:7, col:32>
  (ReturnStmt 0xa776898 <col:9, col:29>
    (CallExpr 0xa776870 <col:16, col:29> '<dependent type>'
      (MemberExpr 0xa776804 <col:16> 'const _Operation' lvalue ->op 0xa7760d0
        (CXXThisExpr 0xa7767d8 <col:16> 'const binder2nd<_Operation> *' this))
      (DeclRefExpr 0xa776824 <col:19> 'const typename _Operation::first_argument_type' lvalue ParmVar 0xa776430 '__x' 'const typename _Operation::first_argument_type &')
      (MemberExpr 0xa776850 <col:24> 'const typename _Operation::second_argument_type' lvalue ->value 0xa776160
        (CXXThisExpr 0xa776840 <col:24> 'const binder2nd<_Operation> *' this)))))


        typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const (CompoundStmt 0xa776970 </usr/include/c++/4.6/backward/binders.h:156:7, col:32>
  (ReturnStmt 0xa776960 <col:9, col:29>
    (CallExpr 0xa776938 <col:16, col:29> '<dependent type>'
      (MemberExpr 0xa7768d0 <col:16> 'const _Operation' lvalue ->op 0xa7760d0
        (CXXThisExpr 0xa7768c0 <col:16> 'const binder2nd<_Operation> *' this))
      (DeclRefExpr 0xa7768f0 <col:19> 'typename _Operation::first_argument_type' lvalue ParmVar 0xa7765f0 '__x' 'typename _Operation::first_argument_type &')
      (MemberExpr 0xa776918 <col:24> 'const typename _Operation::second_argument_type' lvalue ->value 0xa776160
        (CXXThisExpr 0xa776908 <col:24> 'const binder2nd<_Operation> *' this)))))


    };
    template <typename _Operation, typename _Tp> inline binder2nd<_Operation> bind2nd(const _Operation &__fn, const _Tp &__x) (CompoundStmt 0xa776ec0 </usr/include/c++/4.6/backward/binders.h:163:5, line:166:5>
  (DeclStmt 0xa776d60 <line:164:7, col:67>
    0xa776d30 "typedef typename _Operation::second_argument_type _Arg2_type")
  (ReturnStmt 0xa776eb0 <line:165:7, col:57>
    (CXXUnresolvedConstructExpr 0xa776e90 <col:14, col:57> 'binder2nd<_Operation>'
      (DeclRefExpr 0xa776e20 <col:36> 'const _Operation' lvalue ParmVar 0xa776b00 '__fn' 'const _Operation &')
      (CXXUnresolvedConstructExpr 0xa776e70 <col:42, col:56> '_Arg2_type':'typename _Operation::second_argument_type'
        (DeclRefExpr 0xa776e58 <col:53> 'const _Tp' lvalue ParmVar 0xa776b70 '__x' 'const _Tp &')))))

;
}
struct sched_param {
    struct sched_param;
    int __sched_priority;
};
extern "C" {
    extern int clone(int (*__fn)(void *), void *__child_stack, int __flags, void *__arg, ...) throw();
    extern int unshare(int __flags) throw();
    extern int sched_getcpu() throw();
    extern int setns(int __fd, int __nstype) throw();
}
struct __sched_param {
    struct __sched_param;
    int __sched_priority;
};
typedef unsigned long __cpu_mask;
struct {
    __cpu_mask __bits[32];
};
typedef struct cpu_set_t cpu_set_t;
extern "C" {
    extern int __sched_cpucount(size_t __setsize, const cpu_set_t *__setp) throw();
    extern cpu_set_t *__sched_cpualloc(size_t __count) throw();
    extern void __sched_cpufree(cpu_set_t *__set) throw();
}
extern "C" {
    extern int sched_setparam(__pid_t __pid, const struct sched_param *__param) throw();
    extern int sched_getparam(__pid_t __pid, struct sched_param *__param) throw();
    extern int sched_setscheduler(__pid_t __pid, int __policy, const struct sched_param *__param) throw();
    extern int sched_getscheduler(__pid_t __pid) throw();
    extern int sched_yield() throw();
    extern int sched_get_priority_max(int __algorithm) throw();
    extern int sched_get_priority_min(int __algorithm) throw();
    extern int sched_rr_get_interval(__pid_t __pid, struct timespec *__t) throw();
    extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t *__cpuset) throw();
    extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t *__cpuset) throw();
}
extern "C" {
    struct timex {
        struct timex;
        unsigned int modes;
        long offset;
        long freq;
        long maxerror;
        long esterror;
        int status;
        long constant;
        long precision;
        long tolerance;
        struct timeval time;
        long tick;
        long ppsfreq;
        long jitter;
        int shift;
        long stabil;
        long jitcnt;
        long calcnt;
        long errcnt;
        long stbcnt;
        int tai;
        int : (IntegerLiteral 0xa78d2b0 </usr/include/i386-linux-gnu/bits/timex.h:50:9> 'int' 32)
;
        int : (IntegerLiteral 0xa78d310 </usr/include/i386-linux-gnu/bits/timex.h:50:19> 'int' 32)
;
        int : (IntegerLiteral 0xa78d370 </usr/include/i386-linux-gnu/bits/timex.h:50:29> 'int' 32)
;
        int : (IntegerLiteral 0xa78d3d0 </usr/include/i386-linux-gnu/bits/timex.h:50:39> 'int' 32)
;
        int : (IntegerLiteral 0xa78d430 </usr/include/i386-linux-gnu/bits/timex.h:51:9> 'int' 32)
;
        int : (IntegerLiteral 0xa78d490 </usr/include/i386-linux-gnu/bits/timex.h:51:19> 'int' 32)
;
        int : (IntegerLiteral 0xa78d4f0 </usr/include/i386-linux-gnu/bits/timex.h:51:29> 'int' 32)
;
        int : (IntegerLiteral 0xa78d550 </usr/include/i386-linux-gnu/bits/timex.h:51:39> 'int' 32)
;
        int : (IntegerLiteral 0xa78d5b0 </usr/include/i386-linux-gnu/bits/timex.h:52:9> 'int' 32)
;
        int : (IntegerLiteral 0xa78d610 </usr/include/i386-linux-gnu/bits/timex.h:52:19> 'int' 32)
;
        int : (IntegerLiteral 0xa78d670 </usr/include/i386-linux-gnu/bits/timex.h:52:29> 'int' 32)
;
    };
    extern "C" {
        extern int clock_adjtime(__clockid_t __clock_id, struct timex *__utx) throw();
    }
    struct tm {
        struct tm;
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        long tm_gmtoff;
        const char *tm_zone;
    };
    struct itimerspec {
        struct itimerspec;
        struct timespec it_interval;
        struct timespec it_value;
    };
    struct sigevent;
    extern clock_t clock() throw();
    extern time_t time(time_t *__timer) throw();
    extern double difftime(time_t __time1, time_t __time0) throw();
    extern time_t mktime(struct tm *__tp) throw();
    extern size_t strftime(char *restrict __s, size_t __maxsize, const char *restrict __format, const struct tm *restrict __tp) throw();
    extern char *strptime(const char *restrict __s, const char *restrict __fmt, struct tm *__tp) throw();
    extern size_t strftime_l(char *restrict __s, size_t __maxsize, const char *restrict __format, const struct tm *restrict __tp, __locale_t __loc) throw();
    extern char *strptime_l(const char *restrict __s, const char *restrict __fmt, struct tm *__tp, __locale_t __loc) throw();
    extern struct tm *gmtime(const time_t *__timer) throw();
    extern struct tm *localtime(const time_t *__timer) throw();
    extern struct tm *gmtime_r(const time_t *restrict __timer, struct tm *restrict __tp) throw();
    extern struct tm *localtime_r(const time_t *restrict __timer, struct tm *restrict __tp) throw();
    extern char *asctime(const struct tm *__tp) throw();
    extern char *ctime(const time_t *__timer) throw();
    extern char *asctime_r(const struct tm *restrict __tp, char *restrict __buf) throw();
    extern char *ctime_r(const time_t *restrict __timer, char *restrict __buf) throw();
    extern char *__tzname[2];
    extern int __daylight;
    extern long __timezone;
    extern char *tzname[2];
    extern void tzset() throw();
    extern int daylight;
    extern long timezone;
    extern int stime(const time_t *__when) throw();
    extern time_t timegm(struct tm *__tp) throw();
    extern time_t timelocal(struct tm *__tp) throw();
    extern int dysize(int __year) throw();
    extern int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining);
    extern int clock_getres(clockid_t __clock_id, struct timespec *__res) throw();
    extern int clock_gettime(clockid_t __clock_id, struct timespec *__tp) throw();
    extern int clock_settime(clockid_t __clock_id, const struct timespec *__tp) throw();
    extern int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem);
    extern int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id) throw();
    extern int timer_create(clockid_t __clock_id, struct sigevent *restrict __evp, timer_t *restrict __timerid) throw();
    extern int timer_delete(timer_t __timerid) throw();
    extern int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *restrict __value, struct itimerspec *restrict __ovalue) throw();
    extern int timer_gettime(timer_t __timerid, struct itimerspec *__value) throw();
    extern int timer_getoverrun(timer_t __timerid) throw();
    extern int getdate_err;
    extern struct tm *getdate(const char *__string);
    extern int getdate_r(const char *restrict __string, struct tm *restrict __resbufp);
}
typedef int __jmp_buf[6];
enum  {
    PTHREAD_CREATE_JOINABLE,
    PTHREAD_CREATE_DETACHED
};
enum  {
    PTHREAD_MUTEX_TIMED_NP,
    PTHREAD_MUTEX_RECURSIVE_NP,
    PTHREAD_MUTEX_ERRORCHECK_NP,
    PTHREAD_MUTEX_ADAPTIVE_NP,
    PTHREAD_MUTEX_NORMAL = (ImplicitCastExpr 0xa794fc8 </usr/include/pthread.h:52:26> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa794e34 <col:26> 'int' EnumConstant 0xa794d40 'PTHREAD_MUTEX_TIMED_NP' 'enum <anonymous at /usr/include/pthread.h:44:1>'))
,
    PTHREAD_MUTEX_RECURSIVE = (ImplicitCastExpr 0xa794fd8 </usr/include/pthread.h:53:29> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa794e84 <col:29> 'int' EnumConstant 0xa794d80 'PTHREAD_MUTEX_RECURSIVE_NP' 'enum <anonymous at /usr/include/pthread.h:44:1>'))
,
    PTHREAD_MUTEX_ERRORCHECK = (ImplicitCastExpr 0xa794fe8 </usr/include/pthread.h:54:30> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa794ed4 <col:30> 'int' EnumConstant 0xa794dc0 'PTHREAD_MUTEX_ERRORCHECK_NP' 'enum <anonymous at /usr/include/pthread.h:44:1>'))
,
    PTHREAD_MUTEX_DEFAULT = (ImplicitCastExpr 0xa794ff8 </usr/include/pthread.h:55:27> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa794f24 <col:27> 'int' EnumConstant 0xa794e50 'PTHREAD_MUTEX_NORMAL' 'enum <anonymous at /usr/include/pthread.h:44:1>'))
,
    PTHREAD_MUTEX_FAST_NP = (ImplicitCastExpr 0xa795008 </usr/include/pthread.h:59:29> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa794f74 <col:29> 'int' EnumConstant 0xa794d40 'PTHREAD_MUTEX_TIMED_NP' 'enum <anonymous at /usr/include/pthread.h:44:1>'))

};
enum  {
    PTHREAD_MUTEX_STALLED,
    PTHREAD_MUTEX_STALLED_NP = (ImplicitCastExpr 0xa795198 </usr/include/pthread.h:69:30> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa7950b4 <col:30> 'int' EnumConstant 0xa795080 'PTHREAD_MUTEX_STALLED' 'enum <anonymous at /usr/include/pthread.h:66:1>'))
,
    PTHREAD_MUTEX_ROBUST,
    PTHREAD_MUTEX_ROBUST_NP = (ImplicitCastExpr 0xa7951a8 </usr/include/pthread.h:71:29> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa795144 <col:29> 'int' EnumConstant 0xa795110 'PTHREAD_MUTEX_ROBUST' 'enum <anonymous at /usr/include/pthread.h:66:1>'))

};
enum  {
    PTHREAD_PRIO_NONE,
    PTHREAD_PRIO_INHERIT,
    PTHREAD_PRIO_PROTECT
};
enum  {
    PTHREAD_RWLOCK_PREFER_READER_NP,
    PTHREAD_RWLOCK_PREFER_WRITER_NP,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
    PTHREAD_RWLOCK_DEFAULT_NP = (ImplicitCastExpr 0xa795448 </usr/include/pthread.h:120:31> 'unsigned int' <IntegralCast>
  (DeclRefExpr 0xa7953f4 <col:31> 'int' EnumConstant 0xa795340 'PTHREAD_RWLOCK_PREFER_READER_NP' 'enum <anonymous at /usr/include/pthread.h:115:1>'))

};
enum  {
    PTHREAD_INHERIT_SCHED,
    PTHREAD_EXPLICIT_SCHED
};
enum  {
    PTHREAD_SCOPE_SYSTEM,
    PTHREAD_SCOPE_PROCESS
};
enum  {
    PTHREAD_PROCESS_PRIVATE,
    PTHREAD_PROCESS_SHARED
};
struct _pthread_cleanup_buffer {
    struct _pthread_cleanup_buffer;
    void (*__routine)(void *);
    void *__arg;
    int __canceltype;
    struct _pthread_cleanup_buffer *__prev;
};
enum  {
    PTHREAD_CANCEL_ENABLE,
    PTHREAD_CANCEL_DISABLE
};
enum  {
    PTHREAD_CANCEL_DEFERRED,
    PTHREAD_CANCEL_ASYNCHRONOUS
};
extern "C" {
    extern int pthread_create(pthread_t *restrict __newthread, const pthread_attr_t *restrict __attr, void *(*__start_routine)(void *), void *restrict __arg) throw();
    extern void pthread_exit(void *__retval);
    extern int pthread_join(pthread_t __th, void **__thread_return);
    extern int pthread_tryjoin_np(pthread_t __th, void **__thread_return) throw();
    extern int pthread_timedjoin_np(pthread_t __th, void **__thread_return, const struct timespec *__abstime);
    extern int pthread_detach(pthread_t __th) throw();
    extern pthread_t pthread_self() throw();
    extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw();
    extern int pthread_attr_init(pthread_attr_t *__attr) throw();
    extern int pthread_attr_destroy(pthread_attr_t *__attr) throw();
    extern int pthread_attr_getdetachstate(const pthread_attr_t *__attr, int *__detachstate) throw();
    extern int pthread_attr_setdetachstate(pthread_attr_t *__attr, int __detachstate) throw();
    extern int pthread_attr_getguardsize(const pthread_attr_t *__attr, size_t *__guardsize) throw();
    extern int pthread_attr_setguardsize(pthread_attr_t *__attr, size_t __guardsize) throw();
    extern int pthread_attr_getschedparam(const pthread_attr_t *restrict __attr, struct sched_param *restrict __param) throw();
    extern int pthread_attr_setschedparam(pthread_attr_t *restrict __attr, const struct sched_param *restrict __param) throw();
    extern int pthread_attr_getschedpolicy(const pthread_attr_t *restrict __attr, int *restrict __policy) throw();
    extern int pthread_attr_setschedpolicy(pthread_attr_t *__attr, int __policy) throw();
    extern int pthread_attr_getinheritsched(const pthread_attr_t *restrict __attr, int *restrict __inherit) throw();
    extern int pthread_attr_setinheritsched(pthread_attr_t *__attr, int __inherit) throw();
    extern int pthread_attr_getscope(const pthread_attr_t *restrict __attr, int *restrict __scope) throw();
    extern int pthread_attr_setscope(pthread_attr_t *__attr, int __scope) throw();
    extern int pthread_attr_getstackaddr(const pthread_attr_t *restrict __attr, void **restrict __stackaddr) throw();
    extern int pthread_attr_setstackaddr(pthread_attr_t *__attr, void *__stackaddr) throw();
    extern int pthread_attr_getstacksize(const pthread_attr_t *restrict __attr, size_t *restrict __stacksize) throw();
    extern int pthread_attr_setstacksize(pthread_attr_t *__attr, size_t __stacksize) throw();
    extern int pthread_attr_getstack(const pthread_attr_t *restrict __attr, void **restrict __stackaddr, size_t *restrict __stacksize) throw();
    extern int pthread_attr_setstack(pthread_attr_t *__attr, void *__stackaddr, size_t __stacksize) throw();
    extern int pthread_attr_setaffinity_np(pthread_attr_t *__attr, size_t __cpusetsize, const cpu_set_t *__cpuset) throw();
    extern int pthread_attr_getaffinity_np(const pthread_attr_t *__attr, size_t __cpusetsize, cpu_set_t *__cpuset) throw();
    extern int pthread_getattr_np(pthread_t __th, pthread_attr_t *__attr) throw();
    extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const struct sched_param *__param) throw();
    extern int pthread_getschedparam(pthread_t __target_thread, int *restrict __policy, struct sched_param *restrict __param) throw();
    extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw();
    extern int pthread_getname_np(pthread_t __target_thread, char *__buf, size_t __buflen) throw();
    extern int pthread_setname_np(pthread_t __target_thread, const char *__name) throw();
    extern int pthread_getconcurrency() throw();
    extern int pthread_setconcurrency(int __level) throw();
    extern int pthread_yield() throw();
    extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t *__cpuset) throw();
    extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t *__cpuset) throw();
    extern int pthread_once(pthread_once_t *__once_control, void (*__init_routine)());
    extern int pthread_setcancelstate(int __state, int *__oldstate);
    extern int pthread_setcanceltype(int __type, int *__oldtype);
    extern int pthread_cancel(pthread_t __th);
    extern void pthread_testcancel();
    struct {
        struct {
            __jmp_buf __cancel_jmp_buf;
            int __mask_was_saved;
        };
        struct <anonymous struct at /usr/include/pthread.h:509:3> __cancel_jmp_buf[1];
        void *__pad[4];
    };
    typedef struct __pthread_unwind_buf_t __pthread_unwind_buf_t;
    struct __pthread_cleanup_frame {
        struct __pthread_cleanup_frame;
        void (*__cancel_routine)(void *);
        void *__cancel_arg;
        int __do_it;
        int __cancel_type;
    };
    extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf);
    extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf);
    extern void __pthread_register_cancel_defer(__pthread_unwind_buf_t *__buf);
    extern void __pthread_unregister_cancel_restore(__pthread_unwind_buf_t *__buf);
    extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf);
    struct __jmp_buf_tag;
    extern int __sigsetjmp(struct __jmp_buf_tag *__env, int __savemask) throw() __attribute((returns_twice));
    extern int pthread_mutex_init(pthread_mutex_t *__mutex, const pthread_mutexattr_t *__mutexattr) throw();
    extern int pthread_mutex_destroy(pthread_mutex_t *__mutex) throw();
    extern int pthread_mutex_trylock(pthread_mutex_t *__mutex) throw();
    extern int pthread_mutex_lock(pthread_mutex_t *__mutex) throw();
    extern int pthread_mutex_timedlock(pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime) throw();
    extern int pthread_mutex_unlock(pthread_mutex_t *__mutex) throw();
    extern int pthread_mutex_getprioceiling(const pthread_mutex_t *restrict __mutex, int *restrict __prioceiling) throw();
    extern int pthread_mutex_setprioceiling(pthread_mutex_t *restrict __mutex, int __prioceiling, int *restrict __old_ceiling) throw();
    extern int pthread_mutex_consistent(pthread_mutex_t *__mutex) throw();
    extern int pthread_mutex_consistent_np(pthread_mutex_t *__mutex) throw();
    extern int pthread_mutexattr_init(pthread_mutexattr_t *__attr) throw();
    extern int pthread_mutexattr_destroy(pthread_mutexattr_t *__attr) throw();
    extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *restrict __attr, int *restrict __pshared) throw();
    extern int pthread_mutexattr_setpshared(pthread_mutexattr_t *__attr, int __pshared) throw();
    extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict __attr, int *restrict __kind) throw();
    extern int pthread_mutexattr_settype(pthread_mutexattr_t *__attr, int __kind) throw();
    extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *restrict __attr, int *restrict __protocol) throw();
    extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t *__attr, int __protocol) throw();
    extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *restrict __attr, int *restrict __prioceiling) throw();
    extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *__attr, int __prioceiling) throw();
    extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__attr, int *__robustness) throw();
    extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *__attr, int *__robustness) throw();
    extern int pthread_mutexattr_setrobust(pthread_mutexattr_t *__attr, int __robustness) throw();
    extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *__attr, int __robustness) throw();
    extern int pthread_rwlock_init(pthread_rwlock_t *restrict __rwlock, const pthread_rwlockattr_t *restrict __attr) throw();
    extern int pthread_rwlock_destroy(pthread_rwlock_t *__rwlock) throw();
    extern int pthread_rwlock_rdlock(pthread_rwlock_t *__rwlock) throw();
    extern int pthread_rwlock_tryrdlock(pthread_rwlock_t *__rwlock) throw();
    extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime) throw();
    extern int pthread_rwlock_wrlock(pthread_rwlock_t *__rwlock) throw();
    extern int pthread_rwlock_trywrlock(pthread_rwlock_t *__rwlock) throw();
    extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime) throw();
    extern int pthread_rwlock_unlock(pthread_rwlock_t *__rwlock) throw();
    extern int pthread_rwlockattr_init(pthread_rwlockattr_t *__attr) throw();
    extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t *__attr) throw();
    extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *restrict __attr, int *restrict __pshared) throw();
    extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *__attr, int __pshared) throw();
    extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *restrict __attr, int *restrict __pref) throw();
    extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *__attr, int __pref) throw();
    extern int pthread_cond_init(pthread_cond_t *restrict __cond, const pthread_condattr_t *restrict __cond_attr) throw();
    extern int pthread_cond_destroy(pthread_cond_t *__cond) throw();
    extern int pthread_cond_signal(pthread_cond_t *__cond) throw();
    extern int pthread_cond_broadcast(pthread_cond_t *__cond) throw();
    extern int pthread_cond_wait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex);
    extern int pthread_cond_timedwait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime);
    extern int pthread_condattr_init(pthread_condattr_t *__attr) throw();
    extern int pthread_condattr_destroy(pthread_condattr_t *__attr) throw();
    extern int pthread_condattr_getpshared(const pthread_condattr_t *restrict __attr, int *restrict __pshared) throw();
    extern int pthread_condattr_setpshared(pthread_condattr_t *__attr, int __pshared) throw();
    extern int pthread_condattr_getclock(const pthread_condattr_t *restrict __attr, __clockid_t *restrict __clock_id) throw();
    extern int pthread_condattr_setclock(pthread_condattr_t *__attr, __clockid_t __clock_id) throw();
    extern int pthread_spin_init(pthread_spinlock_t *__lock, int __pshared) throw();
    extern int pthread_spin_destroy(pthread_spinlock_t *__lock) throw();
    extern int pthread_spin_lock(pthread_spinlock_t *__lock) throw();
    extern int pthread_spin_trylock(pthread_spinlock_t *__lock) throw();
    extern int pthread_spin_unlock(pthread_spinlock_t *__lock) throw();
    extern int pthread_barrier_init(pthread_barrier_t *restrict __barrier, const pthread_barrierattr_t *restrict __attr, unsigned int __count) throw();
    extern int pthread_barrier_destroy(pthread_barrier_t *__barrier) throw();
    extern int pthread_barrier_wait(pthread_barrier_t *__barrier) throw();
    extern int pthread_barrierattr_init(pthread_barrierattr_t *__attr) throw();
    extern int pthread_barrierattr_destroy(pthread_barrierattr_t *__attr) throw();
    extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict __attr, int *restrict __pshared) throw();
    extern int pthread_barrierattr_setpshared(pthread_barrierattr_t *__attr, int __pshared) throw();
    extern int pthread_key_create(pthread_key_t *__key, void (*__destr_function)(void *)) throw();
    extern int pthread_key_delete(pthread_key_t __key) throw();
    extern void *pthread_getspecific(pthread_key_t __key) throw();
    extern int pthread_setspecific(pthread_key_t __key, const void *__pointer) throw();
    extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t *__clock_id) throw();
    extern int pthread_atfork(void (*__prepare)(), void (*__parent)(), void (*__child)()) throw();
}
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
static typeof (pthread_once) __gthrw_pthread_once;
static typeof (pthread_getspecific) __gthrw_pthread_getspecific;
static typeof (pthread_setspecific) __gthrw_pthread_setspecific;
static typeof (pthread_create) __gthrw_pthread_create;
static typeof (pthread_join) __gthrw_pthread_join;
static typeof (pthread_equal) __gthrw_pthread_equal;
static typeof (pthread_self) __gthrw_pthread_self;
static typeof (pthread_detach) __gthrw_pthread_detach;
static typeof (pthread_cancel) __gthrw_pthread_cancel;
static typeof (sched_yield) __gthrw_sched_yield;
static typeof (pthread_mutex_lock) __gthrw_pthread_mutex_lock;
static typeof (pthread_mutex_trylock) __gthrw_pthread_mutex_trylock;
static typeof (pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock;
static typeof (pthread_mutex_unlock) __gthrw_pthread_mutex_unlock;
static typeof (pthread_mutex_init) __gthrw_pthread_mutex_init;
static typeof (pthread_mutex_destroy) __gthrw_pthread_mutex_destroy;
static typeof (pthread_cond_broadcast) __gthrw_pthread_cond_broadcast;
static typeof (pthread_cond_signal) __gthrw_pthread_cond_signal;
static typeof (pthread_cond_wait) __gthrw_pthread_cond_wait;
static typeof (pthread_cond_timedwait) __gthrw_pthread_cond_timedwait;
static typeof (pthread_cond_destroy) __gthrw_pthread_cond_destroy;
static typeof (pthread_key_create) __gthrw_pthread_key_create;
static typeof (pthread_key_delete) __gthrw_pthread_key_delete;
static typeof (pthread_mutexattr_init) __gthrw_pthread_mutexattr_init;
static typeof (pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype;
static typeof (pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy;
static inline int __gthread_active_p() (CompoundStmt 0xa7b8c58 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:241:1, line:253:1>
  (DeclStmt 0xa7b8bc0 <line:242:3, line:251:13>
    0xa7b8b00 "static void *const __gthread_active_ptr =
      (UnaryOperator 0xa7b8ba8 <line:243:7, <scratch space>:103:1> 'void *' prefix '__extension__'
        (CStyleCastExpr 0xa7b8b90 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:243:21, <scratch space>:103:1> 'void *' <BitCast>
          (UnaryOperator 0xa7b8b68 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:243:30, <scratch space>:103:1> 'typeof (pthread_cancel) *' prefix '&'
            (DeclRefExpr 0xa7b8b34 <col:1> 'typeof (pthread_cancel)':'int (pthread_t)' lvalue Function 0xa7b5a20 '__gthrw_pthread_cancel' 'typeof (pthread_cancel)':'int (pthread_t)'))))")
  (ReturnStmt 0xa7b8c48 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:252:3, col:34>
    (ImplicitCastExpr 0xa7b8c38 <col:10, col:34> 'int' <IntegralCast>
      (BinaryOperator 0xa7b8c20 <col:10, col:34> '_Bool' '!='
        (ImplicitCastExpr 0xa7b8c00 <col:10> 'void *' <LValueToRValue>
          (DeclRefExpr 0xa7b8bd0 <col:10> 'void *const' lvalue Var 0xa7b8b00 '__gthread_active_ptr' 'void *const'))
        (ImplicitCastExpr 0xa7b8c10 <col:34> 'void *' <NullToPointer>
          (IntegerLiteral 0xa7b8be8 <col:34> 'int' 0))))))


static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *__args) (CompoundStmt 0xa7b9058 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:662:1, line:664:1>
  (ReturnStmt 0xa7b9048 <line:663:3, col:68>
    (CallExpr 0xa7b8fd8 <<scratch space>:104:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:663:68> 'int'
      (ImplicitCastExpr 0xa7b8fc8 <<scratch space>:104:1> 'typeof (pthread_create) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7b8f6c <col:1> 'typeof (pthread_create)':'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict) throw()' lvalue Function 0xa7b5100 '__gthrw_pthread_create' 'typeof (pthread_create)':'int (pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict) throw()'))
      (ImplicitCastExpr 0xa7b9008 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:663:36> '__gthread_t *' <LValueToRValue>
        (DeclRefExpr 0xa7b8f14 <col:36> '__gthread_t *' lvalue ParmVar 0xa7b8cb0 '__threadid' '__gthread_t *'))
      (ImplicitCastExpr 0xa7b9018 </usr/include/clang/3.0/include/stddef.h:47:14> 'const pthread_attr_t *' <NullToPointer>
        (GNUNullExpr 0xa7b8f30 <col:14> 'int'))
      (ImplicitCastExpr 0xa7b9028 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:663:54> 'void *(*)(void *)' <LValueToRValue>
        (DeclRefExpr 0xa7b8f3c <col:54> 'void *(*)(void *)' lvalue ParmVar 0xa7b8d60 '__func' 'void *(*)(void *)'))
      (ImplicitCastExpr 0xa7b9038 <col:62> 'void *' <LValueToRValue>
        (DeclRefExpr 0xa7b8f54 <col:62> 'void *' lvalue ParmVar 0xa7b8db0 '__args' 'void *')))))


static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) (CompoundStmt 0xa7b92e0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:668:1, line:670:1>
  (ReturnStmt 0xa7b92d0 <line:669:3, col:57>
    (CallExpr 0xa7b9288 <<scratch space>:105:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:669:57> 'int'
      (ImplicitCastExpr 0xa7b9278 <<scratch space>:105:1> 'typeof (pthread_join) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7b921c <col:1> 'typeof (pthread_join)':'int (pthread_t, void **)' lvalue Function 0xa7b53a0 '__gthrw_pthread_join' 'typeof (pthread_join)':'int (pthread_t, void **)'))
      (ImplicitCastExpr 0xa7b92b0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:669:34> '__gthread_t':'unsigned long' <LValueToRValue>
        (DeclRefExpr 0xa7b91ec <col:34> '__gthread_t':'unsigned long' lvalue ParmVar 0xa7b9080 '__threadid' '__gthread_t':'unsigned long'))
      (ImplicitCastExpr 0xa7b92c0 <col:46> 'void **' <LValueToRValue>
        (DeclRefExpr 0xa7b9204 <col:46> 'void **' lvalue ParmVar 0xa7b90d0 '__value_ptr' 'void **')))))


static inline int __gthread_detach(__gthread_t __threadid) (CompoundStmt 0xa7b94b8 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:674:1, line:676:1>
  (ReturnStmt 0xa7b94a8 <line:675:3, col:46>
    (CallExpr 0xa7b9478 <<scratch space>:106:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:675:46> 'int'
      (ImplicitCastExpr 0xa7b9468 <<scratch space>:106:1> 'typeof (pthread_detach) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7b9434 <col:1> 'typeof (pthread_detach)':'int (pthread_t) throw()' lvalue Function 0xa7b5890 '__gthrw_pthread_detach' 'typeof (pthread_detach)':'int (pthread_t) throw()'))
      (ImplicitCastExpr 0xa7b9498 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:675:36> '__gthread_t':'unsigned long' <LValueToRValue>
        (DeclRefExpr 0xa7b941c <col:36> '__gthread_t':'unsigned long' lvalue ParmVar 0xa7b9300 '__threadid' '__gthread_t':'unsigned long')))))


static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) (CompoundStmt 0xa7b9730 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:680:1, line:682:1>
  (ReturnStmt 0xa7b9720 <line:681:3, col:45>
    (CallExpr 0xa7b96d8 <<scratch space>:107:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:681:45> 'int'
      (ImplicitCastExpr 0xa7b96c8 <<scratch space>:107:1> 'typeof (pthread_equal) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7b966c <col:1> 'typeof (pthread_equal)':'int (pthread_t, pthread_t) throw()' lvalue Function 0xa7b5580 '__gthrw_pthread_equal' 'typeof (pthread_equal)':'int (pthread_t, pthread_t) throw()'))
      (ImplicitCastExpr 0xa7b9700 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:681:35> '__gthread_t':'unsigned long' <LValueToRValue>
        (DeclRefExpr 0xa7b963c <col:35> '__gthread_t':'unsigned long' lvalue ParmVar 0xa7b94e0 '__t1' '__gthread_t':'unsigned long'))
      (ImplicitCastExpr 0xa7b9710 <col:41> '__gthread_t':'unsigned long' <LValueToRValue>
        (DeclRefExpr 0xa7b9654 <col:41> '__gthread_t':'unsigned long' lvalue ParmVar 0xa7b9520 '__t2' '__gthread_t':'unsigned long')))))


static inline __gthread_t __gthread_self() (CompoundStmt 0xa7b98e8 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:686:1, line:688:1>
  (ReturnStmt 0xa7b98d8 <line:687:3, col:34>
    (CallExpr 0xa7b98b8 <<scratch space>:108:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:687:34> 'pthread_t':'unsigned long'
      (ImplicitCastExpr 0xa7b98a8 <<scratch space>:108:1> 'typeof (pthread_self) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7b9854 <col:1> 'typeof (pthread_self)':'pthread_t (void) throw()' lvalue Function 0xa7b5750 '__gthrw_pthread_self' 'typeof (pthread_self)':'pthread_t (void) throw()')))))


static inline int __gthread_yield() (CompoundStmt 0xa7b9a68 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:692:1, line:694:1>
  (ReturnStmt 0xa7b9a58 <line:693:3, col:33>
    (CallExpr 0xa7b9a38 <<scratch space>:109:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:693:33> 'int'
      (ImplicitCastExpr 0xa7b9a28 <<scratch space>:109:1> 'typeof (sched_yield) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7b99f4 <col:1> 'typeof (sched_yield)':'int (void) throw()' lvalue Function 0xa7b5bf0 '__gthrw_sched_yield' 'typeof (sched_yield)':'int (void) throw()')))))


static inline int __gthread_once(__gthread_once_t *__once, void (*__func)()) (CompoundStmt 0xa7b9e60 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:698:1, line:703:1>
  (IfStmt 0xa7b9e40 <line:699:3, line:702:13>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7b9cc8 <line:699:7, col:27> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7b9ca8 <col:7, col:27> 'int'
        (ImplicitCastExpr 0xa7b9c98 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7b9c7c <col:7> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7b9df0 <line:700:5, col:50>
      (CallExpr 0xa7b9da8 <<scratch space>:110:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:700:50> 'int'
        (ImplicitCastExpr 0xa7b9d98 <<scratch space>:110:1> 'typeof (pthread_once) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7b9d3c <col:1> 'typeof (pthread_once)':'int (pthread_once_t *, void (*)(void))' lvalue Function 0xa7b4b20 '__gthrw_pthread_once' 'typeof (pthread_once)':'int (pthread_once_t *, void (*)(void))'))
        (ImplicitCastExpr 0xa7b9dd0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:700:36> '__gthread_once_t *' <LValueToRValue>
          (DeclRefExpr 0xa7b9d0c <col:36> '__gthread_once_t *' lvalue ParmVar 0xa7b9ac0 '__once' '__gthread_once_t *'))
        (ImplicitCastExpr 0xa7b9de0 <col:44> 'void (*)(void)' <LValueToRValue>
          (DeclRefExpr 0xa7b9d24 <col:44> 'void (*)(void)' lvalue ParmVar 0xa7b9b60 '__func' 'void (*)(void)'))))
    (ReturnStmt 0xa7b9e30 <line:702:5, col:13>
      (UnaryOperator 0xa7b9e18 <col:12, col:13> 'int' prefix '-'
        (IntegerLiteral 0xa7b9e00 <col:13> 'int' 1)))))


static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) (CompoundStmt 0xa7ba180 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:707:1, line:709:1>
  (ReturnStmt 0xa7ba170 <line:708:3, col:53>
    (CallExpr 0xa7ba128 <<scratch space>:111:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:708:53> 'int'
      (ImplicitCastExpr 0xa7ba118 <<scratch space>:111:1> 'typeof (pthread_key_create) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ba0bc <col:1> 'typeof (pthread_key_create)':'int (pthread_key_t *, void (*)(void *)) throw()' lvalue Function 0xa7b8180 '__gthrw_pthread_key_create' 'typeof (pthread_key_create)':'int (pthread_key_t *, void (*)(void *)) throw()'))
      (ImplicitCastExpr 0xa7ba150 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:708:40> '__gthread_key_t *' <LValueToRValue>
        (DeclRefExpr 0xa7ba08c <col:40> '__gthread_key_t *' lvalue ParmVar 0xa7b9ec0 '__key' '__gthread_key_t *'))
      (ImplicitCastExpr 0xa7ba160 <col:47> 'void (*)(void *)' <LValueToRValue>
        (DeclRefExpr 0xa7ba0a4 <col:47> 'void (*)(void *)' lvalue ParmVar 0xa7b9f70 '__dtor' 'void (*)(void *)')))))


static inline int __gthread_key_delete(__gthread_key_t __key) (CompoundStmt 0xa7ba358 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:713:1, line:715:1>
  (ReturnStmt 0xa7ba348 <line:714:3, col:45>
    (CallExpr 0xa7ba318 <<scratch space>:112:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:714:45> 'int'
      (ImplicitCastExpr 0xa7ba308 <<scratch space>:112:1> 'typeof (pthread_key_delete) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ba2d4 <col:1> 'typeof (pthread_key_delete)':'int (pthread_key_t) throw()' lvalue Function 0xa7b8380 '__gthrw_pthread_key_delete' 'typeof (pthread_key_delete)':'int (pthread_key_t) throw()'))
      (ImplicitCastExpr 0xa7ba338 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:714:40> '__gthread_key_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7ba2bc <col:40> '__gthread_key_t':'unsigned int' lvalue ParmVar 0xa7ba1a0 '__key' '__gthread_key_t':'unsigned int')))))


static inline void *__gthread_getspecific(__gthread_key_t __key) (CompoundStmt 0xa7ba538 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:719:1, line:721:1>
  (ReturnStmt 0xa7ba528 <line:720:3, col:46>
    (CallExpr 0xa7ba4f8 <<scratch space>:113:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:720:46> 'void *'
      (ImplicitCastExpr 0xa7ba4e8 <<scratch space>:113:1> 'typeof (pthread_getspecific) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ba4b4 <col:1> 'typeof (pthread_getspecific)':'void *(pthread_key_t) throw()' lvalue Function 0xa7b4d30 '__gthrw_pthread_getspecific' 'typeof (pthread_getspecific)':'void *(pthread_key_t) throw()'))
      (ImplicitCastExpr 0xa7ba518 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:720:41> '__gthread_key_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7ba49c <col:41> '__gthread_key_t':'unsigned int' lvalue ParmVar 0xa7ba380 '__key' '__gthread_key_t':'unsigned int')))))


static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) (CompoundStmt 0xa7ba7c0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:725:1, line:727:1>
  (ReturnStmt 0xa7ba7b0 <line:726:3, col:53>
    (CallExpr 0xa7ba768 <<scratch space>:114:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:726:53> 'int'
      (ImplicitCastExpr 0xa7ba758 <<scratch space>:114:1> 'typeof (pthread_setspecific) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ba6fc <col:1> 'typeof (pthread_setspecific)':'int (pthread_key_t, const void *) throw()' lvalue Function 0xa7b4ed0 '__gthrw_pthread_setspecific' 'typeof (pthread_setspecific)':'int (pthread_key_t, const void *) throw()'))
      (ImplicitCastExpr 0xa7ba790 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:726:41> '__gthread_key_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa7ba6cc <col:41> '__gthread_key_t':'unsigned int' lvalue ParmVar 0xa7ba560 '__key' '__gthread_key_t':'unsigned int'))
      (ImplicitCastExpr 0xa7ba7a0 <col:48> 'const void *' <LValueToRValue>
        (DeclRefExpr 0xa7ba6e4 <col:48> 'const void *' lvalue ParmVar 0xa7ba5b0 '__ptr' 'const void *')))))


static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) (CompoundStmt 0xa7baad0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:731:1, line:736:1>
  (IfStmt 0xa7baab0 <line:732:3, line:735:12>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7ba988 <line:732:7, col:27> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7ba968 <col:7, col:27> 'int'
        (ImplicitCastExpr 0xa7ba958 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7ba93c <col:7> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7baa78 <line:733:5, col:52>
      (CallExpr 0xa7baa48 <<scratch space>:115:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:733:52> 'int'
        (ImplicitCastExpr 0xa7baa38 <<scratch space>:115:1> 'typeof (pthread_mutex_destroy) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7ba9e4 <col:1> 'typeof (pthread_mutex_destroy)':'int (pthread_mutex_t *) throw()' lvalue Function 0xa7b7680 '__gthrw_pthread_mutex_destroy' 'typeof (pthread_mutex_destroy)':'int (pthread_mutex_t *) throw()'))
        (ImplicitCastExpr 0xa7baa68 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:733:45> '__gthread_mutex_t *' <LValueToRValue>
          (DeclRefExpr 0xa7ba9cc <col:45> '__gthread_mutex_t *' lvalue ParmVar 0xa7ba820 '__mutex' '__gthread_mutex_t *'))))
    (ReturnStmt 0xa7baaa0 <line:735:5, col:12>
      (IntegerLiteral 0xa7baa88 <col:12> 'int' 0))))


static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) (CompoundStmt 0xa7bad70 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:740:1, line:745:1>
  (IfStmt 0xa7bad50 <line:741:3, line:744:12>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7bac48 <line:741:7, col:27> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7bac28 <col:7, col:27> 'int'
        (ImplicitCastExpr 0xa7bac18 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7babfc <col:7> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7bad18 <line:742:5, col:49>
      (CallExpr 0xa7bace8 <<scratch space>:116:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:742:49> 'int'
        (ImplicitCastExpr 0xa7bacd8 <<scratch space>:116:1> 'typeof (pthread_mutex_lock) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7baca4 <col:1> 'typeof (pthread_mutex_lock)':'int (pthread_mutex_t *) throw()' lvalue Function 0xa7b5d70 '__gthrw_pthread_mutex_lock' 'typeof (pthread_mutex_lock)':'int (pthread_mutex_t *) throw()'))
        (ImplicitCastExpr 0xa7bad08 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:742:42> '__gthread_mutex_t *' <LValueToRValue>
          (DeclRefExpr 0xa7bac8c <col:42> '__gthread_mutex_t *' lvalue ParmVar 0xa7bab00 '__mutex' '__gthread_mutex_t *'))))
    (ReturnStmt 0xa7bad40 <line:744:5, col:12>
      (IntegerLiteral 0xa7bad28 <col:12> 'int' 0))))


static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) (CompoundStmt 0xa7bb010 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:749:1, line:754:1>
  (IfStmt 0xa7baff0 <line:750:3, line:753:12>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7baee8 <line:750:7, col:27> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7baec8 <col:7, col:27> 'int'
        (ImplicitCastExpr 0xa7baeb8 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bae9c <col:7> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7bafb8 <line:751:5, col:52>
      (CallExpr 0xa7baf88 <<scratch space>:117:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:751:52> 'int'
        (ImplicitCastExpr 0xa7baf78 <<scratch space>:117:1> 'typeof (pthread_mutex_trylock) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7baf44 <col:1> 'typeof (pthread_mutex_trylock)':'int (pthread_mutex_t *) throw()' lvalue Function 0xa7b5f10 '__gthrw_pthread_mutex_trylock' 'typeof (pthread_mutex_trylock)':'int (pthread_mutex_t *) throw()'))
        (ImplicitCastExpr 0xa7bafa8 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:751:45> '__gthread_mutex_t *' <LValueToRValue>
          (DeclRefExpr 0xa7baf2c <col:45> '__gthread_mutex_t *' lvalue ParmVar 0xa7bada0 '__mutex' '__gthread_mutex_t *'))))
    (ReturnStmt 0xa7bafe0 <line:753:5, col:12>
      (IntegerLiteral 0xa7bafc8 <col:12> 'int' 0))))


static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *__abs_timeout) (CompoundStmt 0xa7bca18 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:761:1, line:766:1>
  (IfStmt 0xa7bc9f8 <line:762:3, line:765:12>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7bc8a0 <line:762:7, col:27> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7bc880 <col:7, col:27> 'int'
        (ImplicitCastExpr 0xa7bb1f8 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bb1dc <col:7> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7bc9c0 <line:763:5, col:69>
      (CallExpr 0xa7bc978 <<scratch space>:118:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:763:69> 'int'
        (ImplicitCastExpr 0xa7bc968 <<scratch space>:118:1> 'typeof (pthread_mutex_timedlock) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bc914 <col:1> 'typeof (pthread_mutex_timedlock)':'int (pthread_mutex_t *restrict, const struct timespec *restrict) throw()' lvalue Function 0xa7b60b0 '__gthrw_pthread_mutex_timedlock' 'typeof (pthread_mutex_timedlock)':'int (pthread_mutex_t *restrict, const struct timespec *restrict) throw()'))
        (ImplicitCastExpr 0xa7bc9a0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:763:47> '__gthread_mutex_t *' <LValueToRValue>
          (DeclRefExpr 0xa7bc8e4 <col:47> '__gthread_mutex_t *' lvalue ParmVar 0xa7bb040 '__mutex' '__gthread_mutex_t *'))
        (ImplicitCastExpr 0xa7bc9b0 <col:56> 'const __gthread_time_t *' <LValueToRValue>
          (DeclRefExpr 0xa7bc8fc <col:56> 'const __gthread_time_t *' lvalue ParmVar 0xa7bb0c0 '__abs_timeout' 'const __gthread_time_t *'))))
    (ReturnStmt 0xa7bc9e8 <line:765:5, col:12>
      (IntegerLiteral 0xa7bc9d0 <col:12> 'int' 0))))


static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) (CompoundStmt 0xa7bccb0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:772:1, line:777:1>
  (IfStmt 0xa7bcc90 <line:773:3, line:776:12>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7bcb88 <line:773:7, col:27> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7bcb68 <col:7, col:27> 'int'
        (ImplicitCastExpr 0xa7bcb58 <col:7> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bcb3c <col:7> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7bcc58 <line:774:5, col:51>
      (CallExpr 0xa7bcc28 <<scratch space>:119:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:774:51> 'int'
        (ImplicitCastExpr 0xa7bcc18 <<scratch space>:119:1> 'typeof (pthread_mutex_unlock) *' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bcbe4 <col:1> 'typeof (pthread_mutex_unlock)':'int (pthread_mutex_t *) throw()' lvalue Function 0xa7b72f0 '__gthrw_pthread_mutex_unlock' 'typeof (pthread_mutex_unlock)':'int (pthread_mutex_t *) throw()'))
        (ImplicitCastExpr 0xa7bcc48 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:774:44> '__gthread_mutex_t *' <LValueToRValue>
          (DeclRefExpr 0xa7bcbcc <col:44> '__gthread_mutex_t *' lvalue ParmVar 0xa7bca40 '__mutex' '__gthread_mutex_t *'))))
    (ReturnStmt 0xa7bcc80 <line:776:5, col:12>
      (IntegerLiteral 0xa7bcc68 <col:12> 'int' 0))))


static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) (CompoundStmt 0xa7bcec8 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:804:1, line:806:1>
  (ReturnStmt 0xa7bceb8 <line:805:3, col:39>
    (CallExpr 0xa7bce88 <col:10, col:39> 'int'
      (ImplicitCastExpr 0xa7bce78 <col:10> 'int (*)(__gthread_mutex_t *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bce44 <col:10> 'int (__gthread_mutex_t *)' lvalue Function 0xa7bab60 '__gthread_mutex_lock' 'int (__gthread_mutex_t *)'))
      (ImplicitCastExpr 0xa7bcea8 <col:32> '__gthread_recursive_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bce2c <col:32> '__gthread_recursive_mutex_t *' lvalue ParmVar 0xa7bcd10 '__mutex' '__gthread_recursive_mutex_t *')))))


static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) (CompoundStmt 0xa7bd070 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:810:1, line:812:1>
  (ReturnStmt 0xa7bd060 <line:811:3, col:42>
    (CallExpr 0xa7bd030 <col:10, col:42> 'int'
      (ImplicitCastExpr 0xa7bd020 <col:10> 'int (*)(__gthread_mutex_t *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bd004 <col:10> 'int (__gthread_mutex_t *)' lvalue Function 0xa7bae00 '__gthread_mutex_trylock' 'int (__gthread_mutex_t *)'))
      (ImplicitCastExpr 0xa7bd050 <col:35> '__gthread_recursive_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bcfec <col:35> '__gthread_recursive_mutex_t *' lvalue ParmVar 0xa7bcef0 '__mutex' '__gthread_recursive_mutex_t *')))))


static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *__abs_timeout) (CompoundStmt 0xa7bd2e0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:819:1, line:821:1>
  (ReturnStmt 0xa7bd2d0 <line:820:3, col:59>
    (CallExpr 0xa7bd288 <col:10, col:59> 'int'
      (ImplicitCastExpr 0xa7bd278 <col:10> 'int (*)(__gthread_mutex_t *, const __gthread_time_t *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bd23c <col:10> 'int (__gthread_mutex_t *, const __gthread_time_t *)' lvalue Function 0xa7bb140 '__gthread_mutex_timedlock' 'int (__gthread_mutex_t *, const __gthread_time_t *)'))
      (ImplicitCastExpr 0xa7bd2b0 <col:37> '__gthread_recursive_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bd20c <col:37> '__gthread_recursive_mutex_t *' lvalue ParmVar 0xa7bd0a0 '__mutex' '__gthread_recursive_mutex_t *'))
      (ImplicitCastExpr 0xa7bd2c0 <col:46> 'const __gthread_time_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bd224 <col:46> 'const __gthread_time_t *' lvalue ParmVar 0xa7bd0f0 '__abs_timeout' 'const __gthread_time_t *')))))


static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) (CompoundStmt 0xa7bd490 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:827:1, line:829:1>
  (ReturnStmt 0xa7bd480 <line:828:3, col:41>
    (CallExpr 0xa7bd450 <col:10, col:41> 'int'
      (ImplicitCastExpr 0xa7bd440 <col:10> 'int (*)(__gthread_mutex_t *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bd424 <col:10> 'int (__gthread_mutex_t *)' lvalue Function 0xa7bcaa0 '__gthread_mutex_unlock' 'int (__gthread_mutex_t *)'))
      (ImplicitCastExpr 0xa7bd470 <col:34> '__gthread_recursive_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bd40c <col:34> '__gthread_recursive_mutex_t *' lvalue ParmVar 0xa7bd310 '__mutex' '__gthread_recursive_mutex_t *')))))


static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) (CompoundStmt 0xa7bd6c8 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:833:1, line:835:1>
  (ReturnStmt 0xa7bd6b8 <line:834:3, col:50>
    (CallExpr 0xa7bd688 <<scratch space>:120:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:834:50> 'int'
      (ImplicitCastExpr 0xa7bd678 <<scratch space>:120:1> 'typeof (pthread_cond_broadcast) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bd624 <col:1> 'typeof (pthread_cond_broadcast)':'int (pthread_cond_t *) throw()' lvalue Function 0xa7b7820 '__gthrw_pthread_cond_broadcast' 'typeof (pthread_cond_broadcast)':'int (pthread_cond_t *) throw()'))
      (ImplicitCastExpr 0xa7bd6a8 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:834:44> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bd60c <col:44> '__gthread_cond_t *' lvalue ParmVar 0xa7bd4f0 '__cond' '__gthread_cond_t *')))))


static inline int __gthread_cond_signal(__gthread_cond_t *__cond) (CompoundStmt 0xa7bd888 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:839:1, line:841:1>
  (ReturnStmt 0xa7bd878 <line:840:3, col:47>
    (CallExpr 0xa7bd848 <<scratch space>:121:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:840:47> 'int'
      (ImplicitCastExpr 0xa7bd838 <<scratch space>:121:1> 'typeof (pthread_cond_signal) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bd804 <col:1> 'typeof (pthread_cond_signal)':'int (pthread_cond_t *) throw()' lvalue Function 0xa7b79c0 '__gthrw_pthread_cond_signal' 'typeof (pthread_cond_signal)':'int (pthread_cond_t *) throw()'))
      (ImplicitCastExpr 0xa7bd868 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:840:41> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bd7ec <col:41> '__gthread_cond_t *' lvalue ParmVar 0xa7bd6f0 '__cond' '__gthread_cond_t *')))))


static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) (CompoundStmt 0xa7bdb10 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:845:1, line:847:1>
  (ReturnStmt 0xa7bdb00 <line:846:3, col:54>
    (CallExpr 0xa7bdab8 <<scratch space>:122:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:846:54> 'int'
      (ImplicitCastExpr 0xa7bdaa8 <<scratch space>:122:1> 'typeof (pthread_cond_wait) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bda4c <col:1> 'typeof (pthread_cond_wait)':'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)' lvalue Function 0xa7b7ba0 '__gthrw_pthread_cond_wait' 'typeof (pthread_cond_wait)':'int (pthread_cond_t *restrict, pthread_mutex_t *restrict)'))
      (ImplicitCastExpr 0xa7bdae0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:846:39> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bda1c <col:39> '__gthread_cond_t *' lvalue ParmVar 0xa7bd8b0 '__cond' '__gthread_cond_t *'))
      (ImplicitCastExpr 0xa7bdaf0 <col:47> '__gthread_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bda34 <col:47> '__gthread_mutex_t *' lvalue ParmVar 0xa7bd900 '__mutex' '__gthread_mutex_t *')))))


static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *__abs_timeout) (CompoundStmt 0xa7bde30 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:852:1, line:854:1>
  (ReturnStmt 0xa7bde20 <line:853:3, col:74>
    (CallExpr 0xa7bddc8 <<scratch space>:123:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:853:74> 'int'
      (ImplicitCastExpr 0xa7bddb8 <<scratch space>:123:1> 'typeof (pthread_cond_timedwait) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bdd5c <col:1> 'typeof (pthread_cond_timedwait)':'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)' lvalue Function 0xa7b7d90 '__gthrw_pthread_cond_timedwait' 'typeof (pthread_cond_timedwait)':'int (pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)'))
      (ImplicitCastExpr 0xa7bddf0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:853:44> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bdd14 <col:44> '__gthread_cond_t *' lvalue ParmVar 0xa7bdb40 '__cond' '__gthread_cond_t *'))
      (ImplicitCastExpr 0xa7bde00 <col:52> '__gthread_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bdd2c <col:52> '__gthread_mutex_t *' lvalue ParmVar 0xa7bdb90 '__mutex' '__gthread_mutex_t *'))
      (ImplicitCastExpr 0xa7bde10 <col:61> 'const __gthread_time_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bdd44 <col:61> 'const __gthread_time_t *' lvalue ParmVar 0xa7bdbe0 '__abs_timeout' 'const __gthread_time_t *')))))


static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *__mutex) (CompoundStmt 0xa7be0a0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:859:1, line:861:1>
  (ReturnStmt 0xa7be090 <line:860:3, col:46>
    (CallExpr 0xa7be048 <col:10, col:46> 'int'
      (ImplicitCastExpr 0xa7be038 <col:10> 'int (*)(__gthread_cond_t *, __gthread_mutex_t *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bdffc <col:10> 'int (__gthread_cond_t *, __gthread_mutex_t *)' lvalue Function 0xa7bd980 '__gthread_cond_wait' 'int (__gthread_cond_t *, __gthread_mutex_t *)'))
      (ImplicitCastExpr 0xa7be070 <col:31> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bdfcc <col:31> '__gthread_cond_t *' lvalue ParmVar 0xa7bde60 '__cond' '__gthread_cond_t *'))
      (ImplicitCastExpr 0xa7be080 <col:39> '__gthread_recursive_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7bdfe4 <col:39> '__gthread_recursive_mutex_t *' lvalue ParmVar 0xa7bdeb0 '__mutex' '__gthread_recursive_mutex_t *')))))


static inline int __gthread_cond_timedwait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *__mutex, const __gthread_time_t *__abs_timeout) (CompoundStmt 0xa7be3a0 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:867:1, line:869:1>
  (ReturnStmt 0xa7be390 <line:868:3, col:66>
    (CallExpr 0xa7be338 <col:10, col:66> 'int'
      (ImplicitCastExpr 0xa7be328 <col:10> 'int (*)(__gthread_cond_t *, __gthread_mutex_t *, const __gthread_time_t *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7be2ec <col:10> 'int (__gthread_cond_t *, __gthread_mutex_t *, const __gthread_time_t *)' lvalue Function 0xa7bdc70 '__gthread_cond_timedwait' 'int (__gthread_cond_t *, __gthread_mutex_t *, const __gthread_time_t *)'))
      (ImplicitCastExpr 0xa7be360 <col:36> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7be2a4 <col:36> '__gthread_cond_t *' lvalue ParmVar 0xa7be0d0 '__cond' '__gthread_cond_t *'))
      (ImplicitCastExpr 0xa7be370 <col:44> '__gthread_recursive_mutex_t *' <LValueToRValue>
        (DeclRefExpr 0xa7be2bc <col:44> '__gthread_recursive_mutex_t *' lvalue ParmVar 0xa7be120 '__mutex' '__gthread_recursive_mutex_t *'))
      (ImplicitCastExpr 0xa7be380 <col:53> 'const __gthread_time_t *' <LValueToRValue>
        (DeclRefExpr 0xa7be2d4 <col:53> 'const __gthread_time_t *' lvalue ParmVar 0xa7be170 '__abs_timeout' 'const __gthread_time_t *')))))


static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) (CompoundStmt 0xa7be568 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:873:1, line:875:1>
  (ReturnStmt 0xa7be558 <line:874:3, col:48>
    (CallExpr 0xa7be528 <<scratch space>:124:1, /usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:874:48> 'int'
      (ImplicitCastExpr 0xa7be518 <<scratch space>:124:1> 'typeof (pthread_cond_destroy) *' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7be4e4 <col:1> 'typeof (pthread_cond_destroy)':'int (pthread_cond_t *) throw()' lvalue Function 0xa7b7fe0 '__gthrw_pthread_cond_destroy' 'typeof (pthread_cond_destroy)':'int (pthread_cond_t *) throw()'))
      (ImplicitCastExpr 0xa7be548 </usr/include/c++/4.6//i686-linux-gnu/bits/gthr-default.h:874:42> '__gthread_cond_t *' <LValueToRValue>
        (DeclRefExpr 0xa7be4cc <col:42> '__gthread_cond_t *' lvalue ParmVar 0xa7be3d0 '__cond' '__gthread_cond_t *')))))


typedef int _Atomic_word;
namespace __gnu_cxx {
    static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) (CompoundStmt 0xa7beac8 </usr/include/c++/4.6/ext/atomicity.h:48:3, col:48>
  (ReturnStmt 0xa7beab8 <col:5, col:45>
    (CallExpr 0xa7be8e8 <col:12, col:45> '_Atomic_word':'int'
      (ImplicitCastExpr 0xa7beaa8 <col:12> 'int (*)(volatile int *, int, ...)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bea74 <col:12> 'int (volatile int *, int, ...)' lvalue Function 0xa7be950 '__sync_fetch_and_add_4' 'int (volatile int *, int, ...)'))
      (ImplicitCastExpr 0xa7be910 <col:33> 'volatile _Atomic_word *' <LValueToRValue>
        (DeclRefExpr 0xa7be884 <col:33> 'volatile _Atomic_word *' lvalue ParmVar 0xa7be6b0 '__mem' 'volatile _Atomic_word *'))
      (ImplicitCastExpr 0xa7bea68 <col:40> 'int' <LValueToRValue>
        (DeclRefExpr 0xa7be89c <col:40> 'int' lvalue ParmVar 0xa7be700 '__val' 'int')))))


    static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) (CompoundStmt 0xa7bee40 </usr/include/c++/4.6/ext/atomicity.h:52:3, col:41>
  (CallExpr 0xa7beca0 <col:5, col:38> '_Atomic_word':'int'
    (ImplicitCastExpr 0xa7bee30 <col:5> 'int (*)(volatile int *, int, ...)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa7bee14 <col:5> 'int (volatile int *, int, ...)' lvalue Function 0xa7becf0 '__sync_fetch_and_add_4' 'int (volatile int *, int, ...)'))
    (ImplicitCastExpr 0xa7becc8 <col:26> 'volatile _Atomic_word *' <LValueToRValue>
      (DeclRefExpr 0xa7bec60 <col:26> 'volatile _Atomic_word *' lvalue ParmVar 0xa7beaf0 '__mem' 'volatile _Atomic_word *'))
    (ImplicitCastExpr 0xa7bee08 <col:33> 'int' <LValueToRValue>
      (DeclRefExpr 0xa7bec78 <col:33> 'int' lvalue ParmVar 0xa7beb40 '__val' 'int'))))


    static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) (CompoundStmt 0xa7bf128 </usr/include/c++/4.6/ext/atomicity.h:65:3, line:69:3>
  (DeclStmt 0xa7bf058 <line:66:5, col:35>
    0xa7befd0 "_Atomic_word __result =
      (ImplicitCastExpr 0xa7bf048 <col:29, col:30> '_Atomic_word':'int' <LValueToRValue>
        (UnaryOperator 0xa7bf030 <col:29, col:30> '_Atomic_word':'int' lvalue prefix '*'
          (ImplicitCastExpr 0xa7bf020 <col:30> '_Atomic_word *' <LValueToRValue>
            (DeclRefExpr 0xa7bf004 <col:30> '_Atomic_word *' lvalue ParmVar 0xa7bee90 '__mem' '_Atomic_word *'))))")
  (CompoundAssignOperator 0xa7bf0d0 <line:67:5, col:15> '_Atomic_word':'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    (UnaryOperator 0xa7bf090 <col:5, col:6> '_Atomic_word':'int' lvalue prefix '*'
      (ImplicitCastExpr 0xa7bf080 <col:6> '_Atomic_word *' <LValueToRValue>
        (DeclRefExpr 0xa7bf068 <col:6> '_Atomic_word *' lvalue ParmVar 0xa7bee90 '__mem' '_Atomic_word *')))
    (ImplicitCastExpr 0xa7bf0c0 <col:15> 'int' <LValueToRValue>
      (DeclRefExpr 0xa7bf0a4 <col:15> 'int' lvalue ParmVar 0xa7beee0 '__val' 'int')))
  (ReturnStmt 0xa7bf118 <line:68:5, col:12>
    (ImplicitCastExpr 0xa7bf108 <col:12> '_Atomic_word':'int' <LValueToRValue>
      (DeclRefExpr 0xa7bf0f0 <col:12> '_Atomic_word':'int' lvalue Var 0xa7befd0 '__result' '_Atomic_word':'int'))))


    static inline void __atomic_add_single(_Atomic_word *__mem, int __val) (CompoundStmt 0xa7bf340 </usr/include/c++/4.6/ext/atomicity.h:73:3, col:22>
  (CompoundAssignOperator 0xa7bf320 <col:5, col:15> '_Atomic_word':'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    (UnaryOperator 0xa7bf2e0 <col:5, col:6> '_Atomic_word':'int' lvalue prefix '*'
      (ImplicitCastExpr 0xa7bf2d0 <col:6> '_Atomic_word *' <LValueToRValue>
        (DeclRefExpr 0xa7bf2b8 <col:6> '_Atomic_word *' lvalue ParmVar 0xa7bf160 '__mem' '_Atomic_word *')))
    (ImplicitCastExpr 0xa7bf310 <col:15> 'int' <LValueToRValue>
      (DeclRefExpr 0xa7bf2f4 <col:15> 'int' lvalue ParmVar 0xa7bf1b0 '__val' 'int'))))


    static inline _Atomic_word __exchange_and_add_dispatch(_Atomic_word *__mem, int __val) (CompoundStmt 0xa7bf7d0 </usr/include/c++/4.6/ext/atomicity.h:78:3, line:87:3>
  (IfStmt 0xa7bf7b0 <line:80:5, line:83:52>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7bf548 <line:80:9, col:28> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7bf528 <col:9, col:28> 'int'
        (ImplicitCastExpr 0xa7bf518 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bf4fc <col:9> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (ReturnStmt 0xa7bf680 <line:81:7, col:45>
      (CallExpr 0xa7bf628 <col:14, col:45> '_Atomic_word':'int'
        (ImplicitCastExpr 0xa7bf618 <col:14> '_Atomic_word (*)(volatile _Atomic_word *, int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bf5bc <col:14> '_Atomic_word (volatile _Atomic_word *, int)' lvalue Function 0xa7be780 '__exchange_and_add' '_Atomic_word (volatile _Atomic_word *, int)'))
        (ImplicitCastExpr 0xa7bf660 <col:33> 'volatile _Atomic_word *' <NoOp>
          (ImplicitCastExpr 0xa7bf650 <col:33> '_Atomic_word *' <LValueToRValue>
            (DeclRefExpr 0xa7bf58c <col:33> '_Atomic_word *' lvalue ParmVar 0xa7bf370 '__mem' '_Atomic_word *')))
        (ImplicitCastExpr 0xa7bf670 <col:40> 'int' <LValueToRValue>
          (DeclRefExpr 0xa7bf5a4 <col:40> 'int' lvalue ParmVar 0xa7bf3c0 '__val' 'int'))))
    (ReturnStmt 0xa7bf7a0 <line:83:7, col:52>
      (CallExpr 0xa7bf758 <col:14, col:52> '_Atomic_word':'int'
        (ImplicitCastExpr 0xa7bf748 <col:14> '_Atomic_word (*)(_Atomic_word *, int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bf6f4 <col:14> '_Atomic_word (_Atomic_word *, int)' lvalue Function 0xa7bef60 '__exchange_and_add_single' '_Atomic_word (_Atomic_word *, int)'))
        (ImplicitCastExpr 0xa7bf780 <col:40> '_Atomic_word *' <LValueToRValue>
          (DeclRefExpr 0xa7bf6c4 <col:40> '_Atomic_word *' lvalue ParmVar 0xa7bf370 '__mem' '_Atomic_word *'))
        (ImplicitCastExpr 0xa7bf790 <col:47> 'int' <LValueToRValue>
          (DeclRefExpr 0xa7bf6dc <col:47> 'int' lvalue ParmVar 0xa7bf3c0 '__val' 'int'))))))


    static inline void __atomic_add_dispatch(_Atomic_word *__mem, int __val) (CompoundStmt 0xa7bfc40 </usr/include/c++/4.6/ext/atomicity.h:92:3, line:101:3>
  (IfStmt 0xa7bfc20 <line:94:5, line:97:39>
    <<<NULL>>>
    (ImplicitCastExpr 0xa7bf9d8 <line:94:9, col:28> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa7bf9b8 <col:9, col:28> 'int'
        (ImplicitCastExpr 0xa7bf9a8 <col:9> 'int (*)(void)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7bf98c <col:9> 'int (void)' lvalue Function 0xa7b8a90 '__gthread_active_p' 'int (void)'))))
    (CallExpr 0xa7bfab8 <line:95:7, col:32> 'void'
      (ImplicitCastExpr 0xa7bfaa8 <col:7> 'void (*)(volatile _Atomic_word *, int)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bfa4c <col:7> 'void (volatile _Atomic_word *, int)' lvalue Function 0xa7bebe0 '__atomic_add' 'void (volatile _Atomic_word *, int)'))
      (ImplicitCastExpr 0xa7bfaf0 <col:20> 'volatile _Atomic_word *' <NoOp>
        (ImplicitCastExpr 0xa7bfae0 <col:20> '_Atomic_word *' <LValueToRValue>
          (DeclRefExpr 0xa7bfa1c <col:20> '_Atomic_word *' lvalue ParmVar 0xa7bf800 '__mem' '_Atomic_word *')))
      (ImplicitCastExpr 0xa7bfb00 <col:27> 'int' <LValueToRValue>
        (DeclRefExpr 0xa7bfa34 <col:27> 'int' lvalue ParmVar 0xa7bf850 '__val' 'int')))
    (CallExpr 0xa7bfbd8 <line:97:7, col:39> 'void'
      (ImplicitCastExpr 0xa7bfbc8 <col:7> 'void (*)(_Atomic_word *, int)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7bfb74 <col:7> 'void (_Atomic_word *, int)' lvalue Function 0xa7bf250 '__atomic_add_single' 'void (_Atomic_word *, int)'))
      (ImplicitCastExpr 0xa7bfc00 <col:27> '_Atomic_word *' <LValueToRValue>
        (DeclRefExpr 0xa7bfb44 <col:27> '_Atomic_word *' lvalue ParmVar 0xa7bf800 '__mem' '_Atomic_word *'))
      (ImplicitCastExpr 0xa7bfc10 <col:34> 'int' <LValueToRValue>
        (DeclRefExpr 0xa7bfb5c <col:34> 'int' lvalue ParmVar 0xa7bf850 '__val' 'int')))))


}
extern void __sync_fetch_and_add();
extern int __sync_fetch_and_add_4(volatile int *, int, ...);
extern int __sync_fetch_and_add_4(volatile int *, int, ...);
namespace std {
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> class basic_string {
        class basic_string;
        typedef typename allocator<wchar_t>::rebind<wchar_t>::other _CharT_alloc_type;
    public:
    public:
        typedef std::char_traits<wchar_t> traits_type;
        typedef typename char_traits<wchar_t>::char_type value_type;
        typedef std::allocator<wchar_t> allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<wchar_t> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<wchar_t> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep_base {
            struct _Rep;
            typedef typename allocator<wchar_t>::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const wchar_t _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep &_S_empty_rep();
            bool _M_is_leaked() const;
            bool _M_is_shared() const;
            void _M_set_leaked();
            void _M_set_sharable();
            void _M_set_length_and_sharable(size_type __n);
            wchar_t *_M_refdata() throw();
            wchar_t *_M_grab(const std::allocator<wchar_t> &__alloc1, const std::allocator<wchar_t> &__alloc2);
            static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep *_S_create(size_type, size_type, const std::allocator<wchar_t> &);
            void _M_dispose(const std::allocator<wchar_t> &__a);
            void _M_destroy(const std::allocator<wchar_t> &) throw();
            wchar_t *_M_refcopy() throw();
            wchar_t *_M_clone(const std::allocator<wchar_t> &, size_type __res);
        };
        struct _Alloc_hider :  std::allocator<wchar_t> {
            struct _Alloc_hider;
            _Alloc_hider(wchar_t *__dat, const std::allocator<wchar_t> &__a);
            wchar_t *_M_p;
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa86c438 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'unsigned int' static_cast<size_type> <NoOp>
  (ImplicitCastExpr 0xa86c428 <col:60, col:61> 'size_type':'unsigned int' <IntegralCast>
    (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
      (IntegerLiteral 0xa7c5128 <col:61> 'int' 1))))
;
    private:
    private:
        mutable std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider _M_dataplus;
        wchar_t *_M_data() const;
        wchar_t *_M_data(wchar_t *__p);
        std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep *_M_rep() const;
        iterator _M_ibegin() const;
        iterator _M_iend() const;
        void _M_leak();
        size_type _M_check(size_type __pos, const char *__s) const;
        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const;
        size_type _M_limit(size_type __pos, size_type __off) const;
        bool _M_disjunct(const wchar_t *__s) const;
        static void _M_copy(wchar_t *__d, const wchar_t *__s, size_type __n);
        static void _M_move(wchar_t *__d, const wchar_t *__s, size_type __n);
        static void _M_assign(wchar_t *__d, size_type __n, wchar_t __c);
        template <class _Iterator> static void _S_copy_chars(wchar_t *__p, _Iterator __k1, _Iterator __k2);
        static void _S_copy_chars(wchar_t *__p, iterator __k1, iterator __k2);
        static void _S_copy_chars(wchar_t *__p, const_iterator __k1, const_iterator __k2);
        static void _S_copy_chars(wchar_t *__p, wchar_t *__k1, wchar_t *__k2);
        static void _S_copy_chars(wchar_t *__p, const wchar_t *__k1, const wchar_t *__k2);
        static int _S_compare(size_type __n1, size_type __n2);
        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep &_S_empty_rep();
    public:
    public:
        basic_string();
        basic_string(const std::allocator<wchar_t> &__a);
        basic_string(const std::basic_string<wchar_t> &__str);
        basic_string(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        basic_string(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n, const std::allocator<wchar_t> &__a);
        basic_string(const wchar_t *__s, size_type __n, const std::allocator<wchar_t> &__a);
        basic_string(const wchar_t *__s, const std::allocator<wchar_t> &__a);
        basic_string(size_type __n, wchar_t __c, const std::allocator<wchar_t> &__a);
        template <class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const std::allocator<wchar_t> &__a);
        void ~basic_string();
        std::basic_string<wchar_t> &operator=(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &operator=(const wchar_t *__s);
        std::basic_string<wchar_t> &operator=(wchar_t __c);
        iterator begin();
        const_iterator begin() const;
        iterator end();
        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
    public:
    public:
        size_type size() const;
        size_type length() const;
        size_type max_size() const;
        void resize(size_type __n, wchar_t __c);
        void resize(size_type __n);
        size_type capacity() const;
        void reserve(size_type __res_arg);
        void clear();
        bool empty() const;
        const_reference operator[](size_type __pos) const;
        reference operator[](size_type __pos);
        const_reference at(size_type __n) const;
        reference at(size_type __n);
        std::basic_string<wchar_t> &operator+=(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &operator+=(const wchar_t *__s);
        std::basic_string<wchar_t> &operator+=(wchar_t __c);
        std::basic_string<wchar_t> &append(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &append(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        std::basic_string<wchar_t> &append(const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &append(const wchar_t *__s);
        std::basic_string<wchar_t> &append(size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &append(_InputIterator __first, _InputIterator __last);
        void push_back(wchar_t __c);
        std::basic_string<wchar_t> &assign(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &assign(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        std::basic_string<wchar_t> &assign(const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &assign(const wchar_t *__s);
        std::basic_string<wchar_t> &assign(size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &assign(_InputIterator __first, _InputIterator __last);
        void insert(iterator __p, size_type __n, wchar_t __c);
        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end);
        std::basic_string<wchar_t> &insert(size_type __pos1, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &insert(size_type __pos1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n);
        std::basic_string<wchar_t> &insert(size_type __pos, const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &insert(size_type __pos, const wchar_t *__s);
        std::basic_string<wchar_t> &insert(size_type __pos, size_type __n, wchar_t __c);
        iterator insert(iterator __p, wchar_t __c);
        std::basic_string<wchar_t> &erase(size_type __pos, size_type __n);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &replace(size_type __pos1, size_type __n1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n2);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, const wchar_t *__s, size_type __n2);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, const wchar_t *__s);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, size_type __n2, wchar_t __c);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__s);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, wchar_t *__k1, wchar_t *__k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__k1, const wchar_t *__k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2);
    private:
    private:
        template <class _Integer> std::basic_string<wchar_t> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type);
        template <class _InputIterator> std::basic_string<wchar_t> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        std::basic_string<wchar_t> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, wchar_t __c);
        std::basic_string<wchar_t> &_M_replace_safe(size_type __pos1, size_type __n1, const wchar_t *__s, size_type __n2);
        template <class _InIterator> static wchar_t *_S_construct_aux(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a, std::__false_type);
        template <class _Integer> static wchar_t *_S_construct_aux(_Integer __beg, _Integer __end, const std::allocator<wchar_t> &__a, std::__true_type);
        static wchar_t *_S_construct_aux_2(size_type __req, wchar_t __c, const std::allocator<wchar_t> &__a);
        template <class _InIterator> static wchar_t *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a);
        template <class _InIterator> static wchar_t *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a, std::input_iterator_tag);
        template <class _FwdIterator> static wchar_t *_S_construct(_FwdIterator __beg, _FwdIterator __end, const std::allocator<wchar_t> &__a, std::forward_iterator_tag);
        static wchar_t *_S_construct(size_type __req, wchar_t __c, const std::allocator<wchar_t> &__a);
    public:
    public:
        size_type copy(wchar_t *__s, size_type __n, size_type __pos) const;
        void swap(std::basic_string<wchar_t> &__s);
        const wchar_t *c_str() const;
        const wchar_t *data() const;
        allocator_type get_allocator() const;
        size_type find(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find(const wchar_t *__s, size_type __pos) const;
        size_type find(wchar_t __c, size_type __pos) const;
        size_type rfind(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type rfind(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type rfind(const wchar_t *__s, size_type __pos) const;
        size_type rfind(wchar_t __c, size_type __pos) const;
        size_type find_first_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_first_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const wchar_t *__s, size_type __pos) const;
        size_type find_first_of(wchar_t __c, size_type __pos) const;
        size_type find_last_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_last_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const wchar_t *__s, size_type __pos) const;
        size_type find_last_of(wchar_t __c, size_type __pos) const;
        size_type find_first_not_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_first_not_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const wchar_t *__s, size_type __pos) const;
        size_type find_first_not_of(wchar_t __c, size_type __pos) const;
        size_type find_last_not_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_last_not_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const wchar_t *__s, size_type __pos) const;
        size_type find_last_not_of(wchar_t __c, size_type __pos) const;
        std::basic_string<wchar_t> substr(size_type __pos, size_type __n) const;
        int compare(const std::basic_string<wchar_t> &__str) const;
        int compare(size_type __pos, size_type __n, const std::basic_string<wchar_t> &__str) const;
        int compare(size_type __pos1, size_type __n1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n2) const;
        int compare(const wchar_t *__s) const;
        int compare(size_type __pos, size_type __n1, const wchar_t *__s) const;
        int compare(size_type __pos, size_type __n1, const wchar_t *__s, size_type __n2) const;
    }
template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> class basic_string {
        class basic_string;
        typedef typename allocator<char>::rebind<char>::other _CharT_alloc_type;
    public:
    public:
        typedef std::char_traits<char> traits_type;
        typedef typename char_traits<char>::char_type value_type;
        typedef std::allocator<char> allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<char> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<char> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base {
            struct _Rep;
            typedef typename allocator<char>::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const char _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep &_S_empty_rep() (CompoundStmt 0xa9cff18 </usr/include/c++/4.6/bits/basic_string.h:176:9, line:182:2>
  (DeclStmt 0xa9cfd78 <line:180:4, col:62>
    0xa9cfba0 "void *__p =
      (CXXReinterpretCastExpr 0xa9cfd60 <col:16, col:61> 'void *' reinterpret_cast<void *> <BitCast>
        (UnaryOperator 0xa9cfd48 <col:40, col:41> 'size_type (*)[]' prefix '&'
          (DeclRefExpr 0xa9cfcf0 <col:41> 'size_type []' lvalue Var 0xa867b50 '_S_empty_rep_storage' 'size_type []')))")
  (ReturnStmt 0xa9cff08 <line:181:4, col:39>
    (UnaryOperator 0xa9cfef0 <col:11, col:39> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue prefix '*'
      (CXXReinterpretCastExpr 0xa9cfed8 <col:12, col:39> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' reinterpret_cast<struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *> <BitCast>
        (ImplicitCastExpr 0xa9cfec8 <col:36> 'void *' <LValueToRValue>
          (DeclRefExpr 0xa9cfeac <col:36> 'void *' lvalue Var 0xa9cfba0 '__p' 'void *'))))))


            bool _M_is_leaked() const;
            bool _M_is_shared() const;
            void _M_set_leaked();
            void _M_set_sharable();
            void _M_set_length_and_sharable(size_type __n);
            char *_M_refdata() throw() (CompoundStmt 0xa9d7f18 </usr/include/c++/4.6/bits/basic_string.h:217:2, col:48>
  (ReturnStmt 0xa9d7f08 <col:4, col:45>
    (CXXReinterpretCastExpr 0xa9d7ef0 <col:11, col:45> 'char *' reinterpret_cast<char *> <BitCast>
      (BinaryOperator 0xa9d7ed8 <col:37, col:44> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' '+'
        (CXXThisExpr 0xa9d7ec8 <col:37> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this)
        (IntegerLiteral 0xa7e5070 <col:44> 'int' 1)))))


            char *_M_grab(const std::allocator<char> &__alloc1, const std::allocator<char> &__alloc2);
            static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep *_S_create(size_type, size_type, const std::allocator<char> &);
            void _M_dispose(const std::allocator<char> &__a) (CompoundStmt 0xa9cfb88 </usr/include/c++/4.6/bits/basic_string.h:232:2, line:246:2>
  (IfStmt 0xa9cfb68 <line:234:4, line:245:6>
    <<<NULL>>>
    (ImplicitCastExpr 0xa9cf890 <line:234:8, col:55> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa9cf848 <col:8, col:55> 'long'
        (ImplicitCastExpr 0xa9cf838 <col:8> 'long (*)(long, long)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7e537c <col:8> 'long (long, long)' lvalue Function 0xa7e4b70 '__builtin_expect' 'long (long, long)'))
        (ImplicitCastExpr 0xa9cf870 <col:25, col:47> 'long' <IntegralCast>
          (BinaryOperator 0xa9cf800 <col:25, col:47> '_Bool' '!='
            (CXXThisExpr 0xa9cf658 <col:25> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this)
            (UnaryOperator 0xa9cf7e8 <col:33, col:47> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' prefix '&'
              (CallExpr 0xa9cf7c8 <col:34, col:47> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
                (ImplicitCastExpr 0xa9cf7b8 <col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa9cf780 <col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa867cd0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)'))))))
        (ImplicitCastExpr 0xa9cf880 <col:50> 'long' <IntegralCast>
          (CXXBoolLiteralExpr 0xa7e5470 <col:50> '_Bool' false))))
    (CompoundStmt 0xa9cfb50 <line:236:6, line:245:6>
      (NullStmt 0xa7e54a8 <line:238:67>)
      (IfStmt 0xa9cfb30 <line:239:8, line:244:3>
        <<<NULL>>>
        (BinaryOperator 0xa9cf988 <line:239:12, line:240:16> '_Bool' '<='
          (CallExpr 0xa9cf960 <line:239:12, line:240:11> '_Atomic_word':'int'
            (ImplicitCastExpr 0xa9cf950 <line:239:12, col:23> '_Atomic_word (*)(_Atomic_word *, int)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa7e54d8 <col:12, col:23> '_Atomic_word (_Atomic_word *, int)' lvalue Function 0xa7bf420 '__exchange_and_add_dispatch' '_Atomic_word (_Atomic_word *, int)'))
            (UnaryOperator 0xa9cf938 <col:51, col:58> '_Atomic_word *' prefix '&'
              (MemberExpr 0xa9cf918 <col:52, col:58> '_Atomic_word':'int' lvalue ->_M_refcount 0xa867530
                (ImplicitCastExpr 0xa9cf908 <col:52> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep_base *' <UncheckedDerivedToBase (_Rep_base)>
                  (CXXThisExpr 0xa9cf8e0 <col:52> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this))))
            (UnaryOperator 0xa7e5570 <line:240:9, col:10> 'int' prefix '-'
              (IntegerLiteral 0xa7e5558 <col:10> 'int' 1)))
          (IntegerLiteral 0xa7e55b0 <col:16> 'int' 0))
        (CompoundStmt 0xa9cfb18 <line:241:3, line:244:3>
          (NullStmt 0xa7e5630 <line:242:63>)
          (CXXMemberCallExpr 0xa9cfaf8 <line:243:5, col:19> 'void'
            (MemberExpr 0xa9cfac0 <col:5> '<bound member function type>' ->_M_destroy 0xa868960
              (CXXThisExpr 0xa9cf9a0 <col:5> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this))
            (DeclRefExpr 0xa9cfae0 <col:16> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue ParmVar 0xa868840 '__a' 'const class std::allocator<char> &')))
        <<<NULL>>>))
    <<<NULL>>>))


            void _M_destroy(const std::allocator<char> &) throw();
            char *_M_refcopy() throw();
            char *_M_clone(const std::allocator<char> &, size_type __res);
        };
        struct _Alloc_hider :  std::allocator<char> {
            struct _Alloc_hider;
            _Alloc_hider(char *__dat, const std::allocator<char> &__a) : std::allocator<char>((DeclRefExpr 0xa9d7f2c </usr/include/c++/4.6/bits/basic_string.h:269:11> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue ParmVar 0xa83b1a0 '__a' 'const class std::allocator<char> &')
), _M_p((ImplicitCastExpr 0xa9d80e0 </usr/include/c++/4.6/bits/basic_string.h:269:22> 'char *' <LValueToRValue>
  (DeclRefExpr 0xa9d7fb8 <col:22> 'char *' lvalue ParmVar 0xa83b130 '__dat' 'char *'))
) (CompoundStmt 0xa7e5a80 </usr/include/c++/4.6/bits/basic_string.h:269:29, col:31>)


            char *_M_p;
            inline void ~_Alloc_hider() throw() (CompoundStmt 0xa9cedb0 </usr/include/c++/4.6/bits/basic_string.h:266:14>)


            inline _Alloc_hider(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider &) throw();
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa83ae88 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'unsigned int' static_cast<size_type> <NoOp>
  (ImplicitCastExpr 0xa83ae78 <col:60, col:61> 'size_type':'unsigned int' <IntegralCast>
    (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
      (IntegerLiteral 0xa7c5128 <col:61> 'int' 1))))
;
    private:
    private:
        mutable std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider _M_dataplus;
        char *_M_data() const (CompoundStmt 0xa9cf5f0 </usr/include/c++/4.6/bits/basic_string.h:287:7, col:35>
  (ReturnStmt 0xa9cf5e0 <col:9, col:29>
    (ImplicitCastExpr 0xa9cf5d0 <col:17, col:29> 'char *' <LValueToRValue>
      (MemberExpr 0xa9cf5b0 <col:17, col:29> 'char *' lvalue ._M_p 0xa83b410
        (MemberExpr 0xa9cf590 <col:17> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Alloc_hider' lvalue ->_M_dataplus 0xa83b440
          (CXXThisExpr 0xa9cf470 <col:17> 'const class std::basic_string<char> *' this))))))


        char *_M_data(char *__p);
        std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep *_M_rep() const (CompoundStmt 0xa9cf458 </usr/include/c++/4.6/bits/basic_string.h:295:7, col:62>
  (ReturnStmt 0xa9cf448 <col:9, col:59>
    (UnaryOperator 0xa9cf430 <col:16, col:59> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' prefix '&'
      (ParenExpr 0xa9cf418 <col:17, col:59> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
        (ArraySubscriptExpr 0xa9cf400 <col:18, col:58> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
          (ParenExpr 0xa9cf3e8 <col:18, col:54> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
            (CXXReinterpretCastExpr 0xa9cf3d0 <col:19, col:53> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' reinterpret_cast<struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *> <BitCast>
              (CXXMemberCallExpr 0xa9cf3b0 <col:44, col:52> 'char *'
                (MemberExpr 0xa9cf390 <col:44> '<bound member function type>' ->_M_data 0xa83b4c0
                  (CXXThisExpr 0xa9cf380 <col:44> 'const class std::basic_string<char> *' this)))))
          (UnaryOperator 0xa7e5cf8 <col:56, col:57> 'int' prefix '-'
            (IntegerLiteral 0xa7e5ce0 <col:57> 'int' 1)))))))


        iterator _M_ibegin() const;
        iterator _M_iend() const;
        void _M_leak();
        size_type _M_check(size_type __pos, const char *__s) const;
        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const;
        size_type _M_limit(size_type __pos, size_type __off) const;
        bool _M_disjunct(const char *__s) const;
        static void _M_copy(char *__d, const char *__s, size_type __n);
        static void _M_move(char *__d, const char *__s, size_type __n);
        static void _M_assign(char *__d, size_type __n, char __c);
        template <class _Iterator> static void _S_copy_chars(char *__p, _Iterator __k1, _Iterator __k2);
        static void _S_copy_chars(char *__p, iterator __k1, iterator __k2);
        static void _S_copy_chars(char *__p, const_iterator __k1, const_iterator __k2);
        static void _S_copy_chars(char *__p, char *__k1, char *__k2);
        static void _S_copy_chars(char *__p, const char *__k1, const char *__k2);
        static int _S_compare(size_type __n1, size_type __n2) (CompoundStmt 0xa9e9098 </usr/include/c++/4.6/bits/basic_string.h:402:7, line:411:7>
  (DeclStmt 0xa9e8e98 <line:403:2, col:58>
    0xa9e8c70 "const difference_type __d =
      (CXXFunctionalCastExpr 0xa9e8e80 <col:30, col:57> 'difference_type':'int' functional cast to difference_type <NoOp>
        (ImplicitCastExpr 0xa9e8e70 <col:46, col:53> 'difference_type':'int' <IntegralCast>
          (BinaryOperator 0xa9e8e58 <col:46, col:53> 'unsigned int' '-'
            (ImplicitCastExpr 0xa9e8e38 <col:46> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9e8e04 <col:46> 'size_type':'unsigned int' lvalue ParmVar 0xa83e160 '__n1' 'size_type':'unsigned int'))
            (ImplicitCastExpr 0xa9e8e48 <col:53> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9e8e1c <col:53> 'size_type':'unsigned int' lvalue ParmVar 0xa83e2c0 '__n2' 'size_type':'unsigned int')))))")
  (IfStmt 0xa9e9078 <line:405:2, line:410:18>
    <<<NULL>>>
    (BinaryOperator 0xa9e8f20 <line:405:6, col:46> '_Bool' '>'
      (ImplicitCastExpr 0xa9e8f00 <col:6> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa9e8ee8 <col:6> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int'))
      (ImplicitCastExpr 0xa9e8f10 <col:12, col:46> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebc80 <col:12, col:46> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (ReturnStmt 0xa9e8f48 <line:406:4, col:45>
      (ImplicitCastExpr 0xa9e8f38 <col:11, col:45> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebda0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (IfStmt 0xa9e9058 <line:407:7, line:410:18>
      <<<NULL>>>
      (BinaryOperator 0xa9e8fd0 <line:407:11, col:51> '_Bool' '<'
        (ImplicitCastExpr 0xa9e8fb0 <col:11> 'difference_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa9e8f98 <col:11> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int'))
        (ImplicitCastExpr 0xa9e8fc0 <col:17, col:51> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebe90 <col:17, col:51> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa9e8ff8 <line:408:4, col:45>
        (ImplicitCastExpr 0xa9e8fe8 <col:11, col:45> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebfb0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa9e9048 <line:410:4, col:18>
        (CXXFunctionalCastExpr 0xa9e9030 <col:11, col:18> 'int' functional cast to int <NoOp>
          (ImplicitCastExpr 0xa9e9020 <col:15> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa9e9008 <col:15> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int')))))))


        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep &_S_empty_rep() (CompoundStmt 0xa9d7e60 </usr/include/c++/4.6/bits/basic_string.h:421:7, col:38>
  (ReturnStmt 0xa9d7e50 <col:9, col:35>
    (CallExpr 0xa9d7e30 <col:16, col:35> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
      (ImplicitCastExpr 0xa9d7e20 <col:16, col:22> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d7dfc <col:16, col:22> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa867cd0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)')))))


    public:
    public:
        basic_string() : _M_dataplus((CXXMemberCallExpr 0xa9d7938 </usr/include/c++/4.6/bits/basic_string.h:433:21, col:47> 'char *'
  (MemberExpr 0xa9d7914 <col:21, col:36> '<bound member function type>' ._M_refdata 0xa868110
    (CallExpr 0xa9d78f8 <col:21, col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
      (ImplicitCastExpr 0xa9d78e8 <col:21> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d78d0 <col:21> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa83eaa0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)')))))
, (MaterializeTemporaryExpr 0xa9d7c58 </usr/include/c++/4.6/bits/basic_string.h:433:50, col:57> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue
  (ImplicitCastExpr 0xa9d7c48 <col:50, col:57> 'const class std::allocator<char>':'const class std::allocator<char>' <NoOp>
    (CXXBindTemporaryExpr 0xa9d7998 <col:50, col:57> 'class std::allocator<char>':'class std::allocator<char>' (CXXTemporary 0xa9d7990)
      (CXXTemporaryObjectExpr 0xa9d7960 <col:50, col:57> 'class std::allocator<char>':'class std::allocator<char>''void (void) throw()'))))
) (CompoundStmt 0xa7ec230 </usr/include/c++/4.6/bits/basic_string.h:433:60, col:62>)


        basic_string(const std::allocator<char> &__a);
        basic_string(const std::basic_string<char> &__str);
        basic_string(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        basic_string(const std::basic_string<char> &__str, size_type __pos, size_type __n, const std::allocator<char> &__a);
        basic_string(const char *__s, size_type __n, const std::allocator<char> &__a);
        basic_string(const char *__s, const std::allocator<char> &__a);
        basic_string(size_type __n, char __c, const std::allocator<char> &__a);
        template <class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const std::allocator<char> &__a);
        void ~basic_string() (CompoundStmt 0xa9ced00 </usr/include/c++/4.6/bits/basic_string.h:533:7, col:54>
  (ExprWithCleanups 0xa9cece0 <col:9, col:51> 'void'
    (CXXTemporary 0xa9cec60)
    (CXXMemberCallExpr 0xa9cec78 <col:9, col:51> 'void'
      (MemberExpr 0xa9cebdc <col:9, col:19> '<bound member function type>' ->_M_dispose 0xa868890
        (CXXMemberCallExpr 0xa9cebb0 <col:9, col:16> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
          (MemberExpr 0xa9ceb90 <col:9> '<bound member function type>' ->_M_rep 0xa83b790
            (ImplicitCastExpr 0xa9cebd0 <col:9> 'const class std::basic_string<char> *' <NoOp>
              (CXXThisExpr 0xa9cea70 <col:9> 'class std::basic_string<char> *' this)))))
      (MaterializeTemporaryExpr 0xa9cecd0 <col:30, col:50> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue
        (ImplicitCastExpr 0xa9cecc0 <col:30, col:50> 'const class std::allocator<char>':'const class std::allocator<char>' <NoOp>
          (CXXBindTemporaryExpr 0xa9cec68 <col:30, col:50> 'allocator_type':'class std::allocator<char>' (CXXTemporary 0xa9cec60)
            (CXXMemberCallExpr 0xa9cec30 <col:30, col:50> 'allocator_type':'class std::allocator<char>'
              (MemberExpr 0xa9cec10 <col:30, col:36> '<bound member function type>' ->get_allocator 0xa6d9670
                (ImplicitCastExpr 0xa9cec50 <col:30> 'const class std::basic_string<char> *' <NoOp>
                  (CXXThisExpr 0xa9cec00 <col:30> 'class std::basic_string<char> *' this))))))))))


        std::basic_string<char> &operator=(const std::basic_string<char> &__str) (CompoundStmt 0xa9d81d8 </usr/include/c++/4.6/bits/basic_string.h:541:7, col:37>
  (ReturnStmt 0xa9d81c8 <col:9, col:34>
    (CXXMemberCallExpr 0xa9d81a8 <col:16, col:34> 'class std::basic_string<char>' lvalue
      (MemberExpr 0xa9d8188 <col:16, col:22> '<bound member function type>' ->assign 0xa846050
        (CXXThisExpr 0xa9d8110 <col:16> 'class std::basic_string<char> *' this))
      (DeclRefExpr 0xa9d8170 <col:29> 'const class std::basic_string<char>' lvalue ParmVar 0xa841270 '__str' 'const class std::basic_string<char> &'))))


        std::basic_string<char> &operator=(const char *__s);
        std::basic_string<char> &operator=(char __c);
        iterator begin();
        const_iterator begin() const;
        iterator end();
        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
    public:
    public:
        size_type size() const (CompoundStmt 0xa9d8fb0 </usr/include/c++/4.6/bits/basic_string.h:710:7, col:37>
  (ReturnStmt 0xa9d8fa0 <col:9, col:26>
    (ImplicitCastExpr 0xa9d8f90 <col:16, col:26> 'size_type':'unsigned int' <LValueToRValue>
      (MemberExpr 0xa9d8f70 <col:16, col:26> 'size_type':'unsigned int' lvalue ->_M_length 0xa8673b0
        (ImplicitCastExpr 0xa9d8f60 <col:16, col:23> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep_base *' <UncheckedDerivedToBase (_Rep_base)>
          (CXXMemberCallExpr 0xa9d8f40 <col:16, col:23> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
            (MemberExpr 0xa9d8f20 <col:16> '<bound member function type>' ->_M_rep 0xa83b790
              (CXXThisExpr 0xa9d8e00 <col:16> 'const class std::basic_string<char> *' this))))))))


        size_type length() const;
        size_type max_size() const;
        void resize(size_type __n, char __c);
        void resize(size_type __n) (CompoundStmt 0xa9d8de8 </usr/include/c++/4.6/bits/basic_string.h:748:7, col:38>
  (CXXMemberCallExpr 0xa9d8db0 <col:9, col:35> 'void'
    (MemberExpr 0xa9d8d90 <col:9, col:15> '<bound member function type>' ->resize 0xa842cd0
      (CXXThisExpr 0xa9d8d10 <col:9> 'class std::basic_string<char> *' this))
    (ImplicitCastExpr 0xa9d8dd8 <col:22> 'size_type':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa9d8d60 <col:22> 'size_type':'unsigned int' lvalue ParmVar 0xa842e60 '__n' 'size_type':'unsigned int'))
    (CXXScalarValueInitExpr 0xa9d8d80 <col:27, col:34> 'char':'char')))


        size_type capacity() const;
        void reserve(size_type __res_arg);
        void clear();
        bool empty() const (CompoundStmt 0xa9d82c8 </usr/include/c++/4.6/bits/basic_string.h:803:7, col:35>
  (ReturnStmt 0xa9d82b8 <col:9, col:32>
    (BinaryOperator 0xa9d82a0 <col:16, col:32> '_Bool' '=='
      (CXXMemberCallExpr 0xa9d8270 <col:16, col:27> 'size_type':'unsigned int'
        (MemberExpr 0xa9d8250 <col:16, col:22> '<bound member function type>' ->size 0xa842720
          (CXXThisExpr 0xa9d8240 <col:16> 'const class std::basic_string<char> *' this)))
      (ImplicitCastExpr 0xa9d8290 <col:32> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa7ed288 <col:32> 'int' 0)))))


        const_reference operator[](size_type __pos) const;
        reference operator[](size_type __pos);
        const_reference at(size_type __n) const;
        reference at(size_type __n);
        std::basic_string<char> &operator+=(const std::basic_string<char> &__str);
        std::basic_string<char> &operator+=(const char *__s);
        std::basic_string<char> &operator+=(char __c);
        std::basic_string<char> &append(const std::basic_string<char> &__str);
        std::basic_string<char> &append(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        std::basic_string<char> &append(const char *__s, size_type __n);
        std::basic_string<char> &append(const char *__s);
        std::basic_string<char> &append(size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &append(_InputIterator __first, _InputIterator __last);
        void push_back(char __c);
        std::basic_string<char> &assign(const std::basic_string<char> &__str);
        std::basic_string<char> &assign(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        std::basic_string<char> &assign(const char *__s, size_type __n);
        std::basic_string<char> &assign(const char *__s);
        std::basic_string<char> &assign(size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &assign(_InputIterator __first, _InputIterator __last);
        void insert(iterator __p, size_type __n, char __c);
        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end);
        std::basic_string<char> &insert(size_type __pos1, const std::basic_string<char> &__str);
        std::basic_string<char> &insert(size_type __pos1, const std::basic_string<char> &__str, size_type __pos2, size_type __n);
        std::basic_string<char> &insert(size_type __pos, const char *__s, size_type __n);
        std::basic_string<char> &insert(size_type __pos, const char *__s);
        std::basic_string<char> &insert(size_type __pos, size_type __n, char __c);
        iterator insert(iterator __p, char __c);
        std::basic_string<char> &erase(size_type __pos, size_type __n);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        std::basic_string<char> &replace(size_type __pos, size_type __n, const std::basic_string<char> &__str);
        std::basic_string<char> &replace(size_type __pos1, size_type __n1, const std::basic_string<char> &__str, size_type __pos2, size_type __n2);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, const char *__s, size_type __n2);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, const char *__s);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, size_type __n2, char __c);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const std::basic_string<char> &__str);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__s, size_type __n);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__s);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, char *__k1, char *__k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__k1, const char *__k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2);
    private:
    private:
        template <class _Integer> std::basic_string<char> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type);
        template <class _InputIterator> std::basic_string<char> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        std::basic_string<char> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, char __c);
        std::basic_string<char> &_M_replace_safe(size_type __pos1, size_type __n1, const char *__s, size_type __n2);
        template <class _InIterator> static char *_S_construct_aux(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a, std::__false_type);
        template <class _Integer> static char *_S_construct_aux(_Integer __beg, _Integer __end, const std::allocator<char> &__a, std::__true_type);
        static char *_S_construct_aux_2(size_type __req, char __c, const std::allocator<char> &__a);
        template <class _InIterator> static char *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a);
        template <class _InIterator> static char *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a, std::input_iterator_tag);
        template <class _FwdIterator> static char *_S_construct(_FwdIterator __beg, _FwdIterator __end, const std::allocator<char> &__a, std::forward_iterator_tag);
        static char *_S_construct(size_type __req, char __c, const std::allocator<char> &__a);
    public:
    public:
        size_type copy(char *__s, size_type __n, size_type __pos) const;
        void swap(std::basic_string<char> &__s);
        const char *c_str() const (CompoundStmt 0xa9d87f0 </usr/include/c++/4.6/bits/basic_string.h:1766:7, col:27>
  (ReturnStmt 0xa9d87e0 <col:9, col:24>
    (ImplicitCastExpr 0xa9d87d0 <col:16, col:24> 'const char *' <NoOp>
      (CXXMemberCallExpr 0xa9d87b0 <col:16, col:24> 'char *'
        (MemberExpr 0xa9d8790 <col:16> '<bound member function type>' ->_M_data 0xa83b4c0
          (CXXThisExpr 0xa9d8780 <col:16> 'const class std::basic_string<char> *' this))))))


        const char *data() const (CompoundStmt 0xa9e8b20 </usr/include/c++/4.6/bits/basic_string.h:1776:7, col:27>
  (ReturnStmt 0xa9e8b10 <col:9, col:24>
    (ImplicitCastExpr 0xa9e8b00 <col:16, col:24> 'const char *' <NoOp>
      (CXXMemberCallExpr 0xa9e8ae0 <col:16, col:24> 'char *'
        (MemberExpr 0xa9e8ac0 <col:16> '<bound member function type>' ->_M_data 0xa83b4c0
          (CXXThisExpr 0xa9e8ab0 <col:16> 'const class std::basic_string<char> *' this))))))


        allocator_type get_allocator() const (CompoundStmt 0xa9d00f0 </usr/include/c++/4.6/bits/basic_string.h:1783:7, col:29>
  (ReturnStmt 0xa9d00e0 <col:9, col:16>
    (CXXConstructExpr 0xa9d00b8 <col:16> 'allocator_type':'class std::allocator<char>''void (const class std::allocator<char> &) throw()'
      (ImplicitCastExpr 0xa9d00a8 <col:16> 'const class std::allocator<char>' lvalue <NoOp>
        (ImplicitCastExpr 0xa9d0098 <col:16> 'class std::allocator<char>' lvalue <DerivedToBase (allocator)>
          (MemberExpr 0xa9d0050 <col:16> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Alloc_hider' lvalue ->_M_dataplus 0xa83b440
            (CXXThisExpr 0xa9cff30 <col:16> 'const class std::basic_string<char> *' this)))))))


        size_type find(const char *__s, size_type __pos, size_type __n) const;
        size_type find(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find(const char *__s, size_type __pos) const;
        size_type find(char __c, size_type __pos) const;
        size_type rfind(const std::basic_string<char> &__str, size_type __pos) const;
        size_type rfind(const char *__s, size_type __pos, size_type __n) const;
        size_type rfind(const char *__s, size_type __pos) const;
        size_type rfind(char __c, size_type __pos) const;
        size_type find_first_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_first_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const char *__s, size_type __pos) const;
        size_type find_first_of(char __c, size_type __pos) const;
        size_type find_last_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_last_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const char *__s, size_type __pos) const;
        size_type find_last_of(char __c, size_type __pos) const;
        size_type find_first_not_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_first_not_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const char *__s, size_type __pos) const;
        size_type find_first_not_of(char __c, size_type __pos) const;
        size_type find_last_not_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_last_not_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const char *__s, size_type __pos) const;
        size_type find_last_not_of(char __c, size_type __pos) const;
        std::basic_string<char> substr(size_type __pos, size_type __n) const;
        int compare(const std::basic_string<char> &__str) const (CompoundStmt 0xa9e84b0 </usr/include/c++/4.6/bits/basic_string.h:2173:7, line:2182:7>
  (DeclStmt 0xa9e74e8 <line:2174:2, col:39>
    0xa9e7460 "const size_type __size =
      (CXXMemberCallExpr 0xa9e74c8 <col:27, col:38> 'size_type':'unsigned int'
        (MemberExpr 0xa9e74a8 <col:27, col:33> '<bound member function type>' ->size 0xa842720
          (CXXThisExpr 0xa9e7498 <col:27> 'const class std::basic_string<char> *' this)))")
  (DeclStmt 0xa9e76b0 <line:2175:2, col:40>
    0xa9e7620 "const size_type __osize =
      (CXXMemberCallExpr 0xa9e7690 <col:28, col:39> 'size_type':'unsigned int'
        (MemberExpr 0xa9e766c <col:28, col:34> '<bound member function type>' .size 0xa842720
          (DeclRefExpr 0xa9e7654 <col:28> 'const class std::basic_string<char>' lvalue ParmVar 0xa865930 '__str' 'const class std::basic_string<char> &')))")
  (DeclStmt 0xa9e7920 <line:2176:2, col:51>
    0xa9e77e0 "const size_type __len =
      (ImplicitCastExpr 0xa9e7910 <col:26, col:50> 'unsigned int':'unsigned int' <LValueToRValue>
        (CallExpr 0xa9e78e8 <col:26, col:50> 'const unsigned int':'const unsigned int' lvalue
          (ImplicitCastExpr 0xa9e78d8 <col:26, col:31> 'const unsigned int &(*)(const unsigned int &, const unsigned int &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9e78b0 <col:26, col:31> 'const unsigned int &(const unsigned int &, const unsigned int &)' lvalue Function 0xa65fdc0 'min' 'const unsigned int &(const unsigned int &, const unsigned int &)' (FunctionTemplate 0xa6435c0 'min')))
          (DeclRefExpr 0xa9e7850 <col:35> 'const size_type':'const unsigned int' lvalue Var 0xa9e7460 '__size' 'const size_type':'const unsigned int')
          (DeclRefExpr 0xa9e7868 <col:43> 'const size_type':'const unsigned int' lvalue Var 0xa9e7620 '__osize' 'const size_type':'const unsigned int')))")
  (DeclStmt 0xa9e81d0 <line:2178:2, col:64>
    0xa9e7930 "int __r =
      (CallExpr 0xa9e8188 <col:12, col:63> 'int'
        (ImplicitCastExpr 0xa9e8178 <col:12, col:25> 'int (*)(const char_type *, const char_type *, size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e7bdc <col:12, col:25> 'int (const char_type *, const char_type *, size_t)' lvalue CXXMethod 0xa71eda0 'compare' 'int (const char_type *, const char_type *, size_t)'))
        (ImplicitCastExpr 0xa9e81b0 <col:33, col:41> 'const char_type *' <NoOp>
          (CXXMemberCallExpr 0xa9e80d0 <col:33, col:41> 'char *'
            (MemberExpr 0xa9e80b0 <col:33> '<bound member function type>' ->_M_data 0xa83b4c0
              (CXXThisExpr 0xa9e80a0 <col:33> 'const class std::basic_string<char> *' this))))
        (CXXMemberCallExpr 0xa9e8128 <col:44, col:55> 'const char *'
          (MemberExpr 0xa9e8104 <col:44, col:50> '<bound member function type>' .data 0xa6d9490
            (DeclRefExpr 0xa9e80ec <col:44> 'const class std::basic_string<char>' lvalue ParmVar 0xa865930 '__str' 'const class std::basic_string<char> &')))
        (ImplicitCastExpr 0xa9e81c0 <col:58> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8144 <col:58> 'const size_type':'const unsigned int' lvalue Var 0xa9e77e0 '__len' 'const size_type':'const unsigned int')))")
  (IfStmt 0xa9e8458 <line:2179:2, line:2180:36>
    <<<NULL>>>
    (UnaryOperator 0xa9e8218 <line:2179:6, col:7> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9e8208 <col:7> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa9e81f8 <col:7> 'int' <LValueToRValue>
          (DeclRefExpr 0xa9e81e0 <col:7> 'int' lvalue Var 0xa9e7930 '__r' 'int'))))
    (BinaryOperator 0xa9e8440 <line:2180:4, col:36> 'int' lvalue '='
      (DeclRefExpr 0xa9e822c <col:4> 'int' lvalue Var 0xa9e7930 '__r' 'int')
      (CallExpr 0xa9e83f8 <col:10, col:36> 'int'
        (ImplicitCastExpr 0xa9e83e8 <col:10> 'int (*)(size_type, size_type)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e8360 <col:10> 'int (size_type, size_type)' lvalue CXXMethod 0xa83e340 '_S_compare' 'int (size_type, size_type)'))
        (ImplicitCastExpr 0xa9e8420 <col:21> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8378 <col:21> 'const size_type':'const unsigned int' lvalue Var 0xa9e7460 '__size' 'const size_type':'const unsigned int'))
        (ImplicitCastExpr 0xa9e8430 <col:29> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8390 <col:29> 'const size_type':'const unsigned int' lvalue Var 0xa9e7620 '__osize' 'const size_type':'const unsigned int'))))
    <<<NULL>>>)
  (ReturnStmt 0xa9e84a0 <line:2181:2, col:9>
    (ImplicitCastExpr 0xa9e8490 <col:9> 'int' <LValueToRValue>
      (DeclRefExpr 0xa9e8474 <col:9> 'int' lvalue Var 0xa9e7930 '__r' 'int'))))


        int compare(size_type __pos, size_type __n, const std::basic_string<char> &__str) const;
        int compare(size_type __pos1, size_type __n1, const std::basic_string<char> &__str, size_type __pos2, size_type __n2) const;
        int compare(const char *__s) const;
        int compare(size_type __pos, size_type __n1, const char *__s) const;
        int compare(size_type __pos, size_type __n1, const char *__s, size_type __n2) const;
    }
template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class basic_string {
        class basic_string;
        typedef typename _Alloc::_Alloc::rebind<_CharT>::other _CharT_alloc_type;
    public:
    public:
        typedef _Traits traits_type;
        typedef typename _Traits::char_type value_type;
        typedef _Alloc allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string::_Rep_base {
            struct _Rep;
            typedef typename _Alloc::_Alloc::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const _CharT _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string::_Rep &_S_empty_rep() (CompoundStmt 0xa7e4808 </usr/include/c++/4.6/bits/basic_string.h:176:9, line:182:2>
  (DeclStmt 0xa7e4790 <line:180:4, col:62>
    0xa7e4700 "void *__p =
      (CXXReinterpretCastExpr 0xa7e4778 <col:16, col:61> 'void *' reinterpret_cast<void *> <Dependent>
        (UnaryOperator 0xa7e4750 <col:40, col:41> '<dependent type>' prefix '&'
          (DeclRefExpr 0xa7e4734 <col:41> 'size_type []' lvalue Var 0xa7c4140 '_S_empty_rep_storage' 'size_type []')))")
  (ReturnStmt 0xa7e47f8 <line:181:4, col:39>
    (UnaryOperator 0xa7e47e0 <col:11, col:39> '<dependent type>' prefix '*'
      (CXXReinterpretCastExpr 0xa7e47c8 <col:12, col:39> 'struct std::basic_string::_Rep *' reinterpret_cast<struct std::basic_string::_Rep *> <Dependent>
        (DeclRefExpr 0xa7e47a0 <col:36> 'void *' lvalue Var 0xa7e4700 '__p' 'void *')))))


            bool _M_is_leaked() const (CompoundStmt 0xa7e4910 </usr/include/c++/4.6/bits/basic_string.h:186:9, col:41>
  (ReturnStmt 0xa7e4900 <col:11, col:38>
    (CXXOperatorCallExpr 0xa7e48d8 <col:18, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa7e4898 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CXXDependentScopeMemberExpr 0xa7e4848 <col:18, col:24> '<dependent type>' lvalue
        (CXXThisExpr 0xa7e4838 <col:18> 'const struct std::basic_string::_Rep *' this))
      (IntegerLiteral 0xa7e4880 <col:38> 'int' 0))))


            bool _M_is_shared() const (CompoundStmt 0xa7e4a00 </usr/include/c++/4.6/bits/basic_string.h:190:9, col:41>
  (ReturnStmt 0xa7e49f0 <col:11, col:38>
    (CXXOperatorCallExpr 0xa7e49c8 <col:18, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa7e4988 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (CXXDependentScopeMemberExpr 0xa7e4938 <col:18, col:24> '<dependent type>' lvalue
        (CXXThisExpr 0xa7e4928 <col:18> 'const struct std::basic_string::_Rep *' this))
      (IntegerLiteral 0xa7e4970 <col:38> 'int' 0))))


            void _M_set_leaked() (CompoundStmt 0xa7e4aa8 </usr/include/c++/4.6/bits/basic_string.h:194:9, col:35>
  (BinaryOperator 0xa7e4a90 <col:11, col:32> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa7e4a28 <col:11, col:17> '<dependent type>' lvalue
      (CXXThisExpr 0xa7e4a18 <col:11> 'struct std::basic_string::_Rep *' this))
    (UnaryOperator 0xa7e4a78 <col:31, col:32> 'int' prefix '-'
      (IntegerLiteral 0xa7e4a60 <col:32> 'int' 1))))


            void _M_set_sharable() (CompoundStmt 0xa7e4b38 </usr/include/c++/4.6/bits/basic_string.h:198:9, col:34>
  (BinaryOperator 0xa7e4b20 <col:11, col:31> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa7e4ad0 <col:11, col:17> '<dependent type>' lvalue
      (CXXThisExpr 0xa7e4ac0 <col:11> 'struct std::basic_string::_Rep *' this))
    (IntegerLiteral 0xa7e4b08 <col:31> 'int' 0)))


            void _M_set_length_and_sharable(size_type __n) (CompoundStmt 0xa7e5048 </usr/include/c++/4.6/bits/basic_string.h:202:2, line:213:2>
  (IfStmt 0xa7e5028 <line:204:4, line:212:6>
    <<<NULL>>>
    (CallExpr 0xa7e4da0 <line:204:8, col:55> '<dependent type>'
      (DeclRefExpr 0xa7e4ca0 <col:8> 'long (long, long)' lvalue Function 0xa7e4b70 '__builtin_expect' 'long (long, long)')
      (CXXOperatorCallExpr 0xa7e4d68 <col:25, col:47> '<dependent type>'
        (UnresolvedLookupExpr 0xa7e4d18 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670)
        (CXXThisExpr 0xa7e4cb8 <col:25> 'struct std::basic_string::_Rep *' this)
        (UnaryOperator 0xa7e4d00 <col:33, col:47> '<dependent type>' prefix '&'
          (CallExpr 0xa7e4ce0 <col:34, col:47> '<dependent type>'
            (DeclRefExpr 0xa7e4cc8 <col:34> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c41d0 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)'))))
      (CXXBoolLiteralExpr 0xa7e4d90 <col:50> '_Bool' false))
    (CompoundStmt 0xa7e5008 <line:206:6, line:212:6>
      (CallExpr 0xa7e4e10 <line:207:8, col:30> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7e4dd8 <col:8, col:14> '<dependent type>' lvalue
          (CXXThisExpr 0xa7e4dc8 <col:8> 'struct std::basic_string::_Rep *' this)))
      (BinaryOperator 0xa7e4e90 <line:208:8, col:26> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa7e4e40 <col:8, col:14> '<dependent type>' lvalue
          (CXXThisExpr 0xa7e4e30 <col:8> 'struct std::basic_string::_Rep *' this))
        (DeclRefExpr 0xa7e4e74 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c4440 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
      (CallExpr 0xa7e4fe0 <line:209:8, col:64> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7e4ef8 <col:8, col:21> '<dependent type>' lvalue)
        (ArraySubscriptExpr 0xa7e4fb0 <col:28, col:50> '<dependent type>' lvalue
          (CallExpr 0xa7e4f78 <col:28, col:45> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa7e4f40 <col:28, col:34> '<dependent type>' lvalue
              (CXXThisExpr 0xa7e4f30 <col:28> 'struct std::basic_string::_Rep *' this)))
          (DeclRefExpr 0xa7e4f94 <col:47> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c4440 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa7e4fc4 <col:53> 'const _CharT' lvalue Var 0xa7c40b0 '_S_terminal' 'const _CharT')))
    <<<NULL>>>))


            _CharT *_M_refdata() throw() (CompoundStmt 0xa7e5128 </usr/include/c++/4.6/bits/basic_string.h:217:2, col:48>
  (ReturnStmt 0xa7e5118 <col:4, col:45>
    (CXXReinterpretCastExpr 0xa7e5100 <col:11, col:45> '_CharT *' reinterpret_cast<_CharT *> <Dependent>
      (CXXOperatorCallExpr 0xa7e50c8 <col:37, col:44> '<dependent type>'
        (UnresolvedLookupExpr 0xa7e5088 <col:42, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CXXThisExpr 0xa7e5060 <col:37> 'struct std::basic_string::_Rep *' this)
        (IntegerLiteral 0xa7e5070 <col:44> 'int' 1)))))


            _CharT *_M_grab(const _Alloc &__alloc1, const _Alloc &__alloc2) (CompoundStmt 0xa7e5368 </usr/include/c++/4.6/bits/basic_string.h:221:2, line:224:2>
  (ReturnStmt 0xa7e5358 <line:222:4, line:223:46>
    (ConditionalOperator 0xa7e5338 <line:222:11, line:223:46> '<dependent type>'
      (ParenExpr 0xa7e5268 <line:222:11, col:51> '<dependent type>'
        (BinaryOperator 0xa7e5250 <col:12, col:43> '<dependent type>' '&&'
          (UnaryOperator 0xa7e5190 <col:12, col:26> '<dependent type>' prefix '!'
            (CallExpr 0xa7e5170 <col:13, col:26> '<dependent type>'
              (MemberExpr 0xa7e5150 <col:13> '<bound member function type>' ->_M_is_leaked 0xa7c4250
                (CXXThisExpr 0xa7e5140 <col:13> 'struct std::basic_string::_Rep *' this))))
          (CXXOperatorCallExpr 0xa7e5228 <col:31, col:43> '<dependent type>'
            (UnresolvedLookupExpr 0xa7e51d8 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
            (DeclRefExpr 0xa7e51a4 <col:31> 'const _Alloc' lvalue ParmVar 0xa7c4650 '__alloc1' 'const _Alloc &')
            (DeclRefExpr 0xa7e51bc <col:43> 'const _Alloc' lvalue ParmVar 0xa7c46a0 '__alloc2' 'const _Alloc &'))))
      (CallExpr 0xa7e52b0 <line:223:14, col:25> '<dependent type>'
        (MemberExpr 0xa7e5290 <col:14> '<bound member function type>' ->_M_refcopy 0xa7c4bc0
          (CXXThisExpr 0xa7e5280 <col:14> 'struct std::basic_string::_Rep *' this)))
      (CallExpr 0xa7e5318 <col:29, col:46> '<dependent type>'
        (MemberExpr 0xa7e52e0 <col:29> '<bound member function type>' ->_M_clone 0xa7c4d10
          (CXXThisExpr 0xa7e52d0 <col:29> 'struct std::basic_string::_Rep *' this))
        (DeclRefExpr 0xa7e5300 <col:38> 'const _Alloc' lvalue ParmVar 0xa7c4650 '__alloc1' 'const _Alloc &')))))


            static std::basic_string::_Rep *_S_create(size_type, size_type, const _Alloc &);
            void _M_dispose(const _Alloc &__a) (CompoundStmt 0xa7e5718 </usr/include/c++/4.6/bits/basic_string.h:232:2, line:246:2>
  (IfStmt 0xa7e56f8 <line:234:4, line:245:6>
    <<<NULL>>>
    (CallExpr 0xa7e5480 <line:234:8, col:55> '<dependent type>'
      (DeclRefExpr 0xa7e537c <col:8> 'long (long, long)' lvalue Function 0xa7e4b70 '__builtin_expect' 'long (long, long)')
      (CXXOperatorCallExpr 0xa7e5448 <col:25, col:47> '<dependent type>'
        (UnresolvedLookupExpr 0xa7e53f8 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670)
        (CXXThisExpr 0xa7e5398 <col:25> 'struct std::basic_string::_Rep *' this)
        (UnaryOperator 0xa7e53e0 <col:33, col:47> '<dependent type>' prefix '&'
          (CallExpr 0xa7e53c0 <col:34, col:47> '<dependent type>'
            (DeclRefExpr 0xa7e53a8 <col:34> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c41d0 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)'))))
      (CXXBoolLiteralExpr 0xa7e5470 <col:50> '_Bool' false))
    (CompoundStmt 0xa7e56e0 <line:236:6, line:245:6>
      (NullStmt 0xa7e54a8 <line:238:67>)
      (IfStmt 0xa7e56c0 <line:239:8, line:244:3>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa7e5608 <line:239:12, line:240:16> '<dependent type>'
          (UnresolvedLookupExpr 0xa7e55c8 <col:13, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0)
          (CallExpr 0xa7e5588 <line:239:12, line:240:11> '<dependent type>'
            (DeclRefExpr 0xa7e54d8 <line:239:12, col:23> '_Atomic_word (_Atomic_word *, int)' lvalue Function 0xa7bf420 '__exchange_and_add_dispatch' '_Atomic_word (_Atomic_word *, int)')
            (UnaryOperator 0xa7e5540 <col:51, col:58> '<dependent type>' prefix '&'
              (CXXDependentScopeMemberExpr 0xa7e5508 <col:52, col:58> '<dependent type>' lvalue
                (CXXThisExpr 0xa7e54f8 <col:52> 'struct std::basic_string::_Rep *' this)))
            (UnaryOperator 0xa7e5570 <line:240:9, col:10> 'int' prefix '-'
              (IntegerLiteral 0xa7e5558 <col:10> 'int' 1)))
          (IntegerLiteral 0xa7e55b0 <col:16> 'int' 0))
        (CompoundStmt 0xa7e56a8 <line:241:3, line:244:3>
          (NullStmt 0xa7e5630 <line:242:63>)
          (CallExpr 0xa7e5688 <line:243:5, col:19> '<dependent type>'
            (MemberExpr 0xa7e5650 <col:5> '<bound member function type>' ->_M_destroy 0xa7c4b40
              (CXXThisExpr 0xa7e5640 <col:5> 'struct std::basic_string::_Rep *' this))
            (DeclRefExpr 0xa7e5670 <col:16> 'const _Alloc' lvalue ParmVar 0xa7c49a0 '__a' 'const _Alloc &')))
        <<<NULL>>>))
    <<<NULL>>>))


            void _M_destroy(const _Alloc &) throw();
            _CharT *_M_refcopy() throw() (CompoundStmt 0xa7e59b8 </usr/include/c++/4.6/bits/basic_string.h:253:2, line:259:2>
  (IfStmt 0xa7e5938 <line:255:4, line:257:67>
    <<<NULL>>>
    (CallExpr 0xa7e5830 <line:255:8, col:55> '<dependent type>'
      (DeclRefExpr 0xa7e572c <col:8> 'long (long, long)' lvalue Function 0xa7e4b70 '__builtin_expect' 'long (long, long)')
      (CXXOperatorCallExpr 0xa7e57f8 <col:25, col:47> '<dependent type>'
        (UnresolvedLookupExpr 0xa7e57a8 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670)
        (CXXThisExpr 0xa7e5748 <col:25> 'struct std::basic_string::_Rep *' this)
        (UnaryOperator 0xa7e5790 <col:33, col:47> '<dependent type>' prefix '&'
          (CallExpr 0xa7e5770 <col:34, col:47> '<dependent type>'
            (DeclRefExpr 0xa7e5758 <col:34> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c41d0 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)'))))
      (CXXBoolLiteralExpr 0xa7e5820 <col:50> '_Bool' false))
    (CallExpr 0xa7e5910 <line:257:13, col:67> '<dependent type>'
      (DeclRefExpr 0xa7e5878 <col:13, col:24> 'void (_Atomic_word *, int)' lvalue Function 0xa7bf8b0 '__atomic_add_dispatch' 'void (_Atomic_word *, int)')
      (UnaryOperator 0xa7e58e0 <col:46, col:53> '<dependent type>' prefix '&'
        (CXXDependentScopeMemberExpr 0xa7e58a8 <col:47, col:53> '<dependent type>' lvalue
          (CXXThisExpr 0xa7e5898 <col:47> 'struct std::basic_string::_Rep *' this)))
      (IntegerLiteral 0xa7e58f8 <col:66> 'int' 1))
    <<<NULL>>>)
  (ReturnStmt 0xa7e59a8 <line:258:4, col:22>
    (CallExpr 0xa7e5988 <col:11, col:22> '<dependent type>'
      (MemberExpr 0xa7e5968 <col:11> '<bound member function type>' ->_M_refdata 0xa7c45c0
        (CXXThisExpr 0xa7e5958 <col:11> 'struct std::basic_string::_Rep *' this)))))


            _CharT *_M_clone(const _Alloc &, size_type __res = (IntegerLiteral 0xa7e43f0 </usr/include/c++/4.6/bits/basic_string.h:262:44> 'int' 0)
);
        };
        struct _Alloc_hider :  _Alloc {
            struct _Alloc_hider;
            _Alloc_hider(_CharT *__dat, const _Alloc &__a) : _Alloc((DeclRefExpr 0xa7e59d0 </usr/include/c++/4.6/bits/basic_string.h:269:11> 'const _Alloc' lvalue ParmVar 0xa7c4f40 '__a' 'const _Alloc &')
), _M_p((DeclRefExpr 0xa7e5a28 </usr/include/c++/4.6/bits/basic_string.h:269:22> '_CharT *' lvalue ParmVar 0xa7c4ef0 '__dat' '_CharT *')
) (CompoundStmt 0xa7e5a80 </usr/include/c++/4.6/bits/basic_string.h:269:29, col:31>)


            _CharT *_M_p;
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa7c5160 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'typename _CharT_alloc_type::size_type' static_cast<size_type> <Dependent>
  (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
    (IntegerLiteral 0xa7c5128 <col:61> 'int' 1)))
;
    private:
    private:
        mutable std::basic_string::_Alloc_hider _M_dataplus;
        _CharT *_M_data() const (CompoundStmt 0xa7e5b40 </usr/include/c++/4.6/bits/basic_string.h:287:7, col:35>
  (ReturnStmt 0xa7e5b30 <col:9, col:29>
    (CXXDependentScopeMemberExpr 0xa7e5af8 <col:17, col:29> '<dependent type>' lvalue
      (MemberExpr 0xa7e5ad4 <col:17> 'struct std::basic_string::_Alloc_hider' lvalue ->_M_dataplus 0xa7c51d0
        (CXXThisExpr 0xa7e5aa8 <col:17> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))))


        _CharT *_M_data(_CharT *__p) (CompoundStmt 0xa7e5c18 </usr/include/c++/4.6/bits/basic_string.h:291:7, col:42>
  (ReturnStmt 0xa7e5c08 <col:9, col:39>
    (ParenExpr 0xa7e5bf0 <col:16, col:39> '<dependent type>'
      (BinaryOperator 0xa7e5bd8 <col:17, col:36> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa7e5b88 <col:17, col:29> '<dependent type>' lvalue
          (MemberExpr 0xa7e5b68 <col:17> 'struct std::basic_string::_Alloc_hider' lvalue ->_M_dataplus 0xa7c51d0
            (CXXThisExpr 0xa7e5b58 <col:17> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
        (DeclRefExpr 0xa7e5bbc <col:36> '_CharT *' lvalue ParmVar 0xa7c52c0 '__p' '_CharT *')))))


        std::basic_string::_Rep *_M_rep() const (CompoundStmt 0xa7e5d68 </usr/include/c++/4.6/bits/basic_string.h:295:7, col:62>
  (ReturnStmt 0xa7e5d58 <col:9, col:59>
    (UnaryOperator 0xa7e5d40 <col:16, col:59> '<dependent type>' prefix '&'
      (ParenExpr 0xa7e5d28 <col:17, col:59> '<dependent type>' lvalue
        (ArraySubscriptExpr 0xa7e5d10 <col:18, col:58> '<dependent type>' lvalue
          (ParenExpr 0xa7e5cc8 <col:18, col:54> 'struct std::basic_string::_Rep *'
            (CXXReinterpretCastExpr 0xa7e5cb0 <col:19, col:53> 'struct std::basic_string::_Rep *' reinterpret_cast<struct std::basic_string::_Rep *> <Dependent>
              (CallExpr 0xa7e5c80 <col:44, col:52> '<dependent type>'
                (UnresolvedMemberExpr 0xa7e5c40 <col:44> '<bound member function type>' lvalue))))
          (UnaryOperator 0xa7e5cf8 <col:56, col:57> 'int' prefix '-'
            (IntegerLiteral 0xa7e5ce0 <col:57> 'int' 1)))))))


        iterator _M_ibegin() const (CompoundStmt 0xa7e5e28 </usr/include/c++/4.6/bits/basic_string.h:301:7, col:37>
  (ReturnStmt 0xa7e5e18 <col:9, col:34>
    (CXXUnresolvedConstructExpr 0xa7e5df8 <col:16, col:34> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CallExpr 0xa7e5dd8 <col:25, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa7e5d98 <col:25> '<bound member function type>' lvalue)))))


        iterator _M_iend() const (CompoundStmt 0xa7e5fb8 </usr/include/c++/4.6/bits/basic_string.h:305:7, col:52>
  (ReturnStmt 0xa7e5fa8 <col:9, col:49>
    (CXXUnresolvedConstructExpr 0xa7e5f88 <col:16, col:49> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CXXOperatorCallExpr 0xa7e5f60 <col:25, col:48> '<dependent type>'
        (UnresolvedLookupExpr 0xa7e5f20 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7e5e98 <col:25, col:33> '<dependent type>'
          (UnresolvedMemberExpr 0xa7e5e58 <col:25> '<bound member function type>' lvalue))
        (CallExpr 0xa7e5f00 <col:37, col:48> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7e5ec8 <col:37, col:43> '<dependent type>' lvalue
            (CXXThisExpr 0xa7e5eb8 <col:37> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))))))


        void _M_leak() (CompoundStmt 0xa7e6100 </usr/include/c++/4.6/bits/basic_string.h:309:7, line:312:7>
  (IfStmt 0xa7e60e0 <line:310:2, line:311:17>
    <<<NULL>>>
    (UnaryOperator 0xa7e6078 <line:310:6, col:30> '<dependent type>' prefix '!'
      (CallExpr 0xa7e6058 <col:7, col:30> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7e6020 <col:7, col:17> '<dependent type>' lvalue
          (CallExpr 0xa7e6000 <col:7, col:14> '<dependent type>'
            (MemberExpr 0xa7e5fe0 <col:7> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa7e5fd0 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (CallExpr 0xa7e60c0 <line:311:4, col:17> '<dependent type>'
      (MemberExpr 0xa7e60a0 <col:4> '<bound member function type>' ->_M_leak_hard 0xa7c6da0
        (CXXThisExpr 0xa7e6090 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
    <<<NULL>>>))


        size_type _M_check(size_type __pos, const char *__s) const (CompoundStmt 0xa7ea0f8 </usr/include/c++/4.6/bits/basic_string.h:316:7, line:320:7>
  (IfStmt 0xa7e62c0 <line:317:2, line:318:33>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7e61d8 <line:317:6, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa7e6198 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa7e6114 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5620 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7e6178 <col:14, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7e6140 <col:14, col:20> '<dependent type>' lvalue
          (CXXThisExpr 0xa7e6130 <col:14> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))
    (CallExpr 0xa7e6290 <line:318:4, col:33> 'void'
      (ImplicitCastExpr 0xa7e6280 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7e6264 <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa7e62b0 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <LValueToRValue>
        (ParenExpr 0xa7e6250 <col:24, col:30> 'const char *' lvalue
          (DeclRefExpr 0xa7e6234 </usr/include/c++/4.6/bits/basic_string.h:318:29> 'const char *' lvalue ParmVar 0xa7c5670 '__s' 'const char *'))))
    <<<NULL>>>)
  (ReturnStmt 0xa7ea0e8 <line:319:2, col:9>
    (DeclRefExpr 0xa7ea0d0 <col:9> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5620 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')))


        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const (CompoundStmt 0xa7ea440 </usr/include/c++/4.6/bits/basic_string.h:324:7, line:327:7>
  (IfStmt 0xa7ea420 <line:325:2, line:326:33>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7ea338 <line:325:6, col:49> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ea2f8 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CXXOperatorCallExpr 0xa7ea2b8 <col:6, col:45> '<dependent type>'
        (UnresolvedLookupExpr 0xa7ea278 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CallExpr 0xa7ea158 <col:6, col:21> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7ea120 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa7ea110 <col:6> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))
        (ParenExpr 0xa7ea260 <col:25, col:45> '<dependent type>'
          (CXXOperatorCallExpr 0xa7ea238 <col:26, col:41> '<dependent type>'
            (UnresolvedLookupExpr 0xa7ea1f8 <col:39, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (CallExpr 0xa7ea1c0 <col:26, col:37> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa7ea188 <col:26, col:32> '<dependent type>' lvalue
                (CXXThisExpr 0xa7ea178 <col:26> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))
            (DeclRefExpr 0xa7ea1dc <col:41> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5780 '__n1' 'size_type':'typename _CharT_alloc_type::size_type'))))
      (DeclRefExpr 0xa7ea2dc <col:49> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c57c0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
    (CallExpr 0xa7ea3f0 <line:326:4, col:33> 'void'
      (ImplicitCastExpr 0xa7ea3e0 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ea3c4 <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa7ea410 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <LValueToRValue>
        (ParenExpr 0xa7ea3b0 <col:24, col:30> 'const char *' lvalue
          (DeclRefExpr 0xa7ea394 </usr/include/c++/4.6/bits/basic_string.h:326:29> 'const char *' lvalue ParmVar 0xa7c5810 '__s' 'const char *'))))
    <<<NULL>>>))


        size_type _M_limit(size_type __pos, size_type __off) const (CompoundStmt 0xa7ea768 </usr/include/c++/4.6/bits/basic_string.h:332:7, line:335:7>
  (DeclStmt 0xa7ea600 <line:333:2, col:54>
    0xa7ea460 "const bool __testoff =
      (CXXOperatorCallExpr 0xa7ea5d8 <col:26, col:49> '<dependent type>'
        (UnresolvedLookupExpr 0xa7ea598 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
        (DeclRefExpr 0xa7ea494 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5990 '__off' 'size_type':'typename _CharT_alloc_type::size_type')
        (CXXOperatorCallExpr 0xa7ea570 <col:34, col:49> '<dependent type>'
          (UnresolvedLookupExpr 0xa7ea530 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (CallExpr 0xa7ea4f8 <col:34, col:45> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa7ea4c0 <col:34, col:40> '<dependent type>' lvalue
              (CXXThisExpr 0xa7ea4b0 <col:34> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))
          (DeclRefExpr 0xa7ea514 <col:49> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5950 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')))")
  (ReturnStmt 0xa7ea758 <line:334:2, col:44>
    (ConditionalOperator 0xa7ea738 <col:9, col:44> '<dependent type>'
      (ImplicitCastExpr 0xa7ea728 <col:9> '_Bool' <LValueToRValue>
        (DeclRefExpr 0xa7ea610 <col:9> 'const _Bool' lvalue Var 0xa7ea460 '__testoff' 'const _Bool'))
      (DeclRefExpr 0xa7ea628 <col:21> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5990 '__off' 'size_type':'typename _CharT_alloc_type::size_type')
      (CXXOperatorCallExpr 0xa7ea700 <col:29, col:44> '<dependent type>'
        (UnresolvedLookupExpr 0xa7ea6c0 <col:42, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CallExpr 0xa7ea688 <col:29, col:40> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7ea650 <col:29, col:35> '<dependent type>' lvalue
            (CXXThisExpr 0xa7ea640 <col:29> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))
        (DeclRefExpr 0xa7ea6a4 <col:44> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5950 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')))))


        bool _M_disjunct(const _CharT *__s) const (CompoundStmt 0xa7eabb8 </usr/include/c++/4.6/bits/basic_string.h:340:7, line:343:7>
  (ReturnStmt 0xa7eaba8 <line:341:2, line:342:58>
    (ParenExpr 0xa7eab90 <line:341:9, line:342:58> '<dependent type>'
      (BinaryOperator 0xa7eab78 <line:341:10, line:342:57> '<dependent type>' '||'
        (CallExpr 0xa7ea900 <line:341:10, col:46> '<dependent type>'
          (CXXUnresolvedConstructExpr 0xa7ea860 <col:10, col:30> 'less<const _CharT *>')
          (DeclRefExpr 0xa7ea878 <col:32> 'const _CharT *' lvalue ParmVar 0xa7c5ad0 '__s' 'const _CharT *')
          (CallExpr 0xa7ea8e0 <col:37, col:45> '<dependent type>'
            (UnresolvedMemberExpr 0xa7ea8a0 <col:37> '<bound member function type>' lvalue)))
        (CallExpr 0xa7eab50 <line:342:6, col:57> '<dependent type>'
          (CXXUnresolvedConstructExpr 0xa7ea9e0 <col:6, col:26> 'less<const _CharT *>')
          (CXXOperatorCallExpr 0xa7eab10 <col:28, col:51> '<dependent type>'
            (UnresolvedLookupExpr 0xa7eaad0 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
            (CallExpr 0xa7eaa48 <col:28, col:36> '<dependent type>'
              (UnresolvedMemberExpr 0xa7eaa08 <col:28> '<bound member function type>' lvalue))
            (CallExpr 0xa7eaab0 <col:40, col:51> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa7eaa78 <col:40, col:46> '<dependent type>' lvalue
                (CXXThisExpr 0xa7eaa68 <col:40> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))
          (DeclRefExpr 0xa7eab34 <col:54> 'const _CharT *' lvalue ParmVar 0xa7c5ad0 '__s' 'const _CharT *'))))))


        static void _M_copy(_CharT *__d, const _CharT *__s, size_type __n) (CompoundStmt 0xa7eae30 </usr/include/c++/4.6/bits/basic_string.h:349:7, line:354:7>
  (IfStmt 0xa7eae10 <line:350:2, line:353:35>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7eac50 <line:350:6, col:13> '<dependent type>'
      (UnresolvedLookupExpr 0xa7eac00 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (DeclRefExpr 0xa7eabcc <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5c80 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (IntegerLiteral 0xa7eabe8 <col:13> 'int' 1))
    (CallExpr 0xa7ead28 <line:351:4, col:34> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7eaca0 <col:4, col:17> '<dependent type>' lvalue)
      (UnaryOperator 0xa7eace0 <col:24, col:25> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eacc4 <col:25> '_CharT *' lvalue ParmVar 0xa7c5bf0 '__d' '_CharT *'))
      (UnaryOperator 0xa7ead10 <col:30, col:31> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eacf4 <col:31> 'const _CharT *' lvalue ParmVar 0xa7c5c40 '__s' 'const _CharT *')))
    (CallExpr 0xa7eade8 <line:353:4, col:35> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7ead78 <col:4, col:17> '<dependent type>' lvalue)
      (DeclRefExpr 0xa7ead9c <col:22> '_CharT *' lvalue ParmVar 0xa7c5bf0 '__d' '_CharT *')
      (DeclRefExpr 0xa7eadb4 <col:27> 'const _CharT *' lvalue ParmVar 0xa7c5c40 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7eadcc <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5c80 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))))


        static void _M_move(_CharT *__d, const _CharT *__s, size_type __n) (CompoundStmt 0xa7eb0a8 </usr/include/c++/4.6/bits/basic_string.h:358:7, line:363:7>
  (IfStmt 0xa7eb088 <line:359:2, line:362:35>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7eaec8 <line:359:6, col:13> '<dependent type>'
      (UnresolvedLookupExpr 0xa7eae78 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (DeclRefExpr 0xa7eae44 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5e50 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (IntegerLiteral 0xa7eae60 <col:13> 'int' 1))
    (CallExpr 0xa7eafa0 <line:360:4, col:34> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7eaf18 <col:4, col:17> '<dependent type>' lvalue)
      (UnaryOperator 0xa7eaf58 <col:24, col:25> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eaf3c <col:25> '_CharT *' lvalue ParmVar 0xa7c5dc0 '__d' '_CharT *'))
      (UnaryOperator 0xa7eaf88 <col:30, col:31> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eaf6c <col:31> 'const _CharT *' lvalue ParmVar 0xa7c5e10 '__s' 'const _CharT *')))
    (CallExpr 0xa7eb060 <line:362:4, col:35> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7eaff0 <col:4, col:17> '<dependent type>' lvalue)
      (DeclRefExpr 0xa7eb014 <col:22> '_CharT *' lvalue ParmVar 0xa7c5dc0 '__d' '_CharT *')
      (DeclRefExpr 0xa7eb02c <col:27> 'const _CharT *' lvalue ParmVar 0xa7c5e10 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7eb044 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5e50 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))))


        static void _M_assign(_CharT *__d, size_type __n, _CharT __c) (CompoundStmt 0xa7eb308 </usr/include/c++/4.6/bits/basic_string.h:367:7, line:372:7>
  (IfStmt 0xa7eb2e8 <line:368:2, line:371:37>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7eb140 <line:368:6, col:13> '<dependent type>'
      (UnresolvedLookupExpr 0xa7eb0f0 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (DeclRefExpr 0xa7eb0bc <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5f70 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (IntegerLiteral 0xa7eb0d8 <col:13> 'int' 1))
    (CallExpr 0xa7eb200 <line:369:4, col:33> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7eb190 <col:4, col:17> '<dependent type>' lvalue)
      (UnaryOperator 0xa7eb1d0 <col:24, col:25> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eb1b4 <col:25> '_CharT *' lvalue ParmVar 0xa7c5f30 '__d' '_CharT *'))
      (DeclRefExpr 0xa7eb1e4 <col:30> '_CharT' lvalue ParmVar 0xa7c5fb0 '__c' '_CharT'))
    (CallExpr 0xa7eb2c0 <line:371:4, col:37> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7eb250 <col:4, col:17> '<dependent type>' lvalue)
      (DeclRefExpr 0xa7eb274 <col:24> '_CharT *' lvalue ParmVar 0xa7c5f30 '__d' '_CharT *')
      (DeclRefExpr 0xa7eb28c <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c5f70 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7eb2a4 <col:34> '_CharT' lvalue ParmVar 0xa7c5fb0 '__c' '_CharT'))))


        template <class _Iterator> static void _S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) (CompoundStmt 0xa7eb540 </usr/include/c++/4.6/bits/basic_string.h:379:9, line:382:2>
  (ForStmt 0xa7eb518 <line:380:4, line:381:37>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7eb3a0 <line:380:11, col:19> '<dependent type>'
      (UnresolvedLookupExpr 0xa7eb350 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670)
      (DeclRefExpr 0xa7eb31c <col:11> '_Iterator' lvalue ParmVar 0xa7c6190 '__k1' '_Iterator')
      (DeclRefExpr 0xa7eb334 <col:19> '_Iterator' lvalue ParmVar 0xa7c61d0 '__k2' '_Iterator'))
    (BinaryOperator 0xa7eb428 <col:25, col:35> '<dependent type>' ','
      (UnaryOperator 0xa7eb3e0 <col:25, col:27> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa7eb3c4 <col:27> '_Iterator' lvalue ParmVar 0xa7c6190 '__k1' '_Iterator'))
      (UnaryOperator 0xa7eb410 <col:33, col:35> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa7eb3f4 <col:35> '_CharT *' lvalue ParmVar 0xa7c6150 '__p' '_CharT *')))
    (CallExpr 0xa7eb4f0 <line:381:6, col:37> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7eb468 <col:6, col:19> '<dependent type>' lvalue)
      (UnaryOperator 0xa7eb4a8 <col:26, col:27> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eb48c <col:27> '_CharT *' lvalue ParmVar 0xa7c6150 '__p' '_CharT *'))
      (UnaryOperator 0xa7eb4d8 <col:32, col:33> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa7eb4bc <col:33> '_Iterator' lvalue ParmVar 0xa7c6190 '__k1' '_Iterator')))))

;
        static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) (CompoundStmt 0xa7eb6c0 </usr/include/c++/4.6/bits/basic_string.h:386:7, col:55>
  (CallExpr 0xa7eb698 <col:9, col:52> '<dependent type>'
    (UnresolvedLookupExpr 0xa7eb558 <col:9> '<dependent type>' lvalue (no ADL) = '1' 0xa7c6a00 0xa7c6820 0xa7c6640 0xa7c6480 0xa7c62f0)
    (DeclRefExpr 0xa7eb59c <col:23> '_CharT *' lvalue ParmVar 0xa7c6340 '__p' '_CharT *')
    (CallExpr 0xa7eb608 <col:28, col:38> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7eb5d0 <col:28, col:33> '<dependent type>' lvalue
        (DeclRefExpr 0xa7eb5b4 <col:28> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7c6380 '__k1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')))
    (CallExpr 0xa7eb678 <col:41, col:51> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7eb640 <col:41, col:46> '<dependent type>' lvalue
        (DeclRefExpr 0xa7eb624 <col:41> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7c63c0 '__k2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')))))


        static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) (CompoundStmt 0xa7eb840 </usr/include/c++/4.6/bits/basic_string.h:390:7, col:55>
  (CallExpr 0xa7eb818 <col:9, col:52> '<dependent type>'
    (UnresolvedLookupExpr 0xa7eb6d8 <col:9> '<dependent type>' lvalue (no ADL) = '1' 0xa7c6a00 0xa7c6820 0xa7c6640 0xa7c6480 0xa7c62f0)
    (DeclRefExpr 0xa7eb71c <col:23> '_CharT *' lvalue ParmVar 0xa7c6500 '__p' '_CharT *')
    (CallExpr 0xa7eb788 <col:28, col:38> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7eb750 <col:28, col:33> '<dependent type>' lvalue
        (DeclRefExpr 0xa7eb734 <col:28> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7c6540 '__k1' 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >')))
    (CallExpr 0xa7eb7f8 <col:41, col:51> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7eb7c0 <col:41, col:46> '<dependent type>' lvalue
        (DeclRefExpr 0xa7eb7a4 <col:41> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7c6580 '__k2' 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >')))))


        static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) (CompoundStmt 0xa7eb960 </usr/include/c++/4.6/bits/basic_string.h:394:7, col:42>
  (CallExpr 0xa7eb938 <col:9, col:39> '<dependent type>'
    (DeclRefExpr 0xa7eb854 <col:9> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
    (DeclRefExpr 0xa7eb86c <col:17> '_CharT *' lvalue ParmVar 0xa7c66c0 '__p' '_CharT *')
    (DeclRefExpr 0xa7eb884 <col:22> '_CharT *' lvalue ParmVar 0xa7c6710 '__k1' '_CharT *')
    (CXXOperatorCallExpr 0xa7eb910 <col:28, col:35> '<dependent type>'
      (UnresolvedLookupExpr 0xa7eb8d0 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (DeclRefExpr 0xa7eb89c <col:28> '_CharT *' lvalue ParmVar 0xa7c6760 '__k2' '_CharT *')
      (DeclRefExpr 0xa7eb8b4 <col:35> '_CharT *' lvalue ParmVar 0xa7c6710 '__k1' '_CharT *'))))


        static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) (CompoundStmt 0xa7eba80 </usr/include/c++/4.6/bits/basic_string.h:398:7, col:42>
  (CallExpr 0xa7eba58 <col:9, col:39> '<dependent type>'
    (DeclRefExpr 0xa7eb974 <col:9> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
    (DeclRefExpr 0xa7eb98c <col:17> '_CharT *' lvalue ParmVar 0xa7c68a0 '__p' '_CharT *')
    (DeclRefExpr 0xa7eb9a4 <col:22> 'const _CharT *' lvalue ParmVar 0xa7c68f0 '__k1' 'const _CharT *')
    (CXXOperatorCallExpr 0xa7eba30 <col:28, col:35> '<dependent type>'
      (UnresolvedLookupExpr 0xa7eb9f0 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (DeclRefExpr 0xa7eb9bc <col:28> 'const _CharT *' lvalue ParmVar 0xa7c6940 '__k2' 'const _CharT *')
      (DeclRefExpr 0xa7eb9d4 <col:35> 'const _CharT *' lvalue ParmVar 0xa7c68f0 '__k1' 'const _CharT *'))))


        static int _S_compare(size_type __n1, size_type __n2) (CompoundStmt 0xa7ec088 </usr/include/c++/4.6/bits/basic_string.h:402:7, line:411:7>
  (DeclStmt 0xa7ebbb8 <line:403:2, col:58>
    0xa7ebac0 "const difference_type __d =
      (CXXUnresolvedConstructExpr 0xa7ebb98 <col:30, col:57> 'difference_type':'typename _CharT_alloc_type::difference_type'
        (CXXOperatorCallExpr 0xa7ebb70 <col:46, col:53> '<dependent type>'
          (UnresolvedLookupExpr 0xa7ebb30 <col:51, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (DeclRefExpr 0xa7ebb00 <col:46> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c6a80 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa7ebb18 <col:53> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7c6ac0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))")
  (IfStmt 0xa7ec068 <line:405:2, line:410:18>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7ebce0 <line:405:6, col:46> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ebca0 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (DeclRefExpr 0xa7ebbc8 <col:6> 'const difference_type':'const typename _CharT_alloc_type::difference_type' lvalue Var 0xa7ebac0 '__d' 'const difference_type':'const typename _CharT_alloc_type::difference_type')
      (DeclRefExpr 0xa7ebc80 <col:12, col:46> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int'))
    (ReturnStmt 0xa7ebdd0 <line:406:4, col:45>
      (ImplicitCastExpr 0xa7ebdc0 <col:11, col:45> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebda0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (IfStmt 0xa7ec048 <line:407:7, line:410:18>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa7ebef0 <line:407:11, col:51> '<dependent type>'
        (UnresolvedLookupExpr 0xa7ebeb0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
        (DeclRefExpr 0xa7ebde0 <col:11> 'const difference_type':'const typename _CharT_alloc_type::difference_type' lvalue Var 0xa7ebac0 '__d' 'const difference_type':'const typename _CharT_alloc_type::difference_type')
        (DeclRefExpr 0xa7ebe90 <col:17, col:51> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int'))
      (ReturnStmt 0xa7ebfe0 <line:408:4, col:45>
        (ImplicitCastExpr 0xa7ebfd0 <col:11, col:45> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebfb0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa7ec038 <line:410:4, col:18>
        (CXXUnresolvedConstructExpr 0xa7ec018 <col:11, col:18> 'int'
          (DeclRefExpr 0xa7ebffc <col:15> 'const difference_type':'const typename _CharT_alloc_type::difference_type' lvalue Var 0xa7ebac0 '__d' 'const difference_type':'const typename _CharT_alloc_type::difference_type'))))))


        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string::_Rep &_S_empty_rep() (CompoundStmt 0xa7ec120 </usr/include/c++/4.6/bits/basic_string.h:421:7, col:38>
  (ReturnStmt 0xa7ec110 <col:9, col:35>
    (CallExpr 0xa7ec0f0 <col:16, col:35> '<dependent type>'
      (DependentScopeDeclRefExpr 0xa7ec0c8 <col:16, col:22> '<dependent type>' lvalue))))


    public:
    public:
        basic_string<_CharT, _Traits, _Alloc>() : _M_dataplus((CallExpr 0xa7ec1a8 </usr/include/c++/4.6/bits/basic_string.h:433:21, col:47> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa7ec170 <col:21, col:36> '<dependent type>' lvalue
    (CallExpr 0xa7ec150 <col:21, col:34> '<dependent type>'
      (DeclRefExpr 0xa7ec134 <col:21> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c6e20 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)'))))
, (CXXUnresolvedConstructExpr 0xa7ec1d0 </usr/include/c++/4.6/bits/basic_string.h:433:50, col:57> '_Alloc')
) (CompoundStmt 0xa7ec230 </usr/include/c++/4.6/bits/basic_string.h:433:60, col:62>)


        basic_string<_CharT, _Traits, _Alloc>(const _Alloc &__a);
        basic_string<_CharT, _Traits, _Alloc>(const basic_string<_CharT, _Traits, _Alloc> &__str);
        basic_string<_CharT, _Traits, _Alloc>(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n = (DeclRefExpr 0xa7e4408 </usr/include/c++/4.6/bits/basic_string.h:457:22> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
);
        basic_string<_CharT, _Traits, _Alloc>(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n, const _Alloc &__a);
        basic_string<_CharT, _Traits, _Alloc>(const _CharT *__s, size_type __n, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4428 </usr/include/c++/4.6/bits/basic_string.h:478:26, col:33> '_Alloc')
);
        basic_string<_CharT, _Traits, _Alloc>(const _CharT *__s, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4448 </usr/include/c++/4.6/bits/basic_string.h:484:59, col:66> '_Alloc')
);
        basic_string<_CharT, _Traits, _Alloc>(size_type __n, _CharT __c, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4468 </usr/include/c++/4.6/bits/basic_string.h:491:67, col:74> '_Alloc')
);
        template <class _InputIterator> basic_string<_CharT, _Traits, _Alloc>(_InputIterator __beg, _InputIterator __end, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4488 </usr/include/c++/4.6/bits/basic_string.h:527:28, col:35> '_Alloc')
);
        void ~basic_string<_CharT, _Traits, _Alloc>() (CompoundStmt 0xa7ec350 </usr/include/c++/4.6/bits/basic_string.h:533:7, col:54>
  (CallExpr 0xa7ec330 <col:9, col:51> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7ec290 <col:9, col:19> '<dependent type>' lvalue
      (CallExpr 0xa7ec270 <col:9, col:16> '<dependent type>'
        (MemberExpr 0xa7ec250 <col:9> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7ec240 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
    (CallExpr 0xa7ec310 <col:30, col:50> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7ec2d8 <col:30, col:36> '<dependent type>' lvalue
        (CXXThisExpr 0xa7ec2c8 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))


        basic_string<_CharT, _Traits, _Alloc> &operator=(const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa7ec3f8 </usr/include/c++/4.6/bits/basic_string.h:541:7, col:37>
  (ReturnStmt 0xa7ec3e8 <col:9, col:34>
    (CallExpr 0xa7ec3c8 <col:16, col:34> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7ec378 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7ec368 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7ec3ac <col:29> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7ce710 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))


        basic_string<_CharT, _Traits, _Alloc> &operator=(const _CharT *__s) (CompoundStmt 0xa7ec4a0 </usr/include/c++/4.6/bits/basic_string.h:549:7, col:35>
  (ReturnStmt 0xa7ec490 <col:9, col:32>
    (CallExpr 0xa7ec470 <col:16, col:32> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7ec420 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7ec410 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7ec454 <col:29> 'const _CharT *' lvalue ParmVar 0xa7ce830 '__s' 'const _CharT *'))))


        basic_string<_CharT, _Traits, _Alloc> &operator=(_CharT __c) (CompoundStmt 0xa7ec590 </usr/include/c++/4.6/bits/basic_string.h:560:7, line:563:7>
  (CallExpr 0xa7ec530 <line:561:2, col:21> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7ec4c8 <col:2, col:8> '<dependent type>' lvalue
      (CXXThisExpr 0xa7ec4b8 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (IntegerLiteral 0xa7ec500 <col:15> 'int' 1)
    (DeclRefExpr 0xa7ec518 <col:18> '_CharT' lvalue ParmVar 0xa7ce940 '__c' '_CharT'))
  (ReturnStmt 0xa7ec580 <line:562:2, col:10>
    (UnaryOperator 0xa7ec568 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa7ec558 <col:10> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


        iterator begin() (CompoundStmt 0xa7ec6a0 </usr/include/c++/4.6/bits/basic_string.h:600:7, line:603:7>
  (CallExpr 0xa7ec5d8 <line:601:2, col:10> '<dependent type>'
    (MemberExpr 0xa7ec5b8 <col:2> '<bound member function type>' ->_M_leak 0xa7c55b0
      (CXXThisExpr 0xa7ec5a8 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
  (ReturnStmt 0xa7ec690 <line:602:2, col:27>
    (CXXUnresolvedConstructExpr 0xa7ec670 <col:9, col:27> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CallExpr 0xa7ec650 <col:18, col:26> '<dependent type>'
        (UnresolvedMemberExpr 0xa7ec610 <col:18> '<bound member function type>' lvalue)))))


        const_iterator begin() const (CompoundStmt 0xa7ec760 </usr/include/c++/4.6/bits/basic_string.h:611:7, col:43>
  (ReturnStmt 0xa7ec750 <col:9, col:40>
    (CXXUnresolvedConstructExpr 0xa7ec730 <col:16, col:40> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CallExpr 0xa7ec710 <col:31, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa7ec6d0 <col:31> '<bound member function type>' lvalue)))))


        iterator end() (CompoundStmt 0xa7ec940 </usr/include/c++/4.6/bits/basic_string.h:619:7, line:622:7>
  (CallExpr 0xa7ec7a8 <line:620:2, col:10> '<dependent type>'
    (MemberExpr 0xa7ec788 <col:2> '<bound member function type>' ->_M_leak 0xa7c55b0
      (CXXThisExpr 0xa7ec778 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
  (ReturnStmt 0xa7ec930 <line:621:2, col:42>
    (CXXUnresolvedConstructExpr 0xa7ec910 <col:9, col:42> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CXXOperatorCallExpr 0xa7ec8e8 <col:18, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa7ec8a8 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7ec820 <col:18, col:26> '<dependent type>'
          (UnresolvedMemberExpr 0xa7ec7e0 <col:18> '<bound member function type>' lvalue))
        (CallExpr 0xa7ec888 <col:30, col:41> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7ec850 <col:30, col:36> '<dependent type>' lvalue
            (CXXThisExpr 0xa7ec840 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))))


        const_iterator end() const (CompoundStmt 0xa7ecad0 </usr/include/c++/4.6/bits/basic_string.h:630:7, col:58>
  (ReturnStmt 0xa7ecac0 <col:9, col:55>
    (CXXUnresolvedConstructExpr 0xa7ecaa0 <col:16, col:55> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CXXOperatorCallExpr 0xa7eca78 <col:31, col:54> '<dependent type>'
        (UnresolvedLookupExpr 0xa7eca38 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7ec9b0 <col:31, col:39> '<dependent type>'
          (UnresolvedMemberExpr 0xa7ec970 <col:31> '<bound member function type>' lvalue))
        (CallExpr 0xa7eca18 <col:43, col:54> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7ec9e0 <col:43, col:49> '<dependent type>' lvalue
            (CXXThisExpr 0xa7ec9d0 <col:43> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))))))


        reverse_iterator rbegin() (CompoundStmt 0xa7ecb88 </usr/include/c++/4.6/bits/basic_string.h:639:7, col:47>
  (ReturnStmt 0xa7ecb78 <col:9, col:44>
    (CXXUnresolvedConstructExpr 0xa7ecb58 <col:16, col:44> 'reverse_iterator':'reverse_iterator<iterator>'
      (CallExpr 0xa7ecb38 <col:33, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ecb00 <col:33, col:39> '<dependent type>' lvalue
          (CXXThisExpr 0xa7ecaf0 <col:33> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))


        const_reverse_iterator rbegin() const (CompoundStmt 0xa7ecc40 </usr/include/c++/4.6/bits/basic_string.h:648:7, col:53>
  (ReturnStmt 0xa7ecc30 <col:9, col:50>
    (CXXUnresolvedConstructExpr 0xa7ecc10 <col:16, col:50> 'const_reverse_iterator':'reverse_iterator<const_iterator>'
      (CallExpr 0xa7ecbf0 <col:39, col:49> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ecbb8 <col:39, col:45> '<dependent type>' lvalue
          (CXXThisExpr 0xa7ecba8 <col:39> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))))


        reverse_iterator rend() (CompoundStmt 0xa7eccf8 </usr/include/c++/4.6/bits/basic_string.h:657:7, col:49>
  (ReturnStmt 0xa7ecce8 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa7eccc8 <col:16, col:46> 'reverse_iterator':'reverse_iterator<iterator>'
      (CallExpr 0xa7ecca8 <col:33, col:45> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ecc70 <col:33, col:39> '<dependent type>' lvalue
          (CXXThisExpr 0xa7ecc60 <col:33> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))


        const_reverse_iterator rend() const (CompoundStmt 0xa7ecdb0 </usr/include/c++/4.6/bits/basic_string.h:666:7, col:55>
  (ReturnStmt 0xa7ecda0 <col:9, col:52>
    (CXXUnresolvedConstructExpr 0xa7ecd80 <col:16, col:52> 'const_reverse_iterator':'reverse_iterator<const_iterator>'
      (CallExpr 0xa7ecd60 <col:39, col:51> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ecd28 <col:39, col:45> '<dependent type>' lvalue
          (CXXThisExpr 0xa7ecd18 <col:39> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))))


    public:
    public:
        size_type size() const (CompoundStmt 0xa7ece60 </usr/include/c++/4.6/bits/basic_string.h:710:7, col:37>
  (ReturnStmt 0xa7ece50 <col:9, col:26>
    (CXXDependentScopeMemberExpr 0xa7ece18 <col:16, col:26> '<dependent type>' lvalue
      (CallExpr 0xa7ecdf8 <col:16, col:23> '<dependent type>'
        (MemberExpr 0xa7ecdd8 <col:16> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7ecdc8 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))))


        size_type length() const (CompoundStmt 0xa7ecf10 </usr/include/c++/4.6/bits/basic_string.h:716:7, col:37>
  (ReturnStmt 0xa7ecf00 <col:9, col:26>
    (CXXDependentScopeMemberExpr 0xa7ecec8 <col:16, col:26> '<dependent type>' lvalue
      (CallExpr 0xa7ecea8 <col:16, col:23> '<dependent type>'
        (MemberExpr 0xa7ece88 <col:16> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7ece78 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))))


        size_type max_size() const (CompoundStmt 0xa7ecf90 </usr/include/c++/4.6/bits/basic_string.h:721:7, col:35>
  (ReturnStmt 0xa7ecf80 <col:9, col:22>
    (CXXDependentScopeMemberExpr 0xa7ecf48 <col:16, col:22> '<dependent type>' lvalue)))


        void resize(size_type __n, _CharT __c);
        void resize(size_type __n) (CompoundStmt 0xa7ed050 </usr/include/c++/4.6/bits/basic_string.h:748:7, col:38>
  (CallExpr 0xa7ed028 <col:9, col:35> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7ecfb8 <col:9, col:15> '<dependent type>' lvalue
      (CXXThisExpr 0xa7ecfa8 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa7ecfec <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf280 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CXXUnresolvedConstructExpr 0xa7ed010 <col:27, col:34> '_CharT')))


        size_type capacity() const (CompoundStmt 0xa7ed100 </usr/include/c++/4.6/bits/basic_string.h:768:7, col:39>
  (ReturnStmt 0xa7ed0f0 <col:9, col:26>
    (CXXDependentScopeMemberExpr 0xa7ed0b8 <col:16, col:26> '<dependent type>' lvalue
      (CallExpr 0xa7ed098 <col:16, col:23> '<dependent type>'
        (MemberExpr 0xa7ed078 <col:16> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7ed068 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))))


        void reserve(size_type __res_arg = (IntegerLiteral 0xa7e44a0 </usr/include/c++/4.6/bits/basic_string.h:788:37> 'int' 0)
);
        void clear() (CompoundStmt 0xa7ed208 </usr/include/c++/4.6/bits/basic_string.h:795:7, col:40>
  (CallExpr 0xa7ed1e0 <col:9, col:37> '<dependent type>'
    (MemberExpr 0xa7ed128 <col:9> '<bound member function type>' ->_M_mutate 0xa7c6d10
      (CXXThisExpr 0xa7ed118 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (IntegerLiteral 0xa7ed148 <col:19> 'int' 0)
    (CallExpr 0xa7ed1a8 <col:22, col:33> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7ed170 <col:22, col:28> '<dependent type>' lvalue
        (CXXThisExpr 0xa7ed160 <col:22> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
    (IntegerLiteral 0xa7ed1c8 <col:36> 'int' 0)))


        bool empty() const (CompoundStmt 0xa7ed328 </usr/include/c++/4.6/bits/basic_string.h:803:7, col:35>
  (ReturnStmt 0xa7ed318 <col:9, col:32>
    (CXXOperatorCallExpr 0xa7ed2f0 <col:16, col:32> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ed2a0 <col:29, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (CallExpr 0xa7ed268 <col:16, col:27> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ed230 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa7ed220 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))
      (IntegerLiteral 0xa7ed288 <col:32> 'int' 0))))


        const_reference operator[](size_type __pos) const (CompoundStmt 0xa7ed400 </usr/include/c++/4.6/bits/basic_string.h:818:7, line:821:7>
  (NullStmt 0xa7ed340 <line:819:40>)
  (ReturnStmt 0xa7ed3f0 <line:820:2, col:24>
    (ArraySubscriptExpr 0xa7ed3d8 <col:9, col:24> '<dependent type>' lvalue
      (CallExpr 0xa7ed3a0 <col:9, col:17> '<dependent type>'
        (UnresolvedMemberExpr 0xa7ed360 <col:9> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa7ed3bc <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf590 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))))


        reference operator[](size_type __pos) (CompoundStmt 0xa7ed538 </usr/include/c++/4.6/bits/basic_string.h:835:7, line:842:7>
  (NullStmt 0xa7ed418 <line:837:40>)
  (NullStmt 0xa7ed428 <line:839:42>)
  (CallExpr 0xa7ed468 <line:840:2, col:10> '<dependent type>'
    (MemberExpr 0xa7ed448 <col:2> '<bound member function type>' ->_M_leak 0xa7c55b0
      (CXXThisExpr 0xa7ed438 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
  (ReturnStmt 0xa7ed528 <line:841:2, col:24>
    (ArraySubscriptExpr 0xa7ed510 <col:9, col:24> '<dependent type>' lvalue
      (CallExpr 0xa7ed4d8 <col:9, col:17> '<dependent type>'
        (UnresolvedMemberExpr 0xa7ed498 <col:9> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa7ed4f4 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf6c0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))))


        const_reference at(size_type __n) const (CompoundStmt 0xa7ed830 </usr/include/c++/4.6/bits/basic_string.h:856:7, line:860:7>
  (IfStmt 0xa7ed760 <line:857:2, line:858:48>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7ed618 <line:857:6, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ed5d8 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (DeclRefExpr 0xa7ed558 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf7d0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7ed5b8 <col:13, col:24> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ed580 <col:13, col:19> '<dependent type>' lvalue
          (CXXThisExpr 0xa7ed570 <col:13> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))
    (CallExpr 0xa7ed730 <line:858:4, col:48> 'void'
      (ImplicitCastExpr 0xa7ed720 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ed704 <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa7ed750 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa7ed6f0 <col:24, col:30> 'const char [17]' lvalue
          (StringLiteral 0xa7ed6c0 </usr/include/c++/4.6/bits/basic_string.h:858:29> 'const char [17]' lvalue "basic_string::at"))))
    <<<NULL>>>)
  (ReturnStmt 0xa7ed820 <line:859:2, col:22>
    (ArraySubscriptExpr 0xa7ed808 <col:9, col:22> '<dependent type>' lvalue
      (CallExpr 0xa7ed7d0 <col:9, col:17> '<dependent type>'
        (UnresolvedMemberExpr 0xa7ed790 <col:9> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa7ed7ec <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf7d0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))))


        reference at(size_type __n) (CompoundStmt 0xa7edb08 </usr/include/c++/4.6/bits/basic_string.h:909:7, line:914:7>
  (IfStmt 0xa7ed9e8 <line:910:2, line:911:48>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa7ed8f0 <line:910:6, col:18> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ed8b0 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (DeclRefExpr 0xa7ed848 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf890 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7ed890 <col:13, col:18> '<dependent type>'
        (MemberExpr 0xa7ed870 <col:13> '<bound member function type>' ->size 0xa7cefc0
          (CXXThisExpr 0xa7ed860 <col:13> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
    (CallExpr 0xa7ed9b8 <line:911:4, col:48> 'void'
      (ImplicitCastExpr 0xa7ed9a8 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa7ed98c <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa7ed9d8 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa7ed978 <col:24, col:30> 'const char [17]' lvalue
          (StringLiteral 0xa7ed94c </usr/include/c++/4.6/bits/basic_string.h:911:29> 'const char [17]' lvalue "basic_string::at"))))
    <<<NULL>>>)
  (CallExpr 0xa7eda38 <line:912:2, col:10> '<dependent type>'
    (MemberExpr 0xa7eda18 <col:2> '<bound member function type>' ->_M_leak 0xa7c55b0
      (CXXThisExpr 0xa7eda08 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
  (ReturnStmt 0xa7edaf8 <line:913:2, col:22>
    (ArraySubscriptExpr 0xa7edae0 <col:9, col:22> '<dependent type>' lvalue
      (CallExpr 0xa7edaa8 <col:9, col:17> '<dependent type>'
        (UnresolvedMemberExpr 0xa7eda68 <col:9> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa7edac4 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7cf890 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))))


        basic_string<_CharT, _Traits, _Alloc> &operator+=(const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa7edbb8 </usr/include/c++/4.6/bits/basic_string.h:924:7, col:37>
  (ReturnStmt 0xa7edba8 <col:9, col:34>
    (CallExpr 0xa7edb88 <col:16, col:34> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7edb38 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7edb28 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7edb6c <col:29> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7cf960 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))


        basic_string<_CharT, _Traits, _Alloc> &operator+=(const _CharT *__s) (CompoundStmt 0xa7edc60 </usr/include/c++/4.6/bits/basic_string.h:933:7, col:35>
  (ReturnStmt 0xa7edc50 <col:9, col:32>
    (CallExpr 0xa7edc30 <col:16, col:32> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7edbe0 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7edbd0 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7edc14 <col:29> 'const _CharT *' lvalue ParmVar 0xa7cfa40 '__s' 'const _CharT *'))))


        basic_string<_CharT, _Traits, _Alloc> &operator+=(_CharT __c) (CompoundStmt 0xa7edd30 </usr/include/c++/4.6/bits/basic_string.h:942:7, line:945:7>
  (CallExpr 0xa7edcd8 <line:943:2, col:21> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7edc88 <col:2, col:8> '<dependent type>' lvalue
      (CXXThisExpr 0xa7edc78 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa7edcbc <col:18> '_CharT' lvalue ParmVar 0xa7cfb10 '__c' '_CharT'))
  (ReturnStmt 0xa7edd20 <line:944:2, col:10>
    (UnaryOperator 0xa7edd08 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa7edcf8 <col:10> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


        basic_string<_CharT, _Traits, _Alloc> &append(const basic_string<_CharT, _Traits, _Alloc> &__str);
        basic_string<_CharT, _Traits, _Alloc> &append(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n);
        basic_string<_CharT, _Traits, _Alloc> &append(const _CharT *__s, size_type __n);
        basic_string<_CharT, _Traits, _Alloc> &append(const _CharT *__s) (CompoundStmt 0xa7ede80 </usr/include/c++/4.6/bits/basic_string.h:997:7, line:1000:7>
  (NullStmt 0xa7edd48 <line:998:32>)
  (ReturnStmt 0xa7ede70 <line:999:2, col:51>
    (CallExpr 0xa7ede48 <col:9, col:51> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7edd68 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7edd58 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7edd9c <col:22> 'const _CharT *' lvalue ParmVar 0xa7cfff0 '__s' 'const _CharT *')
      (CallExpr 0xa7ede28 <col:27, col:50> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7eddd8 <col:27, col:40> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7ede0c <col:47> 'const _CharT *' lvalue ParmVar 0xa7cfff0 '__s' 'const _CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &append(size_type __n, _CharT __c);
        template <class _InputIterator> basic_string<_CharT, _Traits, _Alloc> &append(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa7edff0 </usr/include/c++/4.6/bits/basic_string.h:1035:9, col:72>
  (ReturnStmt 0xa7edfe0 <col:11, col:69>
    (CallExpr 0xa7edfb0 <col:18, col:69> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7edea8 <col:18, col:24> '<dependent type>' lvalue
        (CXXThisExpr 0xa7ede98 <col:18> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7edf10 <col:32, col:40> '<dependent type>'
        (MemberExpr 0xa7edef0 <col:32> '<bound member function type>' ->_M_iend 0xa7c5530
          (CXXThisExpr 0xa7edee0 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (CallExpr 0xa7edf60 <col:43, col:51> '<dependent type>'
        (MemberExpr 0xa7edf40 <col:43> '<bound member function type>' ->_M_iend 0xa7c5530
          (CXXThisExpr 0xa7edf30 <col:43> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (DeclRefExpr 0xa7edf7c <col:54> '_InputIterator' lvalue ParmVar 0xa7d0270 '__first' '_InputIterator')
      (DeclRefExpr 0xa7edf94 <col:63> '_InputIterator' lvalue ParmVar 0xa7d02b0 '__last' '_InputIterator'))))

;
        void push_back(_CharT __c) (CompoundStmt 0xa7f13a0 </usr/include/c++/4.6/bits/basic_string.h:1043:7, line:1049:7>
  (DeclStmt 0xa7f0ef8 <line:1044:2, col:42>
    0xa7ee010 "const size_type __len =
      (CXXOperatorCallExpr 0xa7f0ed0 <col:26, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f0e90 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (IntegerLiteral 0xa7ee048 <col:26> 'int' 1)
        (CallExpr 0xa7ee0a8 <col:30, col:41> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7ee070 <col:30, col:36> '<dependent type>' lvalue
            (CXXThisExpr 0xa7ee060 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
  (IfStmt 0xa7f1130 <line:1045:2, line:1046:23>
    <<<NULL>>>
    (BinaryOperator 0xa7f1098 <line:1045:6, col:57> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa7f0fc8 <col:6, col:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f0f88 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
        (DeclRefExpr 0xa7f0f08 <col:6> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7ee010 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CallExpr 0xa7f0f68 <col:14, col:29> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f0f30 <col:14, col:20> '<dependent type>' lvalue
            (CXXThisExpr 0xa7f0f20 <col:14> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CallExpr 0xa7f1078 <col:34, col:57> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f1040 <col:34, col:44> '<dependent type>' lvalue
          (CallExpr 0xa7f1020 <col:34, col:41> '<dependent type>'
            (MemberExpr 0xa7f1000 <col:34> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa7f0ff0 <col:34> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (CallExpr 0xa7f1110 <line:1046:4, col:23> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f10c0 <col:4, col:10> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f10b0 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f10f4 <col:18> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7ee010 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))
    <<<NULL>>>)
  (CallExpr 0xa7f12b8 <line:1047:2, col:50> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f1178 <col:2, col:15> '<dependent type>' lvalue)
    (ArraySubscriptExpr 0xa7f1288 <col:22, col:44> '<dependent type>' lvalue
      (CallExpr 0xa7f1200 <col:22, col:30> '<dependent type>'
        (UnresolvedMemberExpr 0xa7f11c0 <col:22> '<bound member function type>' lvalue))
      (CallExpr 0xa7f1268 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f1230 <col:32, col:38> '<dependent type>' lvalue
          (CXXThisExpr 0xa7f1220 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
    (DeclRefExpr 0xa7f129c <col:47> '_CharT' lvalue ParmVar 0xa7d03f0 '__c' '_CharT'))
  (CallExpr 0xa7f1380 <line:1048:2, col:44> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f1330 <col:2, col:12> '<dependent type>' lvalue
      (CallExpr 0xa7f1310 <col:2, col:9> '<dependent type>'
        (MemberExpr 0xa7f12f0 <col:2> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7f12e0 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
    (DeclRefExpr 0xa7f1364 <col:39> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7ee010 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')))


        basic_string<_CharT, _Traits, _Alloc> &assign(const basic_string<_CharT, _Traits, _Alloc> &__str);
        basic_string<_CharT, _Traits, _Alloc> &assign(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n) (CompoundStmt 0xa7f1680 </usr/include/c++/4.6/bits/basic_string.h:1090:7, line:1092:37>
  (ReturnStmt 0xa7f1670 <line:1090:9, line:1092:34>
    (CallExpr 0xa7f1648 <line:1090:16, line:1092:34> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f13d0 <line:1090:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f13c0 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f1578 <col:29, line:1091:54> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f1538 <col:8, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7f1458 <line:1090:29, col:43> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f1420 <col:29, col:35> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f1404 <col:29> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d05d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
        (CallExpr 0xa7f1510 <line:1091:10, col:54> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f1490 <col:10, col:16> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f1474 <col:10> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d05d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
          (DeclRefExpr 0xa7f14c4 <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d0610 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
          (StringLiteral 0xa7f14dc <col:32> 'const char [21]' lvalue "basic_string::assign")))
      (CallExpr 0xa7f1620 <line:1092:8, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f15b8 <col:8, col:14> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f159c <col:8> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d05d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa7f15ec <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d0610 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa7f1604 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d0650 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))))


        basic_string<_CharT, _Traits, _Alloc> &assign(const _CharT *__s, size_type __n);
        basic_string<_CharT, _Traits, _Alloc> &assign(const _CharT *__s) (CompoundStmt 0xa7f17d0 </usr/include/c++/4.6/bits/basic_string.h:1118:7, line:1121:7>
  (NullStmt 0xa7f1698 <line:1119:32>)
  (ReturnStmt 0xa7f17c0 <line:1120:2, col:51>
    (CallExpr 0xa7f1798 <col:9, col:51> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f16b8 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f16a8 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f16ec <col:22> 'const _CharT *' lvalue ParmVar 0xa7d0850 '__s' 'const _CharT *')
      (CallExpr 0xa7f1778 <col:27, col:50> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f1728 <col:27, col:40> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f175c <col:47> 'const _CharT *' lvalue ParmVar 0xa7d0850 '__s' 'const _CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &assign(size_type __n, _CharT __c) (CompoundStmt 0xa7f1930 </usr/include/c++/4.6/bits/basic_string.h:1134:7, col:70>
  (ReturnStmt 0xa7f1920 <col:9, col:67>
    (CallExpr 0xa7f18f0 <col:16, col:67> '<dependent type>'
      (MemberExpr 0xa7f17f8 <col:16> '<bound member function type>' ->_M_replace_aux 0xa7daf40
        (CXXThisExpr 0xa7f17e8 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXUnresolvedConstructExpr 0xa7f1838 <col:31, col:42> 'size_type':'typename _CharT_alloc_type::size_type'
        (IntegerLiteral 0xa7f1820 <col:41> 'int' 0))
      (CallExpr 0xa7f18a0 <col:45, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f1868 <col:45, col:51> '<dependent type>' lvalue
          (CXXThisExpr 0xa7f1858 <col:45> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (DeclRefExpr 0xa7f18bc <col:59> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d0920 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f18d4 <col:64> '_CharT' lvalue ParmVar 0xa7d0960 '__c' '_CharT'))))


        template <class _InputIterator> basic_string<_CharT, _Traits, _Alloc> &assign(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa7f1aa0 </usr/include/c++/4.6/bits/basic_string.h:1147:9, col:74>
  (ReturnStmt 0xa7f1a90 <col:11, col:71>
    (CallExpr 0xa7f1a60 <col:18, col:71> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f1958 <col:18, col:24> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f1948 <col:18> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f19c0 <col:32, col:42> '<dependent type>'
        (MemberExpr 0xa7f19a0 <col:32> '<bound member function type>' ->_M_ibegin 0xa7c54b0
          (CXXThisExpr 0xa7f1990 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (CallExpr 0xa7f1a10 <col:45, col:53> '<dependent type>'
        (MemberExpr 0xa7f19f0 <col:45> '<bound member function type>' ->_M_iend 0xa7c5530
          (CXXThisExpr 0xa7f19e0 <col:45> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (DeclRefExpr 0xa7f1a2c <col:56> '_InputIterator' lvalue ParmVar 0xa7d0a90 '__first' '_InputIterator')
      (DeclRefExpr 0xa7f1a44 <col:65> '_InputIterator' lvalue ParmVar 0xa7d0ad0 '__last' '_InputIterator'))))

;
        void insert(iterator __p, size_type __n, _CharT __c) (CompoundStmt 0xa7f1b90 </usr/include/c++/4.6/bits/basic_string.h:1174:7, col:45>
  (CallExpr 0xa7f1b60 <col:9, col:41> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f1ac8 <col:9, col:15> '<dependent type>' lvalue
      (CXXThisExpr 0xa7f1ab8 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa7f1afc <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d0bf0 '__p' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
    (DeclRefExpr 0xa7f1b14 <col:28> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d0bf0 '__p' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
    (DeclRefExpr 0xa7f1b2c <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d0c30 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa7f1b44 <col:38> '_CharT' lvalue ParmVar 0xa7d0c70 '__c' '_CharT')))


        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end) (CompoundStmt 0xa7f1c80 </usr/include/c++/4.6/bits/basic_string.h:1190:9, col:50>
  (CallExpr 0xa7f1c50 <col:11, col:47> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f1bb8 <col:11, col:17> '<dependent type>' lvalue
      (CXXThisExpr 0xa7f1ba8 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa7f1bec <col:25> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d0e00 '__p' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
    (DeclRefExpr 0xa7f1c04 <col:30> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d0e00 '__p' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
    (DeclRefExpr 0xa7f1c1c <col:35> '_InputIterator' lvalue ParmVar 0xa7d0e40 '__beg' '_InputIterator')
    (DeclRefExpr 0xa7f1c34 <col:42> '_InputIterator' lvalue ParmVar 0xa7d0e80 '__end' '_InputIterator')))

;
        basic_string<_CharT, _Traits, _Alloc> &insert(size_type __pos1, const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa7f1e00 </usr/include/c++/4.6/bits/basic_string.h:1220:7, col:73>
  (ReturnStmt 0xa7f1df0 <col:9, col:70>
    (CallExpr 0xa7f1dc0 <col:16, col:70> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f1ca8 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f1c98 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f1cdc <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d0fe0 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f1cf4 <col:37> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1030 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')
      (CXXUnresolvedConstructExpr 0xa7f1d30 <col:44, col:55> 'size_type':'typename _CharT_alloc_type::size_type'
        (IntegerLiteral 0xa7f1d18 <col:54> 'int' 0))
      (CallExpr 0xa7f1da0 <col:58, col:69> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f1d68 <col:58, col:64> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f1d4c <col:58> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1030 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        basic_string<_CharT, _Traits, _Alloc> &insert(size_type __pos1, const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos2, size_type __n) (CompoundStmt 0xa7f20f0 </usr/include/c++/4.6/bits/basic_string.h:1243:7, line:1245:38>
  (ReturnStmt 0xa7f20e0 <line:1243:9, line:1245:35>
    (CallExpr 0xa7f20b8 <line:1243:16, line:1245:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f1e28 <line:1243:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f1e18 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f1e5c <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1140 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
      (CXXOperatorCallExpr 0xa7f1fe8 <col:37, line:1244:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f1fa8 <col:8, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7f1ec8 <line:1243:37, col:51> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f1e90 <col:37, col:43> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f1e74 <col:37> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1190 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
        (CallExpr 0xa7f1f80 <line:1244:10, col:55> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f1f00 <col:10, col:16> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f1ee4 <col:10> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1190 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
          (DeclRefExpr 0xa7f1f34 <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d11d0 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type')
          (StringLiteral 0xa7f1f4c <col:33> 'const char [21]' lvalue "basic_string::insert")))
      (CallExpr 0xa7f2090 <line:1245:8, col:34> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f2028 <col:8, col:14> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f200c <col:8> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1190 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa7f205c <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d11d0 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa7f2074 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1210 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))))


        basic_string<_CharT, _Traits, _Alloc> &insert(size_type __pos, const _CharT *__s, size_type __n);
        basic_string<_CharT, _Traits, _Alloc> &insert(size_type __pos, const _CharT *__s) (CompoundStmt 0xa7f2258 </usr/include/c++/4.6/bits/basic_string.h:1283:7, line:1286:7>
  (NullStmt 0xa7f2108 <line:1284:32>)
  (ReturnStmt 0xa7f2248 <line:1285:2, col:58>
    (CallExpr 0xa7f2220 <col:9, col:58> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f2128 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f2118 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f215c <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1520 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f2174 <col:29> 'const _CharT *' lvalue ParmVar 0xa7d1570 '__s' 'const _CharT *')
      (CallExpr 0xa7f2200 <col:34, col:57> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f21b0 <col:34, col:47> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f21e4 <col:54> 'const _CharT *' lvalue ParmVar 0xa7d1570 '__s' 'const _CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &insert(size_type __pos, size_type __n, _CharT __c) (CompoundStmt 0xa7f23f0 </usr/include/c++/4.6/bits/basic_string.h:1306:7, line:1307:35>
  (ReturnStmt 0xa7f23e0 <line:1306:9, line:1307:32>
    (CallExpr 0xa7f23b0 <line:1306:16, line:1307:32> '<dependent type>'
      (MemberExpr 0xa7f2280 <line:1306:16> '<bound member function type>' ->_M_replace_aux 0xa7daf40
        (CXXThisExpr 0xa7f2270 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f2318 <col:31, col:69> '<dependent type>'
        (MemberExpr 0xa7f22b0 <col:31> '<bound member function type>' ->_M_check 0xa7c5710
          (CXXThisExpr 0xa7f22a0 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa7f22d0 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1680 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (StringLiteral 0xa7f22e8 <col:47> 'const char [21]' lvalue "basic_string::insert"))
      (CXXUnresolvedConstructExpr 0xa7f2360 <line:1307:10, col:21> 'size_type':'typename _CharT_alloc_type::size_type'
        (IntegerLiteral 0xa7f2348 <col:20> 'int' 0))
      (DeclRefExpr 0xa7f237c <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d16c0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f2394 <col:29> '_CharT' lvalue ParmVar 0xa7d1700 '__c' '_CharT'))))


        iterator insert(iterator __p, _CharT __c) (CompoundStmt 0xa7f2818 </usr/include/c++/4.6/bits/basic_string.h:1323:7, line:1329:7>
  (NullStmt 0xa7f2408 <line:1324:66>)
  (DeclStmt 0xa7f2528 <line:1325:2, col:43>
    0xa7f2420 "const size_type __pos =
      (CXXOperatorCallExpr 0xa7f2500 <col:26, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f24c0 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f2454 <col:26> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d1840 '__p' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f24a0 <col:32, col:42> '<dependent type>'
          (MemberExpr 0xa7f2480 <col:32> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f2470 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
  (CallExpr 0xa7f2618 <line:1326:2, col:55> '<dependent type>'
    (MemberExpr 0xa7f2548 <col:2> '<bound member function type>' ->_M_replace_aux 0xa7daf40
      (CXXThisExpr 0xa7f2538 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa7f2568 <col:17> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f2420 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')
    (CXXUnresolvedConstructExpr 0xa7f25a0 <col:24, col:35> 'size_type':'typename _CharT_alloc_type::size_type'
      (IntegerLiteral 0xa7f2588 <col:34> 'int' 0))
    (CXXUnresolvedConstructExpr 0xa7f25e0 <col:38, col:49> 'size_type':'typename _CharT_alloc_type::size_type'
      (IntegerLiteral 0xa7f25c8 <col:48> 'int' 1))
    (DeclRefExpr 0xa7f25fc <col:52> '_CharT' lvalue ParmVar 0xa7d1880 '__c' '_CharT'))
  (CallExpr 0xa7f26d0 <line:1327:2, col:26> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f2698 <col:2, col:12> '<dependent type>' lvalue
      (CallExpr 0xa7f2678 <col:2, col:9> '<dependent type>'
        (MemberExpr 0xa7f2658 <col:2> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7f2648 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))
  (ReturnStmt 0xa7f2808 <line:1328:2, col:35>
    (CXXUnresolvedConstructExpr 0xa7f27e8 <col:9, col:35> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CXXOperatorCallExpr 0xa7f27c0 <col:18, col:30> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f2780 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7f2748 <col:18, col:26> '<dependent type>'
          (UnresolvedMemberExpr 0xa7f2708 <col:18> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa7f2764 <col:30> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f2420 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')))))


        basic_string<_CharT, _Traits, _Alloc> &erase(size_type __pos = (IntegerLiteral 0xa7e44b8 </usr/include/c++/4.6/bits/basic_string.h:1346:31> 'int' 0)
, size_type __n = (DeclRefExpr 0xa7e44d0 </usr/include/c++/4.6/bits/basic_string.h:1346:50> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) (CompoundStmt 0xa7f2a38 </usr/include/c++/4.6/bits/basic_string.h:1347:7, line:1351:7>
  (CallExpr 0xa7f29d8 <line:1348:2, line:1349:39> '<dependent type>'
    (MemberExpr 0xa7f2850 <line:1348:2> '<bound member function type>' ->_M_mutate 0xa7c6d10
      (CXXThisExpr 0xa7f2840 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (CallExpr 0xa7f28e8 <col:12, col:49> '<dependent type>'
      (MemberExpr 0xa7f2880 <col:12> '<bound member function type>' ->_M_check 0xa7c5710
        (CXXThisExpr 0xa7f2870 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f28a0 <col:21> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1990 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (StringLiteral 0xa7f28b8 <col:28> 'const char [20]' lvalue "basic_string::erase"))
    (CallExpr 0xa7f2970 <line:1349:5, col:24> '<dependent type>'
      (MemberExpr 0xa7f2920 <col:5> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa7f2910 <col:5> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f2940 <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1990 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f2958 <col:21> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d19d0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
    (CXXUnresolvedConstructExpr 0xa7f29b8 <col:27, col:38> 'size_type':'typename _CharT_alloc_type::size_type'
      (IntegerLiteral 0xa7f29a0 <col:37> 'int' 0)))
  (ReturnStmt 0xa7f2a28 <line:1350:2, col:10>
    (UnaryOperator 0xa7f2a10 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa7f2a00 <col:10> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


        iterator erase(iterator __position) (CompoundStmt 0xa7f2e48 </usr/include/c++/4.6/bits/basic_string.h:1363:7, line:1370:7>
  (NullStmt 0xa7f2a50 <line:1365:32>)
  (DeclStmt 0xa7f2b78 <line:1366:2, col:50>
    0xa7f2a70 "const size_type __pos =
      (CXXOperatorCallExpr 0xa7f2b50 <col:26, col:49> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f2b10 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f2aa4 <col:26> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d1ae0 '__position' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f2af0 <col:39, col:49> '<dependent type>'
          (MemberExpr 0xa7f2ad0 <col:39> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f2ac0 <col:39> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
  (CallExpr 0xa7f2c50 <line:1367:2, col:45> '<dependent type>'
    (MemberExpr 0xa7f2b98 <col:2> '<bound member function type>' ->_M_mutate 0xa7c6d10
      (CXXThisExpr 0xa7f2b88 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa7f2bb8 <col:12> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f2a70 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')
    (CXXUnresolvedConstructExpr 0xa7f2bf0 <col:19, col:30> 'size_type':'typename _CharT_alloc_type::size_type'
      (IntegerLiteral 0xa7f2bd8 <col:29> 'int' 1))
    (CXXUnresolvedConstructExpr 0xa7f2c30 <col:33, col:44> 'size_type':'typename _CharT_alloc_type::size_type'
      (IntegerLiteral 0xa7f2c18 <col:43> 'int' 0)))
  (CallExpr 0xa7f2d00 <line:1368:2, col:26> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f2cc8 <col:2, col:12> '<dependent type>' lvalue
      (CallExpr 0xa7f2ca8 <col:2, col:9> '<dependent type>'
        (MemberExpr 0xa7f2c88 <col:2> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa7f2c78 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))
  (ReturnStmt 0xa7f2e38 <line:1369:2, col:35>
    (CXXUnresolvedConstructExpr 0xa7f2e18 <col:9, col:35> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
      (CXXOperatorCallExpr 0xa7f2df0 <col:18, col:30> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f2db0 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7f2d78 <col:18, col:26> '<dependent type>'
          (UnresolvedMemberExpr 0xa7f2d38 <col:18> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa7f2d94 <col:30> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f2a70 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')))))


        iterator erase(iterator __first, iterator __last);
        basic_string<_CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n, const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa7f3008 </usr/include/c++/4.6/bits/basic_string.h:1402:7, col:74>
  (ReturnStmt 0xa7f2ff8 <col:9, col:71>
    (CallExpr 0xa7f2fc8 <col:16, col:71> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f2e80 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f2e70 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f2eb4 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1d40 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f2ecc <col:37> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1d80 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f2f38 <col:42, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f2f00 <col:42, col:48> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f2ee4 <col:42> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1dd0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (CallExpr 0xa7f2fa8 <col:59, col:70> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f2f70 <col:59, col:65> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f2f54 <col:59> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d1dd0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        basic_string<_CharT, _Traits, _Alloc> &replace(size_type __pos1, size_type __n1, const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos2, size_type __n2) (CompoundStmt 0xa7f3318 </usr/include/c++/4.6/bits/basic_string.h:1425:7, line:1427:40>
  (ReturnStmt 0xa7f3308 <line:1425:9, line:1427:37>
    (CallExpr 0xa7f32d8 <line:1425:16, line:1427:37> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f3030 <line:1425:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f3020 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f3064 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d1f10 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f307c <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d8de0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
      (CXXOperatorCallExpr 0xa7f3208 <col:44, line:1426:57> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f31c8 <col:9, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0)
        (CallExpr 0xa7f30e8 <line:1425:44, col:58> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f30b0 <col:44, col:50> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f3094 <col:44> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d8e30 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
        (CallExpr 0xa7f31a0 <line:1426:11, col:57> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f3120 <col:11, col:17> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f3104 <col:11> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d8e30 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
          (DeclRefExpr 0xa7f3154 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d8e70 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type')
          (StringLiteral 0xa7f316c <col:34> 'const char [22]' lvalue "basic_string::replace")))
      (CallExpr 0xa7f32b0 <line:1427:9, col:36> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f3248 <col:9, col:15> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f322c <col:9> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d8e30 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa7f327c <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d8e70 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa7f3294 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d8eb0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))))


        basic_string<_CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2);
        basic_string<_CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n1, const _CharT *__s) (CompoundStmt 0xa7f34a0 </usr/include/c++/4.6/bits/basic_string.h:1467:7, line:1470:7>
  (NullStmt 0xa7f3330 <line:1468:32>)
  (ReturnStmt 0xa7f3490 <line:1469:2, col:65>
    (CallExpr 0xa7f3460 <col:9, col:65> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f3350 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f3340 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f3384 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d9210 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f339c <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d9250 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f33b4 <col:36> 'const _CharT *' lvalue ParmVar 0xa7d92a0 '__s' 'const _CharT *')
      (CallExpr 0xa7f3440 <col:41, col:64> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f33f0 <col:41, col:54> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f3424 <col:61> 'const _CharT *' lvalue ParmVar 0xa7d92a0 '__s' 'const _CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) (CompoundStmt 0xa7f3688 </usr/include/c++/4.6/bits/basic_string.h:1490:7, line:1491:45>
  (ReturnStmt 0xa7f3678 <line:1490:9, line:1491:42>
    (CallExpr 0xa7f3648 <line:1490:16, line:1491:42> '<dependent type>'
      (MemberExpr 0xa7f34c8 <line:1490:16> '<bound member function type>' ->_M_replace_aux 0xa7daf40
        (CXXThisExpr 0xa7f34b8 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f3568 <col:31, col:70> '<dependent type>'
        (MemberExpr 0xa7f34f8 <col:31> '<bound member function type>' ->_M_check 0xa7c5710
          (CXXThisExpr 0xa7f34e8 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa7f3518 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d93e0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (StringLiteral 0xa7f3530 <col:47> 'const char [22]' lvalue "basic_string::replace"))
      (CallExpr 0xa7f35f0 <line:1491:10, col:30> '<dependent type>'
        (MemberExpr 0xa7f35a0 <col:10> '<bound member function type>' ->_M_limit 0xa7c5a30
          (CXXThisExpr 0xa7f3590 <col:10> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa7f35c0 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d93e0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa7f35d8 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d9420 '__n1' 'size_type':'typename _CharT_alloc_type::size_type'))
      (DeclRefExpr 0xa7f3614 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d9460 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f362c <col:39> '_CharT' lvalue ParmVar 0xa7d94a0 '__c' '_CharT'))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa7f3838 </usr/include/c++/4.6/bits/basic_string.h:1508:7, col:74>
  (ReturnStmt 0xa7f3828 <col:9, col:71>
    (CallExpr 0xa7f37f8 <col:16, col:71> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f36b0 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f36a0 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f36e4 <col:30> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d95e0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
      (DeclRefExpr 0xa7f36fc <col:36> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9620 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
      (CallExpr 0xa7f3768 <col:42, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f3730 <col:42, col:48> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f3714 <col:42> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d9670 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (CallExpr 0xa7f37d8 <col:59, col:70> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f37a0 <col:59, col:65> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f3784 <col:59> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7d9670 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const _CharT *__s, size_type __n) (CompoundStmt 0xa7f3a80 </usr/include/c++/4.6/bits/basic_string.h:1526:7, line:1530:7>
  (NullStmt 0xa7f3850 <line:1528:27>)
  (ReturnStmt 0xa7f3a70 <line:1529:2, col:64>
    (CallExpr 0xa7f3a40 <col:9, col:64> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f3870 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f3860 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f3950 <col:23, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f3910 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f38a4 <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d97b0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f38f0 <col:30, col:40> '<dependent type>'
          (MemberExpr 0xa7f38d0 <col:30> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f38c0 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f39e8 <col:43, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f39a8 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f3974 <col:43> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d97f0 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f398c <col:50> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d97b0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (DeclRefExpr 0xa7f3a0c <col:56> 'const _CharT *' lvalue ParmVar 0xa7d9840 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f3a24 <col:61> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d9880 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const _CharT *__s) (CompoundStmt 0xa7f3c08 </usr/include/c++/4.6/bits/basic_string.h:1547:7, line:1550:7>
  (NullStmt 0xa7f3a98 <line:1548:32>)
  (ReturnStmt 0xa7f3bf8 <line:1549:2, col:64>
    (CallExpr 0xa7f3bc8 <col:9, col:64> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f3ab8 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f3aa8 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f3aec <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d99c0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
      (DeclRefExpr 0xa7f3b04 <col:29> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9a00 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
      (DeclRefExpr 0xa7f3b1c <col:35> 'const _CharT *' lvalue ParmVar 0xa7d9a50 '__s' 'const _CharT *')
      (CallExpr 0xa7f3ba8 <col:40, col:63> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f3b58 <col:40, col:53> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f3b8c <col:60> 'const _CharT *' lvalue ParmVar 0xa7d9a50 '__s' 'const _CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, size_type __n, _CharT __c) (CompoundStmt 0xa7f3e38 </usr/include/c++/4.6/bits/basic_string.h:1568:7, line:1572:7>
  (NullStmt 0xa7f3c20 <line:1570:27>)
  (ReturnStmt 0xa7f3e28 <line:1571:2, col:65>
    (CallExpr 0xa7f3df8 <col:9, col:65> '<dependent type>'
      (MemberExpr 0xa7f3c40 <col:9> '<bound member function type>' ->_M_replace_aux 0xa7daf40
        (CXXThisExpr 0xa7f3c30 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f3d08 <col:24, col:41> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f3cc8 <col:29, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f3c60 <col:24> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9b90 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f3ca8 <col:31, col:41> '<dependent type>'
          (MemberExpr 0xa7f3c88 <col:31> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f3c78 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f3da0 <col:44, col:51> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f3d60 <col:49, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f3d2c <col:44> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9bd0 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f3d44 <col:51> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9b90 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (DeclRefExpr 0xa7f3dc4 <col:57> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7d9c10 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f3ddc <col:62> '_CharT' lvalue ParmVar 0xa7d9c50 '__c' '_CharT'))))


        template <class _InputIterator> basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2) (CompoundStmt 0xa7f40d0 </usr/include/c++/4.6/bits/basic_string.h:1592:9, line:1598:2>
  (NullStmt 0xa7f3e50 <line:1594:29>)
  (NullStmt 0xa7f3e60 <line:1595:46>)
  (DeclStmt 0xa7f3fa0 <line:1596:4, col:72>
    0xa7f3f70 "typedef typename std::__is_integer<_InputIterator>::__type _Integral")
  (ReturnStmt 0xa7f40c0 <line:1597:4, col:66>
    (CallExpr 0xa7f4090 <col:11, col:66> '<dependent type>'
      (UnresolvedMemberExpr 0xa7f3fc0 <col:11> '<bound member function type>' lvalue)
      (DeclRefExpr 0xa7f4000 <col:31> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9de0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
      (DeclRefExpr 0xa7f4018 <col:37> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7d9e20 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
      (DeclRefExpr 0xa7f4030 <col:43> '_InputIterator' lvalue ParmVar 0xa7d9e60 '__k1' '_InputIterator')
      (DeclRefExpr 0xa7f4048 <col:49> '_InputIterator' lvalue ParmVar 0xa7d9ea0 '__k2' '_InputIterator')
      (CXXUnresolvedConstructExpr 0xa7f4078 <col:55, col:65> '_Integral':'typename std::__is_integer<_InputIterator>::__type'))))

;
        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, _CharT *__k1, _CharT *__k2) (CompoundStmt 0xa7f43b0 </usr/include/c++/4.6/bits/basic_string.h:1604:7, line:1610:7>
  (NullStmt 0xa7f40f0 <line:1606:27>)
  (NullStmt 0xa7f4100 <line:1607:44>)
  (ReturnStmt 0xa7f43a0 <line:1608:2, line:1609:26>
    (CallExpr 0xa7f4370 <line:1608:9, line:1609:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f4120 <line:1608:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f4110 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f4200 <col:23, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f41c0 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4154 <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da000 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f41a0 <col:30, col:40> '<dependent type>'
          (MemberExpr 0xa7f4180 <col:30> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f4170 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f4298 <col:43, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4258 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4224 <col:43> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da040 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f423c <col:50> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da000 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (DeclRefExpr 0xa7f42bc <line:1609:9> '_CharT *' lvalue ParmVar 0xa7da090 '__k1' '_CharT *')
      (CXXOperatorCallExpr 0xa7f4348 <col:15, col:22> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4308 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f42d4 <col:15> '_CharT *' lvalue ParmVar 0xa7da0e0 '__k2' '_CharT *')
        (DeclRefExpr 0xa7f42ec <col:22> '_CharT *' lvalue ParmVar 0xa7da090 '__k1' '_CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const _CharT *__k1, const _CharT *__k2) (CompoundStmt 0xa7f4690 </usr/include/c++/4.6/bits/basic_string.h:1615:7, line:1621:7>
  (NullStmt 0xa7f43d0 <line:1617:27>)
  (NullStmt 0xa7f43e0 <line:1618:44>)
  (ReturnStmt 0xa7f4680 <line:1619:2, line:1620:26>
    (CallExpr 0xa7f4650 <line:1619:9, line:1620:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f4400 <line:1619:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f43f0 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f44e0 <col:23, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f44a0 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4434 <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da220 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f4480 <col:30, col:40> '<dependent type>'
          (MemberExpr 0xa7f4460 <col:30> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f4450 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f4578 <col:43, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4538 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4504 <col:43> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da260 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f451c <col:50> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da220 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (DeclRefExpr 0xa7f459c <line:1620:9> 'const _CharT *' lvalue ParmVar 0xa7da2b0 '__k1' 'const _CharT *')
      (CXXOperatorCallExpr 0xa7f4628 <col:15, col:22> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f45e8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f45b4 <col:15> 'const _CharT *' lvalue ParmVar 0xa7da300 '__k2' 'const _CharT *')
        (DeclRefExpr 0xa7f45cc <col:22> 'const _CharT *' lvalue ParmVar 0xa7da2b0 '__k1' 'const _CharT *')))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2) (CompoundStmt 0xa7f49c8 </usr/include/c++/4.6/bits/basic_string.h:1625:7, line:1631:7>
  (NullStmt 0xa7f46b0 <line:1627:27>)
  (NullStmt 0xa7f46c0 <line:1628:44>)
  (ReturnStmt 0xa7f49b8 <line:1629:2, line:1630:33>
    (CallExpr 0xa7f4988 <line:1629:9, line:1630:33> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f46e0 <line:1629:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f46d0 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f47c0 <col:23, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4780 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4714 <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da440 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f4760 <col:30, col:40> '<dependent type>'
          (MemberExpr 0xa7f4740 <col:30> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f4730 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f4858 <col:43, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4818 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f47e4 <col:43> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da480 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f47fc <col:50> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da440 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (CallExpr 0xa7f48d0 <line:1630:9, col:19> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f4898 <col:9, col:14> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f487c <col:9> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da4c0 '__k1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')))
      (CXXOperatorCallExpr 0xa7f4960 <col:22, col:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4920 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f48ec <col:22> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da500 '__k2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f4904 <col:29> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da4c0 '__k1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')))))


        basic_string<_CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2) (CompoundStmt 0xa7f4d00 </usr/include/c++/4.6/bits/basic_string.h:1636:7, line:1642:7>
  (NullStmt 0xa7f49e8 <line:1638:27>)
  (NullStmt 0xa7f49f8 <line:1639:44>)
  (ReturnStmt 0xa7f4cf0 <line:1640:2, line:1641:33>
    (CallExpr 0xa7f4cc0 <line:1640:9, line:1641:33> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f4a18 <line:1640:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f4a08 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f4af8 <col:23, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4ab8 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4a4c <col:23> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da640 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f4a98 <col:30, col:40> '<dependent type>'
          (MemberExpr 0xa7f4a78 <col:30> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f4a68 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f4b90 <col:43, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4b50 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4b1c <col:43> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da680 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f4b34 <col:50> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da640 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (CallExpr 0xa7f4c08 <line:1641:9, col:19> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f4bd0 <col:9, col:14> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f4bb4 <col:9> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da6c0 '__k1' 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >')))
      (CXXOperatorCallExpr 0xa7f4c98 <col:22, col:29> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4c58 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4c24 <col:22> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da700 '__k2' 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f4c3c <col:29> 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da6c0 '__k1' 'const_iterator':'__normal_iterator<const_pointer, basic_string<_CharT, _Traits, _Alloc> >')))))


    private:
    private:
        template <class _Integer> basic_string<_CharT, _Traits, _Alloc> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type) (CompoundStmt 0xa7f7280 </usr/include/c++/4.6/bits/basic_string.h:1668:9, col:79>
  (ReturnStmt 0xa7f7270 <col:11, col:76>
    (CallExpr 0xa7f7240 <col:18, col:76> '<dependent type>'
      (MemberExpr 0xa7f4d30 <col:18> '<bound member function type>' ->_M_replace_aux 0xa7daf40
        (CXXThisExpr 0xa7f4d20 <col:18> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa7f4df8 <col:33, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4db8 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4d50 <col:33> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da8d0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa7f4d98 <col:40, col:50> '<dependent type>'
          (MemberExpr 0xa7f4d78 <col:40> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa7f4d68 <col:40> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CXXOperatorCallExpr 0xa7f71e8 <col:53, col:60> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f4e50 <col:58, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa7f4e1c <col:53> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da910 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa7f4e34 <col:60> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa7da8d0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))
      (DeclRefExpr 0xa7f720c <col:66> '_Integer' lvalue ParmVar 0xa7da950 '__n' '_Integer')
      (DeclRefExpr 0xa7f7224 <col:71> '_Integer' lvalue ParmVar 0xa7da990 '__val' '_Integer'))))

;
        template <class _InputIterator> basic_string<_CharT, _Traits, _Alloc> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        basic_string<_CharT, _Traits, _Alloc> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c);
        basic_string<_CharT, _Traits, _Alloc> &_M_replace_safe(size_type __pos1, size_type __n1, const _CharT *__s, size_type __n2);
        template <class _InIterator> static _CharT *_S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::__false_type) (CompoundStmt 0xa7f74c0 </usr/include/c++/4.6/bits/basic_string.h:1689:2, line:1692:2>
  (DeclStmt 0xa7f73b0 <line:1690:11, col:80>
    0xa7f7380 "typedef typename iterator_traits<_InIterator>::iterator_category _Tag")
  (ReturnStmt 0xa7f74b0 <line:1691:11, col:56>
    (CallExpr 0xa7f7480 <col:18, col:56> '<dependent type>'
      (UnresolvedLookupExpr 0xa7f73c0 <col:18> '<dependent type>' lvalue (no ADL) = '1' 0xa7dc0a0 0xa7dbf70 0xa7dbce0 0xa7dba50)
      (DeclRefExpr 0xa7f7400 <col:31> '_InIterator' lvalue ParmVar 0xa7db1c0 '__beg' '_InIterator')
      (DeclRefExpr 0xa7f7418 <col:38> '_InIterator' lvalue ParmVar 0xa7db200 '__end' '_InIterator')
      (DeclRefExpr 0xa7f7430 <col:45> 'const _Alloc' lvalue ParmVar 0xa7db250 '__a' 'const _Alloc &')
      (CXXUnresolvedConstructExpr 0xa7f7468 <col:50, col:55> '_Tag':'typename iterator_traits<_InIterator>::iterator_category'))))

;
        template <class _Integer> static _CharT *_S_construct_aux(_Integer __beg, _Integer __end, const _Alloc &__a, std::__true_type) (CompoundStmt 0xa7f7590 </usr/include/c++/4.6/bits/basic_string.h:1700:9, line:1701:22>
  (ReturnStmt 0xa7f7580 <line:1700:11, line:1701:19>
    (CallExpr 0xa7f7558 <line:1700:18, line:1701:19> '<dependent type>'
      (DeclRefExpr 0xa7f74d8 <line:1700:18> '_CharT *(size_type, _CharT, const _Alloc &)' lvalue CXXMethod 0xa7db7d0 '_S_construct_aux_2' '_CharT *(size_type, _CharT, const _Alloc &)')
      (CXXStaticCastExpr 0xa7f7510 <col:37, col:65> 'size_type':'typename _CharT_alloc_type::size_type' static_cast<size_type> <Dependent>
        (DeclRefExpr 0xa7f74f0 <col:60> '_Integer' lvalue ParmVar 0xa7db450 '__beg' '_Integer'))
      (DeclRefExpr 0xa7f7528 <line:1701:9> '_Integer' lvalue ParmVar 0xa7db490 '__end' '_Integer')
      (DeclRefExpr 0xa7f7540 <col:16> 'const _Alloc' lvalue ParmVar 0xa7db4e0 '__a' 'const _Alloc &'))))

;
        static _CharT *_S_construct_aux_2(size_type __req, _CharT __c, const _Alloc &__a) (CompoundStmt 0xa7f7668 </usr/include/c++/4.6/bits/basic_string.h:1705:7, col:47>
  (ReturnStmt 0xa7f7658 <col:9, col:44>
    (CallExpr 0xa7f7630 <col:16, col:44> '<dependent type>'
      (UnresolvedLookupExpr 0xa7f75a8 <col:16> '<dependent type>' lvalue (no ADL) = '1' 0xa7dc0a0 0xa7dbf70 0xa7dbce0 0xa7dba50)
      (DeclRefExpr 0xa7f75e8 <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7db680 '__req' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa7f7600 <col:36> '_CharT' lvalue ParmVar 0xa7db6c0 '__c' '_CharT')
      (DeclRefExpr 0xa7f7618 <col:41> 'const _Alloc' lvalue ParmVar 0xa7db710 '__a' 'const _Alloc &'))))


        template <class _InIterator> static _CharT *_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a) (CompoundStmt 0xa7f78b0 </usr/include/c++/4.6/bits/basic_string.h:1710:2, line:1713:9>
  (DeclStmt 0xa7f77b0 <line:1711:4, col:69>
    0xa7f7780 "typedef typename std::__is_integer<_InIterator>::__type _Integral")
  (ReturnStmt 0xa7f78a0 <line:1712:4, col:58>
    (CallExpr 0xa7f7870 <col:11, col:58> '<dependent type>'
      (UnresolvedLookupExpr 0xa7f77c0 <col:11> '<dependent type>' lvalue (no ADL) = '1' 0xa7db640 0xa7db3b0)
      (DeclRefExpr 0xa7f77f8 <col:28> '_InIterator' lvalue ParmVar 0xa7db8a0 '__beg' '_InIterator')
      (DeclRefExpr 0xa7f7810 <col:35> '_InIterator' lvalue ParmVar 0xa7db8e0 '__end' '_InIterator')
      (DeclRefExpr 0xa7f7828 <col:42> 'const _Alloc' lvalue ParmVar 0xa7db930 '__a' 'const _Alloc &')
      (CXXUnresolvedConstructExpr 0xa7f7858 <col:47, col:57> '_Integral':'typename std::__is_integer<_InIterator>::__type'))))

;
        template <class _InIterator> static _CharT *_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::input_iterator_tag);
        template <class _FwdIterator> static _CharT *_S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc &__a, std::forward_iterator_tag);
        static _CharT *_S_construct(size_type __req, _CharT __c, const _Alloc &__a);
    public:
    public:
        size_type copy(_CharT *__s, size_type __n, size_type __pos = (IntegerLiteral 0xa7e44e8 </usr/include/c++/4.6/bits/basic_string.h:1745:58> 'int' 0)
) const;
        void swap(basic_string<_CharT, _Traits, _Alloc> &__s);
        const _CharT *c_str() const (CompoundStmt 0xa7f7948 </usr/include/c++/4.6/bits/basic_string.h:1766:7, col:27>
  (ReturnStmt 0xa7f7938 <col:9, col:24>
    (CallExpr 0xa7f7918 <col:16, col:24> '<dependent type>'
      (UnresolvedMemberExpr 0xa7f78d8 <col:16> '<bound member function type>' lvalue))))


        const _CharT *data() const (CompoundStmt 0xa7f79e0 </usr/include/c++/4.6/bits/basic_string.h:1776:7, col:27>
  (ReturnStmt 0xa7f79d0 <col:9, col:24>
    (CallExpr 0xa7f79b0 <col:16, col:24> '<dependent type>'
      (UnresolvedMemberExpr 0xa7f7970 <col:16> '<bound member function type>' lvalue))))


        allocator_type get_allocator() const (CompoundStmt 0xa7f7a38 </usr/include/c++/4.6/bits/basic_string.h:1783:7, col:29>
  (ReturnStmt 0xa7f7a28 <col:9, col:16>
    (MemberExpr 0xa7f7a08 <col:16> 'struct std::basic_string::_Alloc_hider' lvalue ->_M_dataplus 0xa7c51d0
      (CXXThisExpr 0xa7f79f8 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))


        size_type find(const _CharT *__s, size_type __pos, size_type __n) const;
        size_type find(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos = (IntegerLiteral 0xa7e4500 </usr/include/c++/4.6/bits/basic_string.h:1810:57> 'int' 0)
) const (CompoundStmt 0xa7f7bc8 </usr/include/c++/4.6/bits/basic_string.h:1811:7, col:63>
  (ReturnStmt 0xa7f7bb8 <col:9, col:60>
    (CallExpr 0xa7f7b90 <col:16, col:60> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f7a60 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f7a50 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f7ae8 <col:27, col:38> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f7ab0 <col:27, col:33> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f7a94 <col:27> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7dc7d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (DeclRefExpr 0xa7f7b04 <col:41> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7dc810 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f7b70 <col:48, col:59> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f7b38 <col:48, col:54> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f7b1c <col:48> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7dc7d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        size_type find(const _CharT *__s, size_type __pos = (IntegerLiteral 0xa7e4518 </usr/include/c++/4.6/bits/basic_string.h:1824:49> 'int' 0)
) const (CompoundStmt 0xa7f7d30 </usr/include/c++/4.6/bits/basic_string.h:1825:7, line:1828:7>
  (NullStmt 0xa7f7be0 <line:1826:32>)
  (ReturnStmt 0xa7f7d20 <line:1827:2, col:56>
    (CallExpr 0xa7f7cf8 <col:9, col:56> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f7c00 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f7bf0 <col:9> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f7c34 <col:20> 'const _CharT *' lvalue ParmVar 0xa7dc930 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f7c4c <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7dc970 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f7cd8 <col:32, col:55> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f7c88 <col:32, col:45> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f7cbc <col:52> 'const _CharT *' lvalue ParmVar 0xa7dc930 '__s' 'const _CharT *')))))


        size_type find(_CharT __c, size_type __pos = (IntegerLiteral 0xa7e4530 </usr/include/c++/4.6/bits/basic_string.h:1841:42> 'int' 0)
) const;
        size_type rfind(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos = (DeclRefExpr 0xa7e4548 </usr/include/c++/4.6/bits/basic_string.h:1854:58> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f7ec0 </usr/include/c++/4.6/bits/basic_string.h:1855:7, col:64>
  (ReturnStmt 0xa7f7eb0 <col:9, col:61>
    (CallExpr 0xa7f7e88 <col:16, col:61> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f7d58 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f7d48 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f7de0 <col:28, col:39> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f7da8 <col:28, col:34> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f7d8c <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7dcbe0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (DeclRefExpr 0xa7f7dfc <col:42> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7dcc20 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f7e68 <col:49, col:60> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f7e30 <col:49, col:55> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f7e14 <col:49> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7dcbe0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        size_type rfind(const _CharT *__s, size_type __pos, size_type __n) const;
        size_type rfind(const _CharT *__s, size_type __pos = (DeclRefExpr 0xa7e4560 </usr/include/c++/4.6/bits/basic_string.h:1882:50> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f8028 </usr/include/c++/4.6/bits/basic_string.h:1883:7, line:1886:7>
  (NullStmt 0xa7f7ed8 <line:1884:32>)
  (ReturnStmt 0xa7f8018 <line:1885:2, col:57>
    (CallExpr 0xa7f7ff0 <col:9, col:57> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f7ef8 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f7ee8 <col:9> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f7f2c <col:21> 'const _CharT *' lvalue ParmVar 0xa7e23a0 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f7f44 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e23e0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f7fd0 <col:33, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f7f80 <col:33, col:46> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f7fb4 <col:53> 'const _CharT *' lvalue ParmVar 0xa7e23a0 '__s' 'const _CharT *')))))


        size_type rfind(_CharT __c, size_type __pos = (DeclRefExpr 0xa7e4578 </usr/include/c++/4.6/bits/basic_string.h:1899:43> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const;
        size_type find_first_of(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos = (IntegerLiteral 0xa7e4590 </usr/include/c++/4.6/bits/basic_string.h:1912:66> 'int' 0)
) const (CompoundStmt 0xa7f81b8 </usr/include/c++/4.6/bits/basic_string.h:1913:7, col:72>
  (ReturnStmt 0xa7f81a8 <col:9, col:69>
    (CallExpr 0xa7f8180 <col:16, col:69> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8050 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f8040 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f80d8 <col:36, col:47> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f80a0 <col:36, col:42> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f8084 <col:36> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e25d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (DeclRefExpr 0xa7f80f4 <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e2610 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f8160 <col:57, col:68> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8128 <col:57, col:63> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f810c <col:57> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e25d0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        size_type find_first_of(const _CharT *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const _CharT *__s, size_type __pos = (IntegerLiteral 0xa7e45a8 </usr/include/c++/4.6/bits/basic_string.h:1940:58> 'int' 0)
) const (CompoundStmt 0xa7f8320 </usr/include/c++/4.6/bits/basic_string.h:1941:7, line:1944:7>
  (NullStmt 0xa7f81d0 <line:1942:32>)
  (ReturnStmt 0xa7f8310 <line:1943:2, col:65>
    (CallExpr 0xa7f82e8 <col:9, col:65> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f81f0 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f81e0 <col:9> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f8224 <col:29> 'const _CharT *' lvalue ParmVar 0xa7e2850 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f823c <col:34> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e2890 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f82c8 <col:41, col:64> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8278 <col:41, col:54> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f82ac <col:61> 'const _CharT *' lvalue ParmVar 0xa7e2850 '__s' 'const _CharT *')))))


        size_type find_first_of(_CharT __c, size_type __pos = (IntegerLiteral 0xa7e45c0 </usr/include/c++/4.6/bits/basic_string.h:1959:51> 'int' 0)
) const (CompoundStmt 0xa7f83e8 </usr/include/c++/4.6/bits/basic_string.h:1960:7, col:40>
  (ReturnStmt 0xa7f83d8 <col:9, col:37>
    (CallExpr 0xa7f83b0 <col:16, col:37> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8348 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f8338 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f837c <col:27> '_CharT' lvalue ParmVar 0xa7e2960 '__c' '_CharT')
      (DeclRefExpr 0xa7f8394 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e29a0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))))


        size_type find_last_of(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos = (DeclRefExpr 0xa7e45d8 </usr/include/c++/4.6/bits/basic_string.h:1973:65> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f8578 </usr/include/c++/4.6/bits/basic_string.h:1974:7, col:71>
  (ReturnStmt 0xa7f8568 <col:9, col:68>
    (CallExpr 0xa7f8540 <col:16, col:68> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8410 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f8400 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f8498 <col:35, col:46> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8460 <col:35, col:41> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f8444 <col:35> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e2a80 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (DeclRefExpr 0xa7f84b4 <col:49> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e2ac0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f8520 <col:56, col:67> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f84e8 <col:56, col:62> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f84cc <col:56> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e2a80 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        size_type find_last_of(const _CharT *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const _CharT *__s, size_type __pos = (DeclRefExpr 0xa7e45f0 </usr/include/c++/4.6/bits/basic_string.h:2001:57> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f86e0 </usr/include/c++/4.6/bits/basic_string.h:2002:7, line:2005:7>
  (NullStmt 0xa7f8590 <line:2003:32>)
  (ReturnStmt 0xa7f86d0 <line:2004:2, col:64>
    (CallExpr 0xa7f86a8 <col:9, col:64> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f85b0 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f85a0 <col:9> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f85e4 <col:28> 'const _CharT *' lvalue ParmVar 0xa7e2d00 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f85fc <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e2d40 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f8688 <col:40, col:63> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8638 <col:40, col:53> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f866c <col:60> 'const _CharT *' lvalue ParmVar 0xa7e2d00 '__s' 'const _CharT *')))))


        size_type find_last_of(_CharT __c, size_type __pos = (DeclRefExpr 0xa7e4608 </usr/include/c++/4.6/bits/basic_string.h:2020:50> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f87a8 </usr/include/c++/4.6/bits/basic_string.h:2021:7, col:41>
  (ReturnStmt 0xa7f8798 <col:9, col:38>
    (CallExpr 0xa7f8770 <col:16, col:38> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8708 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f86f8 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f873c <col:28> '_CharT' lvalue ParmVar 0xa7e2e10 '__c' '_CharT')
      (DeclRefExpr 0xa7f8754 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e2e50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))))


        size_type find_first_not_of(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos = (IntegerLiteral 0xa7e4620 </usr/include/c++/4.6/bits/basic_string.h:2034:70> 'int' 0)
) const (CompoundStmt 0xa7f8938 </usr/include/c++/4.6/bits/basic_string.h:2035:7, col:76>
  (ReturnStmt 0xa7f8928 <col:9, col:73>
    (CallExpr 0xa7f8900 <col:16, col:73> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f87d0 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f87c0 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f8858 <col:40, col:51> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8820 <col:40, col:46> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f8804 <col:40> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e2f30 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (DeclRefExpr 0xa7f8874 <col:54> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e2f70 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f88e0 <col:61, col:72> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f88a8 <col:61, col:67> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f888c <col:61> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e2f30 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        size_type find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const _CharT *__s, size_type __pos = (IntegerLiteral 0xa7e4638 </usr/include/c++/4.6/bits/basic_string.h:2063:62> 'int' 0)
) const (CompoundStmt 0xa7f8aa0 </usr/include/c++/4.6/bits/basic_string.h:2064:7, line:2067:7>
  (NullStmt 0xa7f8950 <line:2065:32>)
  (ReturnStmt 0xa7f8a90 <line:2066:2, col:69>
    (CallExpr 0xa7f8a68 <col:9, col:69> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8970 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f8960 <col:9> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f89a4 <col:33> 'const _CharT *' lvalue ParmVar 0xa7e31b0 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f89bc <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e31f0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f8a48 <col:45, col:68> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f89f8 <col:45, col:58> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f8a2c <col:65> 'const _CharT *' lvalue ParmVar 0xa7e31b0 '__s' 'const _CharT *')))))


        size_type find_first_not_of(_CharT __c, size_type __pos = (IntegerLiteral 0xa7e4650 </usr/include/c++/4.6/bits/basic_string.h:2080:55> 'int' 0)
) const;
        size_type find_last_not_of(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos = (DeclRefExpr 0xa7e4668 </usr/include/c++/4.6/bits/basic_string.h:2093:69> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f8c30 </usr/include/c++/4.6/bits/basic_string.h:2094:7, col:75>
  (ReturnStmt 0xa7f8c20 <col:9, col:72>
    (CallExpr 0xa7f8bf8 <col:16, col:72> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8ac8 <col:16, col:22> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f8ab8 <col:16> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f8b50 <col:39, col:50> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8b18 <col:39, col:45> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f8afc <col:39> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e33e0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (DeclRefExpr 0xa7f8b6c <col:53> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e3420 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f8bd8 <col:60, col:71> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8ba0 <col:60, col:66> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f8b84 <col:60> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e33e0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))


        size_type find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const _CharT *__s, size_type __pos = (DeclRefExpr 0xa7e4680 </usr/include/c++/4.6/bits/basic_string.h:2122:61> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f8d98 </usr/include/c++/4.6/bits/basic_string.h:2123:7, line:2126:7>
  (NullStmt 0xa7f8c48 <line:2124:32>)
  (ReturnStmt 0xa7f8d88 <line:2125:2, col:68>
    (CallExpr 0xa7f8d60 <col:9, col:68> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa7f8c68 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa7f8c58 <col:9> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa7f8c9c <col:32> 'const _CharT *' lvalue ParmVar 0xa7e3660 '__s' 'const _CharT *')
      (DeclRefExpr 0xa7f8cb4 <col:37> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e36a0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa7f8d40 <col:44, col:67> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8cf0 <col:44, col:57> '<dependent type>' lvalue)
        (DeclRefExpr 0xa7f8d24 <col:64> 'const _CharT *' lvalue ParmVar 0xa7e3660 '__s' 'const _CharT *')))))


        size_type find_last_not_of(_CharT __c, size_type __pos = (DeclRefExpr 0xa7e4698 </usr/include/c++/4.6/bits/basic_string.h:2139:54> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const;
        basic_string<_CharT, _Traits, _Alloc> substr(size_type __pos = (IntegerLiteral 0xa7e46b0 </usr/include/c++/4.6/bits/basic_string.h:2154:32> 'int' 0)
, size_type __n = (DeclRefExpr 0xa7e46c8 </usr/include/c++/4.6/bits/basic_string.h:2154:51> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa7f8ed0 </usr/include/c++/4.6/bits/basic_string.h:2155:7, line:2156:55>
  (ReturnStmt 0xa7f8ec0 <line:2155:9, line:2156:52>
    (CXXUnresolvedConstructExpr 0xa7f8e98 <line:2155:16, line:2156:52> 'basic_string<_CharT, _Traits, _Alloc>'
      (UnaryOperator 0xa7f8dc8 <line:2155:29, col:30> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa7f8db8 <col:30> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (CallExpr 0xa7f8e58 <line:2156:8, col:46> '<dependent type>'
        (MemberExpr 0xa7f8df0 <col:8> '<bound member function type>' ->_M_check 0xa7c5710
          (CXXThisExpr 0xa7f8de0 <col:8> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa7f8e10 <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e3880 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (StringLiteral 0xa7f8e28 <col:24> 'const char [21]' lvalue "basic_string::substr"))
      (DeclRefExpr 0xa7f8e7c <col:49> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa7e38c0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))))


        int compare(const basic_string<_CharT, _Traits, _Alloc> &__str) const (CompoundStmt 0xa7f9478 </usr/include/c++/4.6/bits/basic_string.h:2173:7, line:2182:7>
  (DeclStmt 0xa7f8f90 <line:2174:2, col:39>
    0xa7f8ef0 "const size_type __size =
      (CallExpr 0xa7f8f70 <col:27, col:38> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f8f38 <col:27, col:33> '<dependent type>' lvalue
          (CXXThisExpr 0xa7f8f28 <col:27> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (DeclStmt 0xa7f9058 <line:2175:2, col:40>
    0xa7f8fb0 "const size_type __osize =
      (CallExpr 0xa7f9038 <col:28, col:39> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f9000 <col:28, col:34> '<dependent type>' lvalue
          (DeclRefExpr 0xa7f8fe4 <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e39e0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))")
  (DeclStmt 0xa7f9150 <line:2176:2, col:51>
    0xa7f9070 "const size_type __len =
      (CallExpr 0xa7f9128 <col:26, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa7f90c0 <col:26, col:31> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
        (DeclRefExpr 0xa7f90f8 <col:35> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f8ef0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa7f9110 <col:43> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f8fb0 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa7f9320 <line:2178:2, col:64>
    0xa7f9170 "int __r =
      (CallExpr 0xa7f92f8 <col:12, col:63> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7f91c8 <col:12, col:25> '<dependent type>' lvalue)
        (CallExpr 0xa7f9250 <col:33, col:41> '<dependent type>'
          (UnresolvedMemberExpr 0xa7f9210 <col:33> '<bound member function type>' lvalue))
        (CallExpr 0xa7f92c0 <col:44, col:55> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa7f9288 <col:44, col:50> '<dependent type>' lvalue
            (DeclRefExpr 0xa7f926c <col:44> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7e39e0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
        (DeclRefExpr 0xa7f92dc <col:58> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f9070 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa7f9420 <line:2179:2, line:2180:36>
    <<<NULL>>>
    (UnaryOperator 0xa7f9368 <line:2179:6, col:7> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa7f9358 <col:7> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa7f9348 <col:7> 'int' <LValueToRValue>
          (DeclRefExpr 0xa7f9330 <col:7> 'int' lvalue Var 0xa7f9170 '__r' 'int'))))
    (BinaryOperator 0xa7f9408 <line:2180:4, col:36> '<dependent type>' '='
      (DeclRefExpr 0xa7f937c <col:4> 'int' lvalue Var 0xa7f9170 '__r' 'int')
      (CallExpr 0xa7f93e0 <col:10, col:36> '<dependent type>'
        (DeclRefExpr 0xa7f9394 <col:10> 'int (size_type, size_type)' lvalue CXXMethod 0xa7c6b60 '_S_compare' 'int (size_type, size_type)')
        (DeclRefExpr 0xa7f93ac <col:21> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f8ef0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa7f93c4 <col:29> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7f8fb0 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa7f9468 <line:2181:2, col:9>
    (ImplicitCastExpr 0xa7f9458 <col:9> 'int' <LValueToRValue>
      (DeclRefExpr 0xa7f943c <col:9> 'int' lvalue Var 0xa7f9170 '__r' 'int'))))


        int compare(size_type __pos, size_type __n, const basic_string<_CharT, _Traits, _Alloc> &__str) const;
        int compare(size_type __pos1, size_type __n1, const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos2, size_type __n2) const;
        int compare(const _CharT *__s) const;
        int compare(size_type __pos, size_type __n1, const _CharT *__s) const;
        int compare(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const;
    };
    template <typename _CharT, typename _Traits, typename _Alloc> basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa7f9e10 </usr/include/c++/4.6/bits/basic_string.h:2307:5, line:2311:5>
  (DeclStmt 0xa7f9d50 <line:2308:7, col:57>
    0xa7f9ce0 "basic_string<_CharT, _Traits, _Alloc> __str =
      (ParenListExpr 0xa7f9d30 <col:50, col:56> 'basic_string<_CharT, _Traits, _Alloc>'
        (DeclRefExpr 0xa7f9d14 <col:51> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7f9860 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))")
  (CallExpr 0xa7f9dc8 <line:2309:7, col:25> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7f9d78 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa7f9d60 <col:7> 'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa7f9ce0 '__str' 'basic_string<_CharT, _Traits, _Alloc>'))
    (DeclRefExpr 0xa7f9dac <col:20> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7f9a10 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
  (ReturnStmt 0xa7f9e00 <line:2310:7, col:14>
    (DeclRefExpr 0xa7f9de8 <col:14> 'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa7f9ce0 '__str' 'basic_string<_CharT, _Traits, _Alloc>')))

;
    template <typename _CharT, typename _Traits, typename _Alloc> basic_string<_CharT, _Traits, _Alloc> operator+(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs);
    template <typename _CharT, typename _Traits, typename _Alloc> basic_string<_CharT, _Traits, _Alloc> operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs);
    template <typename _CharT, typename _Traits, typename _Alloc> inline basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa7fb100 </usr/include/c++/4.6/bits/basic_string.h:2344:5, line:2348:5>
  (DeclStmt 0xa7fb040 <line:2345:7, col:57>
    0xa7fafd0 "basic_string<_CharT, _Traits, _Alloc> __str =
      (ParenListExpr 0xa7fb020 <col:50, col:56> 'basic_string<_CharT, _Traits, _Alloc>'
        (DeclRefExpr 0xa7fb004 <col:51> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7fac90 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))")
  (CallExpr 0xa7fb0b8 <line:2346:7, col:25> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7fb068 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa7fb050 <col:7> 'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa7fafd0 '__str' 'basic_string<_CharT, _Traits, _Alloc>'))
    (DeclRefExpr 0xa7fb09c <col:20> 'const _CharT *' lvalue ParmVar 0xa7fad00 '__rhs' 'const _CharT *'))
  (ReturnStmt 0xa7fb0f0 <line:2347:7, col:14>
    (DeclRefExpr 0xa7fb0d8 <col:14> 'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa7fafd0 '__str' 'basic_string<_CharT, _Traits, _Alloc>')))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc> &__lhs, _CharT __rhs) (CompoundStmt 0xa7fd9a8 </usr/include/c++/4.6/bits/basic_string.h:2359:5, line:2365:5>
  (DeclStmt 0xa7fd710 <line:2360:7, col:66>
    0xa7fd6e0 "typedef basic_string<_CharT, _Traits, _Alloc> __string_type")
  (DeclStmt 0xa7fd800 <line:2361:7, col:61>
    0xa7fd7d0 "typedef typename __string_type::size_type __size_type")
  (DeclStmt 0xa7fd890 <line:2362:7, col:33>
    0xa7fd820 "__string_type __str =
      (ParenListExpr 0xa7fd870 <col:26, col:32> '__string_type':'basic_string<_CharT, _Traits, _Alloc>'
        (DeclRefExpr 0xa7fd854 <col:27> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7fd3d0 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))")
  (CallExpr 0xa7fd958 <line:2363:7, col:41> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa7fd8b8 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa7fd8a0 <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa7fd820 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (CXXUnresolvedConstructExpr 0xa7fd920 <col:20, col:33> '__size_type':'typename __string_type::size_type'
      (IntegerLiteral 0xa7fd908 <col:32> 'int' 1))
    (DeclRefExpr 0xa7fd93c <col:36> '_CharT' lvalue ParmVar 0xa7fd410 '__rhs' '_CharT'))
  (ReturnStmt 0xa7fd998 <line:2364:7, col:14>
    (DeclRefExpr 0xa7fd97c <col:14> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa7fd820 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>')))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator==(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa7fe058 </usr/include/c++/4.6/bits/basic_string.h:2428:5, col:41>
  (ReturnStmt 0xa7fe048 <col:7, col:38>
    (CXXOperatorCallExpr 0xa7fe020 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa7fdfd0 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (CallExpr 0xa7fdf98 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7fdf48 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa7fdf30 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7fdc50 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa7fdf7c <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7fde00 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (IntegerLiteral 0xa7fdfb8 <col:38> 'int' 0))))

;
    template <typename _CharT> inline typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type operator==(const basic_string<_CharT> &__lhs, const basic_string<_CharT> &__rhs) (CompoundStmt 0xa7fedb8 </usr/include/c++/4.6/bits/basic_string.h:2435:5, line:2437:27>
  (ReturnStmt 0xa7feda8 <line:2435:7, line:2437:24>
    (ParenExpr 0xa7fed90 <line:2435:14, line:2437:24> '<dependent type>'
      (BinaryOperator 0xa7fed78 <line:2435:15, line:2437:23> '<dependent type>' '&&'
        (CXXOperatorCallExpr 0xa7fead8 <line:2435:15, col:42> '<dependent type>'
          (UnresolvedLookupExpr 0xa7fea80 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7fe970 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
          (CallExpr 0xa7fe9f0 <col:15, col:26> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa7fe9b8 <col:15, col:21> '<dependent type>' lvalue
              (DeclRefExpr 0xa7fe9a0 <col:15> 'const basic_string<_CharT>' lvalue ParmVar 0xa7fe610 '__lhs' 'const basic_string<_CharT> &')))
          (CallExpr 0xa7fea60 <col:31, col:42> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa7fea28 <col:31, col:37> '<dependent type>' lvalue
              (DeclRefExpr 0xa7fea0c <col:31> 'const basic_string<_CharT>' lvalue ParmVar 0xa7fe860 '__rhs' 'const basic_string<_CharT> &'))))
        (UnaryOperator 0xa7fed60 <line:2436:11, line:2437:23> '<dependent type>' prefix '!'
          (CallExpr 0xa7fed38 <line:2436:12, line:2437:23> '<dependent type>'
            (DependentScopeDeclRefExpr 0xa7febc0 <line:2436:12, col:38> '<dependent type>' lvalue)
            (CallExpr 0xa7fec38 <col:46, col:57> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa7fec00 <col:46, col:52> '<dependent type>' lvalue
                (DeclRefExpr 0xa7febe4 <col:46> 'const basic_string<_CharT>' lvalue ParmVar 0xa7fe610 '__lhs' 'const basic_string<_CharT> &')))
            (CallExpr 0xa7feca8 <col:60, col:71> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa7fec70 <col:60, col:66> '<dependent type>' lvalue
                (DeclRefExpr 0xa7fec54 <col:60> 'const basic_string<_CharT>' lvalue ParmVar 0xa7fe860 '__rhs' 'const basic_string<_CharT> &')))
            (CallExpr 0xa7fed18 <line:2437:11, col:22> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa7fece0 <col:11, col:17> '<dependent type>' lvalue
                (DeclRefExpr 0xa7fecc4 <col:11> 'const basic_string<_CharT>' lvalue ParmVar 0xa7fe610 '__lhs' 'const basic_string<_CharT> &')))))))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator==(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa7ff310 </usr/include/c++/4.6/bits/basic_string.h:2449:5, col:41>
  (ReturnStmt 0xa7ff300 <col:7, col:38>
    (CXXOperatorCallExpr 0xa7ff2d8 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ff280 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7ff1b0 0xa7fe970 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (CallExpr 0xa7ff248 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ff1f8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa7ff1e0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7ff0b0 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa7ff22c <col:28> 'const _CharT *' lvalue ParmVar 0xa7fef00 '__lhs' 'const _CharT *'))
      (IntegerLiteral 0xa7ff268 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator==(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa7ff888 </usr/include/c++/4.6/bits/basic_string.h:2461:5, col:41>
  (ReturnStmt 0xa7ff878 <col:7, col:38>
    (CXXOperatorCallExpr 0xa7ff850 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa7ff7f0 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7ff720 0xa7ff1b0 0xa7fe970 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
      (CallExpr 0xa7ff7b8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa7ff768 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa7ff750 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7ff5b0 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa7ff79c <col:28> 'const _CharT *' lvalue ParmVar 0xa7ff620 '__rhs' 'const _CharT *'))
      (IntegerLiteral 0xa7ff7d8 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator!=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa7ffed8 </usr/include/c++/4.6/bits/basic_string.h:2474:5, col:33>
  (ReturnStmt 0xa7ffec8 <col:7, col:30>
    (UnaryOperator 0xa7ffeb0 <col:14, col:30> '<dependent type>' prefix '!'
      (ParenExpr 0xa7ffe98 <col:15, col:30> '<dependent type>'
        (CXXOperatorCallExpr 0xa7ffe70 <col:16, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa7ffe10 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7ff720 0xa7ff1b0 0xa7fe970 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
          (DeclRefExpr 0xa7ffde0 <col:16> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7ffb20 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &')
          (DeclRefExpr 0xa7ffdf8 <col:25> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa7ffcd0 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator!=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa8003d8 </usr/include/c++/4.6/bits/basic_string.h:2486:5, col:33>
  (ReturnStmt 0xa8003c8 <col:7, col:30>
    (UnaryOperator 0xa8003b0 <col:14, col:30> '<dependent type>' prefix '!'
      (ParenExpr 0xa800398 <col:15, col:30> '<dependent type>'
        (CXXOperatorCallExpr 0xa800370 <col:16, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa800310 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7ff720 0xa7ff1b0 0xa7fe970 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
          (DeclRefExpr 0xa8002e0 <col:16> 'const _CharT *' lvalue ParmVar 0xa800020 '__lhs' 'const _CharT *')
          (DeclRefExpr 0xa8002f8 <col:25> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8001d0 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator!=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa8008e8 </usr/include/c++/4.6/bits/basic_string.h:2498:5, col:33>
  (ReturnStmt 0xa8008d8 <col:7, col:30>
    (UnaryOperator 0xa8008c0 <col:14, col:30> '<dependent type>' prefix '!'
      (ParenExpr 0xa8008a8 <col:15, col:30> '<dependent type>'
        (CXXOperatorCallExpr 0xa800880 <col:16, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa800820 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa7ff720 0xa7ff1b0 0xa7fe970 0xa7fdf00 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280)
          (DeclRefExpr 0xa8007f0 <col:16> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa800670 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &')
          (DeclRefExpr 0xa800808 <col:25> 'const _CharT *' lvalue ParmVar 0xa8006e0 '__rhs' 'const _CharT *'))))))

;
    template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> inline bool operator<(const basic_string<char, std::char_traits<char>, std::allocator<char> > &__lhs, const basic_string<char, std::char_traits<char>, std::allocator<char> > &__rhs) (CompoundStmt 0xa9e7328 </usr/include/c++/4.6/bits/basic_string.h:2511:5, col:40>
  (ReturnStmt 0xa9e7318 <col:7, col:37>
    (BinaryOperator 0xa9e7300 <col:14, col:37> '_Bool' '<'
      (CXXMemberCallExpr 0xa9e72e0 <col:14, col:33> 'int'
        (MemberExpr 0xa9e72bc <col:14, col:20> '<bound member function type>' .compare 0xa8659b0
          (DeclRefExpr 0xa9e723c <col:14> 'const basic_string<char, struct std::char_traits<char>, class std::allocator<char> >':'const class std::basic_string<char>' lvalue ParmVar 0xa9e6ec0 '__lhs' 'const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &'))
        (DeclRefExpr 0xa9e72a4 <col:28> 'const basic_string<char, struct std::char_traits<char>, class std::allocator<char> >':'const class std::basic_string<char>' lvalue ParmVar 0xa9e6fd0 '__rhs' 'const basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &'))
      (IntegerLiteral 0xa800ec8 <col:37> 'int' 0))))

template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator<(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa800f60 </usr/include/c++/4.6/bits/basic_string.h:2511:5, col:40>
  (ReturnStmt 0xa800f50 <col:7, col:37>
    (CXXOperatorCallExpr 0xa800f28 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa800ee0 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa800e10 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CallExpr 0xa800ea8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa800e58 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa800e40 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa800b80 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa800e8c <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa800d30 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (IntegerLiteral 0xa800ec8 <col:37> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator<(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa8014d0 </usr/include/c++/4.6/bits/basic_string.h:2523:5, col:40>
  (ReturnStmt 0xa8014c0 <col:7, col:37>
    (CXXOperatorCallExpr 0xa801498 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa801450 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa801380 0xa800e10 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CallExpr 0xa801418 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8013c8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa8013b0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa801230 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa8013fc <col:28> 'const _CharT *' lvalue ParmVar 0xa8012a0 '__rhs' 'const _CharT *'))
      (IntegerLiteral 0xa801438 <col:37> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator<(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa8019f8 </usr/include/c++/4.6/bits/basic_string.h:2535:5, col:40>
  (ReturnStmt 0xa8019e8 <col:7, col:37>
    (CXXOperatorCallExpr 0xa8019c0 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa801980 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (CallExpr 0xa801948 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8018f8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa8018e0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8017d0 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa80192c <col:28> 'const _CharT *' lvalue ParmVar 0xa801620 '__lhs' 'const _CharT *'))
      (IntegerLiteral 0xa801968 <col:37> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator>(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa802070 </usr/include/c++/4.6/bits/basic_string.h:2548:5, col:40>
  (ReturnStmt 0xa802060 <col:7, col:37>
    (CXXOperatorCallExpr 0xa802038 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa801ff0 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa801f20 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (CallExpr 0xa801fb8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa801f68 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa801f50 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa801c90 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa801f9c <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa801e40 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (IntegerLiteral 0xa801fd8 <col:37> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator>(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa8025b0 </usr/include/c++/4.6/bits/basic_string.h:2560:5, col:40>
  (ReturnStmt 0xa8025a0 <col:7, col:37>
    (CXXOperatorCallExpr 0xa802578 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa802530 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa802460 0xa801f20 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0)
      (CallExpr 0xa8024f8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8024a8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa802490 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa802310 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa8024dc <col:28> 'const _CharT *' lvalue ParmVar 0xa802380 '__rhs' 'const _CharT *'))
      (IntegerLiteral 0xa802518 <col:37> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator>(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa802ae8 </usr/include/c++/4.6/bits/basic_string.h:2572:5, col:40>
  (ReturnStmt 0xa802ad8 <col:7, col:37>
    (CXXOperatorCallExpr 0xa802ab0 <col:14, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa802a60 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8018b0 0xa801380 0xa800e10 0xa60db10 0xa625610 0xa627cd0 0xa6b4880)
      (CallExpr 0xa802a28 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8029d8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa8029c0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8028b0 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa802a0c <col:28> 'const _CharT *' lvalue ParmVar 0xa802700 '__lhs' 'const _CharT *'))
      (IntegerLiteral 0xa802a48 <col:37> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator<=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa803160 </usr/include/c++/4.6/bits/basic_string.h:2585:5, col:41>
  (ReturnStmt 0xa803150 <col:7, col:38>
    (CXXOperatorCallExpr 0xa803128 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa8030e0 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa803010 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0)
      (CallExpr 0xa8030a8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa803058 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa803040 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa802d80 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa80308c <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa802f30 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (IntegerLiteral 0xa8030c8 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator<=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa8036a0 </usr/include/c++/4.6/bits/basic_string.h:2597:5, col:41>
  (ReturnStmt 0xa803690 <col:7, col:38>
    (CXXOperatorCallExpr 0xa803668 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa803620 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa803550 0xa803010 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0)
      (CallExpr 0xa8035e8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa803598 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa803580 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa803400 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa8035cc <col:28> 'const _CharT *' lvalue ParmVar 0xa803470 '__rhs' 'const _CharT *'))
      (IntegerLiteral 0xa803608 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator<=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa803bc8 </usr/include/c++/4.6/bits/basic_string.h:2609:5, col:41>
  (ReturnStmt 0xa803bb8 <col:7, col:38>
    (CXXOperatorCallExpr 0xa803b90 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa803b50 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (CallExpr 0xa803b18 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa803ac8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa803ab0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8039a0 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa803afc <col:28> 'const _CharT *' lvalue ParmVar 0xa8037f0 '__lhs' 'const _CharT *'))
      (IntegerLiteral 0xa803b38 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator>=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa804240 </usr/include/c++/4.6/bits/basic_string.h:2622:5, col:41>
  (ReturnStmt 0xa804230 <col:7, col:38>
    (CXXOperatorCallExpr 0xa804208 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa8041c0 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8040f0 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (CallExpr 0xa804188 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa804138 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa804120 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa803e60 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa80416c <col:28> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa804010 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (IntegerLiteral 0xa8041a8 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator>=(const basic_string<_CharT, _Traits, _Alloc> &__lhs, const _CharT *__rhs) (CompoundStmt 0xa804780 </usr/include/c++/4.6/bits/basic_string.h:2634:5, col:41>
  (ReturnStmt 0xa804770 <col:7, col:38>
    (CXXOperatorCallExpr 0xa804748 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa804700 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa804630 0xa8040f0 0xa60f940 0xa626700 0xa629570 0xa6b5f20)
      (CallExpr 0xa8046c8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa804678 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa804660 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8044e0 '__lhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa8046ac <col:28> 'const _CharT *' lvalue ParmVar 0xa804550 '__rhs' 'const _CharT *'))
      (IntegerLiteral 0xa8046e8 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline bool operator>=(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa804cb8 </usr/include/c++/4.6/bits/basic_string.h:2646:5, col:41>
  (ReturnStmt 0xa804ca8 <col:7, col:38>
    (CXXOperatorCallExpr 0xa804c80 <col:14, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa804c30 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa803a80 0xa803550 0xa803010 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0)
      (CallExpr 0xa804bf8 <col:14, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa804ba8 <col:14, col:20> '<dependent type>' lvalue
          (DeclRefExpr 0xa804b90 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa804a80 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa804bdc <col:28> 'const _CharT *' lvalue ParmVar 0xa8048d0 '__lhs' 'const _CharT *'))
      (IntegerLiteral 0xa804c18 <col:38> 'int' 0))))

;
    template <typename _CharT, typename _Traits, typename _Alloc> inline void swap(basic_string<_CharT, _Traits, _Alloc> &__lhs, basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa8052f8 </usr/include/c++/4.6/bits/basic_string.h:2659:5, col:26>
  (CallExpr 0xa8052d8 <col:7, col:23> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa805288 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa805270 <col:7> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa804f70 '__lhs' 'basic_string<_CharT, _Traits, _Alloc> &'))
    (DeclRefExpr 0xa8052bc <col:18> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa805140 '__rhs' 'basic_string<_CharT, _Traits, _Alloc> &')))

;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> basic_istream<wchar_t, std::char_traits<wchar_t> > &operator>>(basic_istream<wchar_t, std::char_traits<wchar_t> > &__in, basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > &__str)template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> basic_istream<char> &operator>>(basic_istream<char> &__is, basic_string<char> &__str)template <typename _CharT, typename _Traits, typename _Alloc> basic_istream<_CharT, _Traits> &operator>>(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str);
    basic_istream<char> &operator>>(basic_istream<char> &__is, basic_string<char> &__str);
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> inline basic_ostream<wchar_t, std::char_traits<wchar_t> > &operator<<(basic_ostream<wchar_t, std::char_traits<wchar_t> > &__os, const basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > &__str)template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> inline basic_ostream<char, std::char_traits<char> > &operator<<(basic_ostream<char, std::char_traits<char> > &__os, const basic_string<char, std::char_traits<char>, std::allocator<char> > &__str)template <typename _CharT, typename _Traits, typename _Alloc> inline basic_ostream<_CharT, _Traits> &operator<<(basic_ostream<_CharT, _Traits> &__os, const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa806ad8 </usr/include/c++/4.6/bits/basic_string.h:2694:5, line:2698:5>
  (ReturnStmt 0xa806ac8 <line:2697:7, col:63>
    (CallExpr 0xa806aa0 <col:14, col:63> '<dependent type>'
      (UnresolvedLookupExpr 0xa806970 <col:14> '<overloaded function type>' lvalue (ADL) = '1' 0xa74d820)
      (DeclRefExpr 0xa8069a4 <col:31> 'basic_ostream<_CharT, _Traits>' lvalue ParmVar 0xa806640 '__os' 'basic_ostream<_CharT, _Traits> &')
      (CallExpr 0xa806a10 <col:37, col:48> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8069d8 <col:37, col:43> '<dependent type>' lvalue
          (DeclRefExpr 0xa8069bc <col:37> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8067f0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (CallExpr 0xa806a80 <col:51, col:62> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa806a48 <col:51, col:57> '<dependent type>' lvalue
          (DeclRefExpr 0xa806a2c <col:51> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8067f0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))))

;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> basic_istream<wchar_t> &getline(basic_istream<wchar_t> &__in, basic_string<wchar_t> &__str, wchar_t __delim)template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> basic_istream<char> &getline(basic_istream<char> &__in, basic_string<char> &__str, char __delim)template <typename _CharT, typename _Traits, typename _Alloc> basic_istream<_CharT, _Traits> &getline(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str, _CharT __delim);
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> inline basic_istream<wchar_t, std::char_traits<wchar_t> > &getline(basic_istream<wchar_t, std::char_traits<wchar_t> > &__is, basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > &__str)template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> inline basic_istream<char, std::char_traits<char> > &getline(basic_istream<char, std::char_traits<char> > &__is, basic_string<char, std::char_traits<char>, std::allocator<char> > &__str)template <typename _CharT, typename _Traits, typename _Alloc> inline basic_istream<_CharT, _Traits> &getline(basic_istream<_CharT, _Traits> &__is, basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa8078e8 </usr/include/c++/4.6/bits/basic_string.h:2735:5, col:54>
  (ReturnStmt 0xa8078d8 <col:7, col:51>
    (CallExpr 0xa8078b0 <col:14, col:51> '<dependent type>'
      (UnresolvedLookupExpr 0xa8077c0 <col:14> '<overloaded function type>' lvalue (ADL) = '1' 0xa807790 0xa807160)
      (DeclRefExpr 0xa8077f8 <col:22> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa8074b0 '__is' 'basic_istream<_CharT, _Traits> &')
      (DeclRefExpr 0xa807810 <col:28> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa807660 '__str' 'basic_string<_CharT, _Traits, _Alloc> &')
      (CallExpr 0xa807890 <col:35, col:50> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa807840 <col:35, col:40> '<dependent type>' lvalue
          (DeclRefExpr 0xa807828 <col:35> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa8074b0 '__is' 'basic_istream<_CharT, _Traits> &'))
        (CharacterLiteral 0xa807878 <col:46> 'char'10)))))

;
    basic_istream<char> &getline(basic_istream<char> &__in, basic_string<char> &__str, char __delim);
    basic_istream<wchar_t> &getline(basic_istream<wchar_t> &__in, basic_string<wchar_t> &__str, wchar_t __delim);
}
extern long __builtin_expect(long, long);
namespace std {
    static const typename basic_string<_CharT, _Traits, _Alloc>::size_type _S_max_size = (BinaryOperator 0xa809700 </usr/include/c++/4.6/bits/basic_string.tcc:52:25, col:77> '<dependent type>' '/'
  (ParenExpr 0xa8096d0 <col:25, col:73> '<dependent type>'
    (CXXOperatorCallExpr 0xa8096a8 <col:26, col:72> '<dependent type>'
      (UnresolvedLookupExpr 0xa809668 <col:70, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (ParenExpr 0xa809638 <col:26, col:68> '<dependent type>'
        (BinaryOperator 0xa809620 <col:27, col:67> '<dependent type>' '/'
          (ParenExpr 0xa8095e8 <col:27, col:52> '<dependent type>'
            (CXXOperatorCallExpr 0xa8095c0 <col:28, col:51> '<dependent type>'
              (UnresolvedLookupExpr 0xa809580 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (DeclRefExpr 0xa809548 <col:28> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
              (UnaryExprOrTypeTraitExpr 0xa809568 <col:35, col:51> 'unsigned int' sizeof 'struct std::basic_string::_Rep_base')))
          (UnaryExprOrTypeTraitExpr 0xa809608 <col:54, col:67> 'unsigned int' sizeof '_CharT')))
      (IntegerLiteral 0xa809650 <col:72> 'int' 1)))
  (IntegerLiteral 0xa8096e8 <col:77> 'int' 4))
;
    static const _CharT _S_terminal = (CXXUnresolvedConstructExpr 0xa809b50 </usr/include/c++/4.6/bits/basic_string.tcc:57:25, col:32> '_CharT')
;
    static const typename basic_string<_CharT, _Traits, _Alloc>::size_type npos;
    static typename basic_string<_CharT, _Traits, _Alloc>::size_type _S_empty_rep_storage[(sizeof(std::basic_string::_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) / sizeof(size_type)];
    template <typename _InIterator> static _CharT *_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::input_iterator_tag) (CompoundStmt 0xa80c2e8 </usr/include/c++/4.6/bits/basic_string.tcc:81:7, line:119:7>
  (IfStmt 0xa80b340 <line:83:2, line:84:37>
    <<<NULL>>>
    (BinaryOperator 0xa80b288 <line:83:6, col:38> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa80b1a0 <col:6, col:15> '<dependent type>'
        (UnresolvedLookupExpr 0xa80b140 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa80b10c <col:6> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator')
        (DeclRefExpr 0xa80b124 <col:15> '_InIterator' lvalue ParmVar 0xa80aea0 '__end' '_InIterator'))
      (CXXOperatorCallExpr 0xa80b260 <col:24, col:38> '<dependent type>'
        (UnresolvedLookupExpr 0xa80b200 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa80b1c4 <col:24> 'const _Alloc' lvalue ParmVar 0xa80af10 '__a' 'const _Alloc &')
        (CXXUnresolvedConstructExpr 0xa80b1e8 <col:31, col:38> '_Alloc')))
    (ReturnStmt 0xa80b330 <line:84:4, col:37>
      (CallExpr 0xa80b310 <col:11, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80b2d8 <col:11, col:26> '<dependent type>' lvalue
          (CallExpr 0xa80b2b8 <col:11, col:24> '<dependent type>'
            (DeclRefExpr 0xa80b2a0 <col:11> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c6e20 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)')))))
    <<<NULL>>>)
  (DeclStmt 0xa80b418 <line:87:2, col:19>
    0xa80b3e0 "_CharT __buf[128]")
  (DeclStmt 0xa80b480 <line:88:2, col:21>
    0xa80b430 "size_type __len =
      (IntegerLiteral 0xa80b468 <col:20> 'int' 0)")
  (WhileStmt 0xa80b770 <line:89:2, line:93:4>
    <<<NULL>>>
    (BinaryOperator 0xa80b650 <line:89:9, col:64> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa80b518 <col:9, col:18> '<dependent type>'
        (UnresolvedLookupExpr 0xa80b4c0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
        (DeclRefExpr 0xa80b490 <col:9> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator')
        (DeclRefExpr 0xa80b4a8 <col:18> '_InIterator' lvalue ParmVar 0xa80aea0 '__end' '_InIterator'))
      (CXXOperatorCallExpr 0xa80b628 <col:27, col:64> '<dependent type>'
        (UnresolvedLookupExpr 0xa80b5d8 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
        (DeclRefExpr 0xa80b53c <col:27> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')
        (BinaryOperator 0xa80b5c0 <col:35, col:64> 'unsigned int' '/'
          (UnaryExprOrTypeTraitExpr 0xa80b588 <col:35, col:47> 'unsigned int' sizeof 
            (ParenExpr 0xa80b570 <col:41, col:47> '_CharT [128]' lvalue
              (DeclRefExpr 0xa80b554 <col:42> '_CharT [128]' lvalue Var 0xa80b3e0 '__buf' '_CharT [128]')))
          (UnaryExprOrTypeTraitExpr 0xa80b5a8 <col:51, col:64> 'unsigned int' sizeof '_CharT'))))
    (CompoundStmt 0xa80b758 <line:90:4, line:93:4>
      (BinaryOperator 0xa80b710 <line:91:6, col:24> '<dependent type>' '='
        (ArraySubscriptExpr 0xa80b6c8 <col:6, col:19> '<dependent type>' lvalue
          (DeclRefExpr 0xa80b668 <col:6> '_CharT [128]' lvalue Var 0xa80b3e0 '__buf' '_CharT [128]')
          (UnaryOperator 0xa80b6b0 <col:12, col:17> '<dependent type>' postfix '++'
            (DeclRefExpr 0xa80b680 <col:12> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')))
        (UnaryOperator 0xa80b6f8 <col:23, col:24> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa80b6dc <col:24> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator')))
      (UnaryOperator 0xa80b740 <line:92:6, col:8> '<dependent type>' prefix '++'
        (DeclRefExpr 0xa80b728 <col:8> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator'))))
  (DeclStmt 0xa80b8b8 <line:94:2, col:55>
    0xa80b7a0 "std::basic_string::_Rep *__r =
      (CallExpr 0xa80b890 <col:14, col:54> '<dependent type>'
        (DependentScopeDeclRefExpr 0xa80b7f8 <col:14, col:20> '<dependent type>' lvalue)
        (DeclRefExpr 0xa80b81c <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')
        (CXXUnresolvedConstructExpr 0xa80b858 <col:37, col:48> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa80b840 <col:47> 'int' 0))
        (DeclRefExpr 0xa80b874 <col:51> 'const _Alloc' lvalue ParmVar 0xa80af10 '__a' 'const _Alloc &'))")
  (CallExpr 0xa80b980 <line:95:2, col:41> '<dependent type>'
    (DeclRefExpr 0xa80b8c8 <col:2> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
    (CallExpr 0xa80b930 <col:10, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80b8f8 <col:10, col:15> '<dependent type>' lvalue
        (DeclRefExpr 0xa80b8e0 <col:10> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *')))
    (DeclRefExpr 0xa80b94c <col:29> '_CharT [128]' lvalue Var 0xa80b3e0 '__buf' '_CharT [128]')
    (DeclRefExpr 0xa80b964 <col:36> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type'))
  (IfStmt 0xa80c0e0 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/basic_string.tcc:111:4>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa80b9a8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa80c0c8 </usr/include/c++/4.6/bits/basic_string.tcc:97:4, line:111:4>
      (WhileStmt 0xa80c0b0 <line:98:6, line:110:8>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa80ba40 <line:98:13, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa80b9e8 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
          (DeclRefExpr 0xa80b9b8 <col:13> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator')
          (DeclRefExpr 0xa80b9d0 <col:22> '_InIterator' lvalue ParmVar 0xa80aea0 '__end' '_InIterator'))
        (CompoundStmt 0xa80c090 <line:99:8, line:110:8>
          (IfStmt 0xa80bf28 <line:100:3, line:107:5>
            <<<NULL>>>
            (CXXOperatorCallExpr 0xa80bb30 <line:100:7, col:21> '<dependent type>'
              (UnresolvedLookupExpr 0xa80bad0 <col:13, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (DeclRefExpr 0xa80ba64 <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')
              (CXXDependentScopeMemberExpr 0xa80ba98 <col:16, col:21> '<dependent type>' lvalue
                (DeclRefExpr 0xa80ba7c <col:16> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *')))
            (CompoundStmt 0xa80bf08 <line:101:5, line:107:5>
              (DeclStmt 0xa80bcf0 <line:103:7, col:63>
                0xa80bb70 "std::basic_string::_Rep *__another =
                  (CallExpr 0xa80bcc8 <col:25, col:62> '<dependent type>'
                    (DependentScopeDeclRefExpr 0xa80bbc8 <col:25, col:31> '<dependent type>' lvalue)
                    (CXXOperatorCallExpr 0xa80bc70 <col:41, col:49> '<dependent type>'
                      (UnresolvedLookupExpr 0xa80bc20 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                      (DeclRefExpr 0xa80bbec <col:41> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')
                      (IntegerLiteral 0xa80bc08 <col:49> 'int' 1))
                    (DeclRefExpr 0xa80bc94 <col:52> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')
                    (DeclRefExpr 0xa80bcac <col:59> 'const _Alloc' lvalue ParmVar 0xa80af10 '__a' 'const _Alloc &'))")
              (CallExpr 0xa80be10 <line:104:7, col:64> '<dependent type>'
                (DeclRefExpr 0xa80bd00 <col:7> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
                (CallExpr 0xa80bd68 <col:15, col:37> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa80bd30 <col:15, col:26> '<dependent type>' lvalue
                    (DeclRefExpr 0xa80bd18 <col:15> 'struct std::basic_string::_Rep *' lvalue Var 0xa80bb70 '__another' 'struct std::basic_string::_Rep *')))
                (CallExpr 0xa80bdd8 <col:40, col:56> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa80bda0 <col:40, col:45> '<dependent type>' lvalue
                    (DeclRefExpr 0xa80bd84 <col:40> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *')))
                (DeclRefExpr 0xa80bdf4 <col:59> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type'))
              (CallExpr 0xa80bea0 <line:105:7, col:26> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa80be50 <col:7, col:12> '<dependent type>' lvalue
                  (DeclRefExpr 0xa80be38 <col:7> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *'))
                (DeclRefExpr 0xa80be84 <col:23> 'const _Alloc' lvalue ParmVar 0xa80af10 '__a' 'const _Alloc &'))
              (BinaryOperator 0xa80bef0 <line:106:7, col:13> '<dependent type>' '='
                (DeclRefExpr 0xa80bec0 <col:7> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *')
                (DeclRefExpr 0xa80bed8 <col:13> 'struct std::basic_string::_Rep *' lvalue Var 0xa80bb70 '__another' 'struct std::basic_string::_Rep *')))
            <<<NULL>>>)
          (BinaryOperator 0xa80c048 <line:108:3, col:33> '<dependent type>' '='
            (ArraySubscriptExpr 0xa80c000 <col:3, col:28> '<dependent type>' lvalue
              (CallExpr 0xa80bf98 <col:3, col:19> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa80bf60 <col:3, col:8> '<dependent type>' lvalue
                  (DeclRefExpr 0xa80bf44 <col:3> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *')))
              (UnaryOperator 0xa80bfe8 <col:21, col:26> '<dependent type>' postfix '++'
                (DeclRefExpr 0xa80bfb4 <col:21> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type')))
            (UnaryOperator 0xa80c030 <col:32, col:33> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa80c014 <col:33> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator')))
          (UnaryOperator 0xa80c078 <line:109:3, col:5> '<dependent type>' prefix '++'
            (DeclRefExpr 0xa80c060 <col:5> '_InIterator' lvalue ParmVar 0xa80ae60 '__beg' '_InIterator')))))
    <<<NULL>>>)
  (IfStmt 0xa80c1c0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/basic_string.tcc:116:4>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa80c100 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa80c1a8 </usr/include/c++/4.6/bits/basic_string.tcc:113:4, line:116:4>
      (CallExpr 0xa80c178 <line:114:6, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80c128 <col:6, col:11> '<dependent type>' lvalue
          (DeclRefExpr 0xa80c110 <col:6> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *'))
        (DeclRefExpr 0xa80c15c <col:22> 'const _Alloc' lvalue ParmVar 0xa80af10 '__a' 'const _Alloc &'))
      (NullStmt 0xa80c198 <line:115:29>))
    <<<NULL>>>)
  (CallExpr 0xa80c248 <line:117:2, col:39> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa80c1f8 <col:2, col:7> '<dependent type>' lvalue
      (DeclRefExpr 0xa80c1dc <col:2> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *'))
    (DeclRefExpr 0xa80c22c <col:34> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa80b430 '__len' 'size_type':'typename _CharT_alloc_type::size_type'))
  (ReturnStmt 0xa80c2d8 <line:118:2, col:25>
    (CallExpr 0xa80c2b8 <col:9, col:25> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80c280 <col:9, col:14> '<dependent type>' lvalue
        (DeclRefExpr 0xa80c268 <col:9> 'struct std::basic_string::_Rep *' lvalue Var 0xa80b7a0 '__r' 'struct std::basic_string::_Rep *')))))

;
    template <typename _InIterator> static _CharT *_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, std::forward_iterator_tag) (CompoundStmt 0xa80d438 </usr/include/c++/4.6/bits/basic_string.tcc:127:7, line:149:7>
  (IfStmt 0xa80cbc0 <line:129:2, line:130:37>
    <<<NULL>>>
    (BinaryOperator 0xa80cb08 <line:129:6, col:38> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa80ca20 <col:6, col:15> '<dependent type>'
        (UnresolvedLookupExpr 0xa80c9c0 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa80c98c <col:6> '_InIterator' lvalue ParmVar 0xa80c6e0 '__beg' '_InIterator')
        (DeclRefExpr 0xa80c9a4 <col:15> '_InIterator' lvalue ParmVar 0xa80c720 '__end' '_InIterator'))
      (CXXOperatorCallExpr 0xa80cae0 <col:24, col:38> '<dependent type>'
        (UnresolvedLookupExpr 0xa80ca80 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa80ca44 <col:24> 'const _Alloc' lvalue ParmVar 0xa80c790 '__a' 'const _Alloc &')
        (CXXUnresolvedConstructExpr 0xa80ca68 <col:31, col:38> '_Alloc')))
    (ReturnStmt 0xa80cbb0 <line:130:4, col:37>
      (CallExpr 0xa80cb90 <col:11, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80cb58 <col:11, col:26> '<dependent type>' lvalue
          (CallExpr 0xa80cb38 <col:11, col:24> '<dependent type>'
            (DeclRefExpr 0xa80cb20 <col:11> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c6e20 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)')))))
    <<<NULL>>>)
  (IfStmt 0xa80ce68 <line:133:2, line:134:72>
    <<<NULL>>>
    (BinaryOperator 0xa80cd20 <line:133:6, col:54> '<dependent type>' '&&'
      (CallExpr 0xa80cc50 <col:6, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa80cc00 <col:6, col:17> '<overloaded function type>' lvalue (no ADL) = '1' 0xa5f97e0 0xa5f99e0)
        (DeclRefExpr 0xa80cc38 <col:35> '_InIterator' lvalue ParmVar 0xa80c6e0 '__beg' '_InIterator'))
      (CXXOperatorCallExpr 0xa80ccf8 <col:45, col:54> '<dependent type>'
        (UnresolvedLookupExpr 0xa80cca0 <col:51, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
        (DeclRefExpr 0xa80cc70 <col:45> '_InIterator' lvalue ParmVar 0xa80c6e0 '__beg' '_InIterator')
        (DeclRefExpr 0xa80cc88 <col:54> '_InIterator' lvalue ParmVar 0xa80c720 '__end' '_InIterator')))
    (CallExpr 0xa80ce38 <line:134:4, col:72> 'void'
      (ImplicitCastExpr 0xa80ce28 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa80ce0c <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5710 '__throw_logic_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa80ce58 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa80cdf8 <col:24, col:30> 'const char [42]' lvalue
          (StringLiteral 0xa80cdb0 </usr/include/c++/4.6/bits/basic_string.tcc:134:28> 'const char [42]' lvalue "basic_string::_S_construct null not valid"))))
    <<<NULL>>>)
  (DeclStmt 0xa80cf98 <line:136:2, line:137:22>
    0xa80ce90 "const size_type __dnew =
      (CXXStaticCastExpr 0xa80cf80 <line:136:27, line:137:21> 'size_type':'typename _CharT_alloc_type::size_type' static_cast<size_type> <Dependent>
        (CallExpr 0xa80cf50 <line:136:50, line:137:20> '<dependent type>'
          (UnresolvedLookupExpr 0xa80cee8 <line:136:50, col:55> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
          (DeclRefExpr 0xa80cf1c <col:64> '_InIterator' lvalue ParmVar 0xa80c6e0 '__beg' '_InIterator')
          (DeclRefExpr 0xa80cf34 <line:137:15> '_InIterator' lvalue ParmVar 0xa80c720 '__end' '_InIterator')))")
  (DeclStmt 0xa80d0e8 <line:139:2, col:56>
    0xa80cfc0 "std::basic_string::_Rep *__r =
      (CallExpr 0xa80d0b0 <col:14, col:55> '<dependent type>'
        (DependentScopeDeclRefExpr 0xa80d018 <col:14, col:20> '<dependent type>' lvalue)
        (DeclRefExpr 0xa80d03c <col:30> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80ce90 '__dnew' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CXXUnresolvedConstructExpr 0xa80d078 <col:38, col:49> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa80d060 <col:48> 'int' 0))
        (DeclRefExpr 0xa80d094 <col:52> 'const _Alloc' lvalue ParmVar 0xa80c790 '__a' 'const _Alloc &'))")
  (IfStmt 0xa80d230 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/basic_string.tcc:141:54>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa80d0f8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa80d218 </usr/include/c++/4.6/bits/basic_string.tcc:141:4, col:54>
      (CallExpr 0xa80d1f0 <col:6, col:51> '<dependent type>'
        (UnresolvedLookupExpr 0xa80d108 <col:6> '<dependent type>' lvalue (no ADL) = '1' 0xa7c62f0 0xa7c6480 0xa7c6640 0xa7c6820 0xa7c6a00)
        (CallExpr 0xa80d1a0 <col:20, col:36> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa80d168 <col:20, col:25> '<dependent type>' lvalue
            (DeclRefExpr 0xa80d14c <col:20> 'struct std::basic_string::_Rep *' lvalue Var 0xa80cfc0 '__r' 'struct std::basic_string::_Rep *')))
        (DeclRefExpr 0xa80d1bc <col:39> '_InIterator' lvalue ParmVar 0xa80c6e0 '__beg' '_InIterator')
        (DeclRefExpr 0xa80d1d4 <col:46> '_InIterator' lvalue ParmVar 0xa80c720 '__end' '_InIterator')))
    <<<NULL>>>)
  (IfStmt 0xa80d310 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/basic_string.tcc:146:4>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa80d250 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa80d2f8 </usr/include/c++/4.6/bits/basic_string.tcc:143:4, line:146:4>
      (CallExpr 0xa80d2c8 <line:144:6, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80d278 <col:6, col:11> '<dependent type>' lvalue
          (DeclRefExpr 0xa80d260 <col:6> 'struct std::basic_string::_Rep *' lvalue Var 0xa80cfc0 '__r' 'struct std::basic_string::_Rep *'))
        (DeclRefExpr 0xa80d2ac <col:22> 'const _Alloc' lvalue ParmVar 0xa80c790 '__a' 'const _Alloc &'))
      (NullStmt 0xa80d2e8 <line:145:29>))
    <<<NULL>>>)
  (CallExpr 0xa80d398 <line:147:2, col:40> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa80d348 <col:2, col:7> '<dependent type>' lvalue
      (DeclRefExpr 0xa80d32c <col:2> 'struct std::basic_string::_Rep *' lvalue Var 0xa80cfc0 '__r' 'struct std::basic_string::_Rep *'))
    (DeclRefExpr 0xa80d37c <col:34> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80ce90 '__dnew' 'const size_type':'const typename _CharT_alloc_type::size_type'))
  (ReturnStmt 0xa80d428 <line:148:2, col:25>
    (CallExpr 0xa80d408 <col:9, col:25> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80d3d0 <col:9, col:14> '<dependent type>' lvalue
        (DeclRefExpr 0xa80d3b8 <col:9> 'struct std::basic_string::_Rep *' lvalue Var 0xa80cfc0 '__r' 'struct std::basic_string::_Rep *')))))

;
    static _CharT *_S_construct(size_type __n, _CharT __c, const _Alloc &__a) (CompoundStmt 0xa80df98 </usr/include/c++/4.6/bits/basic_string.tcc:155:5, line:167:5>
  (IfStmt 0xa80dc20 <line:157:7, line:158:35>
    <<<NULL>>>
    (BinaryOperator 0xa80db68 <line:157:11, col:37> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa80da80 <col:11, col:18> '<dependent type>'
        (UnresolvedLookupExpr 0xa80da20 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa80d9ec <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80d7e0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (IntegerLiteral 0xa80da08 <col:18> 'int' 0))
      (CXXOperatorCallExpr 0xa80db40 <col:23, col:37> '<dependent type>'
        (UnresolvedLookupExpr 0xa80dae0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa80daa4 <col:23> 'const _Alloc' lvalue ParmVar 0xa80d890 '__a' 'const _Alloc &')
        (CXXUnresolvedConstructExpr 0xa80dac8 <col:30, col:37> '_Alloc')))
    (ReturnStmt 0xa80dc10 <line:158:2, col:35>
      (CallExpr 0xa80dbf0 <col:9, col:35> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80dbb8 <col:9, col:24> '<dependent type>' lvalue
          (CallExpr 0xa80db98 <col:9, col:22> '<dependent type>'
            (DeclRefExpr 0xa80db80 <col:9> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c6e20 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)')))))
    <<<NULL>>>)
  (DeclStmt 0xa80dd68 <line:161:7, col:58>
    0xa80dc50 "std::basic_string::_Rep *__r =
      (CallExpr 0xa80dd40 <col:19, col:57> '<dependent type>'
        (DependentScopeDeclRefExpr 0xa80dca8 <col:19, col:25> '<dependent type>' lvalue)
        (DeclRefExpr 0xa80dccc <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80d7e0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (CXXUnresolvedConstructExpr 0xa80dd08 <col:40, col:51> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa80dcf0 <col:50> 'int' 0))
        (DeclRefExpr 0xa80dd24 <col:54> 'const _Alloc' lvalue ParmVar 0xa80d890 '__a' 'const _Alloc &'))")
  (IfStmt 0xa80de70 <line:162:7, line:163:39>
    <<<NULL>>>
    (DeclRefExpr 0xa80dd78 <line:162:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80d7e0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa80de48 <line:163:2, col:39> '<dependent type>'
      (DeclRefExpr 0xa80dd90 <col:2> 'void (_CharT *, size_type, _CharT)' lvalue CXXMethod 0xa7c6070 '_M_assign' 'void (_CharT *, size_type, _CharT)')
      (CallExpr 0xa80ddf8 <col:12, col:28> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80ddc0 <col:12, col:17> '<dependent type>' lvalue
          (DeclRefExpr 0xa80dda8 <col:12> 'struct std::basic_string::_Rep *' lvalue Var 0xa80dc50 '__r' 'struct std::basic_string::_Rep *')))
      (DeclRefExpr 0xa80de14 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80d7e0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa80de2c <col:36> '_CharT' lvalue ParmVar 0xa80d820 '__c' '_CharT'))
    <<<NULL>>>)
  (CallExpr 0xa80def8 <line:165:7, col:42> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa80dea8 <col:7, col:12> '<dependent type>' lvalue
      (DeclRefExpr 0xa80de8c <col:7> 'struct std::basic_string::_Rep *' lvalue Var 0xa80dc50 '__r' 'struct std::basic_string::_Rep *'))
    (DeclRefExpr 0xa80dedc <col:39> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80d7e0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
  (ReturnStmt 0xa80df88 <line:166:7, col:30>
    (CallExpr 0xa80df68 <col:14, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80df30 <col:14, col:19> '<dependent type>' lvalue
        (DeclRefExpr 0xa80df18 <col:14> 'struct std::basic_string::_Rep *' lvalue Var 0xa80dc50 '__r' 'struct std::basic_string::_Rep *')))))


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(const basic_string<_CharT, _Traits, _Alloc> &__str) : _M_dataplus((CallExpr 0xa80e748 </usr/include/c++/4.6/bits/basic_string.tcc:172:19, line:173:29> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa80e608 <line:172:19, col:35> '<dependent type>' lvalue
    (CallExpr 0xa80e5e8 <col:19, col:32> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80e5b0 <col:19, col:25> '<dependent type>' lvalue
        (DeclRefExpr 0xa80e594 <col:19> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80e4a0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))
  (CXXUnresolvedConstructExpr 0xa80e6b8 <col:43, col:71> '_Alloc'
    (CallExpr 0xa80e698 <col:50, col:70> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80e660 <col:50, col:56> '<dependent type>' lvalue
        (DeclRefExpr 0xa80e648 <col:50> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80e4a0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))
  (CallExpr 0xa80e728 <line:173:8, col:28> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa80e6f0 <col:8, col:14> '<dependent type>' lvalue
      (DeclRefExpr 0xa80e6d4 <col:8> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80e4a0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))
, (CallExpr 0xa80e7c0 </usr/include/c++/4.6/bits/basic_string.tcc:174:5, col:25> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa80e788 <col:5, col:11> '<dependent type>' lvalue
    (DeclRefExpr 0xa80e76c <col:5> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80e4a0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
) (CompoundStmt 0xa80e820 </usr/include/c++/4.6/bits/basic_string.tcc:175:5, col:7>)


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(const _Alloc &__a) : _M_dataplus((CallExpr 0xa80eef0 </usr/include/c++/4.6/bits/basic_string.tcc:180:19, col:58> '<dependent type>'
  (UnresolvedLookupExpr 0xa80ee58 <col:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (CXXUnresolvedConstructExpr 0xa80eea0 <col:32, col:42> 'size_type':'typename _CharT_alloc_type::size_type')
  (CXXUnresolvedConstructExpr 0xa80eec0 <col:45, col:52> '_CharT')
  (DeclRefExpr 0xa80eed8 <col:55> 'const _Alloc' lvalue ParmVar 0xa80ed30 '__a' 'const _Alloc &'))
, (DeclRefExpr 0xa80ef18 </usr/include/c++/4.6/bits/basic_string.tcc:180:61> 'const _Alloc' lvalue ParmVar 0xa80ed30 '__a' 'const _Alloc &')
) (CompoundStmt 0xa80ef70 </usr/include/c++/4.6/bits/basic_string.tcc:181:5, col:7>)


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n = (DeclRefExpr 0xa7e4408 </usr/include/c++/4.6/bits/basic_string.h:457:22> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) : _M_dataplus((CallExpr 0xa80fa68 </usr/include/c++/4.6/bits/basic_string.tcc:186:19, line:190:28> '<dependent type>'
  (UnresolvedLookupExpr 0xa80f5f0 <line:186:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (CXXOperatorCallExpr 0xa80f800 <col:32, line:188:35> '<dependent type>'
    (UnresolvedLookupExpr 0xa80f7b0 <line:187:11, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
    (CallExpr 0xa80f680 <line:186:32, col:46> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80f648 <col:32, col:38> '<dependent type>' lvalue
        (DeclRefExpr 0xa80f630 <col:32> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80f460 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
    (CallExpr 0xa80f788 <line:187:13, line:188:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa80f6b8 <line:187:13, col:19> '<dependent type>' lvalue
        (DeclRefExpr 0xa80f69c <col:13> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80f460 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (DeclRefExpr 0xa80f6ec <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80f4a0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (StringLiteral 0xa80f750 <line:188:7> 'const char [27]' lvalue "basic_string::basic_string")))
  (CXXOperatorCallExpr 0xa80fa20 <line:189:11, line:190:13> '<dependent type>'
    (UnresolvedLookupExpr 0xa80f9d0 <col:11, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
    (CXXOperatorCallExpr 0xa80f990 <line:189:11, col:54> '<dependent type>'
      (UnresolvedLookupExpr 0xa80f940 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
      (CallExpr 0xa80f878 <col:11, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80f840 <col:11, col:17> '<dependent type>' lvalue
          (DeclRefExpr 0xa80f824 <col:11> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80f460 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (CallExpr 0xa80f918 <col:29, col:54> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa80f8b0 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa80f894 <col:29> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80f460 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa80f8e4 <col:44> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80f4a0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa80f8fc <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80f4e0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
    (DeclRefExpr 0xa80f9b4 <line:190:13> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa80f4a0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
  (CXXUnresolvedConstructExpr 0xa80fa50 <col:20, col:27> '_Alloc'))
, (CXXUnresolvedConstructExpr 0xa80fa98 </usr/include/c++/4.6/bits/basic_string.tcc:190:31, col:38> '_Alloc')
) (CompoundStmt 0xa80faf0 </usr/include/c++/4.6/bits/basic_string.tcc:191:5, col:7>)


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n, const _Alloc &__a) : _M_dataplus((CallExpr 0xa810638 </usr/include/c++/4.6/bits/basic_string.tcc:197:19, line:201:23> '<dependent type>'
  (UnresolvedLookupExpr 0xa810210 <line:197:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (CXXOperatorCallExpr 0xa8103d8 <col:32, line:199:35> '<dependent type>'
    (UnresolvedLookupExpr 0xa810388 <line:198:11, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
    (CallExpr 0xa8102a0 <line:197:32, col:46> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa810268 <col:32, col:38> '<dependent type>' lvalue
        (DeclRefExpr 0xa810250 <col:32> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80ffe0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
    (CallExpr 0xa810360 <line:198:13, line:199:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8102d8 <line:198:13, col:19> '<dependent type>' lvalue
        (DeclRefExpr 0xa8102bc <col:13> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80ffe0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (DeclRefExpr 0xa81030c <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa810020 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (StringLiteral 0xa810324 <line:199:7> 'const char [27]' lvalue "basic_string::basic_string")))
  (CXXOperatorCallExpr 0xa8105f8 <line:200:11, line:201:13> '<dependent type>'
    (UnresolvedLookupExpr 0xa8105a8 <col:11, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
    (CXXOperatorCallExpr 0xa810568 <line:200:11, col:54> '<dependent type>'
      (UnresolvedLookupExpr 0xa810518 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
      (CallExpr 0xa810450 <col:11, col:25> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa810418 <col:11, col:17> '<dependent type>' lvalue
          (DeclRefExpr 0xa8103fc <col:11> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80ffe0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
      (CallExpr 0xa8104f0 <col:29, col:54> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa810488 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa81046c <col:29> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa80ffe0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa8104bc <col:44> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa810020 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa8104d4 <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa810060 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
    (DeclRefExpr 0xa81058c <line:201:13> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa810020 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
  (DeclRefExpr 0xa81061c <col:20> 'const _Alloc' lvalue ParmVar 0xa8100d0 '__a' 'const _Alloc &'))
, (DeclRefExpr 0xa810660 </usr/include/c++/4.6/bits/basic_string.tcc:201:26> 'const _Alloc' lvalue ParmVar 0xa8100d0 '__a' 'const _Alloc &')
) (CompoundStmt 0xa8106c0 </usr/include/c++/4.6/bits/basic_string.tcc:202:5, col:7>)


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(const _CharT *__s, size_type __n, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4428 </usr/include/c++/4.6/bits/basic_string.h:478:26, col:33> '_Alloc')
) : _M_dataplus((CallExpr 0xa810ed8 </usr/include/c++/4.6/bits/basic_string.tcc:208:19, col:51> '<dependent type>'
  (UnresolvedLookupExpr 0xa810dc0 <col:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (DeclRefExpr 0xa810e00 <col:32> 'const _CharT *' lvalue ParmVar 0xa810bd0 '__s' 'const _CharT *')
  (CXXOperatorCallExpr 0xa810e98 <col:37, col:43> '<dependent type>'
    (UnresolvedLookupExpr 0xa810e48 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
    (DeclRefExpr 0xa810e18 <col:37> 'const _CharT *' lvalue ParmVar 0xa810bd0 '__s' 'const _CharT *')
    (DeclRefExpr 0xa810e30 <col:43> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa810c10 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
  (DeclRefExpr 0xa810ebc <col:48> 'const _Alloc' lvalue ParmVar 0xa810c80 '__a' 'const _Alloc &'))
, (DeclRefExpr 0xa810f00 </usr/include/c++/4.6/bits/basic_string.tcc:208:54> 'const _Alloc' lvalue ParmVar 0xa810c80 '__a' 'const _Alloc &')
) (CompoundStmt 0xa810f60 </usr/include/c++/4.6/bits/basic_string.tcc:209:5, col:7>)


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(const _CharT *__s, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4448 </usr/include/c++/4.6/bits/basic_string.h:484:59, col:66> '_Alloc')
) : _M_dataplus((CallExpr 0xa8118d8 </usr/include/c++/4.6/bits/basic_string.tcc:215:19, line:216:26> '<dependent type>'
  (UnresolvedLookupExpr 0xa811668 <line:215:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (DeclRefExpr 0xa8116a8 <col:32> 'const _CharT *' lvalue ParmVar 0xa8114d0 '__s' 'const _CharT *')
  (ConditionalOperator 0xa8118a0 <col:37, line:216:17> '<dependent type>'
    (DeclRefExpr 0xa8116c0 <line:215:37> 'const _CharT *' lvalue ParmVar 0xa8114d0 '__s' 'const _CharT *')
    (CXXOperatorCallExpr 0xa8117d0 <col:43, col:72> '<dependent type>'
      (UnresolvedLookupExpr 0xa811780 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
      (DeclRefExpr 0xa8116d8 <col:43> 'const _CharT *' lvalue ParmVar 0xa8114d0 '__s' 'const _CharT *')
      (CallExpr 0xa811760 <col:49, col:72> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa811710 <col:49, col:62> '<dependent type>' lvalue)
        (DeclRefExpr 0xa811744 <col:69> 'const _CharT *' lvalue ParmVar 0xa8114d0 '__s' 'const _CharT *')))
    (CXXOperatorCallExpr 0xa811878 <line:216:11, col:17> '<dependent type>'
      (UnresolvedLookupExpr 0xa811828 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
      (DeclRefExpr 0xa8117f4 <col:11> 'const _CharT *' lvalue ParmVar 0xa8114d0 '__s' 'const _CharT *')
      (DeclRefExpr 0xa81180c <col:17> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))
  (DeclRefExpr 0xa8118bc <col:23> 'const _Alloc' lvalue ParmVar 0xa811540 '__a' 'const _Alloc &'))
, (DeclRefExpr 0xa811900 </usr/include/c++/4.6/bits/basic_string.tcc:216:29> 'const _Alloc' lvalue ParmVar 0xa811540 '__a' 'const _Alloc &')
) (CompoundStmt 0xa811960 </usr/include/c++/4.6/bits/basic_string.tcc:217:5, col:7>)


    basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(size_type __n, _CharT __c, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4468 </usr/include/c++/4.6/bits/basic_string.h:491:67, col:74> '_Alloc')
) : _M_dataplus((CallExpr 0xa8120b8 </usr/include/c++/4.6/bits/basic_string.tcc:222:19, col:45> '<dependent type>'
  (UnresolvedLookupExpr 0xa812030 <col:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (DeclRefExpr 0xa812070 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa811e40 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
  (DeclRefExpr 0xa812088 <col:37> '_CharT' lvalue ParmVar 0xa811e80 '__c' '_CharT')
  (DeclRefExpr 0xa8120a0 <col:42> 'const _Alloc' lvalue ParmVar 0xa811ef0 '__a' 'const _Alloc &'))
, (DeclRefExpr 0xa8120e0 </usr/include/c++/4.6/bits/basic_string.tcc:222:48> 'const _Alloc' lvalue ParmVar 0xa811ef0 '__a' 'const _Alloc &')
) (CompoundStmt 0xa812140 </usr/include/c++/4.6/bits/basic_string.tcc:223:5, col:7>)


    template <typename _InputIterator> basic_string<_CharT, _Traits, _Alloc>::basic_string<_CharT, _Traits, _Alloc>(_InputIterator __beg, _InputIterator __end, const _Alloc &__a = (CXXUnresolvedConstructExpr 0xa7e4488 </usr/include/c++/4.6/bits/basic_string.h:527:28, col:35> '_Alloc')
) : _M_dataplus((CallExpr 0xa812948 </usr/include/c++/4.6/bits/basic_string.tcc:230:19, col:49> '<dependent type>'
  (UnresolvedLookupExpr 0xa8128c0 <col:19> '<dependent type>' lvalue (no ADL) = '1' 0xa7dba50 0xa80b0a0 0xa80c920 0xa80d950)
  (DeclRefExpr 0xa812900 <col:32> '_InputIterator' lvalue ParmVar 0xa812670 '__beg' '_InputIterator')
  (DeclRefExpr 0xa812918 <col:39> '_InputIterator' lvalue ParmVar 0xa8126b0 '__end' '_InputIterator')
  (DeclRefExpr 0xa812930 <col:46> 'const _Alloc' lvalue ParmVar 0xa812720 '__a' 'const _Alloc &'))
, (DeclRefExpr 0xa812970 </usr/include/c++/4.6/bits/basic_string.tcc:230:52> 'const _Alloc' lvalue ParmVar 0xa812720 '__a' 'const _Alloc &')
) (CompoundStmt 0xa8129d0 </usr/include/c++/4.6/bits/basic_string.tcc:231:5, col:7>)

;
    basic_string<_CharT, _Traits, _Alloc> &assign(const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa813690 </usr/include/c++/4.6/bits/basic_string.tcc:245:5, line:255:5>
  (IfStmt 0xa813638 <line:246:7, line:253:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa813220 <line:246:11, col:36> '<dependent type>'
      (UnresolvedLookupExpr 0xa8131c8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (CallExpr 0xa813138 <col:11, col:18> '<dependent type>'
        (MemberExpr 0xa813118 <col:11> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa813108 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (CallExpr 0xa8131a8 <col:23, col:36> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa813170 <col:23, col:29> '<dependent type>' lvalue
          (DeclRefExpr 0xa813154 <col:23> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa812e80 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))
    (CompoundStmt 0xa813618 <line:247:2, line:253:2>
      (DeclStmt 0xa8132f0 <line:249:4, col:52>
        0xa813250 "const allocator_type __a =
          (CallExpr 0xa8132d0 <col:31, col:51> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa813298 <col:31, col:37> '<dependent type>' lvalue
              (CXXThisExpr 0xa813288 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this)))")
      (DeclStmt 0xa8134c0 <line:250:4, col:71>
        0xa813330 "_CharT *__tmp =
          (CallExpr 0xa813498 <col:20, col:70> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8133d8 <col:20, col:36> '<dependent type>' lvalue
              (CallExpr 0xa8133b8 <col:20, col:33> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa813380 <col:20, col:26> '<dependent type>' lvalue
                  (DeclRefExpr 0xa813364 <col:20> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa812e80 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))
            (DeclRefExpr 0xa81340c <col:44> 'const allocator_type':'const _Alloc' lvalue Var 0xa813250 '__a' 'const allocator_type':'const _Alloc')
            (CallExpr 0xa813478 <col:49, col:69> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa813440 <col:49, col:55> '<dependent type>' lvalue
                (DeclRefExpr 0xa813424 <col:49> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa812e80 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))))")
      (CallExpr 0xa813570 <line:251:4, col:28> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa813520 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa813500 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa8134e0 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa8134d0 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa813554 <col:25> 'const allocator_type':'const _Alloc' lvalue Var 0xa813250 '__a' 'const allocator_type':'const _Alloc'))
      (CallExpr 0xa8135f8 <line:252:4, col:17> '<dependent type>'
        (UnresolvedMemberExpr 0xa8135a0 <col:4> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8135e0 <col:12> '_CharT *' lvalue Var 0xa813330 '__tmp' '_CharT *')))
    <<<NULL>>>)
  (ReturnStmt 0xa813680 <line:254:7, col:15>
    (UnaryOperator 0xa813668 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa813658 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    basic_string<_CharT, _Traits, _Alloc> &assign(const _CharT *__s, size_type __n) (CompoundStmt 0xa814700 </usr/include/c++/4.6/bits/basic_string.tcc:261:5, line:277:6>
  (NullStmt 0xa813e38 <line:262:46>)
  (CallExpr 0xa813f28 <line:263:7, col:64> '<dependent type>'
    (MemberExpr 0xa813e58 <col:7> '<bound member function type>' ->_M_check_length 0xa7c58d0
      (CXXThisExpr 0xa813e48 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (CallExpr 0xa813ec0 <col:23, col:34> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa813e88 <col:23, col:29> '<dependent type>' lvalue
        (CXXThisExpr 0xa813e78 <col:23> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
    (DeclRefExpr 0xa813edc <col:37> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa813bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa813ef4 <col:42> 'const char [21]' lvalue "basic_string::assign"))
  (IfStmt 0xa8146e0 <line:264:7, line:276:2>
    <<<NULL>>>
    (BinaryOperator 0xa814060 <line:264:11, col:54> '<dependent type>' '||'
      (CallExpr 0xa813f98 <col:11, col:26> '<dependent type>'
        (MemberExpr 0xa813f60 <col:11> '<bound member function type>' ->_M_disjunct 0xa7c5b70
          (CXXThisExpr 0xa813f50 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa813f80 <col:23> 'const _CharT *' lvalue ParmVar 0xa813b70 '__s' 'const _CharT *'))
      (CallExpr 0xa814040 <col:31, col:54> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa814008 <col:31, col:41> '<dependent type>' lvalue
          (CallExpr 0xa813fe8 <col:31, col:38> '<dependent type>'
            (MemberExpr 0xa813fc8 <col:31> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa813fb8 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (ReturnStmt 0xa8141b0 <line:265:2, col:61>
      (CallExpr 0xa814180 <col:9, col:61> '<dependent type>'
        (MemberExpr 0xa814088 <col:9> '<bound member function type>' ->_M_replace_safe 0xa7db0f0
          (CXXThisExpr 0xa814078 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (CXXUnresolvedConstructExpr 0xa8140c8 <col:25, col:36> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa8140b0 <col:35> 'int' 0))
        (CallExpr 0xa814130 <col:39, col:50> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8140f8 <col:39, col:45> '<dependent type>' lvalue
            (CXXThisExpr 0xa8140e8 <col:39> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
        (DeclRefExpr 0xa81414c <col:53> 'const _CharT *' lvalue ParmVar 0xa813b70 '__s' 'const _CharT *')
        (DeclRefExpr 0xa814164 <col:58> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa813bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
    (CompoundStmt 0xa8146c0 <line:267:2, line:276:2>
      (DeclStmt 0xa8142f8 <line:269:4, col:43>
        0xa8141d0 "const size_type __pos =
          (CXXOperatorCallExpr 0xa8142d0 <col:28, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa814290 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa814204 <col:28> 'const _CharT *' lvalue ParmVar 0xa813b70 '__s' 'const _CharT *')
            (CallExpr 0xa814270 <col:34, col:42> '<dependent type>'
              (UnresolvedMemberExpr 0xa814230 <col:34> '<bound member function type>' lvalue)))")
      (IfStmt 0xa8145a8 <line:270:4, line:273:33>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa814388 <line:270:8, col:17> '<dependent type>'
          (UnresolvedLookupExpr 0xa814338 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20 0xa8040f0 0xa804630 0xa804b60)
          (DeclRefExpr 0xa814308 <col:8> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8141d0 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa814320 <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa813bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
        (CallExpr 0xa814468 <line:271:6, col:33> '<dependent type>'
          (DeclRefExpr 0xa8143ac <col:6> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
          (CallExpr 0xa814418 <col:14, col:22> '<dependent type>'
            (UnresolvedMemberExpr 0xa8143d8 <col:14> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa814434 <col:25> 'const _CharT *' lvalue ParmVar 0xa813b70 '__s' 'const _CharT *')
          (DeclRefExpr 0xa81444c <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa813bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
        (IfStmt 0xa814588 <line:272:9, line:273:33>
          <<<NULL>>>
          (DeclRefExpr 0xa814490 <line:272:13> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8141d0 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')
          (CallExpr 0xa814560 <line:273:6, col:33> '<dependent type>'
            (DeclRefExpr 0xa8144a8 <col:6> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5eb0 '_M_move' 'void (_CharT *, const _CharT *, size_type)')
            (CallExpr 0xa814510 <col:14, col:22> '<dependent type>'
              (UnresolvedMemberExpr 0xa8144d0 <col:14> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa81452c <col:25> 'const _CharT *' lvalue ParmVar 0xa813b70 '__s' 'const _CharT *')
            (DeclRefExpr 0xa814544 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa813bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
          <<<NULL>>>))
      (CallExpr 0xa814668 <line:274:4, col:44> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa814618 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa8145f8 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa8145d8 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa8145c8 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa81464c <col:41> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa813bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
      (ReturnStmt 0xa8146b0 <line:275:4, col:12>
        (UnaryOperator 0xa814698 <col:11, col:12> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa814688 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))


    basic_string<_CharT, _Traits, _Alloc> &append(size_type __n, _CharT __c) (CompoundStmt 0xa815628 </usr/include/c++/4.6/bits/basic_string.tcc:283:5, line:294:5>
  (IfStmt 0xa8155d0 <line:284:7, line:292:2>
    <<<NULL>>>
    (DeclRefExpr 0xa814e78 <line:284:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa814bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa8155a8 <line:285:2, line:292:2>
      (CallExpr 0xa814f48 <line:286:4, col:61> '<dependent type>'
        (MemberExpr 0xa814ea0 <col:4> '<bound member function type>' ->_M_check_length 0xa7c58d0
          (CXXThisExpr 0xa814e90 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (CXXUnresolvedConstructExpr 0xa814ee0 <col:20, col:31> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa814ec8 <col:30> 'int' 0))
        (DeclRefExpr 0xa814efc <col:34> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa814bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (StringLiteral 0xa814f14 <col:39> 'const char [21]' lvalue "basic_string::append"))
      (DeclStmt 0xa8150b0 <line:287:4, col:46>
        0xa814f80 "const size_type __len =
          (CXXOperatorCallExpr 0xa815088 <col:28, col:45> '<dependent type>'
            (UnresolvedLookupExpr 0xa815038 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (DeclRefExpr 0xa814fb4 <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa814bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
            (CallExpr 0xa815018 <col:34, col:45> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa814fe0 <col:34, col:40> '<dependent type>' lvalue
                (CXXThisExpr 0xa814fd0 <col:34> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
      (IfStmt 0xa815308 <line:288:4, line:289:25>
        <<<NULL>>>
        (BinaryOperator 0xa815270 <line:288:8, col:59> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa8151a0 <col:8, col:31> '<dependent type>'
            (UnresolvedLookupExpr 0xa815150 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
            (DeclRefExpr 0xa8150c0 <col:8> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa814f80 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (CallExpr 0xa815130 <col:16, col:31> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8150f8 <col:16, col:22> '<dependent type>' lvalue
                (CXXThisExpr 0xa8150d8 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
          (CallExpr 0xa815250 <col:36, col:59> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa815218 <col:36, col:46> '<dependent type>' lvalue
              (CallExpr 0xa8151f8 <col:36, col:43> '<dependent type>'
                (MemberExpr 0xa8151d8 <col:36> '<bound member function type>' ->_M_rep 0xa7c5400
                  (CXXThisExpr 0xa8151c8 <col:36> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
        (CallExpr 0xa8152e8 <line:289:6, col:25> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa815298 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa815288 <col:6> 'basic_string<_CharT, _Traits, _Alloc> *' this))
          (DeclRefExpr 0xa8152cc <col:20> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa814f80 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (CallExpr 0xa8154c0 <line:290:4, col:48> '<dependent type>'
        (DeclRefExpr 0xa815324 <col:4> 'void (_CharT *, size_type, _CharT)' lvalue CXXMethod 0xa7c6070 '_M_assign' 'void (_CharT *, size_type, _CharT)')
        (CXXOperatorCallExpr 0xa815468 <col:14, col:37> '<dependent type>'
          (UnresolvedLookupExpr 0xa815418 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (CallExpr 0xa815390 <col:14, col:22> '<dependent type>'
            (UnresolvedMemberExpr 0xa815350 <col:14> '<bound member function type>' lvalue))
          (CallExpr 0xa8153f8 <col:26, col:37> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8153c0 <col:26, col:32> '<dependent type>' lvalue
              (CXXThisExpr 0xa8153b0 <col:26> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa81548c <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa814bb0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa8154a4 <col:45> '_CharT' lvalue ParmVar 0xa814bf0 '__c' '_CharT'))
      (CallExpr 0xa815588 <line:291:4, col:46> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa815538 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa815518 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa8154f8 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa8154e8 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa81556c <col:41> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa814f80 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa815618 <line:293:7, col:15>
    (UnaryOperator 0xa815600 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa8155f0 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    basic_string<_CharT, _Traits, _Alloc> &append(const _CharT *__s, size_type __n) (CompoundStmt 0xa816930 </usr/include/c++/4.6/bits/basic_string.tcc:300:5, line:321:5>
  (NullStmt 0xa815dc8 <line:301:46>)
  (IfStmt 0xa8168d8 <line:302:7, line:319:2>
    <<<NULL>>>
    (DeclRefExpr 0xa815dd4 <line:302:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa815b40 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa8168b0 <line:303:2, line:319:2>
      (CallExpr 0xa815ea8 <line:304:4, col:61> '<dependent type>'
        (MemberExpr 0xa815e00 <col:4> '<bound member function type>' ->_M_check_length 0xa7c58d0
          (CXXThisExpr 0xa815df0 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (CXXUnresolvedConstructExpr 0xa815e40 <col:20, col:31> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa815e28 <col:30> 'int' 0))
        (DeclRefExpr 0xa815e5c <col:34> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa815b40 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (StringLiteral 0xa815e74 <col:39> 'const char [21]' lvalue "basic_string::append"))
      (DeclStmt 0xa816010 <line:305:4, col:46>
        0xa815ee0 "const size_type __len =
          (CXXOperatorCallExpr 0xa815fe8 <col:28, col:45> '<dependent type>'
            (UnresolvedLookupExpr 0xa815f98 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (DeclRefExpr 0xa815f14 <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa815b40 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
            (CallExpr 0xa815f78 <col:34, col:45> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa815f40 <col:34, col:40> '<dependent type>' lvalue
                (CXXThisExpr 0xa815f30 <col:34> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
      (IfStmt 0xa816610 <line:306:4, line:316:6>
        <<<NULL>>>
        (BinaryOperator 0xa8161c0 <line:306:8, col:59> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa8160f0 <col:8, col:31> '<dependent type>'
            (UnresolvedLookupExpr 0xa8160a0 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
            (DeclRefExpr 0xa816020 <col:8> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa815ee0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (CallExpr 0xa816080 <col:16, col:31> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa816048 <col:16, col:22> '<dependent type>' lvalue
                (CXXThisExpr 0xa816038 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
          (CallExpr 0xa8161a0 <col:36, col:59> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa816168 <col:36, col:46> '<dependent type>' lvalue
              (CallExpr 0xa816148 <col:36, col:43> '<dependent type>'
                (MemberExpr 0xa816128 <col:36> '<bound member function type>' ->_M_rep 0xa7c5400
                  (CXXThisExpr 0xa816118 <col:36> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
        (CompoundStmt 0xa8165f8 <line:307:6, line:316:6>
          (IfStmt 0xa8165d8 <line:308:8, line:315:3>
            <<<NULL>>>
            (CallExpr 0xa816220 <line:308:12, col:27> '<dependent type>'
              (MemberExpr 0xa8161e8 <col:12> '<bound member function type>' ->_M_disjunct 0xa7c5b70
                (CXXThisExpr 0xa8161d8 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))
              (DeclRefExpr 0xa816208 <col:24> 'const _CharT *' lvalue ParmVar 0xa815b00 '__s' 'const _CharT *'))
            (CallExpr 0xa8162a0 <line:309:3, col:22> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa816250 <col:3, col:9> '<dependent type>' lvalue
                (CXXThisExpr 0xa816240 <col:3> 'basic_string<_CharT, _Traits, _Alloc> *' this))
              (DeclRefExpr 0xa816284 <col:17> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa815ee0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))
            (CompoundStmt 0xa8165b8 <line:311:3, line:315:3>
              (DeclStmt 0xa8163f8 <line:312:5, col:44>
                0xa8162d0 "const size_type __off =
                  (CXXOperatorCallExpr 0xa8163d0 <col:29, col:43> '<dependent type>'
                    (UnresolvedLookupExpr 0xa816390 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                    (DeclRefExpr 0xa816304 <col:29> 'const _CharT *' lvalue ParmVar 0xa815b00 '__s' 'const _CharT *')
                    (CallExpr 0xa816370 <col:35, col:43> '<dependent type>'
                      (UnresolvedMemberExpr 0xa816330 <col:35> '<bound member function type>' lvalue)))")
              (CallExpr 0xa816468 <line:313:5, col:24> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa816418 <col:5, col:11> '<dependent type>' lvalue
                  (CXXThisExpr 0xa816408 <col:5> 'basic_string<_CharT, _Traits, _Alloc> *' this))
                (DeclRefExpr 0xa81644c <col:19> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa815ee0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))
              (BinaryOperator 0xa8165a0 <line:314:5, col:23> '<dependent type>' '='
                (DeclRefExpr 0xa816488 <col:5> 'const _CharT *' lvalue ParmVar 0xa815b00 '__s' 'const _CharT *')
                (CXXOperatorCallExpr 0xa816578 <col:11, col:23> '<dependent type>'
                  (UnresolvedLookupExpr 0xa816528 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                  (CallExpr 0xa8164f0 <col:11, col:19> '<dependent type>'
                    (UnresolvedMemberExpr 0xa8164b0 <col:11> '<bound member function type>' lvalue))
                  (DeclRefExpr 0xa81650c <col:23> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8162d0 '__off' 'const size_type':'const typename _CharT_alloc_type::size_type'))))))
        <<<NULL>>>)
      (CallExpr 0xa8167c8 <line:317:4, col:46> '<dependent type>'
        (DeclRefExpr 0xa81662c <col:4> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
        (CXXOperatorCallExpr 0xa816770 <col:12, col:35> '<dependent type>'
          (UnresolvedLookupExpr 0xa816720 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (CallExpr 0xa816698 <col:12, col:20> '<dependent type>'
            (UnresolvedMemberExpr 0xa816658 <col:12> '<bound member function type>' lvalue))
          (CallExpr 0xa816700 <col:24, col:35> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8166c8 <col:24, col:30> '<dependent type>' lvalue
              (CXXThisExpr 0xa8166b8 <col:24> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa816794 <col:38> 'const _CharT *' lvalue ParmVar 0xa815b00 '__s' 'const _CharT *')
        (DeclRefExpr 0xa8167ac <col:43> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa815b40 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
      (CallExpr 0xa816890 <line:318:4, col:46> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa816840 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa816820 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa816800 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa8167f0 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa816874 <col:41> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa815ee0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa816920 <line:320:7, col:15>
    (UnaryOperator 0xa816908 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa8168f8 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    basic_string<_CharT, _Traits, _Alloc> &append(const basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa817848 </usr/include/c++/4.6/bits/basic_string.tcc:327:5, line:338:5>
  (DeclStmt 0xa817128 <line:328:7, col:44>
    0xa817080 "const size_type __size =
      (CallExpr 0xa817108 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8170d0 <col:32, col:38> '<dependent type>' lvalue
          (DeclRefExpr 0xa8170b4 <col:32> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa816df0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))")
  (IfStmt 0xa8177f0 <line:329:7, line:336:2>
    <<<NULL>>>
    (DeclRefExpr 0xa817138 <line:329:11> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa817080 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa8177d0 <line:330:2, line:336:2>
      (DeclStmt 0xa817290 <line:331:4, col:49>
        0xa817160 "const size_type __len =
          (CXXOperatorCallExpr 0xa817268 <col:28, col:48> '<dependent type>'
            (UnresolvedLookupExpr 0xa817218 <col:35, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (DeclRefExpr 0xa817194 <col:28> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa817080 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (CallExpr 0xa8171f8 <col:37, col:48> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8171c0 <col:37, col:43> '<dependent type>' lvalue
                (CXXThisExpr 0xa8171b0 <col:37> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
      (IfStmt 0xa8174d8 <line:332:4, line:333:25>
        <<<NULL>>>
        (BinaryOperator 0xa817440 <line:332:8, col:59> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa817370 <col:8, col:31> '<dependent type>'
            (UnresolvedLookupExpr 0xa817320 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
            (DeclRefExpr 0xa8172a0 <col:8> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa817160 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (CallExpr 0xa817300 <col:16, col:31> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8172c8 <col:16, col:22> '<dependent type>' lvalue
                (CXXThisExpr 0xa8172b8 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
          (CallExpr 0xa817420 <col:36, col:59> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8173e8 <col:36, col:46> '<dependent type>' lvalue
              (CallExpr 0xa8173c8 <col:36, col:43> '<dependent type>'
                (MemberExpr 0xa8173a8 <col:36> '<bound member function type>' ->_M_rep 0xa7c5400
                  (CXXThisExpr 0xa817398 <col:36> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
        (CallExpr 0xa8174b8 <line:333:6, col:25> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa817468 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa817458 <col:6> 'basic_string<_CharT, _Traits, _Alloc> *' this))
          (DeclRefExpr 0xa81749c <col:20> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa817160 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (CallExpr 0xa8176e8 <line:334:4, col:61> '<dependent type>'
        (DeclRefExpr 0xa8174f4 <col:4> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
        (CXXOperatorCallExpr 0xa817638 <col:12, col:35> '<dependent type>'
          (UnresolvedLookupExpr 0xa8175e8 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (CallExpr 0xa817560 <col:12, col:20> '<dependent type>'
            (UnresolvedMemberExpr 0xa817520 <col:12> '<bound member function type>' lvalue))
          (CallExpr 0xa8175c8 <col:24, col:35> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa817590 <col:24, col:30> '<dependent type>' lvalue
              (CXXThisExpr 0xa817580 <col:24> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (CallExpr 0xa8176b0 <col:38, col:52> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa817678 <col:38, col:44> '<dependent type>' lvalue
            (DeclRefExpr 0xa81765c <col:38> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa816df0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
        (DeclRefExpr 0xa8176cc <col:55> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa817080 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
      (CallExpr 0xa8177b0 <line:335:4, col:46> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa817760 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa817740 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa817720 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa817710 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa817794 <col:41> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa817160 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa817838 <line:337:7, col:15>
    (UnaryOperator 0xa817820 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa817810 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    basic_string<_CharT, _Traits, _Alloc> &append(const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n) (CompoundStmt 0xa818968 </usr/include/c++/4.6/bits/basic_string.tcc:344:5, line:356:5>
  (CallExpr 0xa8180c8 <line:345:7, col:51> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa818048 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa81802c <col:7> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa817d10 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
    (DeclRefExpr 0xa81807c <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa818094 <col:29> 'const char [21]' lvalue "basic_string::append"))
  (BinaryOperator 0xa8181b0 <line:346:7, col:38> '<dependent type>' '='
    (DeclRefExpr 0xa8180ec <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d90 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa818188 <col:13, col:38> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa818120 <col:13, col:19> '<dependent type>' lvalue
        (DeclRefExpr 0xa818104 <col:13> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa817d10 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (DeclRefExpr 0xa818154 <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa81816c <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d90 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
  (IfStmt 0xa818910 <line:347:7, line:354:2>
    <<<NULL>>>
    (DeclRefExpr 0xa8181c8 <line:347:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d90 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa8188f0 <line:348:2, line:354:2>
      (DeclStmt 0xa818320 <line:349:4, col:46>
        0xa8181f0 "const size_type __len =
          (CXXOperatorCallExpr 0xa8182f8 <col:28, col:45> '<dependent type>'
            (UnresolvedLookupExpr 0xa8182a8 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (DeclRefExpr 0xa818224 <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d90 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
            (CallExpr 0xa818288 <col:34, col:45> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa818250 <col:34, col:40> '<dependent type>' lvalue
                (CXXThisExpr 0xa818240 <col:34> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
      (IfStmt 0xa818568 <line:350:4, line:351:25>
        <<<NULL>>>
        (BinaryOperator 0xa8184d0 <line:350:8, col:59> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa818400 <col:8, col:31> '<dependent type>'
            (UnresolvedLookupExpr 0xa8183b0 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
            (DeclRefExpr 0xa818330 <col:8> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8181f0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (CallExpr 0xa818390 <col:16, col:31> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa818358 <col:16, col:22> '<dependent type>' lvalue
                (CXXThisExpr 0xa818348 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
          (CallExpr 0xa8184b0 <col:36, col:59> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa818478 <col:36, col:46> '<dependent type>' lvalue
              (CallExpr 0xa818458 <col:36, col:43> '<dependent type>'
                (MemberExpr 0xa818438 <col:36> '<bound member function type>' ->_M_rep 0xa7c5400
                  (CXXThisExpr 0xa818428 <col:36> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
        (CallExpr 0xa818548 <line:351:6, col:25> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8184f8 <col:6, col:12> '<dependent type>' lvalue
            (CXXThisExpr 0xa8184e8 <col:6> 'basic_string<_CharT, _Traits, _Alloc> *' this))
          (DeclRefExpr 0xa81852c <col:20> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8181f0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (CallExpr 0xa818808 <line:352:4, col:66> '<dependent type>'
        (DeclRefExpr 0xa818584 <col:4> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
        (CXXOperatorCallExpr 0xa8186c8 <col:12, col:35> '<dependent type>'
          (UnresolvedLookupExpr 0xa818678 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (CallExpr 0xa8185f0 <col:12, col:20> '<dependent type>'
            (UnresolvedMemberExpr 0xa8185b0 <col:12> '<bound member function type>' lvalue))
          (CallExpr 0xa818658 <col:24, col:35> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa818620 <col:24, col:30> '<dependent type>' lvalue
              (CXXThisExpr 0xa818610 <col:24> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (CXXOperatorCallExpr 0xa8187c8 <col:38, col:56> '<dependent type>'
          (UnresolvedLookupExpr 0xa818778 <col:54, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (CallExpr 0xa818740 <col:38, col:52> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa818708 <col:38, col:44> '<dependent type>' lvalue
              (DeclRefExpr 0xa8186ec <col:38> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa817d10 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
          (DeclRefExpr 0xa81875c <col:56> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa8187ec <col:63> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa817d90 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
      (CallExpr 0xa8188d0 <line:353:4, col:46> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa818880 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa818860 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa818840 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa818830 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa8188b4 <col:41> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8181f0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa818958 <line:355:7, col:15>
    (UnaryOperator 0xa818940 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa818930 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    basic_string<_CharT, _Traits, _Alloc> &insert(size_type __pos, const _CharT *__s, size_type __n) (CompoundStmt 0xa81a1e0 </usr/include/c++/4.6/bits/basic_string.tcc:362:6, line:387:6>
  (NullStmt 0xa8191a0 <line:363:47>)
  (CallExpr 0xa819228 <line:364:8, col:46> '<dependent type>'
    (MemberExpr 0xa8191c0 <col:8> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa8191b0 <col:8> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa8191e0 <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818e20 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa8191f8 <col:24> 'const char [21]' lvalue "basic_string::insert"))
  (CallExpr 0xa819308 <line:365:8, col:65> '<dependent type>'
    (MemberExpr 0xa819260 <col:8> '<bound member function type>' ->_M_check_length 0xa7c58d0
      (CXXThisExpr 0xa819250 <col:8> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (CXXUnresolvedConstructExpr 0xa8192a0 <col:24, col:35> 'size_type':'typename _CharT_alloc_type::size_type'
      (IntegerLiteral 0xa819288 <col:34> 'int' 0))
    (DeclRefExpr 0xa8192bc <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa8192d4 <col:43> 'const char [21]' lvalue "basic_string::insert"))
  (IfStmt 0xa81a1c0 <line:366:8, line:386:10>
    <<<NULL>>>
    (BinaryOperator 0xa819440 <line:366:12, col:55> '<dependent type>' '||'
      (CallExpr 0xa819378 <col:12, col:27> '<dependent type>'
        (MemberExpr 0xa819340 <col:12> '<bound member function type>' ->_M_disjunct 0xa7c5b70
          (CXXThisExpr 0xa819330 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa819360 <col:24> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *'))
      (CallExpr 0xa819420 <col:32, col:55> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8193e8 <col:32, col:42> '<dependent type>' lvalue
          (CallExpr 0xa8193c8 <col:32, col:39> '<dependent type>'
            (MemberExpr 0xa8193a8 <col:32> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa819398 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (ReturnStmt 0xa819540 <line:367:10, col:62>
      (CallExpr 0xa819510 <col:17, col:62> '<dependent type>'
        (MemberExpr 0xa819468 <col:17> '<bound member function type>' ->_M_replace_safe 0xa7db0f0
          (CXXThisExpr 0xa819458 <col:17> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa819488 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818e20 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (CXXUnresolvedConstructExpr 0xa8194c0 <col:40, col:51> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa8194a8 <col:50> 'int' 0))
        (DeclRefExpr 0xa8194dc <col:54> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
        (DeclRefExpr 0xa8194f4 <col:59> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
    (CompoundStmt 0xa81a198 <line:369:10, line:386:10>
      (DeclStmt 0xa819688 <line:371:12, col:51>
        0xa819560 "const size_type __off =
          (CXXOperatorCallExpr 0xa819660 <col:36, col:50> '<dependent type>'
            (UnresolvedLookupExpr 0xa819620 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa819594 <col:36> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
            (CallExpr 0xa819600 <col:42, col:50> '<dependent type>'
              (UnresolvedMemberExpr 0xa8195c0 <col:42> '<bound member function type>' lvalue)))")
      (CallExpr 0xa819710 <line:372:12, col:35> '<dependent type>'
        (MemberExpr 0xa8196a8 <col:12> '<bound member function type>' ->_M_mutate 0xa7c6d10
          (CXXThisExpr 0xa819698 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa8196c8 <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818e20 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (IntegerLiteral 0xa8196e0 <col:29> 'int' 0)
        (DeclRefExpr 0xa8196f8 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
      (BinaryOperator 0xa819850 <line:373:12, col:30> '<dependent type>' '='
        (DeclRefExpr 0xa819738 <col:12> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
        (CXXOperatorCallExpr 0xa819828 <col:18, col:30> '<dependent type>'
          (UnresolvedLookupExpr 0xa8197d8 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (CallExpr 0xa8197a0 <col:18, col:26> '<dependent type>'
            (UnresolvedMemberExpr 0xa819760 <col:18> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa8197bc <col:30> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa819560 '__off' 'const size_type':'const typename _CharT_alloc_type::size_type')))
      (DeclStmt 0xa8199d8 <line:374:12, col:43>
        0xa8198a0 "_CharT *__p =
          (CXXOperatorCallExpr 0xa8199b0 <col:26, col:38> '<dependent type>'
            (UnresolvedLookupExpr 0xa819960 <col:36, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CallExpr 0xa819928 <col:26, col:34> '<dependent type>'
              (UnresolvedMemberExpr 0xa8198e8 <col:26> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa819944 <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818e20 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))")
      (IfStmt 0xa81a140 <line:375:12, line:384:14>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa819af8 <line:375:16, col:30> '<dependent type>'
          (UnresolvedLookupExpr 0xa819aa8 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
          (CXXOperatorCallExpr 0xa819a68 <col:16, col:23> '<dependent type>'
            (UnresolvedLookupExpr 0xa819a18 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (DeclRefExpr 0xa8199e8 <col:16> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
            (DeclRefExpr 0xa819a00 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa819a8c <col:30> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *'))
        (CallExpr 0xa819b80 <line:376:14, col:35> '<dependent type>'
          (DeclRefExpr 0xa819b1c <col:14> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
          (DeclRefExpr 0xa819b34 <col:22> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *')
          (DeclRefExpr 0xa819b4c <col:27> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
          (DeclRefExpr 0xa819b64 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
        (IfStmt 0xa81a120 <line:377:17, line:384:14>
          <<<NULL>>>
          (CXXOperatorCallExpr 0xa819c28 <line:377:21, col:28> '<dependent type>'
            (UnresolvedLookupExpr 0xa819bd8 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f940 0xa626700 0xa629570 0xa6b5f20 0xa8040f0 0xa804630 0xa804b60)
            (DeclRefExpr 0xa819ba8 <col:21> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
            (DeclRefExpr 0xa819bc0 <col:28> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *'))
          (CallExpr 0xa819d40 <line:378:14, col:41> '<dependent type>'
            (DeclRefExpr 0xa819c4c <col:14> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
            (DeclRefExpr 0xa819c64 <col:22> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *')
            (CXXOperatorCallExpr 0xa819d00 <col:27, col:33> '<dependent type>'
              (UnresolvedLookupExpr 0xa819cb0 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (DeclRefExpr 0xa819c7c <col:27> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
              (DeclRefExpr 0xa819c94 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa819d24 <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
          (CompoundStmt 0xa81a100 <line:380:14, line:384:14>
            (DeclStmt 0xa819e40 <line:381:9, col:44>
              0xa819d70 "const size_type __nleft =
                (CXXOperatorCallExpr 0xa819e18 <col:35, col:41> '<dependent type>'
                  (UnresolvedLookupExpr 0xa819dd8 <col:39, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                  (DeclRefExpr 0xa819da4 <col:35> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *')
                  (DeclRefExpr 0xa819dbc <col:41> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *'))")
            (CallExpr 0xa819eb0 <line:382:16, col:41> '<dependent type>'
              (DeclRefExpr 0xa819e50 <col:16> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
              (DeclRefExpr 0xa819e68 <col:24> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *')
              (DeclRefExpr 0xa819e80 <col:29> 'const _CharT *' lvalue ParmVar 0xa818e90 '__s' 'const _CharT *')
              (DeclRefExpr 0xa819e98 <col:34> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa819d70 '__nleft' 'const size_type':'const typename _CharT_alloc_type::size_type'))
            (CallExpr 0xa81a0d8 <line:383:16, col:63> '<dependent type>'
              (DeclRefExpr 0xa819ed8 <col:16> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
              (CXXOperatorCallExpr 0xa819f70 <col:24, col:30> '<dependent type>'
                (UnresolvedLookupExpr 0xa819f20 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                (DeclRefExpr 0xa819ef0 <col:24> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *')
                (DeclRefExpr 0xa819f08 <col:30> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa819d70 '__nleft' 'const size_type':'const typename _CharT_alloc_type::size_type'))
              (CXXOperatorCallExpr 0xa81a018 <col:39, col:45> '<dependent type>'
                (UnresolvedLookupExpr 0xa819fc8 <col:43, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                (DeclRefExpr 0xa819f94 <col:39> '_CharT *' lvalue Var 0xa8198a0 '__p' '_CharT *')
                (DeclRefExpr 0xa819fac <col:45> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
              (CXXOperatorCallExpr 0xa81a0b0 <col:50, col:56> '<dependent type>'
                (UnresolvedLookupExpr 0xa81a070 <col:54, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                (DeclRefExpr 0xa81a03c <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa818ed0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
                (DeclRefExpr 0xa81a054 <col:56> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa819d70 '__nleft' 'const size_type':'const typename _CharT_alloc_type::size_type'))))))
      (ReturnStmt 0xa81a188 <line:385:12, col:20>
        (UnaryOperator 0xa81a170 <col:19, col:20> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa81a160 <col:20> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))


    typename basic_string<_CharT, _Traits, _Alloc>::iterator erase(iterator __first, iterator __last) (CompoundStmt 0xa81aef8 </usr/include/c++/4.6/bits/basic_string.tcc:393:6, line:410:6>
  (NullStmt 0xa81a9b8 <line:395:28>)
  (DeclStmt 0xa81aaa0 <line:400:8, col:49>
    0xa81a9d0 "const size_type __size =
      (CXXOperatorCallExpr 0xa81aa78 <col:33, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa81aa38 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa81aa04 <col:33> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa81a730 '__last' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa81aa1c <col:42> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa81a6f0 '__first' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))")
  (IfStmt 0xa81aed8 <line:401:8, line:409:10>
    <<<NULL>>>
    (DeclRefExpr 0xa81aab0 <line:401:12> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81a9d0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa81ae90 <line:402:3, line:407:3>
      (DeclStmt 0xa81abd8 <line:403:5, col:50>
        0xa81aad0 "const size_type __pos =
          (CXXOperatorCallExpr 0xa81abb0 <col:29, col:49> '<dependent type>'
            (UnresolvedLookupExpr 0xa81ab70 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa81ab04 <col:29> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa81a6f0 '__first' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
            (CallExpr 0xa81ab50 <col:39, col:49> '<dependent type>'
              (MemberExpr 0xa81ab30 <col:39> '<bound member function type>' ->_M_ibegin 0xa7c54b0
                (CXXThisExpr 0xa81ab20 <col:39> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
      (CallExpr 0xa81ac88 <line:404:5, col:42> '<dependent type>'
        (MemberExpr 0xa81abf8 <col:5> '<bound member function type>' ->_M_mutate 0xa7c6d10
          (CXXThisExpr 0xa81abe8 <col:5> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa81ac18 <col:15> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81aad0 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa81ac30 <col:22> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81a9d0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CXXUnresolvedConstructExpr 0xa81ac68 <col:30, col:41> 'size_type':'typename _CharT_alloc_type::size_type'
          (IntegerLiteral 0xa81ac50 <col:40> 'int' 0)))
      (CallExpr 0xa81ad38 <line:405:5, col:29> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81ad00 <col:5, col:15> '<dependent type>' lvalue
          (CallExpr 0xa81ace0 <col:5, col:12> '<dependent type>'
            (MemberExpr 0xa81acc0 <col:5> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa81acb0 <col:5> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))
      (ReturnStmt 0xa81ae80 <line:406:5, col:38>
        (CXXUnresolvedConstructExpr 0xa81ae60 <col:12, col:38> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'
          (CXXOperatorCallExpr 0xa81ae38 <col:21, col:33> '<dependent type>'
            (UnresolvedLookupExpr 0xa81ade8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CallExpr 0xa81adb0 <col:21, col:29> '<dependent type>'
              (UnresolvedMemberExpr 0xa81ad70 <col:21> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa81adcc <col:33> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81aad0 '__pos' 'const size_type':'const typename _CharT_alloc_type::size_type')))))
    (ReturnStmt 0xa81aec8 <line:409:3, col:10>
      (DeclRefExpr 0xa81aeb0 <col:10> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa81a6f0 '__first' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))))


    basic_string<_CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) (CompoundStmt 0xa81c868 </usr/include/c++/4.6/bits/basic_string.tcc:417:6, line:441:6>
  (NullStmt 0xa81b740 <line:418:48>)
  (CallExpr 0xa81b7d0 <line:419:8, col:47> '<dependent type>'
    (MemberExpr 0xa81b760 <col:8> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa81b750 <col:8> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa81b780 <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa81b798 <col:24> 'const char [22]' lvalue "basic_string::replace"))
  (BinaryOperator 0xa81b898 <line:420:8, col:35> '<dependent type>' '='
    (DeclRefExpr 0xa81b7f4 <col:8> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa81b870 <col:15, col:35> '<dependent type>'
      (MemberExpr 0xa81b820 <col:15> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa81b810 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa81b840 <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa81b858 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')))
  (CallExpr 0xa81b948 <line:421:8, col:59> '<dependent type>'
    (MemberExpr 0xa81b8c0 <col:8> '<bound member function type>' ->_M_check_length 0xa7c58d0
      (CXXThisExpr 0xa81b8b0 <col:8> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa81b8e0 <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa81b8f8 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa81b910 <col:36> 'const char [22]' lvalue "basic_string::replace"))
  (DeclStmt 0xa81b9b8 <line:422:8, col:19>
    0xa81b980 "bool __left")
  (IfStmt 0xa81c848 <line:423:8, line:440:3>
    <<<NULL>>>
    (BinaryOperator 0xa81bad8 <line:423:12, col:55> '<dependent type>' '||'
      (CallExpr 0xa81ba10 <col:12, col:27> '<dependent type>'
        (MemberExpr 0xa81b9d8 <col:12> '<bound member function type>' ->_M_disjunct 0xa7c5b70
          (CXXThisExpr 0xa81b9c8 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa81b9f8 <col:24> 'const _CharT *' lvalue ParmVar 0xa81b460 '__s' 'const _CharT *'))
      (CallExpr 0xa81bab8 <col:32, col:55> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81ba80 <col:32, col:42> '<dependent type>' lvalue
          (CallExpr 0xa81ba60 <col:32, col:39> '<dependent type>'
            (MemberExpr 0xa81ba40 <col:32> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa81ba30 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (ReturnStmt 0xa81bbb0 <line:424:10, col:55>
      (CallExpr 0xa81bb80 <col:17, col:55> '<dependent type>'
        (MemberExpr 0xa81bb00 <col:17> '<bound member function type>' ->_M_replace_safe 0xa7db0f0
          (CXXThisExpr 0xa81baf0 <col:17> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa81bb20 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa81bb38 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa81bb50 <col:46> 'const _CharT *' lvalue ParmVar 0xa81b460 '__s' 'const _CharT *')
        (DeclRefExpr 0xa81bb68 <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))
    (IfStmt 0xa81c828 <line:425:13, line:440:3>
      <<<NULL>>>
      (BinaryOperator 0xa81c048 <line:425:17, line:426:34> '<dependent type>' '||'
        (ParenExpr 0xa81be10 <line:425:17, col:58> '<dependent type>'
          (BinaryOperator 0xa81bdf8 <col:18, col:53> '<dependent type>' '='
            (DeclRefExpr 0xa81bbc0 <col:18> '_Bool' lvalue Var 0xa81b980 '__left' '_Bool')
            (CXXOperatorCallExpr 0xa81bdd0 <col:27, col:53> '<dependent type>'
              (UnresolvedLookupExpr 0xa81bd80 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
              (CXXOperatorCallExpr 0xa81bc58 <col:27, col:33> '<dependent type>'
                (UnresolvedLookupExpr 0xa81bc08 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                (DeclRefExpr 0xa81bbd8 <col:27> 'const _CharT *' lvalue ParmVar 0xa81b460 '__s' 'const _CharT *')
                (DeclRefExpr 0xa81bbf0 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
              (CXXOperatorCallExpr 0xa81bd58 <col:41, col:53> '<dependent type>'
                (UnresolvedLookupExpr 0xa81bd08 <col:51, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                (CallExpr 0xa81bcd0 <col:41, col:49> '<dependent type>'
                  (UnresolvedMemberExpr 0xa81bc90 <col:41> '<bound member function type>' lvalue))
                (DeclRefExpr 0xa81bcec <col:53> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')))))
        (CXXOperatorCallExpr 0xa81c020 <line:426:6, col:34> '<dependent type>'
          (UnresolvedLookupExpr 0xa81bfd0 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
          (CXXOperatorCallExpr 0xa81bf90 <col:6, col:26> '<dependent type>'
            (UnresolvedLookupExpr 0xa81bf40 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CXXOperatorCallExpr 0xa81bf00 <col:6, col:18> '<dependent type>'
              (UnresolvedLookupExpr 0xa81beb0 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (CallExpr 0xa81be78 <col:6, col:14> '<dependent type>'
                (UnresolvedMemberExpr 0xa81be38 <col:6> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa81be94 <col:18> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa81bf24 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa81bfb4 <col:34> 'const _CharT *' lvalue ParmVar 0xa81b460 '__s' 'const _CharT *')))
      (CompoundStmt 0xa81c620 <line:427:3, line:434:3>
        (DeclStmt 0xa81c198 <line:429:5, col:38>
          0xa81c070 "size_type __off =
            (CXXOperatorCallExpr 0xa81c170 <col:23, col:37> '<dependent type>'
              (UnresolvedLookupExpr 0xa81c130 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (DeclRefExpr 0xa81c0a4 <col:23> 'const _CharT *' lvalue ParmVar 0xa81b460 '__s' 'const _CharT *')
              (CallExpr 0xa81c110 <col:29, col:37> '<dependent type>'
                (UnresolvedMemberExpr 0xa81c0d0 <col:29> '<bound member function type>' lvalue)))")
        (ConditionalOperator 0xa81c2d0 <line:430:5, col:43> '<dependent type>'
          (ImplicitCastExpr 0xa81c2c0 <col:5> '_Bool' <LValueToRValue>
            (DeclRefExpr 0xa81c1a8 <col:5> '_Bool' lvalue Var 0xa81b980 '__left' '_Bool'))
          (DeclRefExpr 0xa81c1c0 <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa81c070 '__off' 'size_type':'typename _CharT_alloc_type::size_type')
          (ParenExpr 0xa81c2a8 <col:22, col:43> '<dependent type>' lvalue
            (CompoundAssignOperator 0xa81c288 <col:23, col:39> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
              (DeclRefExpr 0xa81c1d8 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa81c070 '__off' 'size_type':'typename _CharT_alloc_type::size_type')
              (CXXOperatorCallExpr 0xa81c260 <col:32, col:39> '<dependent type>'
                (UnresolvedLookupExpr 0xa81c220 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                (DeclRefExpr 0xa81c1f0 <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
                (DeclRefExpr 0xa81c208 <col:39> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')))))
        (CallExpr 0xa81c368 <line:431:5, col:32> '<dependent type>'
          (MemberExpr 0xa81c300 <col:5> '<bound member function type>' ->_M_mutate 0xa7c6d10
            (CXXThisExpr 0xa81c2f0 <col:5> 'basic_string<_CharT, _Traits, _Alloc> *' this))
          (DeclRefExpr 0xa81c320 <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa81c338 <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa81c350 <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
        (CallExpr 0xa81c5c0 <line:432:5, col:55> '<dependent type>'
          (DeclRefExpr 0xa81c390 <col:5> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
          (CXXOperatorCallExpr 0xa81c480 <col:13, col:25> '<dependent type>'
            (UnresolvedLookupExpr 0xa81c430 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CallExpr 0xa81c3f8 <col:13, col:21> '<dependent type>'
              (UnresolvedMemberExpr 0xa81c3b8 <col:13> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa81c414 <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
          (CXXOperatorCallExpr 0xa81c580 <col:32, col:44> '<dependent type>'
            (UnresolvedLookupExpr 0xa81c530 <col:42, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CallExpr 0xa81c4f8 <col:32, col:40> '<dependent type>'
              (UnresolvedMemberExpr 0xa81c4b8 <col:32> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa81c514 <col:44> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa81c070 '__off' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa81c5a4 <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
        (ReturnStmt 0xa81c610 <line:433:5, col:13>
          (UnaryOperator 0xa81c5f8 <col:12, col:13> '<dependent type>' prefix '*'
            (CXXThisExpr 0xa81c5e8 <col:13> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CompoundStmt 0xa81c810 <line:436:3, line:440:3>
        (DeclStmt 0xa81c6d8 <line:438:5, col:40>
          0xa81c650 "const basic_string<_CharT, _Traits, _Alloc> __tmp =
            (ParenListExpr 0xa81c6b8 <col:29, col:39> 'const basic_string<_CharT, _Traits, _Alloc>'
              (DeclRefExpr 0xa81c684 <col:30> 'const _CharT *' lvalue ParmVar 0xa81b460 '__s' 'const _CharT *')
              (DeclRefExpr 0xa81c69c <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))")
        (ReturnStmt 0xa81c800 <line:439:5, col:62>
          (CallExpr 0xa81c7d0 <col:12, col:62> '<dependent type>'
            (MemberExpr 0xa81c6f8 <col:12> '<bound member function type>' ->_M_replace_safe 0xa7db0f0
              (CXXThisExpr 0xa81c6e8 <col:12> 'basic_string<_CharT, _Traits, _Alloc> *' this))
            (DeclRefExpr 0xa81c718 <col:28> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3b0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
            (DeclRefExpr 0xa81c730 <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b3f0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
            (CallExpr 0xa81c798 <col:41, col:55> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa81c760 <col:41, col:47> '<dependent type>' lvalue
                (DeclRefExpr 0xa81c748 <col:41> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa81c650 '__tmp' 'const basic_string<_CharT, _Traits, _Alloc>')))
            (DeclRefExpr 0xa81c7b4 <col:58> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81b4a0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))))))


    void _M_destroy(const _Alloc &__a) throw() (CompoundStmt 0xa81d0a0 </usr/include/c++/4.6/bits/basic_string.tcc:447:5, line:451:5>
  (DeclStmt 0xa81cf88 <line:448:7, line:449:65>
    0xa81cd90 "const size_type __size =
      (CXXOperatorCallExpr 0xa81cf60 <line:448:32, line:449:64> '<dependent type>'
        (UnresolvedLookupExpr 0xa81cf10 <line:448:50, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
        (UnaryExprOrTypeTraitExpr 0xa81cdd0 <col:32, col:48> 'unsigned int' sizeof 'struct std::basic_string::_Rep_base')
        (BinaryOperator 0xa81cef8 <line:449:25, col:64> '<dependent type>' '*'
          (ParenExpr 0xa81cec0 <col:25, col:47> '<dependent type>'
            (CXXOperatorCallExpr 0xa81ce98 <col:26, col:46> '<dependent type>'
              (UnresolvedLookupExpr 0xa81ce48 <col:44, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (CXXDependentScopeMemberExpr 0xa81cdf8 <col:26, col:32> '<dependent type>' lvalue
                (CXXThisExpr 0xa81cde8 <col:26> 'struct std::basic_string::_Rep *' this))
              (IntegerLiteral 0xa81ce30 <col:46> 'int' 1)))
          (UnaryExprOrTypeTraitExpr 0xa81cee0 <col:51, col:64> 'unsigned int' sizeof '_CharT')))")
  (CallExpr 0xa81d078 <line:450:7, col:77> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa81cff0 <col:7, col:29> '<dependent type>' lvalue
      (CXXUnresolvedConstructExpr 0xa81cfd0 <col:7, col:27> '_Raw_bytes_alloc':'typename _Alloc::_Alloc::rebind<char>::other'
        (DeclRefExpr 0xa81cfb8 <col:24> 'const _Alloc' lvalue ParmVar 0xa81cc70 '__a' 'const _Alloc &')))
    (CXXReinterpretCastExpr 0xa81d048 <col:40, col:68> 'char *' reinterpret_cast<char *> <Dependent>
      (CXXThisExpr 0xa81d028 <col:64> 'struct std::basic_string::_Rep *' this))
    (DeclRefExpr 0xa81d060 <col:71> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81cd90 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')))


    void _M_leak_hard() (CompoundStmt 0xa81d858 </usr/include/c++/4.6/bits/basic_string.tcc:457:5, line:465:5>
  (IfStmt 0xa81d628 <line:459:7, line:460:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa81d5f0 <line:459:11, col:37> '<dependent type>'
      (UnresolvedLookupExpr 0xa81d590 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CallExpr 0xa81d520 <col:11, col:18> '<dependent type>'
        (MemberExpr 0xa81d500 <col:11> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa81d4f0 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (UnaryOperator 0xa81d578 <col:23, col:37> '<dependent type>' prefix '&'
        (CallExpr 0xa81d558 <col:24, col:37> '<dependent type>'
          (DeclRefExpr 0xa81d53c <col:24> 'struct std::basic_string::_Rep &(void)' lvalue CXXMethod 0xa7c6e20 '_S_empty_rep' 'struct std::basic_string::_Rep &(void)'))))
    (ReturnStmt 0xa81d618 <line:460:2>)
    <<<NULL>>>)
  (IfStmt 0xa81d790 <line:462:7, line:463:19>
    <<<NULL>>>
    (CallExpr 0xa81d6d0 <line:462:11, col:34> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa81d698 <col:11, col:21> '<dependent type>' lvalue
        (CallExpr 0xa81d678 <col:11, col:18> '<dependent type>'
          (MemberExpr 0xa81d658 <col:11> '<bound member function type>' ->_M_rep 0xa7c5400
            (CXXThisExpr 0xa81d648 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))
    (CallExpr 0xa81d768 <line:463:2, col:19> '<dependent type>'
      (MemberExpr 0xa81d700 <col:2> '<bound member function type>' ->_M_mutate 0xa7c6d10
        (CXXThisExpr 0xa81d6f0 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (IntegerLiteral 0xa81d720 <col:12> 'int' 0)
      (IntegerLiteral 0xa81d738 <col:15> 'int' 0)
      (IntegerLiteral 0xa81d750 <col:18> 'int' 0))
    <<<NULL>>>)
  (CallExpr 0xa81d838 <line:464:7, col:31> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa81d800 <col:7, col:17> '<dependent type>' lvalue
      (CallExpr 0xa81d7e0 <col:7, col:14> '<dependent type>'
        (MemberExpr 0xa81d7c0 <col:7> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa81d7b0 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))


    void _M_mutate(size_type __pos, size_type __len1, size_type __len2) (CompoundStmt 0xa81f148 </usr/include/c++/4.6/bits/basic_string.tcc:471:5, line:498:5>
  (DeclStmt 0xa81de20 <line:472:7, col:48>
    0xa81dd80 "const size_type __old_size =
      (CallExpr 0xa81de00 <col:36, col:47> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81ddc8 <col:36, col:42> '<dependent type>' lvalue
          (CXXThisExpr 0xa81ddb8 <col:36> 'basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (DeclStmt 0xa81dfa0 <line:473:7, col:64>
    0xa81de40 "const size_type __new_size =
      (CXXOperatorCallExpr 0xa81df78 <col:36, col:58> '<dependent type>'
        (UnresolvedLookupExpr 0xa81df38 <col:56, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CXXOperatorCallExpr 0xa81def8 <col:36, col:49> '<dependent type>'
          (UnresolvedLookupExpr 0xa81dea8 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (DeclRefExpr 0xa81de74 <col:36> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81dd80 '__old_size' 'const size_type':'const typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa81de8c <col:49> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc70 '__len2' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa81df1c <col:58> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc30 '__len1' 'size_type':'typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa81e110 <line:474:7, col:63>
    0xa81dfc0 "const size_type __how_much =
      (CXXOperatorCallExpr 0xa81e0e8 <col:36, col:57> '<dependent type>'
        (UnresolvedLookupExpr 0xa81e0a8 <col:55, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (CXXOperatorCallExpr 0xa81e068 <col:36, col:49> '<dependent type>'
          (UnresolvedLookupExpr 0xa81e028 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
          (DeclRefExpr 0xa81dff4 <col:36> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81dd80 '__old_size' 'const size_type':'const typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa81e00c <col:49> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa81e08c <col:57> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc30 '__len1' 'size_type':'typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa81f068 <line:476:7, line:496:2>
    <<<NULL>>>
    (BinaryOperator 0xa81e2c0 <line:476:11, col:67> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa81e1f0 <col:11, col:39> '<dependent type>'
        (UnresolvedLookupExpr 0xa81e1a0 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
        (DeclRefExpr 0xa81e120 <col:11> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81de40 '__new_size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CallExpr 0xa81e180 <col:24, col:39> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa81e148 <col:24, col:30> '<dependent type>' lvalue
            (CXXThisExpr 0xa81e138 <col:24> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CallExpr 0xa81e2a0 <col:44, col:67> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81e268 <col:44, col:54> '<dependent type>' lvalue
          (CallExpr 0xa81e248 <col:44, col:51> '<dependent type>'
            (MemberExpr 0xa81e228 <col:44> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa81e218 <col:44> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (CompoundStmt 0xa81ebb0 <line:477:2, line:490:2>
      (DeclStmt 0xa81e368 <line:479:4, col:46>
        0xa81e2e0 "const allocator_type __a =
          (CallExpr 0xa81e348 <col:31, col:45> '<dependent type>'
            (MemberExpr 0xa81e328 <col:31> '<bound member function type>' ->get_allocator 0xa7dc5a0
              (CXXThisExpr 0xa81e318 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this)))")
      (DeclStmt 0xa81e4e0 <line:480:4, col:66>
        0xa81e390 "std::basic_string::_Rep *__r =
          (CallExpr 0xa81e4b8 <col:16, col:65> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa81e3e8 <col:16, col:22> '<dependent type>' lvalue)
            (DeclRefExpr 0xa81e41c <col:32> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81de40 '__new_size' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (CallExpr 0xa81e480 <col:44, col:59> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa81e448 <col:44, col:50> '<dependent type>' lvalue
                (CXXThisExpr 0xa81e438 <col:44> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
            (DeclRefExpr 0xa81e49c <col:62> 'const allocator_type':'const _Alloc' lvalue Var 0xa81e2e0 '__a' 'const allocator_type':'const _Alloc'))")
      (IfStmt 0xa81e640 <line:482:4, line:483:49>
        <<<NULL>>>
        (DeclRefExpr 0xa81e4f0 <line:482:8> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (CallExpr 0xa81e618 <line:483:6, col:49> '<dependent type>'
          (DeclRefExpr 0xa81e508 <col:6> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
          (CallExpr 0xa81e570 <col:14, col:30> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa81e538 <col:14, col:19> '<dependent type>' lvalue
              (DeclRefExpr 0xa81e520 <col:14> 'struct std::basic_string::_Rep *' lvalue Var 0xa81e390 '__r' 'struct std::basic_string::_Rep *')))
          (CallExpr 0xa81e5e0 <col:33, col:41> '<dependent type>'
            (UnresolvedMemberExpr 0xa81e5a0 <col:33> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa81e5fc <col:44> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (IfStmt 0xa81e9f0 <line:484:4, line:486:45>
        <<<NULL>>>
        (DeclRefExpr 0xa81e65c <line:484:8> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81dfc0 '__how_much' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CallExpr 0xa81e9c8 <line:485:6, line:486:45> '<dependent type>'
          (DeclRefExpr 0xa81e674 <line:485:6> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
          (CXXOperatorCallExpr 0xa81e7f8 <col:14, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa81e7a8 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CXXOperatorCallExpr 0xa81e768 <col:14, col:34> '<dependent type>'
              (UnresolvedLookupExpr 0xa81e718 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (CallExpr 0xa81e6e0 <col:14, col:30> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa81e6a8 <col:14, col:19> '<dependent type>' lvalue
                  (DeclRefExpr 0xa81e68c <col:14> 'struct std::basic_string::_Rep *' lvalue Var 0xa81e390 '__r' 'struct std::basic_string::_Rep *')))
              (DeclRefExpr 0xa81e6fc <col:34> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa81e78c <col:42> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc70 '__len2' 'size_type':'typename _CharT_alloc_type::size_type'))
          (CXXOperatorCallExpr 0xa81e988 <line:486:7, col:27> '<dependent type>'
            (UnresolvedLookupExpr 0xa81e938 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CXXOperatorCallExpr 0xa81e8f8 <col:7, col:19> '<dependent type>'
              (UnresolvedLookupExpr 0xa81e8a8 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (CallExpr 0xa81e870 <col:7, col:15> '<dependent type>'
                (UnresolvedMemberExpr 0xa81e830 <col:7> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa81e88c <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa81e91c <col:27> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc30 '__len1' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa81e9ac <col:35> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81dfc0 '__how_much' 'const size_type':'const typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (CallExpr 0xa81eab0 <line:488:4, col:28> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81ea60 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa81ea40 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa81ea20 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa81ea10 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa81ea94 <col:25> 'const allocator_type':'const _Alloc' lvalue Var 0xa81e2e0 '__a' 'const allocator_type':'const _Alloc'))
      (CallExpr 0xa81eb90 <line:489:4, col:29> '<dependent type>'
        (UnresolvedMemberExpr 0xa81eae0 <col:4> '<bound member function type>' lvalue)
        (CallExpr 0xa81eb70 <col:12, col:28> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa81eb38 <col:12, col:17> '<dependent type>' lvalue
            (DeclRefExpr 0xa81eb20 <col:12> 'struct std::basic_string::_Rep *' lvalue Var 0xa81e390 '__r' 'struct std::basic_string::_Rep *')))))
    (IfStmt 0xa81f048 <line:491:12, line:496:2>
      <<<NULL>>>
      (BinaryOperator 0xa81eca0 <line:491:16, col:40> '<dependent type>' '&&'
        (DeclRefExpr 0xa81ebd8 <col:16> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81dfc0 '__how_much' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CXXOperatorCallExpr 0xa81ec78 <col:30, col:40> '<dependent type>'
          (UnresolvedLookupExpr 0xa81ec20 <col:37, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
          (DeclRefExpr 0xa81ebf0 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc30 '__len1' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa81ec08 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc70 '__len2' 'size_type':'typename _CharT_alloc_type::size_type')))
      (CompoundStmt 0xa81f030 <line:492:2, line:496:2>
        (CallExpr 0xa81f008 <line:494:4, line:495:43> '<dependent type>'
          (DeclRefExpr 0xa81ecb8 <line:494:4> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5eb0 '_M_move' 'void (_CharT *, const _CharT *, size_type)')
          (CXXOperatorCallExpr 0xa81ee38 <col:12, col:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa81ede8 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CXXOperatorCallExpr 0xa81eda8 <col:12, col:24> '<dependent type>'
              (UnresolvedLookupExpr 0xa81ed58 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (CallExpr 0xa81ed20 <col:12, col:20> '<dependent type>'
                (UnresolvedMemberExpr 0xa81ece0 <col:12> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa81ed3c <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa81edcc <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc70 '__len2' 'size_type':'typename _CharT_alloc_type::size_type'))
          (CXXOperatorCallExpr 0xa81efc8 <line:495:5, col:25> '<dependent type>'
            (UnresolvedLookupExpr 0xa81ef78 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
            (CXXOperatorCallExpr 0xa81ef38 <col:5, col:17> '<dependent type>'
              (UnresolvedLookupExpr 0xa81eee8 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (CallExpr 0xa81eeb0 <col:5, col:13> '<dependent type>'
                (UnresolvedMemberExpr 0xa81ee70 <col:5> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa81eecc <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dbf0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa81ef5c <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81dc30 '__len1' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa81efec <col:33> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81dfc0 '__how_much' 'const size_type':'const typename _CharT_alloc_type::size_type')))
      <<<NULL>>>))
  (CallExpr 0xa81f128 <line:497:7, col:54> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa81f0d8 <col:7, col:17> '<dependent type>' lvalue
      (CallExpr 0xa81f0b8 <col:7, col:14> '<dependent type>'
        (MemberExpr 0xa81f098 <col:7> '<bound member function type>' ->_M_rep 0xa7c5400
          (CXXThisExpr 0xa81f088 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
    (DeclRefExpr 0xa81f10c <col:44> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa81de40 '__new_size' 'const size_type':'const typename _CharT_alloc_type::size_type')))


    void reserve(size_type __res = (IntegerLiteral 0xa7e44a0 </usr/include/c++/4.6/bits/basic_string.h:788:37> 'int' 0)
) (CompoundStmt 0xa81fd98 </usr/include/c++/4.6/bits/basic_string.tcc:504:5, line:515:5>
  (IfStmt 0xa81fd78 <line:505:7, line:514:9>
    <<<NULL>>>
    (BinaryOperator 0xa81f770 <line:505:11, col:63> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa81f6a0 <col:11, col:35> '<dependent type>'
        (UnresolvedLookupExpr 0xa81f648 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
        (DeclRefExpr 0xa81f5c4 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81f4e0 '__res' 'size_type':'typename _CharT_alloc_type::size_type')
        (CallExpr 0xa81f628 <col:20, col:35> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa81f5f0 <col:20, col:26> '<dependent type>' lvalue
            (CXXThisExpr 0xa81f5e0 <col:20> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (CallExpr 0xa81f750 <col:40, col:63> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81f718 <col:40, col:50> '<dependent type>' lvalue
          (CallExpr 0xa81f6f8 <col:40, col:47> '<dependent type>'
            (MemberExpr 0xa81f6d8 <col:40> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa81f6c8 <col:40> 'basic_string<_CharT, _Traits, _Alloc> *' this))))))
    (CompoundStmt 0xa81fd50 <line:506:9, line:514:9>
      (IfStmt 0xa81f918 <line:508:4, line:509:25>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa81f858 <line:508:8, col:27> '<dependent type>'
          (UnresolvedLookupExpr 0xa81f808 <col:14, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
          (DeclRefExpr 0xa81f788 <col:8> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81f4e0 '__res' 'size_type':'typename _CharT_alloc_type::size_type')
          (CallExpr 0xa81f7e8 <col:16, col:27> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa81f7b0 <col:16, col:22> '<dependent type>' lvalue
              (CXXThisExpr 0xa81f7a0 <col:16> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (BinaryOperator 0xa81f900 <line:509:6, col:25> '<dependent type>' '='
          (DeclRefExpr 0xa81f87c <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81f4e0 '__res' 'size_type':'typename _CharT_alloc_type::size_type')
          (CallExpr 0xa81f8e0 <col:14, col:25> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa81f8a8 <col:14, col:20> '<dependent type>' lvalue
              (CXXThisExpr 0xa81f898 <col:14> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        <<<NULL>>>)
      (DeclStmt 0xa81f9c8 <line:510:4, col:46>
        0xa81f940 "const allocator_type __a =
          (CallExpr 0xa81f9a8 <col:31, col:45> '<dependent type>'
            (MemberExpr 0xa81f988 <col:31> '<bound member function type>' ->get_allocator 0xa7dc5a0
              (CXXThisExpr 0xa81f978 <col:31> 'basic_string<_CharT, _Traits, _Alloc> *' this)))")
      (DeclStmt 0xa81fbf8 <line:511:4, col:65>
        0xa81fa10 "_CharT *__tmp =
          (CallExpr 0xa81fbd0 <col:20, col:64> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa81fa98 <col:20, col:30> '<dependent type>' lvalue
              (CallExpr 0xa81fa78 <col:20, col:27> '<dependent type>'
                (MemberExpr 0xa81fa58 <col:20> '<bound member function type>' ->_M_rep 0xa7c5400
                  (CXXThisExpr 0xa81fa48 <col:20> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
            (DeclRefExpr 0xa81facc <col:39> 'const allocator_type':'const _Alloc' lvalue Var 0xa81f940 '__a' 'const allocator_type':'const _Alloc')
            (CXXOperatorCallExpr 0xa81fba8 <col:44, col:63> '<dependent type>'
              (UnresolvedLookupExpr 0xa81fb68 <col:50, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (DeclRefExpr 0xa81fae4 <col:44> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa81f4e0 '__res' 'size_type':'typename _CharT_alloc_type::size_type')
              (CallExpr 0xa81fb48 <col:52, col:63> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa81fb10 <col:52, col:58> '<dependent type>' lvalue
                  (CXXThisExpr 0xa81fb00 <col:52> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))")
      (CallExpr 0xa81fca8 <line:512:4, col:28> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa81fc58 <col:4, col:14> '<dependent type>' lvalue
          (CallExpr 0xa81fc38 <col:4, col:11> '<dependent type>'
            (MemberExpr 0xa81fc18 <col:4> '<bound member function type>' ->_M_rep 0xa7c5400
              (CXXThisExpr 0xa81fc08 <col:4> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
        (DeclRefExpr 0xa81fc8c <col:25> 'const allocator_type':'const _Alloc' lvalue Var 0xa81f940 '__a' 'const allocator_type':'const _Alloc'))
      (CallExpr 0xa81fd30 <line:513:4, col:17> '<dependent type>'
        (UnresolvedMemberExpr 0xa81fcd8 <col:4> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa81fd18 <col:12> '_CharT *' lvalue Var 0xa81fa10 '__tmp' '_CharT *')))
    <<<NULL>>>))


    void swap(basic_string<_CharT, _Traits, _Alloc> &__s) (CompoundStmt 0xa820d48 </usr/include/c++/4.6/bits/basic_string.tcc:521:5, line:542:5>
  (IfStmt 0xa820368 <line:522:7, line:523:28>
    <<<NULL>>>
    (CallExpr 0xa8202a0 <line:522:11, col:34> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa820268 <col:11, col:21> '<dependent type>' lvalue
        (CallExpr 0xa820248 <col:11, col:18> '<dependent type>'
          (MemberExpr 0xa820228 <col:11> '<bound member function type>' ->_M_rep 0xa7c5400
            (CXXThisExpr 0xa820218 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))
    (CallExpr 0xa820348 <line:523:2, col:28> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa820310 <col:2, col:12> '<dependent type>' lvalue
        (CallExpr 0xa8202f0 <col:2, col:9> '<dependent type>'
          (MemberExpr 0xa8202d0 <col:2> '<bound member function type>' ->_M_rep 0xa7c5400
            (CXXThisExpr 0xa8202c0 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this)))))
    <<<NULL>>>)
  (IfStmt 0xa820518 <line:524:7, line:525:32>
    <<<NULL>>>
    (CallExpr 0xa820430 <line:524:11, col:38> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8203f8 <col:11, col:25> '<dependent type>' lvalue
        (CallExpr 0xa8203d8 <col:11, col:22> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8203a0 <col:11, col:15> '<dependent type>' lvalue
            (DeclRefExpr 0xa820384 <col:11> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &')))))
    (CallExpr 0xa8204f8 <line:525:2, col:32> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8204c0 <col:2, col:16> '<dependent type>' lvalue
        (CallExpr 0xa8204a0 <col:2, col:13> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa820468 <col:2, col:6> '<dependent type>' lvalue
            (DeclRefExpr 0xa82044c <col:2> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &')))))
    <<<NULL>>>)
  (IfStmt 0xa820d28 <line:526:7, line:541:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa820670 <line:526:11, col:54> '<dependent type>'
      (UnresolvedLookupExpr 0xa820610 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CallExpr 0xa820580 <col:11, col:31> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa820548 <col:11, col:17> '<dependent type>' lvalue
          (CXXThisExpr 0xa820538 <col:11> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
      (CallExpr 0xa8205f0 <col:36, col:54> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8205b8 <col:36, col:40> '<dependent type>' lvalue
          (DeclRefExpr 0xa82059c <col:36> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &'))))
    (CompoundStmt 0xa8208f0 <line:527:2, line:531:2>
      (DeclStmt 0xa820778 <line:528:4, col:29>
        0xa8206d0 "_CharT *__tmp =
          (CallExpr 0xa820758 <col:20, col:28> '<dependent type>'
            (UnresolvedMemberExpr 0xa820718 <col:20> '<bound member function type>' lvalue))")
      (CallExpr 0xa820848 <line:529:4, col:25> '<dependent type>'
        (UnresolvedMemberExpr 0xa820798 <col:4> '<bound member function type>' lvalue)
        (CallExpr 0xa820828 <col:12, col:24> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8207f0 <col:12, col:16> '<dependent type>' lvalue
            (DeclRefExpr 0xa8207d8 <col:12> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &'))))
      (CallExpr 0xa8208d0 <line:530:4, col:21> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa820880 <col:4, col:8> '<dependent type>' lvalue
          (DeclRefExpr 0xa820868 <col:4> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &'))
        (DeclRefExpr 0xa8208b4 <col:16> '_CharT *' lvalue Var 0xa8206d0 '__tmp' '_CharT *')))
    (CompoundStmt 0xa820d08 <line:534:2, line:541:2>
      (DeclStmt 0xa820a90 <line:535:4, line:536:29>
        0xa820920 "const basic_string<_CharT, _Traits, _Alloc> __tmp1 =
          (ParenListExpr 0xa820a68 <line:535:29, line:536:28> 'const basic_string<_CharT, _Traits, _Alloc>'
            (CallExpr 0xa820988 <line:535:30, col:40> '<dependent type>'
              (MemberExpr 0xa820968 <col:30> '<bound member function type>' ->_M_ibegin 0xa7c54b0
                (CXXThisExpr 0xa820958 <col:30> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
            (CallExpr 0xa8209d8 <col:43, col:51> '<dependent type>'
              (MemberExpr 0xa8209b8 <col:43> '<bound member function type>' ->_M_iend 0xa7c5530
                (CXXThisExpr 0xa8209a8 <col:43> 'basic_string<_CharT, _Traits, _Alloc> *' this)))
            (CallExpr 0xa820a48 <line:536:9, col:27> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa820a10 <col:9, col:13> '<dependent type>' lvalue
                (DeclRefExpr 0xa8209f4 <col:9> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &'))))")
      (DeclStmt 0xa820c58 <line:537:4, line:538:31>
        0xa820ab0 "const basic_string<_CharT, _Traits, _Alloc> __tmp2 =
          (ParenListExpr 0xa820c30 <line:537:29, line:538:30> 'const basic_string<_CharT, _Traits, _Alloc>'
            (CallExpr 0xa820b38 <line:537:30, col:44> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa820b00 <col:30, col:34> '<dependent type>' lvalue
                (DeclRefExpr 0xa820ae4 <col:30> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &')))
            (CallExpr 0xa820ba8 <col:47, col:59> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa820b70 <col:47, col:51> '<dependent type>' lvalue
                (DeclRefExpr 0xa820b54 <col:47> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &')))
            (CallExpr 0xa820c10 <line:538:9, col:29> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa820bd8 <col:9, col:15> '<dependent type>' lvalue
                (CXXThisExpr 0xa820bc8 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))))")
      (BinaryOperator 0xa820ca8 <line:539:4, col:12> '<dependent type>' '='
        (UnaryOperator 0xa820c78 <col:4, col:5> '<dependent type>' prefix '*'
          (CXXThisExpr 0xa820c68 <col:5> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa820c8c <col:12> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa820ab0 '__tmp2' 'const basic_string<_CharT, _Traits, _Alloc>'))
      (BinaryOperator 0xa820cf0 <line:540:4, col:10> '<dependent type>' '='
        (DeclRefExpr 0xa820cc0 <col:4> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa820130 '__s' 'basic_string<_CharT, _Traits, _Alloc> &')
        (DeclRefExpr 0xa820cd8 <col:10> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa820920 '__tmp1' 'const basic_string<_CharT, _Traits, _Alloc>')))))


    static typename basic_string<_CharT, _Traits, _Alloc>::_Rep *_S_create(size_type __capacity, size_type __old_capacity, const _Alloc &__alloc) (CompoundStmt 0xa822720 </usr/include/c++/4.6/bits/basic_string.tcc:549:5, line:620:5>
  (IfStmt 0xa8217c0 <line:552:7, line:553:53>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8216c0 <line:552:11, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa821670 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
      (DeclRefExpr 0xa82163c <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa821654 <col:24> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8094e0 '_S_max_size' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type'))
    (CallExpr 0xa821790 <line:553:2, col:53> 'void'
      (ImplicitCastExpr 0xa821780 <col:2> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa821764 <col:2> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5980 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa8217b0 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa821750 <col:24, col:30> 'const char [24]' lvalue
          (StringLiteral 0xa82171c </usr/include/c++/4.6/bits/basic_string.tcc:553:27> 'const char [24]' lvalue "basic_string::_S_create"))))
    <<<NULL>>>)
  (DeclStmt 0xa821840 <line:578:7, col:40>
    0xa8217f0 "const size_type __pagesize =
      (IntegerLiteral 0xa821828 <col:36> 'int' 4096)")
  (DeclStmt 0xa821900 <line:579:7, col:63>
    0xa821860 "const size_type __malloc_header_size =
      (BinaryOperator 0xa8218e8 <col:46, col:62> 'unsigned int' '*'
        (ImplicitCastExpr 0xa8218d8 <col:46> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa821898 <col:46> 'int' 4))
        (UnaryExprOrTypeTraitExpr 0xa8218c0 <col:50, col:62> 'unsigned int' sizeof 'void *'))")
  (IfStmt 0xa821b20 <line:587:7, line:588:19>
    <<<NULL>>>
    (BinaryOperator 0xa821a90 <line:587:11, col:59> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa821990 <col:11, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa821940 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
        (DeclRefExpr 0xa821910 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa821928 <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa821310 '__old_capacity' 'size_type':'typename _CharT_alloc_type::size_type'))
      (CXXOperatorCallExpr 0xa821a68 <col:42, col:59> '<dependent type>'
        (UnresolvedLookupExpr 0xa821a18 <col:53, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
        (DeclRefExpr 0xa8219b4 <col:42> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
        (BinaryOperator 0xa821a00 <col:55, col:59> '<dependent type>' '*'
          (IntegerLiteral 0xa8219d0 <col:55> 'int' 2)
          (DeclRefExpr 0xa8219e8 <col:59> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa821310 '__old_capacity' 'size_type':'typename _CharT_alloc_type::size_type'))))
    (BinaryOperator 0xa821b08 <line:588:2, col:19> '<dependent type>' '='
      (DeclRefExpr 0xa821aa8 <col:2> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
      (BinaryOperator 0xa821af0 <col:15, col:19> '<dependent type>' '*'
        (IntegerLiteral 0xa821ac0 <col:15> 'int' 2)
        (DeclRefExpr 0xa821ad8 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa821310 '__old_capacity' 'size_type':'typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (DeclStmt 0xa821d18 <line:593:7, col:74>
    0xa821b50 "size_type __size =
      (CXXOperatorCallExpr 0xa821cf0 <col:26, col:73> '<dependent type>'
        (UnresolvedLookupExpr 0xa821ca0 <col:60, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
        (BinaryOperator 0xa821c68 <col:26, col:58> '<dependent type>' '*'
          (ParenExpr 0xa821c30 <col:26, col:41> '<dependent type>'
            (CXXOperatorCallExpr 0xa821c08 <col:27, col:40> '<dependent type>'
              (UnresolvedLookupExpr 0xa821bb8 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
              (DeclRefExpr 0xa821b84 <col:27> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
              (IntegerLiteral 0xa821ba0 <col:40> 'int' 1)))
          (UnaryExprOrTypeTraitExpr 0xa821c50 <col:45, col:58> 'unsigned int' sizeof '_CharT'))
        (UnaryExprOrTypeTraitExpr 0xa821c88 <col:62, col:73> 'unsigned int' sizeof 'struct std::basic_string::_Rep'))")
  (DeclStmt 0xa821e10 <line:595:7, col:65>
    0xa821d30 "const size_type __adj_size =
      (CXXOperatorCallExpr 0xa821de8 <col:36, col:45> '<dependent type>'
        (UnresolvedLookupExpr 0xa821d98 <col:43, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
        (DeclRefExpr 0xa821d64 <col:36> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa821b50 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa821d7c <col:45> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa821860 '__malloc_header_size' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa822418 <line:596:7, line:604:2>
    <<<NULL>>>
    (BinaryOperator 0xa821f70 <line:596:11, col:51> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa821ea0 <col:11, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa821e50 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
        (DeclRefExpr 0xa821e20 <col:11> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa821d30 '__adj_size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa821e38 <col:24> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8217f0 '__pagesize' 'const size_type':'const typename _CharT_alloc_type::size_type'))
      (CXXOperatorCallExpr 0xa821f48 <col:38, col:51> '<dependent type>'
        (UnresolvedLookupExpr 0xa821ef8 <col:49, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
        (DeclRefExpr 0xa821ec4 <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa821edc <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa821310 '__old_capacity' 'size_type':'typename _CharT_alloc_type::size_type')))
    (CompoundStmt 0xa8223f8 <line:597:2, line:604:2>
      (DeclStmt 0xa822090 <line:598:4, col:66>
        0xa821f90 "const size_type __extra =
          (CXXOperatorCallExpr 0xa822068 <col:30, col:56> '<dependent type>'
            (UnresolvedLookupExpr 0xa822028 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa821fc4 <col:30> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8217f0 '__pagesize' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (BinaryOperator 0xa822010 <col:43, col:56> '<dependent type>' '%'
              (DeclRefExpr 0xa821fdc <col:43> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa821d30 '__adj_size' 'const size_type':'const typename _CharT_alloc_type::size_type')
              (DeclRefExpr 0xa821ff4 <col:56> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8217f0 '__pagesize' 'const size_type':'const typename _CharT_alloc_type::size_type')))")
      (CompoundAssignOperator 0xa822108 <line:599:4, col:41> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
        (DeclRefExpr 0xa8220a0 <col:4> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
        (BinaryOperator 0xa8220f0 <col:18, col:41> '<dependent type>' '/'
          (DeclRefExpr 0xa8220b8 <col:18> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa821f90 '__extra' 'const size_type':'const typename _CharT_alloc_type::size_type')
          (UnaryExprOrTypeTraitExpr 0xa8220d8 <col:28, col:41> 'unsigned int' sizeof '_CharT')))
      (IfStmt 0xa822218 <line:601:4, line:602:19>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8221a8 <line:601:8, col:21> '<dependent type>'
          (UnresolvedLookupExpr 0xa822158 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (DeclRefExpr 0xa822128 <col:8> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa822140 <col:21> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8094e0 '_S_max_size' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type'))
        (BinaryOperator 0xa822200 <line:602:6, col:19> '<dependent type>' '='
          (DeclRefExpr 0xa8221cc <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa8221e4 <col:19> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8094e0 '_S_max_size' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (BinaryOperator 0xa8223e0 <line:603:4, col:60> '<dependent type>' '='
        (DeclRefExpr 0xa822234 <col:4> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa821b50 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
        (CXXOperatorCallExpr 0xa8223b8 <col:13, col:60> '<dependent type>'
          (UnresolvedLookupExpr 0xa822368 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
          (BinaryOperator 0xa822330 <col:13, col:45> '<dependent type>' '*'
            (ParenExpr 0xa8222f8 <col:13, col:28> '<dependent type>'
              (CXXOperatorCallExpr 0xa8222d0 <col:14, col:27> '<dependent type>'
                (UnresolvedLookupExpr 0xa822280 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
                (DeclRefExpr 0xa82224c <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type')
                (IntegerLiteral 0xa822268 <col:27> 'int' 1)))
            (UnaryExprOrTypeTraitExpr 0xa822318 <col:32, col:45> 'unsigned int' sizeof '_CharT'))
          (UnaryExprOrTypeTraitExpr 0xa822350 <col:49, col:60> 'unsigned int' sizeof 'struct std::basic_string::_Rep'))))
    <<<NULL>>>)
  (DeclStmt 0xa822538 <line:608:7, col:65>
    0xa822450 "void *__place =
      (CallExpr 0xa822518 <col:23, col:64> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8224c8 <col:23, col:49> '<dependent type>' lvalue
          (CXXUnresolvedConstructExpr 0xa8224a8 <col:23, col:47> '_Raw_bytes_alloc':'typename _Alloc::_Alloc::rebind<char>::other'
            (DeclRefExpr 0xa822490 <col:40> 'const _Alloc' lvalue ParmVar 0xa821380 '__alloc' 'const _Alloc &')))
        (DeclRefExpr 0xa8224fc <col:58> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa821b50 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa8225f8 <line:609:7, col:37>
    0xa822560 "std::basic_string::_Rep *__p =
      (CXXNewExpr 0xa8225b8 <col:19, col:33> 'struct std::basic_string::_Rep *'
        (DeclRefExpr 0xa822594 <col:24> 'void *' lvalue Var 0xa822450 '__place' 'void *'))")
  (BinaryOperator 0xa822670 <line:610:7, col:26> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa822620 <col:7, col:12> '<dependent type>' lvalue
      (DeclRefExpr 0xa822608 <col:7> 'struct std::basic_string::_Rep *' lvalue Var 0xa822560 '__p' 'struct std::basic_string::_Rep *'))
    (DeclRefExpr 0xa822654 <col:26> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8212d0 '__capacity' 'size_type':'typename _CharT_alloc_type::size_type'))
  (CallExpr 0xa8226d8 <line:618:7, col:28> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8226a0 <col:7, col:12> '<dependent type>' lvalue
      (DeclRefExpr 0xa822688 <col:7> 'struct std::basic_string::_Rep *' lvalue Var 0xa822560 '__p' 'struct std::basic_string::_Rep *')))
  (ReturnStmt 0xa822710 <line:619:7, col:14>
    (DeclRefExpr 0xa8226f4 <col:14> 'struct std::basic_string::_Rep *' lvalue Var 0xa822560 '__p' 'struct std::basic_string::_Rep *')))


    _CharT *_M_clone(const _Alloc &__alloc, size_type __res = (IntegerLiteral 0xa7e43f0 </usr/include/c++/4.6/bits/basic_string.h:262:44> 'int' 0)
) (CompoundStmt 0xa823200 </usr/include/c++/4.6/bits/basic_string.tcc:626:5, line:636:5>
  (DeclStmt 0xa822dd0 <line:628:7, col:64>
    0xa822cc0 "const size_type __requested_cap =
      (CXXOperatorCallExpr 0xa822da8 <col:41, col:59> '<dependent type>'
        (UnresolvedLookupExpr 0xa822d58 <col:57, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
        (CXXDependentScopeMemberExpr 0xa822d08 <col:41, col:47> '<dependent type>' lvalue
          (CXXThisExpr 0xa822cf8 <col:41> 'struct std::basic_string::_Rep *' this))
        (DeclRefExpr 0xa822d3c <col:59> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa822b70 '__res' 'size_type':'typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa822f08 <line:629:7, line:630:15>
    0xa822df0 "std::basic_string::_Rep *__r =
      (CallExpr 0xa822ee0 <line:629:19, line:630:14> '<dependent type>'
        (DeclRefExpr 0xa822e44 <line:629:19, col:25> 'typename basic_string<_CharT, _Traits, _Alloc>::_Rep *(size_type, size_type, const _Alloc &)' lvalue CXXMethod 0xa8215a0 '_S_create' 'typename basic_string<_CharT, _Traits, _Alloc>::_Rep *(size_type, size_type, const _Alloc &)')
        (DeclRefExpr 0xa822e64 <col:35> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa822cc0 '__requested_cap' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (CXXDependentScopeMemberExpr 0xa822e90 <col:52, col:58> '<dependent type>' lvalue
          (CXXThisExpr 0xa822e80 <col:52> 'struct std::basic_string::_Rep *' this))
        (DeclRefExpr 0xa822ec4 <line:630:7> 'const _Alloc' lvalue ParmVar 0xa822b30 '__alloc' 'const _Alloc &'))")
  (IfStmt 0xa8230a8 <line:631:7, line:632:58>
    <<<NULL>>>
    (CXXDependentScopeMemberExpr 0xa822f28 <line:631:11, col:17> '<dependent type>' lvalue
      (CXXThisExpr 0xa822f18 <col:11> 'struct std::basic_string::_Rep *' this))
    (CallExpr 0xa823080 <line:632:2, col:58> '<dependent type>'
      (DeclRefExpr 0xa822f5c <col:2> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
      (CallExpr 0xa822fc8 <col:10, col:26> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa822f90 <col:10, col:15> '<dependent type>' lvalue
          (DeclRefExpr 0xa822f74 <col:10> 'struct std::basic_string::_Rep *' lvalue Var 0xa822df0 '__r' 'struct std::basic_string::_Rep *')))
      (CallExpr 0xa823018 <col:29, col:40> '<dependent type>'
        (MemberExpr 0xa822ff8 <col:29> '<bound member function type>' ->_M_refdata 0xa7c45c0
          (CXXThisExpr 0xa822fe8 <col:29> 'struct std::basic_string::_Rep *' this)))
      (CXXDependentScopeMemberExpr 0xa823048 <col:43, col:49> '<dependent type>' lvalue
        (CXXThisExpr 0xa823038 <col:43> 'struct std::basic_string::_Rep *' this)))
    <<<NULL>>>)
  (CallExpr 0xa823160 <line:634:7, col:54> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8230e0 <col:7, col:12> '<dependent type>' lvalue
      (DeclRefExpr 0xa8230c4 <col:7> 'struct std::basic_string::_Rep *' lvalue Var 0xa822df0 '__r' 'struct std::basic_string::_Rep *'))
    (CXXDependentScopeMemberExpr 0xa823128 <col:39, col:45> '<dependent type>' lvalue
      (CXXThisExpr 0xa823118 <col:39> 'struct std::basic_string::_Rep *' this)))
  (ReturnStmt 0xa8231f0 <line:635:7, col:30>
    (CallExpr 0xa8231d0 <col:14, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa823198 <col:14, col:19> '<dependent type>' lvalue
        (DeclRefExpr 0xa823180 <col:14> 'struct std::basic_string::_Rep *' lvalue Var 0xa822df0 '__r' 'struct std::basic_string::_Rep *')))))


    void resize(size_type __n, _CharT __c) (CompoundStmt 0xa823b98 </usr/include/c++/4.6/bits/basic_string.tcc:642:5, line:650:5>
  (DeclStmt 0xa8237a0 <line:643:7, col:44>
    0xa823700 "const size_type __size =
      (CallExpr 0xa823780 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa823748 <col:32, col:38> '<dependent type>' lvalue
          (CXXThisExpr 0xa823738 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (CallExpr 0xa823840 <line:644:7, col:58> '<dependent type>'
    (MemberExpr 0xa8237c0 <col:7> '<bound member function type>' ->_M_check_length 0xa7c58d0
      (CXXThisExpr 0xa8237b0 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa8237e0 <col:23> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa823700 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa8237f8 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8235a0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa823810 <col:36> 'const char [21]' lvalue "basic_string::resize"))
  (IfStmt 0xa823b78 <line:645:7, line:648:17>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8238e8 <line:645:11, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa823898 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
      (DeclRefExpr 0xa823868 <col:11> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa823700 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa823880 <col:20> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8235a0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
    (CallExpr 0xa823a08 <line:646:2, col:32> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa823920 <col:2, col:8> '<dependent type>' lvalue
        (CXXThisExpr 0xa823910 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa8239c8 <col:15, col:21> '<dependent type>'
        (UnresolvedLookupExpr 0xa823988 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa823954 <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8235a0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa82396c <col:21> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa823700 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
      (DeclRefExpr 0xa8239ec <col:29> '_CharT' lvalue ParmVar 0xa8235e0 '__c' '_CharT'))
    (IfStmt 0xa823b58 <line:647:12, line:648:17>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa823ab0 <line:647:16, col:22> '<dependent type>'
        (UnresolvedLookupExpr 0xa823a60 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
        (DeclRefExpr 0xa823a2c <col:16> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8235a0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa823a44 <col:22> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa823700 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
      (CallExpr 0xa823b38 <line:648:2, col:17> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa823ae8 <col:2, col:8> '<dependent type>' lvalue
          (CXXThisExpr 0xa823ad8 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
        (DeclRefExpr 0xa823b1c <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8235a0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
      <<<NULL>>>)))


    template <typename _InputIterator> basic_string<_CharT, _Traits, _Alloc> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type) (CompoundStmt 0xa8249f0 </usr/include/c++/4.6/bits/basic_string.tcc:658:7, line:664:7>
  (DeclStmt 0xa824558 <line:659:2, col:36>
    0xa8244d0 "const basic_string<_CharT, _Traits, _Alloc> __s =
      (ParenListExpr 0xa824538 <col:24, col:35> 'const basic_string<_CharT, _Traits, _Alloc>'
        (DeclRefExpr 0xa824504 <col:25> '_InputIterator' lvalue ParmVar 0xa824120 '__k1' '_InputIterator')
        (DeclRefExpr 0xa82451c <col:31> '_InputIterator' lvalue ParmVar 0xa824160 '__k2' '_InputIterator'))")
  (DeclStmt 0xa824640 <line:660:2, col:36>
    0xa824570 "const size_type __n1 =
      (CXXOperatorCallExpr 0xa824618 <col:25, col:32> '<dependent type>'
        (UnresolvedLookupExpr 0xa8245d8 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa8245a4 <col:25> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa8240e0 '__i2' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (DeclRefExpr 0xa8245bc <col:32> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa8240a0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >'))")
  (CallExpr 0xa824790 <line:661:2, col:71> '<dependent type>'
    (MemberExpr 0xa824660 <col:2> '<bound member function type>' ->_M_check_length 0xa7c58d0
      (CXXThisExpr 0xa824650 <col:2> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa824680 <col:18> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa824570 '__n1' 'const size_type':'const typename _CharT_alloc_type::size_type')
    (CallExpr 0xa8246e8 <col:24, col:33> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8246b0 <col:24, col:28> '<dependent type>' lvalue
        (DeclRefExpr 0xa824698 <col:24> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa8244d0 '__s' 'const basic_string<_CharT, _Traits, _Alloc>')))
    (StringLiteral 0xa824750 <col:36> 'const char [34]' lvalue "basic_string::_M_replace_dispatch"))
  (ReturnStmt 0xa8249e0 <line:662:2, line:663:21>
    (CallExpr 0xa8249b0 <line:662:9, line:663:21> '<dependent type>'
      (MemberExpr 0xa8247c8 <line:662:9> '<bound member function type>' ->_M_replace_safe 0xa7db0f0
        (CXXThisExpr 0xa8247b8 <col:9> 'basic_string<_CharT, _Traits, _Alloc> *' this))
      (CXXOperatorCallExpr 0xa824890 <col:25, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa824850 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
        (DeclRefExpr 0xa8247e8 <col:25> 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >' lvalue ParmVar 0xa8240a0 '__i1' 'iterator':'__normal_iterator<pointer, basic_string<_CharT, _Traits, _Alloc> >')
        (CallExpr 0xa824830 <col:32, col:42> '<dependent type>'
          (MemberExpr 0xa824810 <col:32> '<bound member function type>' ->_M_ibegin 0xa7c54b0
            (CXXThisExpr 0xa824800 <col:32> 'basic_string<_CharT, _Traits, _Alloc> *' this))))
      (DeclRefExpr 0xa8248b4 <col:45> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa824570 '__n1' 'const size_type':'const typename _CharT_alloc_type::size_type')
      (CallExpr 0xa824920 <col:51, col:63> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8248e8 <col:51, col:55> '<dependent type>' lvalue
          (DeclRefExpr 0xa8248cc <col:51> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa8244d0 '__s' 'const basic_string<_CharT, _Traits, _Alloc>')))
      (CallExpr 0xa824990 <line:663:11, col:20> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa824958 <col:11, col:15> '<dependent type>' lvalue
          (DeclRefExpr 0xa82493c <col:11> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa8244d0 '__s' 'const basic_string<_CharT, _Traits, _Alloc>'))))))

;
    basic_string<_CharT, _Traits, _Alloc> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c) (CompoundStmt 0xa825560 </usr/include/c++/4.6/bits/basic_string.tcc:671:5, line:677:5>
  (CallExpr 0xa8252b8 <line:672:7, col:65> '<dependent type>'
    (MemberExpr 0xa825230 <col:7> '<bound member function type>' ->_M_check_length 0xa7c58d0
      (CXXThisExpr 0xa825220 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa825250 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824ee0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa825268 <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824f20 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa825280 <col:35> 'const char [29]' lvalue "basic_string::_M_replace_aux"))
  (CallExpr 0xa825358 <line:673:7, col:35> '<dependent type>'
    (MemberExpr 0xa8252f0 <col:7> '<bound member function type>' ->_M_mutate 0xa81dcd0
      (CXXThisExpr 0xa8252e0 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa825310 <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824ea0 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa825328 <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824ee0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa825340 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824f20 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
  (IfStmt 0xa825508 <line:674:7, line:675:41>
    <<<NULL>>>
    (DeclRefExpr 0xa825380 <line:674:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824f20 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa8254e0 <line:675:2, col:41> '<dependent type>'
      (DeclRefExpr 0xa825398 <col:2> 'void (_CharT *, size_type, _CharT)' lvalue CXXMethod 0xa7c6070 '_M_assign' 'void (_CharT *, size_type, _CharT)')
      (CXXOperatorCallExpr 0xa825488 <col:12, col:24> '<dependent type>'
        (UnresolvedLookupExpr 0xa825438 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
        (CallExpr 0xa825400 <col:12, col:20> '<dependent type>'
          (UnresolvedMemberExpr 0xa8253c0 <col:12> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa82541c <col:24> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824ea0 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type'))
      (DeclRefExpr 0xa8254ac <col:32> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa824f20 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa8254c4 <col:38> '_CharT' lvalue ParmVar 0xa824f60 '__c' '_CharT'))
    <<<NULL>>>)
  (ReturnStmt 0xa825550 <line:676:7, col:15>
    (UnaryOperator 0xa825538 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa825528 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    basic_string<_CharT, _Traits, _Alloc> &_M_replace_safe(size_type __pos1, size_type __n1, const _CharT *__s, size_type __n2) (CompoundStmt 0xa826020 </usr/include/c++/4.6/bits/basic_string.tcc:684:5, line:689:5>
  (CallExpr 0xa825e18 <line:685:7, col:35> '<dependent type>'
    (MemberExpr 0xa825db0 <col:7> '<bound member function type>' ->_M_mutate 0xa81dcd0
      (CXXThisExpr 0xa825da0 <col:7> 'basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa825dd0 <col:17> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa825a10 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa825de8 <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa825a50 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (DeclRefExpr 0xa825e00 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa825b00 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
  (IfStmt 0xa825fc8 <line:686:7, line:687:39>
    <<<NULL>>>
    (DeclRefExpr 0xa825e40 <line:686:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa825b00 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa825fa0 <line:687:2, col:39> '<dependent type>'
      (DeclRefExpr 0xa825e58 <col:2> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
      (CXXOperatorCallExpr 0xa825f48 <col:10, col:22> '<dependent type>'
        (UnresolvedLookupExpr 0xa825ef8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fa370 0xa7fa8c0 0xa7fae40 0xa7fd550)
        (CallExpr 0xa825ec0 <col:10, col:18> '<dependent type>'
          (UnresolvedMemberExpr 0xa825e80 <col:10> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa825edc <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa825a10 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type'))
      (DeclRefExpr 0xa825f6c <col:30> 'const _CharT *' lvalue ParmVar 0xa825ac0 '__s' 'const _CharT *')
      (DeclRefExpr 0xa825f84 <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa825b00 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))
    <<<NULL>>>)
  (ReturnStmt 0xa826010 <line:688:7, col:15>
    (UnaryOperator 0xa825ff8 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa825fe8 <col:15> 'basic_string<_CharT, _Traits, _Alloc> *' this))))


    template <typename _CharT, typename _Traits, typename _Alloc> basic_string<_CharT, _Traits, _Alloc> operator+(const _CharT *__lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa826c30 </usr/include/c++/4.6/bits/basic_string.tcc:695:5, line:705:5>
  (NullStmt 0xa8265b0 <line:696:39>)
  (DeclStmt 0xa826750 <line:697:7, col:66>
    0xa826720 "typedef basic_string<_CharT, _Traits, _Alloc> __string_type")
  (DeclStmt 0xa826810 <line:698:7, col:62>
    0xa8267e0 "typedef typename __string_type::size_type __size_type")
  (DeclStmt 0xa826900 <line:699:7, col:55>
    0xa826840 "const __size_type __len =
      (CallExpr 0xa8268e0 <col:33, col:54> '<dependent type>'
        (DependentScopeDeclRefExpr 0xa8268a0 <col:33, col:42> '<dependent type>' lvalue)
        (DeclRefExpr 0xa8268c4 <col:49> 'const _CharT *' lvalue ParmVar 0xa826290 '__lhs' 'const _CharT *'))")
  (DeclStmt 0xa826958 <line:700:7, col:26>
    0xa826920 "__string_type __str")
  (CallExpr 0xa826ab8 <line:701:7, col:41> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa826980 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa826968 <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa826920 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (CXXOperatorCallExpr 0xa826a90 <col:21, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa826a40 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fa8c0 0xa7fae40)
      (DeclRefExpr 0xa8269b4 <col:21> 'const __size_type':'const typename __string_type::size_type' lvalue Var 0xa826840 '__len' 'const __size_type':'const typename __string_type::size_type')
      (CallExpr 0xa826a20 <col:29, col:40> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8269e8 <col:29, col:35> '<dependent type>' lvalue
          (DeclRefExpr 0xa8269cc <col:29> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa826440 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &')))))
  (CallExpr 0xa826b58 <line:702:7, col:32> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa826af0 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa826ad8 <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa826920 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (DeclRefExpr 0xa826b24 <col:20> 'const _CharT *' lvalue ParmVar 0xa826290 '__lhs' 'const _CharT *')
    (DeclRefExpr 0xa826b3c <col:27> 'const __size_type':'const typename __string_type::size_type' lvalue Var 0xa826840 '__len' 'const __size_type':'const typename __string_type::size_type'))
  (CallExpr 0xa826be8 <line:703:7, col:25> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa826b98 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa826b7c <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa826920 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (DeclRefExpr 0xa826bcc <col:20> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa826440 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
  (ReturnStmt 0xa826c20 <line:704:7, col:14>
    (DeclRefExpr 0xa826c08 <col:14> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa826920 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>')))

;
    template <typename _CharT, typename _Traits, typename _Alloc> basic_string<_CharT, _Traits, _Alloc> operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc> &__rhs) (CompoundStmt 0xa8277f0 </usr/include/c++/4.6/bits/basic_string.tcc:710:5, line:719:5>
  (DeclStmt 0xa827350 <line:711:7, col:66>
    0xa827320 "typedef basic_string<_CharT, _Traits, _Alloc> __string_type")
  (DeclStmt 0xa827410 <line:712:7, col:62>
    0xa8273e0 "typedef typename __string_type::size_type __size_type")
  (DeclStmt 0xa827468 <line:713:7, col:26>
    0xa827430 "__string_type __str")
  (DeclStmt 0xa827548 <line:714:7, col:45>
    0xa8274a0 "const __size_type __len =
      (CallExpr 0xa827528 <col:33, col:44> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8274f0 <col:33, col:39> '<dependent type>' lvalue
          (DeclRefExpr 0xa8274d4 <col:33> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa827050 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &')))")
  (CallExpr 0xa827650 <line:715:7, col:30> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa827570 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa827558 <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa827430 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (CXXOperatorCallExpr 0xa827628 <col:21, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa8275d8 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
      (DeclRefExpr 0xa8275a4 <col:21> 'const __size_type':'const typename __string_type::size_type' lvalue Var 0xa8274a0 '__len' 'const __size_type':'const typename __string_type::size_type')
      (IntegerLiteral 0xa8275c0 <col:29> 'int' 1)))
  (CallExpr 0xa827718 <line:716:7, col:41> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa827688 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa827670 <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa827430 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (CXXUnresolvedConstructExpr 0xa8276e0 <col:20, col:33> '__size_type':'typename __string_type::size_type'
      (IntegerLiteral 0xa8276c8 <col:32> 'int' 1))
    (DeclRefExpr 0xa8276fc <col:36> '_CharT' lvalue ParmVar 0xa826ea0 '__lhs' '_CharT'))
  (CallExpr 0xa8277a8 <line:717:7, col:25> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa827758 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa82773c <col:7> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa827430 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>'))
    (DeclRefExpr 0xa82778c <col:20> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa827050 '__rhs' 'const basic_string<_CharT, _Traits, _Alloc> &'))
  (ReturnStmt 0xa8277e0 <line:718:7, col:14>
    (DeclRefExpr 0xa8277c8 <col:14> '__string_type':'basic_string<_CharT, _Traits, _Alloc>' lvalue Var 0xa827430 '__str' '__string_type':'basic_string<_CharT, _Traits, _Alloc>')))

;
    typename basic_string<_CharT, _Traits, _Alloc>::size_type copy(_CharT *__s, size_type __n, size_type __pos = (IntegerLiteral 0xa7e44e8 </usr/include/c++/4.6/bits/basic_string.h:1745:58> 'int' 0)
) const (CompoundStmt 0xa828368 </usr/include/c++/4.6/bits/basic_string.tcc:725:5, line:733:5>
  (CallExpr 0xa8280a8 <line:726:7, col:43> '<dependent type>'
    (MemberExpr 0xa828040 <col:7> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa828030 <col:7> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa828060 <col:16> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827da0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa828078 <col:23> 'const char [19]' lvalue "basic_string::copy"))
  (BinaryOperator 0xa828170 <line:727:7, col:32> '<dependent type>' '='
    (DeclRefExpr 0xa8280cc <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827d60 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa828148 <col:13, col:32> '<dependent type>'
      (MemberExpr 0xa8280f8 <col:13> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa8280e8 <col:13> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa828118 <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827da0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa828130 <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827d60 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
  (NullStmt 0xa828188 <line:728:46>)
  (IfStmt 0xa828320 <line:729:7, line:730:37>
    <<<NULL>>>
    (DeclRefExpr 0xa828194 <line:729:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827d60 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa8282f8 <line:730:2, col:37> '<dependent type>'
      (DeclRefExpr 0xa8281ac <col:2> 'void (_CharT *, const _CharT *, size_type)' lvalue CXXMethod 0xa7c5d40 '_M_copy' 'void (_CharT *, const _CharT *, size_type)')
      (DeclRefExpr 0xa8281c4 <col:10> '_CharT *' lvalue ParmVar 0xa827d20 '__s' '_CharT *')
      (CXXOperatorCallExpr 0xa8282b8 <col:15, col:27> '<dependent type>'
        (UnresolvedLookupExpr 0xa828268 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
        (CallExpr 0xa828230 <col:15, col:23> '<dependent type>'
          (UnresolvedMemberExpr 0xa8281f0 <col:15> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa82824c <col:27> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827da0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
      (DeclRefExpr 0xa8282dc <col:34> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827d60 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
    <<<NULL>>>)
  (ReturnStmt 0xa828358 <line:732:7, col:14>
    (DeclRefExpr 0xa82833c <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa827d60 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find(const _CharT *__s, size_type __pos, size_type __n) const (CompoundStmt 0xa8296d0 </usr/include/c++/4.6/bits/basic_string.tcc:739:5, line:756:5>
  (NullStmt 0xa828ba0 <line:740:46>)
  (DeclStmt 0xa828c60 <line:741:7, col:44>
    0xa828bc0 "const size_type __size =
      (CallExpr 0xa828c40 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa828c08 <col:32, col:38> '<dependent type>' lvalue
          (CXXThisExpr 0xa828bf8 <col:32> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (DeclStmt 0xa828d28 <line:742:7, col:39>
    0xa828c80 "const _CharT *__data =
      (CallExpr 0xa828d08 <col:30, col:38> '<dependent type>'
        (UnresolvedMemberExpr 0xa828cc8 <col:30> '<bound member function type>' lvalue))")
  (IfStmt 0xa828ef8 <line:744:7, line:745:35>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa828dc8 <line:744:11, col:18> '<dependent type>'
      (UnresolvedLookupExpr 0xa828d68 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (DeclRefExpr 0xa828d38 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa828910 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (IntegerLiteral 0xa828d50 <col:18> 'int' 0))
    (ReturnStmt 0xa828ee8 <line:745:2, col:35>
      (ConditionalOperator 0xa828ec8 <col:9, col:35> '<dependent type>'
        (CXXOperatorCallExpr 0xa828e70 <col:9, col:18> '<dependent type>'
          (UnresolvedLookupExpr 0xa828e20 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
          (DeclRefExpr 0xa828dec <col:9> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa828e04 <col:18> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa828bc0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa828e94 <col:27> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa828eac <col:35> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (IfStmt 0xa829688 <line:747:7, line:754:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa828f98 <line:747:11, col:18> '<dependent type>'
      (UnresolvedLookupExpr 0xa828f48 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
      (DeclRefExpr 0xa828f14 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa828910 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa828f2c <col:18> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa828bc0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
    (CompoundStmt 0xa829670 <line:748:2, line:754:2>
      (ForStmt 0xa829648 <line:749:4, line:753:15>
        <<<NULL>>>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8290c0 <line:749:11, col:29> '<dependent type>'
          (UnresolvedLookupExpr 0xa829070 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
          (DeclRefExpr 0xa828fbc <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
          (CXXOperatorCallExpr 0xa829048 <col:20, col:29> '<dependent type>'
            (UnresolvedLookupExpr 0xa829008 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa828fd4 <col:20> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa828bc0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (DeclRefExpr 0xa828fec <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa828910 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
        (UnaryOperator 0xa829120 <col:34, col:36> '<dependent type>' prefix '++'
          (DeclRefExpr 0xa8290e4 <col:36> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (IfStmt 0xa829628 <line:750:6, line:753:15>
          <<<NULL>>>
          (BinaryOperator 0xa8295e8 <line:750:10, line:752:27> '<dependent type>' '&&'
            (CallExpr 0xa829228 <line:750:10, col:47> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa829160 <col:10, col:23> '<dependent type>' lvalue)
              (ArraySubscriptExpr 0xa8291c8 <col:26, col:38> '<dependent type>' lvalue
                (DeclRefExpr 0xa829194 <col:26> 'const _CharT *' lvalue Var 0xa828c80 '__data' 'const _CharT *')
                (DeclRefExpr 0xa8291ac <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
              (ArraySubscriptExpr 0xa829210 <col:41, col:46> '<dependent type>' lvalue
                (DeclRefExpr 0xa8291dc <col:41> 'const _CharT *' lvalue ParmVar 0xa828890 '__s' 'const _CharT *')
                (IntegerLiteral 0xa8291f8 <col:45> 'int' 0)))
            (CXXOperatorCallExpr 0xa8295c0 <line:751:6, line:752:27> '<dependent type>'
              (UnresolvedLookupExpr 0xa829560 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (CallExpr 0xa829520 <line:751:6, line:752:22> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa829270 <line:751:6, col:19> '<dependent type>' lvalue)
                (CXXOperatorCallExpr 0xa8293b8 <col:27, col:44> '<dependent type>'
                  (UnresolvedLookupExpr 0xa829368 <col:42, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
                  (CXXOperatorCallExpr 0xa829328 <col:27, col:36> '<dependent type>'
                    (UnresolvedLookupExpr 0xa8292d8 <col:34, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
                    (DeclRefExpr 0xa8292a4 <col:27> 'const _CharT *' lvalue Var 0xa828c80 '__data' 'const _CharT *')
                    (DeclRefExpr 0xa8292bc <col:36> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
                  (IntegerLiteral 0xa829350 <col:44> 'int' 1))
                (CXXOperatorCallExpr 0xa829460 <line:752:6, col:12> '<dependent type>'
                  (UnresolvedLookupExpr 0xa829410 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
                  (DeclRefExpr 0xa8293dc <col:6> 'const _CharT *' lvalue ParmVar 0xa828890 '__s' 'const _CharT *')
                  (IntegerLiteral 0xa8293f8 <col:12> 'int' 1))
                (CXXOperatorCallExpr 0xa8294f8 <col:15, col:21> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8294b8 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
                  (DeclRefExpr 0xa829484 <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa828910 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
                  (IntegerLiteral 0xa8294a0 <col:21> 'int' 1)))
              (IntegerLiteral 0xa829548 <col:27> 'int' 0)))
          (ReturnStmt 0xa829618 <line:753:8, col:15>
            (DeclRefExpr 0xa829600 <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8288d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
          <<<NULL>>>)))
    <<<NULL>>>)
  (ReturnStmt 0xa8296c0 <line:755:7, col:14>
    (DeclRefExpr 0xa8296a4 <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find(_CharT __c, size_type __pos = (IntegerLiteral 0xa7e4530 </usr/include/c++/4.6/bits/basic_string.h:1841:42> 'int' 0)
) const (CompoundStmt 0xa82a558 </usr/include/c++/4.6/bits/basic_string.tcc:762:5, line:774:5>
  (DeclStmt 0xa829ef0 <line:763:7, col:29>
    0xa829ea0 "size_type __ret =
      (DeclRefExpr 0xa829ed4 <col:25> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')")
  (DeclStmt 0xa829fb0 <line:764:7, col:44>
    0xa829f10 "const size_type __size =
      (CallExpr 0xa829f90 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa829f58 <col:32, col:38> '<dependent type>' lvalue
          (CXXThisExpr 0xa829f48 <col:32> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (IfStmt 0xa82a510 <line:765:7, line:772:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa82a040 <line:765:11, col:19> '<dependent type>'
      (UnresolvedLookupExpr 0xa829ff0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
      (DeclRefExpr 0xa829fc0 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa829c10 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa829fd8 <col:19> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa829f10 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
    (CompoundStmt 0xa82a4f0 <line:766:2, line:772:2>
      (DeclStmt 0xa82a148 <line:767:4, col:36>
        0xa82a0a0 "const _CharT *__data =
          (CallExpr 0xa82a128 <col:27, col:35> '<dependent type>'
            (UnresolvedMemberExpr 0xa82a0e8 <col:27> '<bound member function type>' lvalue))")
      (DeclStmt 0xa82a230 <line:768:4, col:40>
        0xa82a160 "const size_type __n =
          (CXXOperatorCallExpr 0xa82a208 <col:26, col:35> '<dependent type>'
            (UnresolvedLookupExpr 0xa82a1c8 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa82a194 <col:26> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa829f10 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (DeclRefExpr 0xa82a1ac <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa829c10 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))")
      (DeclStmt 0xa82a3e0 <line:769:4, col:67>
        0xa82a250 "const _CharT *__p =
          (CallExpr 0xa82a3b8 <col:24, col:66> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa82a2a8 <col:24, col:37> '<dependent type>' lvalue)
            (CXXOperatorCallExpr 0xa82a360 <col:42, col:51> '<dependent type>'
              (UnresolvedLookupExpr 0xa82a310 <col:49, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
              (DeclRefExpr 0xa82a2dc <col:42> 'const _CharT *' lvalue Var 0xa82a0a0 '__data' 'const _CharT *')
              (DeclRefExpr 0xa82a2f4 <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa829c10 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa82a384 <col:58> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa82a160 '__n' 'const size_type':'const typename _CharT_alloc_type::size_type')
            (DeclRefExpr 0xa82a39c <col:63> '_CharT' lvalue ParmVar 0xa829bd0 '__c' '_CharT'))")
      (IfStmt 0xa82a4d0 <line:770:4, line:771:20>
        <<<NULL>>>
        (DeclRefExpr 0xa82a3f0 <line:770:8> 'const _CharT *' lvalue Var 0xa82a250 '__p' 'const _CharT *')
        (BinaryOperator 0xa82a4b8 <line:771:6, col:20> '<dependent type>' '='
          (DeclRefExpr 0xa82a408 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa829ea0 '__ret' 'size_type':'typename _CharT_alloc_type::size_type')
          (CXXOperatorCallExpr 0xa82a490 <col:14, col:20> '<dependent type>'
            (UnresolvedLookupExpr 0xa82a450 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
            (DeclRefExpr 0xa82a420 <col:14> 'const _CharT *' lvalue Var 0xa82a250 '__p' 'const _CharT *')
            (DeclRefExpr 0xa82a438 <col:20> 'const _CharT *' lvalue Var 0xa82a0a0 '__data' 'const _CharT *')))
        <<<NULL>>>))
    <<<NULL>>>)
  (ReturnStmt 0xa82a548 <line:773:7, col:14>
    (DeclRefExpr 0xa82a52c <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa829ea0 '__ret' 'size_type':'typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type rfind(const _CharT *__s, size_type __pos, size_type __n) const (CompoundStmt 0xa82b510 </usr/include/c++/4.6/bits/basic_string.tcc:780:5, line:795:5>
  (NullStmt 0xa82ad90 <line:781:46>)
  (DeclStmt 0xa82ae50 <line:782:7, col:44>
    0xa82adb0 "const size_type __size =
      (CallExpr 0xa82ae30 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa82adf8 <col:32, col:38> '<dependent type>' lvalue
          (CXXThisExpr 0xa82ade8 <col:32> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (IfStmt 0xa82b4c8 <line:783:7, line:793:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa82aee0 <line:783:11, col:18> '<dependent type>'
      (UnresolvedLookupExpr 0xa82ae90 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60f3f0 0xa6262e0 0xa628ac0 0xa6b59d0 0xa803010 0xa803550 0xa803a80)
      (DeclRefExpr 0xa82ae60 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ab00 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa82ae78 <col:18> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa82adb0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type'))
    (CompoundStmt 0xa82b4a8 <line:784:2, line:793:2>
      (BinaryOperator 0xa82b070 <line:785:4, col:51> '<dependent type>' '='
        (DeclRefExpr 0xa82af04 <col:4> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82aac0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (CallExpr 0xa82b048 <col:12, col:51> '<dependent type>'
          (UnresolvedLookupExpr 0xa82af38 <col:12, col:17> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
          (CXXUnresolvedConstructExpr 0xa82b010 <col:21, col:43> 'size_type':'typename _CharT_alloc_type::size_type'
            (CXXOperatorCallExpr 0xa82afe8 <col:31, col:40> '<dependent type>'
              (UnresolvedLookupExpr 0xa82afa8 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
              (DeclRefExpr 0xa82af78 <col:31> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa82adb0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
              (DeclRefExpr 0xa82af90 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ab00 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
          (DeclRefExpr 0xa82b02c <col:46> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82aac0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')))
      (DeclStmt 0xa82b148 <line:786:4, col:36>
        0xa82b0a0 "const _CharT *__data =
          (CallExpr 0xa82b128 <col:27, col:35> '<dependent type>'
            (UnresolvedMemberExpr 0xa82b0e8 <col:27> '<bound member function type>' lvalue))")
      (DoStmt 0xa82b490 <line:787:4, line:792:22>
        (CompoundStmt 0xa82b3a0 <line:788:6, line:791:6>
          (IfStmt 0xa82b380 <line:789:8, line:790:10>
            <<<NULL>>>
            (CXXOperatorCallExpr 0xa82b330 <line:789:12, col:62> '<dependent type>'
              (UnresolvedLookupExpr 0xa82b2d0 <col:59, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (CallExpr 0xa82b290 <col:12, col:57> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa82b180 <col:12, col:25> '<dependent type>' lvalue)
                (CXXOperatorCallExpr 0xa82b238 <col:33, col:42> '<dependent type>'
                  (UnresolvedLookupExpr 0xa82b1e8 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
                  (DeclRefExpr 0xa82b1b4 <col:33> 'const _CharT *' lvalue Var 0xa82b0a0 '__data' 'const _CharT *')
                  (DeclRefExpr 0xa82b1cc <col:42> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82aac0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
                (DeclRefExpr 0xa82b25c <col:49> 'const _CharT *' lvalue ParmVar 0xa82aa80 '__s' 'const _CharT *')
                (DeclRefExpr 0xa82b274 <col:54> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ab00 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
              (IntegerLiteral 0xa82b2b8 <col:62> 'int' 0))
            (ReturnStmt 0xa82b370 <line:790:3, col:10>
              (DeclRefExpr 0xa82b354 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82aac0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
            <<<NULL>>>))
        (CXXOperatorCallExpr 0xa82b468 <line:792:11, col:21> '<dependent type>'
          (UnresolvedLookupExpr 0xa82b418 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (UnaryOperator 0xa82b3e8 <col:11, col:16> '<dependent type>' postfix '--'
            (DeclRefExpr 0xa82b3b4 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82aac0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
          (IntegerLiteral 0xa82b400 <col:21> 'int' 0))))
    <<<NULL>>>)
  (ReturnStmt 0xa82b500 <line:794:7, col:14>
    (DeclRefExpr 0xa82b4e4 <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type rfind(_CharT __c, size_type __pos = (DeclRefExpr 0xa7e4578 </usr/include/c++/4.6/bits/basic_string.h:1899:43> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa82c1d8 </usr/include/c++/4.6/bits/basic_string.tcc:801:5, line:812:5>
  (DeclStmt 0xa82bd70 <line:802:7, col:38>
    0xa82bcd0 "size_type __size =
      (CallExpr 0xa82bd50 <col:26, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa82bd18 <col:26, col:32> '<dependent type>' lvalue
          (CXXThisExpr 0xa82bd08 <col:26> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (IfStmt 0xa82c190 <line:803:7, line:810:2>
    <<<NULL>>>
    (DeclRefExpr 0xa82bd80 <line:803:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa82c178 <line:804:2, line:810:2>
      (IfStmt 0xa82bea0 <line:805:4, line:806:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa82be30 <line:805:8, col:19> '<dependent type>'
          (UnresolvedLookupExpr 0xa82bde0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (UnaryOperator 0xa82bdb0 <col:8, col:10> '<dependent type>' prefix '--'
            (DeclRefExpr 0xa82bd98 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa82bdc4 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ba40 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (BinaryOperator 0xa82be88 <line:806:6, col:15> '<dependent type>' '='
          (DeclRefExpr 0xa82be54 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa82be6c <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ba40 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (ForStmt 0xa82c150 <line:807:4, line:809:15>
        (UnaryOperator 0xa82bed8 <line:807:9, col:11> '<dependent type>' prefix '++'
          (DeclRefExpr 0xa82bebc <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa82bfa0 <col:19, col:30> '<dependent type>'
          (UnresolvedLookupExpr 0xa82bf50 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (UnaryOperator 0xa82bf20 <col:19, col:25> '<dependent type>' postfix '--'
            (DeclRefExpr 0xa82beec <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          (IntegerLiteral 0xa82bf38 <col:30> 'int' 0))
        <<<NULL>>>
        (IfStmt 0xa82c130 <line:808:6, line:809:15>
          <<<NULL>>>
          (CallExpr 0xa82c0e0 <line:808:10, col:48> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa82bff0 <col:10, col:23> '<dependent type>' lvalue)
            (ArraySubscriptExpr 0xa82c0b0 <col:26, col:42> '<dependent type>' lvalue
              (CallExpr 0xa82c078 <col:26, col:34> '<dependent type>'
                (UnresolvedMemberExpr 0xa82c038 <col:26> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa82c094 <col:36> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
            (DeclRefExpr 0xa82c0c4 <col:45> '_CharT' lvalue ParmVar 0xa82ba00 '__c' '_CharT'))
          (ReturnStmt 0xa82c120 <line:809:8, col:15>
            (DeclRefExpr 0xa82c104 <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82bcd0 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          <<<NULL>>>)))
    <<<NULL>>>)
  (ReturnStmt 0xa82c1c8 <line:811:7, col:14>
    (DeclRefExpr 0xa82c1ac <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find_first_of(const _CharT *__s, size_type __pos, size_type __n) const (CompoundStmt 0xa82cdf0 </usr/include/c++/4.6/bits/basic_string.tcc:818:5, line:827:5>
  (NullStmt 0xa82ca10 <line:819:46>)
  (ForStmt 0xa82cda0 <line:820:7, line:825:2>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa82cb30 <line:820:14, col:40> '<dependent type>' '&&'
      (DeclRefExpr 0xa82ca1c <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82c780 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
      (CXXOperatorCallExpr 0xa82cb08 <col:21, col:40> '<dependent type>'
        (UnresolvedLookupExpr 0xa82cab8 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
        (DeclRefExpr 0xa82ca34 <col:21> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82c740 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
        (CallExpr 0xa82ca98 <col:29, col:40> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa82ca60 <col:29, col:35> '<dependent type>' lvalue
            (CXXThisExpr 0xa82ca50 <col:29> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))))
    (UnaryOperator 0xa82cb60 <col:43, col:45> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa82cb48 <col:45> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82c740 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
    (CompoundStmt 0xa82cd88 <line:821:2, line:825:2>
      (DeclStmt 0xa82cd18 <line:822:4, col:69>
        0xa82cb90 "const _CharT *__p =
          (CallExpr 0xa82ccf0 <col:24, col:68> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa82cbe8 <col:24, col:37> '<dependent type>' lvalue)
            (DeclRefExpr 0xa82cc1c <col:42> 'const _CharT *' lvalue ParmVar 0xa82c700 '__s' 'const _CharT *')
            (DeclRefExpr 0xa82cc34 <col:47> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82c780 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
            (ArraySubscriptExpr 0xa82ccd8 <col:52, col:67> '<dependent type>' lvalue
              (CallExpr 0xa82cca0 <col:52, col:60> '<dependent type>'
                (UnresolvedMemberExpr 0xa82cc60 <col:52> '<bound member function type>' lvalue))
              (DeclRefExpr 0xa82ccbc <col:62> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82c740 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')))")
      (IfStmt 0xa82cd68 <line:823:4, line:824:13>
        <<<NULL>>>
        (DeclRefExpr 0xa82cd28 <line:823:8> 'const _CharT *' lvalue Var 0xa82cb90 '__p' 'const _CharT *')
        (ReturnStmt 0xa82cd58 <line:824:6, col:13>
          (DeclRefExpr 0xa82cd40 <col:13> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82c740 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)))
  (ReturnStmt 0xa82cde0 <line:826:7, col:14>
    (DeclRefExpr 0xa82cdc4 <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find_last_of(const _CharT *__s, size_type __pos, size_type __n) const (CompoundStmt 0xa82dbb0 </usr/include/c++/4.6/bits/basic_string.tcc:833:5, line:848:5>
  (NullStmt 0xa82d660 <line:834:46>)
  (DeclStmt 0xa82d720 <line:835:7, col:38>
    0xa82d680 "size_type __size =
      (CallExpr 0xa82d700 <col:26, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa82d6c8 <col:26, col:32> '<dependent type>' lvalue
          (CXXThisExpr 0xa82d6b8 <col:26> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (IfStmt 0xa82db68 <line:836:7, line:846:2>
    <<<NULL>>>
    (BinaryOperator 0xa82d760 <line:836:11, col:21> '<dependent type>' '&&'
      (DeclRefExpr 0xa82d730 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82d680 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa82d748 <col:21> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82d3d0 '__n' 'size_type':'typename _CharT_alloc_type::size_type'))
    (CompoundStmt 0xa82db50 <line:837:2, line:846:2>
      (IfStmt 0xa82d880 <line:838:4, line:839:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa82d810 <line:838:8, col:19> '<dependent type>'
          (UnresolvedLookupExpr 0xa82d7c0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (UnaryOperator 0xa82d790 <col:8, col:10> '<dependent type>' prefix '--'
            (DeclRefExpr 0xa82d778 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82d680 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa82d7a4 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82d390 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (BinaryOperator 0xa82d868 <line:839:6, col:15> '<dependent type>' '='
          (DeclRefExpr 0xa82d834 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82d680 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa82d84c <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82d390 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (DoStmt 0xa82db38 <line:840:4, line:845:24>
        (CompoundStmt 0xa82da40 <line:841:6, line:844:6>
          (IfStmt 0xa82da20 <line:842:8, line:843:10>
            <<<NULL>>>
            (CallExpr 0xa82d9d0 <line:842:12, col:57> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa82d8c8 <col:12, col:25> '<dependent type>' lvalue)
              (DeclRefExpr 0xa82d8fc <col:30> 'const _CharT *' lvalue ParmVar 0xa82d350 '__s' 'const _CharT *')
              (DeclRefExpr 0xa82d914 <col:35> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82d3d0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
              (ArraySubscriptExpr 0xa82d9b8 <col:40, col:56> '<dependent type>' lvalue
                (CallExpr 0xa82d980 <col:40, col:48> '<dependent type>'
                  (UnresolvedMemberExpr 0xa82d940 <col:40> '<bound member function type>' lvalue))
                (DeclRefExpr 0xa82d99c <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82d680 '__size' 'size_type':'typename _CharT_alloc_type::size_type')))
            (ReturnStmt 0xa82da10 <line:843:3, col:10>
              (DeclRefExpr 0xa82d9f8 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82d680 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
            <<<NULL>>>))
        (CXXOperatorCallExpr 0xa82db10 <line:845:11, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa82dab8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
          (UnaryOperator 0xa82da88 <col:11, col:17> '<dependent type>' postfix '--'
            (DeclRefExpr 0xa82da54 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82d680 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          (IntegerLiteral 0xa82daa0 <col:23> 'int' 0))))
    <<<NULL>>>)
  (ReturnStmt 0xa82dba0 <line:847:7, col:14>
    (DeclRefExpr 0xa82db84 <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const (CompoundStmt 0xa82e718 </usr/include/c++/4.6/bits/basic_string.tcc:854:5, line:860:5>
  (NullStmt 0xa82e3e0 <line:855:46>)
  (ForStmt 0xa82e6c8 <line:856:7, line:858:11>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa82e4c0 <line:856:14, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa82e470 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
      (DeclRefExpr 0xa82e3ec <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82e110 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa82e450 <col:22, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa82e418 <col:22, col:28> '<dependent type>' lvalue
          (CXXThisExpr 0xa82e408 <col:22> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))
    (UnaryOperator 0xa82e500 <col:36, col:38> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa82e4e4 <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82e110 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
    (IfStmt 0xa82e6a8 <line:857:2, line:858:11>
      <<<NULL>>>
      (UnaryOperator 0xa82e668 <line:857:6, col:51> '<dependent type>' prefix '!'
        (CallExpr 0xa82e640 <col:7, col:51> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa82e538 <col:7, col:20> '<dependent type>' lvalue)
          (DeclRefExpr 0xa82e56c <col:25> 'const _CharT *' lvalue ParmVar 0xa82e0d0 '__s' 'const _CharT *')
          (DeclRefExpr 0xa82e584 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82e150 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
          (ArraySubscriptExpr 0xa82e628 <col:35, col:50> '<dependent type>' lvalue
            (CallExpr 0xa82e5f0 <col:35, col:43> '<dependent type>'
              (UnresolvedMemberExpr 0xa82e5b0 <col:35> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa82e60c <col:45> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82e110 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))))
      (ReturnStmt 0xa82e698 <line:858:4, col:11>
        (DeclRefExpr 0xa82e67c <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82e110 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
      <<<NULL>>>))
  (ReturnStmt 0xa82e708 <line:859:7, col:14>
    (DeclRefExpr 0xa82e6ec <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find_first_not_of(_CharT __c, size_type __pos = (IntegerLiteral 0xa7e4650 </usr/include/c++/4.6/bits/basic_string.h:2080:55> 'int' 0)
) const (CompoundStmt 0xa82f1e8 </usr/include/c++/4.6/bits/basic_string.tcc:866:5, line:871:5>
  (ForStmt 0xa82f198 <line:867:7, line:869:11>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa82efa8 <line:867:14, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa82ef58 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
      (DeclRefExpr 0xa82eed8 <col:14> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ec50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (CallExpr 0xa82ef38 <col:22, col:33> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa82ef00 <col:22, col:28> '<dependent type>' lvalue
          (CXXThisExpr 0xa82eef0 <col:22> 'const basic_string<_CharT, _Traits, _Alloc> *' this))))
    (UnaryOperator 0xa82efe8 <col:36, col:38> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa82efcc <col:38> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ec50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
    (IfStmt 0xa82f178 <line:868:2, line:869:11>
      <<<NULL>>>
      (UnaryOperator 0xa82f138 <line:868:6, col:44> '<dependent type>' prefix '!'
        (CallExpr 0xa82f110 <col:7, col:44> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa82f020 <col:7, col:20> '<dependent type>' lvalue)
          (ArraySubscriptExpr 0xa82f0e0 <col:23, col:38> '<dependent type>' lvalue
            (CallExpr 0xa82f0a8 <col:23, col:31> '<dependent type>'
              (UnresolvedMemberExpr 0xa82f068 <col:23> '<bound member function type>' lvalue))
            (DeclRefExpr 0xa82f0c4 <col:33> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ec50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa82f0f4 <col:41> '_CharT' lvalue ParmVar 0xa82ec10 '__c' '_CharT')))
      (ReturnStmt 0xa82f168 <line:869:4, col:11>
        (DeclRefExpr 0xa82f14c <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82ec50 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
      <<<NULL>>>))
  (ReturnStmt 0xa82f1d8 <line:870:7, col:14>
    (DeclRefExpr 0xa82f1bc <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const (CompoundStmt 0xa82fea8 </usr/include/c++/4.6/bits/basic_string.tcc:877:5, line:892:5>
  (NullStmt 0xa82fa10 <line:878:46>)
  (DeclStmt 0xa82fad0 <line:879:7, col:38>
    0xa82fa30 "size_type __size =
      (CallExpr 0xa82fab0 <col:26, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa82fa78 <col:26, col:32> '<dependent type>' lvalue
          (CXXThisExpr 0xa82fa68 <col:26> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (IfStmt 0xa82fe60 <line:880:7, line:890:2>
    <<<NULL>>>
    (DeclRefExpr 0xa82fae0 <line:880:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82fa30 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa82fe48 <line:881:2, line:890:2>
      (IfStmt 0xa82fc00 <line:882:4, line:883:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa82fb90 <line:882:8, col:19> '<dependent type>'
          (UnresolvedLookupExpr 0xa82fb40 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (UnaryOperator 0xa82fb10 <col:8, col:10> '<dependent type>' prefix '--'
            (DeclRefExpr 0xa82faf8 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82fa30 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa82fb24 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82f740 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (BinaryOperator 0xa82fbe8 <line:883:6, col:15> '<dependent type>' '='
          (DeclRefExpr 0xa82fbb4 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82fa30 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa82fbcc <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82f740 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (DoStmt 0xa82fe30 <line:884:4, line:889:19>
        (CompoundStmt 0xa82fdd0 <line:885:6, line:888:6>
          (IfStmt 0xa82fdb0 <line:886:8, line:887:10>
            <<<NULL>>>
            (UnaryOperator 0xa82fd70 <line:886:12, col:58> '<dependent type>' prefix '!'
              (CallExpr 0xa82fd48 <col:13, col:58> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa82fc40 <col:13, col:26> '<dependent type>' lvalue)
                (DeclRefExpr 0xa82fc74 <col:31> 'const _CharT *' lvalue ParmVar 0xa82f700 '__s' 'const _CharT *')
                (DeclRefExpr 0xa82fc8c <col:36> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa82f780 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
                (ArraySubscriptExpr 0xa82fd30 <col:41, col:57> '<dependent type>' lvalue
                  (CallExpr 0xa82fcf8 <col:41, col:49> '<dependent type>'
                    (UnresolvedMemberExpr 0xa82fcb8 <col:41> '<bound member function type>' lvalue))
                  (DeclRefExpr 0xa82fd14 <col:51> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82fa30 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))))
            (ReturnStmt 0xa82fda0 <line:887:3, col:10>
              (DeclRefExpr 0xa82fd84 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82fa30 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
            <<<NULL>>>))
        (UnaryOperator 0xa82fe18 <line:889:11, col:17> '<dependent type>' postfix '--'
          (DeclRefExpr 0xa82fde4 <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa82fa30 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))))
    <<<NULL>>>)
  (ReturnStmt 0xa82fe98 <line:891:7, col:14>
    (DeclRefExpr 0xa82fe7c <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    typename basic_string<_CharT, _Traits, _Alloc>::size_type find_last_not_of(_CharT __c, size_type __pos = (DeclRefExpr 0xa7e4698 </usr/include/c++/4.6/bits/basic_string.h:2139:54> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa7c50f0 'npos' 'const size_type':'const typename _CharT_alloc_type::size_type')
) const (CompoundStmt 0xa830ad0 </usr/include/c++/4.6/bits/basic_string.tcc:898:5, line:912:5>
  (DeclStmt 0xa830710 <line:899:7, col:38>
    0xa830670 "size_type __size =
      (CallExpr 0xa8306f0 <col:26, col:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8306b8 <col:26, col:32> '<dependent type>' lvalue
          (CXXThisExpr 0xa8306a8 <col:26> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (IfStmt 0xa830a88 <line:900:7, line:910:2>
    <<<NULL>>>
    (DeclRefExpr 0xa830720 <line:900:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa830670 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
    (CompoundStmt 0xa830a70 <line:901:2, line:910:2>
      (IfStmt 0xa830840 <line:902:4, line:903:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8307d0 <line:902:8, col:19> '<dependent type>'
          (UnresolvedLookupExpr 0xa830780 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
          (UnaryOperator 0xa830750 <col:8, col:10> '<dependent type>' prefix '--'
            (DeclRefExpr 0xa830738 <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa830670 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
          (DeclRefExpr 0xa830764 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8303e0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (BinaryOperator 0xa830828 <line:903:6, col:15> '<dependent type>' '='
          (DeclRefExpr 0xa8307f4 <col:6> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa830670 '__size' 'size_type':'typename _CharT_alloc_type::size_type')
          (DeclRefExpr 0xa83080c <col:15> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8303e0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        <<<NULL>>>)
      (DoStmt 0xa830a58 <line:904:4, line:909:19>
        (CompoundStmt 0xa8309f8 <line:905:6, line:908:6>
          (IfStmt 0xa8309d8 <line:906:8, line:907:10>
            <<<NULL>>>
            (UnaryOperator 0xa830998 <line:906:12, col:51> '<dependent type>' prefix '!'
              (CallExpr 0xa830970 <col:13, col:51> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa830880 <col:13, col:26> '<dependent type>' lvalue)
                (ArraySubscriptExpr 0xa830940 <col:29, col:45> '<dependent type>' lvalue
                  (CallExpr 0xa830908 <col:29, col:37> '<dependent type>'
                    (UnresolvedMemberExpr 0xa8308c8 <col:29> '<bound member function type>' lvalue))
                  (DeclRefExpr 0xa830924 <col:39> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa830670 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
                (DeclRefExpr 0xa830954 <col:48> '_CharT' lvalue ParmVar 0xa8303a0 '__c' '_CharT')))
            (ReturnStmt 0xa8309c8 <line:907:3, col:10>
              (DeclRefExpr 0xa8309ac <col:10> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa830670 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))
            <<<NULL>>>))
        (UnaryOperator 0xa830a40 <line:909:11, col:17> '<dependent type>' postfix '--'
          (DeclRefExpr 0xa830a0c <col:11> 'size_type':'typename _CharT_alloc_type::size_type' lvalue Var 0xa830670 '__size' 'size_type':'typename _CharT_alloc_type::size_type'))))
    <<<NULL>>>)
  (ReturnStmt 0xa830ac0 <line:911:7, col:14>
    (DeclRefExpr 0xa830aa4 <col:14> 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa80a1b0 'npos' 'const typename basic_string<_CharT, _Traits, _Alloc>::size_type':'const typename _CharT_alloc_type::size_type')))


    int compare(size_type __pos, size_type __n, const basic_string<_CharT, _Traits, _Alloc> &__str) const (CompoundStmt 0xa8316d8 </usr/include/c++/4.6/bits/basic_string.tcc:918:5, line:927:5>
  (CallExpr 0xa831070 <line:919:7, col:46> '<dependent type>'
    (MemberExpr 0xa831000 <col:7> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa830ff0 <col:7> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa831020 <col:16> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830e60 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa831038 <col:23> 'const char [22]' lvalue "basic_string::compare"))
  (BinaryOperator 0xa831158 <line:920:7, col:32> '<dependent type>' '='
    (DeclRefExpr 0xa831094 <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830ea0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa831130 <col:13, col:32> '<dependent type>'
      (MemberExpr 0xa8310c0 <col:13> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa8310b0 <col:13> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa8310e0 <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830e60 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa8310f8 <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830ea0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')))
  (DeclStmt 0xa831228 <line:921:7, col:45>
    0xa831180 "const size_type __osize =
      (CallExpr 0xa831208 <col:33, col:44> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8311d0 <col:33, col:39> '<dependent type>' lvalue
          (DeclRefExpr 0xa8311b4 <col:33> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa830ef0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))")
  (DeclStmt 0xa831320 <line:922:7, col:53>
    0xa831240 "const size_type __len =
      (CallExpr 0xa8312f8 <col:31, col:52> '<dependent type>'
        (UnresolvedLookupExpr 0xa831290 <col:31, col:36> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
        (DeclRefExpr 0xa8312c8 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830ea0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa8312e0 <col:45> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa831180 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa831580 <line:923:7, col:77>
    0xa831340 "int __r =
      (CallExpr 0xa831558 <col:17, col:76> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa831398 <col:17, col:30> '<dependent type>' lvalue)
        (CXXOperatorCallExpr 0xa8314a8 <col:38, col:50> '<dependent type>'
          (UnresolvedLookupExpr 0xa831458 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
          (CallExpr 0xa831420 <col:38, col:46> '<dependent type>'
            (UnresolvedMemberExpr 0xa8313e0 <col:38> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa83143c <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830e60 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (CallExpr 0xa831520 <col:57, col:68> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8314e8 <col:57, col:63> '<dependent type>' lvalue
            (DeclRefExpr 0xa8314cc <col:57> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa830ef0 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
        (DeclRefExpr 0xa83153c <col:71> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa831240 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa831680 <line:924:7, line:925:31>
    <<<NULL>>>
    (UnaryOperator 0xa8315c8 <line:924:11, col:12> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa8315b8 <col:12> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa8315a8 <col:12> 'int' <LValueToRValue>
          (DeclRefExpr 0xa831590 <col:12> 'int' lvalue Var 0xa831340 '__r' 'int'))))
    (BinaryOperator 0xa831668 <line:925:2, col:31> '<dependent type>' '='
      (DeclRefExpr 0xa8315dc <col:2> 'int' lvalue Var 0xa831340 '__r' 'int')
      (CallExpr 0xa831640 <col:8, col:31> '<dependent type>'
        (DeclRefExpr 0xa8315f4 <col:8> 'int (size_type, size_type)' lvalue CXXMethod 0xa7c6b60 '_S_compare' 'int (size_type, size_type)')
        (DeclRefExpr 0xa83160c <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa830ea0 '__n' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa831624 <col:24> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa831180 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa8316c8 <line:926:7, col:14>
    (ImplicitCastExpr 0xa8316b8 <col:14> 'int' <LValueToRValue>
      (DeclRefExpr 0xa83169c <col:14> 'int' lvalue Var 0xa831340 '__r' 'int'))))


    int compare(size_type __pos1, size_type __n1, const basic_string<_CharT, _Traits, _Alloc> &__str, size_type __pos2, size_type __n2) const (CompoundStmt 0xa8324d8 </usr/include/c++/4.6/bits/basic_string.tcc:934:5, line:945:5>
  (CallExpr 0xa831d28 <line:935:7, col:47> '<dependent type>'
    (MemberExpr 0xa831cb8 <col:7> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa831ca8 <col:7> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa831cd8 <col:16> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831a80 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa831cf0 <col:24> 'const char [22]' lvalue "basic_string::compare"))
  (CallExpr 0xa831de8 <line:936:7, col:53> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa831d68 <col:7, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa831d4c <col:7> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa831b10 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
    (DeclRefExpr 0xa831d9c <col:22> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b50 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa831db4 <col:30> 'const char [22]' lvalue "basic_string::compare"))
  (BinaryOperator 0xa831eb0 <line:937:7, col:35> '<dependent type>' '='
    (DeclRefExpr 0xa831e0c <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831ac0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa831e88 <col:14, col:35> '<dependent type>'
      (MemberExpr 0xa831e38 <col:14> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa831e28 <col:14> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa831e58 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831a80 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa831e70 <col:31> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831ac0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')))
  (BinaryOperator 0xa831f88 <line:938:7, col:41> '<dependent type>' '='
    (DeclRefExpr 0xa831ec8 <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b90 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa831f60 <col:14, col:41> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa831ef8 <col:14, col:20> '<dependent type>' lvalue
        (DeclRefExpr 0xa831ee0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa831b10 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &'))
      (DeclRefExpr 0xa831f2c <col:29> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b50 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa831f44 <col:37> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b90 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))
  (DeclStmt 0xa832090 <line:939:7, col:51>
    0xa831fb0 "const size_type __len =
      (CallExpr 0xa832068 <col:31, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa832000 <col:31, col:36> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
        (DeclRefExpr 0xa832038 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831ac0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa832050 <col:46> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b90 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa832380 <line:940:7, line:941:39>
    0xa8320b0 "int __r =
      (CallExpr 0xa832358 <line:940:17, line:941:38> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa832108 <line:940:17, col:30> '<dependent type>' lvalue)
        (CXXOperatorCallExpr 0xa832218 <col:38, col:50> '<dependent type>'
          (UnresolvedLookupExpr 0xa8321c8 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
          (CallExpr 0xa832190 <col:38, col:46> '<dependent type>'
            (UnresolvedMemberExpr 0xa832150 <col:38> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa8321ac <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831a80 '__pos1' 'size_type':'typename _CharT_alloc_type::size_type'))
        (CXXOperatorCallExpr 0xa832318 <line:941:10, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa8322c8 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
          (CallExpr 0xa832290 <col:10, col:21> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa832258 <col:10, col:16> '<dependent type>' lvalue
              (DeclRefExpr 0xa83223c <col:10> 'const basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa831b10 '__str' 'const basic_string<_CharT, _Traits, _Alloc> &')))
          (DeclRefExpr 0xa8322ac <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b50 '__pos2' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa83233c <col:33> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa831fb0 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa832480 <line:942:7, line:943:29>
    <<<NULL>>>
    (UnaryOperator 0xa8323c8 <line:942:11, col:12> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa8323b8 <col:12> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa8323a8 <col:12> 'int' <LValueToRValue>
          (DeclRefExpr 0xa832390 <col:12> 'int' lvalue Var 0xa8320b0 '__r' 'int'))))
    (BinaryOperator 0xa832468 <line:943:2, col:29> '<dependent type>' '='
      (DeclRefExpr 0xa8323dc <col:2> 'int' lvalue Var 0xa8320b0 '__r' 'int')
      (CallExpr 0xa832440 <col:8, col:29> '<dependent type>'
        (DeclRefExpr 0xa8323f4 <col:8> 'int (size_type, size_type)' lvalue CXXMethod 0xa7c6b60 '_S_compare' 'int (size_type, size_type)')
        (DeclRefExpr 0xa83240c <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831ac0 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa832424 <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa831b90 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa8324c8 <line:944:7, col:14>
    (ImplicitCastExpr 0xa8324b8 <col:14> 'int' <LValueToRValue>
      (DeclRefExpr 0xa83249c <col:14> 'int' lvalue Var 0xa8320b0 '__r' 'int'))))


    int compare(const _CharT *__s) const (CompoundStmt 0xa832f30 </usr/include/c++/4.6/bits/basic_string.tcc:951:5, line:960:5>
  (NullStmt 0xa8329c8 <line:952:37>)
  (DeclStmt 0xa832a80 <line:953:7, col:44>
    0xa8329e0 "const size_type __size =
      (CallExpr 0xa832a60 <col:32, col:43> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa832a28 <col:32, col:38> '<dependent type>' lvalue
          (CXXThisExpr 0xa832a18 <col:32> 'const basic_string<_CharT, _Traits, _Alloc> *' this)))")
  (DeclStmt 0xa832b68 <line:954:7, col:57>
    0xa832aa0 "const size_type __osize =
      (CallExpr 0xa832b48 <col:33, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa832af8 <col:33, col:46> '<dependent type>' lvalue)
        (DeclRefExpr 0xa832b2c <col:53> 'const _CharT *' lvalue ParmVar 0xa8328b0 '__s' 'const _CharT *'))")
  (DeclStmt 0xa832c60 <line:955:7, col:56>
    0xa832b80 "const size_type __len =
      (CallExpr 0xa832c38 <col:31, col:55> '<dependent type>'
        (UnresolvedLookupExpr 0xa832bd0 <col:31, col:36> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
        (DeclRefExpr 0xa832c08 <col:40> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8329e0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa832c20 <col:48> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa832aa0 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa832dd8 <line:956:7, col:60>
    0xa832c80 "int __r =
      (CallExpr 0xa832db0 <col:17, col:59> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa832cd8 <col:17, col:30> '<dependent type>' lvalue)
        (CallExpr 0xa832d60 <col:38, col:46> '<dependent type>'
          (UnresolvedMemberExpr 0xa832d20 <col:38> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa832d7c <col:49> 'const _CharT *' lvalue ParmVar 0xa8328b0 '__s' 'const _CharT *')
        (DeclRefExpr 0xa832d94 <col:54> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa832b80 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa832ed8 <line:957:7, line:958:34>
    <<<NULL>>>
    (UnaryOperator 0xa832e20 <line:957:11, col:12> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa832e10 <col:12> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa832e00 <col:12> 'int' <LValueToRValue>
          (DeclRefExpr 0xa832de8 <col:12> 'int' lvalue Var 0xa832c80 '__r' 'int'))))
    (BinaryOperator 0xa832ec0 <line:958:2, col:34> '<dependent type>' '='
      (DeclRefExpr 0xa832e34 <col:2> 'int' lvalue Var 0xa832c80 '__r' 'int')
      (CallExpr 0xa832e98 <col:8, col:34> '<dependent type>'
        (DeclRefExpr 0xa832e4c <col:8> 'int (size_type, size_type)' lvalue CXXMethod 0xa7c6b60 '_S_compare' 'int (size_type, size_type)')
        (DeclRefExpr 0xa832e64 <col:19> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa8329e0 '__size' 'const size_type':'const typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa832e7c <col:27> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa832aa0 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa832f20 <line:959:7, col:14>
    (ImplicitCastExpr 0xa832f10 <col:14> 'int' <LValueToRValue>
      (DeclRefExpr 0xa832ef4 <col:14> 'int' lvalue Var 0xa832c80 '__r' 'int'))))


    int compare(size_type __pos, size_type __n1, const _CharT *__s) const (CompoundStmt 0xa833b50 </usr/include/c++/4.6/bits/basic_string.tcc:966:5, line:976:5>
  (NullStmt 0xa8334b0 <line:967:37>)
  (CallExpr 0xa833540 <line:968:7, col:46> '<dependent type>'
    (MemberExpr 0xa8334d0 <col:7> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa8334c0 <col:7> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa8334f0 <col:16> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8332d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa833508 <col:23> 'const char [22]' lvalue "basic_string::compare"))
  (BinaryOperator 0xa833608 <line:969:7, col:34> '<dependent type>' '='
    (DeclRefExpr 0xa833564 <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833310 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa8335e0 <col:14, col:34> '<dependent type>'
      (MemberExpr 0xa833590 <col:14> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa833580 <col:14> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa8335b0 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8332d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa8335c8 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833310 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')))
  (DeclStmt 0xa8336f8 <line:970:7, col:57>
    0xa833630 "const size_type __osize =
      (CallExpr 0xa8336d8 <col:33, col:56> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa833688 <col:33, col:46> '<dependent type>' lvalue)
        (DeclRefExpr 0xa8336bc <col:53> 'const _CharT *' lvalue ParmVar 0xa833380 '__s' 'const _CharT *'))")
  (DeclStmt 0xa8337f0 <line:971:7, col:54>
    0xa833710 "const size_type __len =
      (CallExpr 0xa8337c8 <col:31, col:53> '<dependent type>'
        (UnresolvedLookupExpr 0xa833760 <col:31, col:36> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
        (DeclRefExpr 0xa833798 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833310 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa8337b0 <col:46> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa833630 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa8339f8 <line:972:7, col:68>
    0xa833810 "int __r =
      (CallExpr 0xa8339d0 <col:17, col:67> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa833868 <col:17, col:30> '<dependent type>' lvalue)
        (CXXOperatorCallExpr 0xa833978 <col:38, col:50> '<dependent type>'
          (UnresolvedLookupExpr 0xa833928 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
          (CallExpr 0xa8338f0 <col:38, col:46> '<dependent type>'
            (UnresolvedMemberExpr 0xa8338b0 <col:38> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa83390c <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa8332d0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa83399c <col:57> 'const _CharT *' lvalue ParmVar 0xa833380 '__s' 'const _CharT *')
        (DeclRefExpr 0xa8339b4 <col:62> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa833710 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa833af8 <line:973:7, line:974:32>
    <<<NULL>>>
    (UnaryOperator 0xa833a40 <line:973:11, col:12> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa833a30 <col:12> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa833a20 <col:12> 'int' <LValueToRValue>
          (DeclRefExpr 0xa833a08 <col:12> 'int' lvalue Var 0xa833810 '__r' 'int'))))
    (BinaryOperator 0xa833ae0 <line:974:2, col:32> '<dependent type>' '='
      (DeclRefExpr 0xa833a54 <col:2> 'int' lvalue Var 0xa833810 '__r' 'int')
      (CallExpr 0xa833ab8 <col:8, col:32> '<dependent type>'
        (DeclRefExpr 0xa833a6c <col:8> 'int (size_type, size_type)' lvalue CXXMethod 0xa7c6b60 '_S_compare' 'int (size_type, size_type)')
        (DeclRefExpr 0xa833a84 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833310 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa833a9c <col:25> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa833630 '__osize' 'const size_type':'const typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa833b40 <line:975:7, col:14>
    (ImplicitCastExpr 0xa833b30 <col:14> 'int' <LValueToRValue>
      (DeclRefExpr 0xa833b14 <col:14> 'int' lvalue Var 0xa833810 '__r' 'int'))))


    int compare(size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const (CompoundStmt 0xa8346d0 </usr/include/c++/4.6/bits/basic_string.tcc:983:5, line:992:5>
  (NullStmt 0xa834110 <line:984:47>)
  (CallExpr 0xa8341a0 <line:985:7, col:46> '<dependent type>'
    (MemberExpr 0xa834130 <col:7> '<bound member function type>' ->_M_check 0xa7c5710
      (CXXThisExpr 0xa834120 <col:7> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
    (DeclRefExpr 0xa834150 <col:16> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833ef0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
    (StringLiteral 0xa834168 <col:23> 'const char [22]' lvalue "basic_string::compare"))
  (BinaryOperator 0xa834268 <line:986:7, col:34> '<dependent type>' '='
    (DeclRefExpr 0xa8341c4 <col:7> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833f30 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
    (CallExpr 0xa834240 <col:14, col:34> '<dependent type>'
      (MemberExpr 0xa8341f0 <col:14> '<bound member function type>' ->_M_limit 0xa7c5a30
        (CXXThisExpr 0xa8341e0 <col:14> 'const basic_string<_CharT, _Traits, _Alloc> *' this))
      (DeclRefExpr 0xa834210 <col:23> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833ef0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type')
      (DeclRefExpr 0xa834228 <col:30> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833f30 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')))
  (DeclStmt 0xa834370 <line:987:7, col:51>
    0xa834290 "const size_type __len =
      (CallExpr 0xa834348 <col:31, col:50> '<dependent type>'
        (UnresolvedLookupExpr 0xa8342e0 <col:31, col:36> '<overloaded function type>' lvalue (no ADL) = '1' 0xa6435c0 0xa644330)
        (DeclRefExpr 0xa834318 <col:40> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833f30 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa834330 <col:46> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833fe0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type'))")
  (DeclStmt 0xa834578 <line:988:7, col:68>
    0xa834390 "int __r =
      (CallExpr 0xa834550 <col:17, col:67> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8343e8 <col:17, col:30> '<dependent type>' lvalue)
        (CXXOperatorCallExpr 0xa8344f8 <col:38, col:50> '<dependent type>'
          (UnresolvedLookupExpr 0xa8344a8 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa827170 0xa826560 0xa6271f0 0xa6bc910 0xa6beaa0 0xa7f9b50 0xa7fd550 0xa7fae40)
          (CallExpr 0xa834470 <col:38, col:46> '<dependent type>'
            (UnresolvedMemberExpr 0xa834430 <col:38> '<bound member function type>' lvalue))
          (DeclRefExpr 0xa83448c <col:50> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833ef0 '__pos' 'size_type':'typename _CharT_alloc_type::size_type'))
        (DeclRefExpr 0xa83451c <col:57> 'const _CharT *' lvalue ParmVar 0xa833fa0 '__s' 'const _CharT *')
        (DeclRefExpr 0xa834534 <col:62> 'const size_type':'const typename _CharT_alloc_type::size_type' lvalue Var 0xa834290 '__len' 'const size_type':'const typename _CharT_alloc_type::size_type'))")
  (IfStmt 0xa834678 <line:989:7, line:990:29>
    <<<NULL>>>
    (UnaryOperator 0xa8345c0 <line:989:11, col:12> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa8345b0 <col:12> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa8345a0 <col:12> 'int' <LValueToRValue>
          (DeclRefExpr 0xa834588 <col:12> 'int' lvalue Var 0xa834390 '__r' 'int'))))
    (BinaryOperator 0xa834660 <line:990:2, col:29> '<dependent type>' '='
      (DeclRefExpr 0xa8345d4 <col:2> 'int' lvalue Var 0xa834390 '__r' 'int')
      (CallExpr 0xa834638 <col:8, col:29> '<dependent type>'
        (DeclRefExpr 0xa8345ec <col:8> 'int (size_type, size_type)' lvalue CXXMethod 0xa7c6b60 '_S_compare' 'int (size_type, size_type)')
        (DeclRefExpr 0xa834604 <col:19> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833f30 '__n1' 'size_type':'typename _CharT_alloc_type::size_type')
        (DeclRefExpr 0xa83461c <col:25> 'size_type':'typename _CharT_alloc_type::size_type' lvalue ParmVar 0xa833fe0 '__n2' 'size_type':'typename _CharT_alloc_type::size_type')))
    <<<NULL>>>)
  (ReturnStmt 0xa8346c0 <line:991:7, col:14>
    (ImplicitCastExpr 0xa8346b0 <col:14> 'int' <LValueToRValue>
      (DeclRefExpr 0xa834694 <col:14> 'int' lvalue Var 0xa834390 '__r' 'int'))))


    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> basic_istream<wchar_t, std::char_traits<wchar_t> > &operator>>(basic_istream<wchar_t, std::char_traits<wchar_t> > &__in, basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > &__str)template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> basic_istream<char> &operator>>(basic_istream<char> &__is, basic_string<char> &__str)template <typename _CharT, typename _Traits, typename _Alloc> basic_istream<_CharT, _Traits> &operator>>(basic_istream<_CharT, _Traits> &__in, basic_string<_CharT, _Traits, _Alloc> &__str) (CompoundStmt 0xa836db8 </usr/include/c++/4.6/bits/basic_string.tcc:999:5, line:1065:5>
  (DeclStmt 0xa834e60 <line:1000:7, col:61>
    0xa834e30 "typedef basic_istream<_CharT, _Traits> __istream_type")
  (DeclStmt 0xa835000 <line:1001:7, col:66>
    0xa834fd0 "typedef basic_string<_CharT, _Traits, _Alloc> __string_type")
  (DeclStmt 0xa8350f0 <line:1002:7, col:67>
    0xa8350c0 "typedef typename __istream_type::ios_base __ios_base")
  (DeclStmt 0xa8351c0 <line:1003:7, col:60>
    0xa835190 "typedef typename __istream_type::int_type __int_type")
  (DeclStmt 0xa835280 <line:1004:7, col:61>
    0xa835250 "typedef typename __string_type::size_type __size_type")
  (DeclStmt 0xa835370 <line:1005:7, col:44>
    0xa835340 "typedef ctype<_CharT> __ctype_type")
  (DeclStmt 0xa835460 <line:1006:7, col:69>
    0xa835430 "typedef typename __ctype_type::ctype_base __ctype_base")
  (DeclStmt 0xa8354e0 <line:1008:7, col:34>
    0xa835490 "__size_type __extracted =
      (IntegerLiteral 0xa8354c8 <col:33> 'int' 0)")
  (DeclStmt 0xa835620 <line:1009:7, col:63>
    0xa8355a0 "typename __ios_base::iostate __err =
      (DependentScopeDeclRefExpr 0xa8355f8 <col:44, col:56> '<dependent type>' lvalue)")
  (DeclStmt 0xa835730 <line:1010:7, col:58>
    0xa8356b0 "typename __istream_type::sentry __cerb =
      (ParenListExpr 0xa835710 <col:45, col:57> 'typename __istream_type::sentry'
        (DeclRefExpr 0xa8356e4 <col:46> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &')
        (CXXBoolLiteralExpr 0xa835700 <col:52> '_Bool' false))")
  (IfStmt 0xa836be0 <line:1011:7, line:1058:2>
    <<<NULL>>>
    (DeclRefExpr 0xa835740 <line:1011:11> 'typename __istream_type::sentry' lvalue Var 0xa8356b0 '__cerb' 'typename __istream_type::sentry')
    (CompoundStmt 0xa836bc0 <line:1012:2, line:1058:2>
      (IfStmt 0xa836990 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/basic_string.tcc:1045:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa835758 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
        (CompoundStmt 0xa836950 </usr/include/c++/4.6/bits/basic_string.tcc:1014:6, line:1045:6>
          (CallExpr 0xa8357b8 <line:1016:8, col:20> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa835780 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa835768 <col:8> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa834bc0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &')))
          (DeclStmt 0xa835868 <line:1017:8, col:25>
            0xa835830 "_CharT __buf[128]")
          (DeclStmt 0xa8358d0 <line:1018:8, col:29>
            0xa835880 "__size_type __len =
              (IntegerLiteral 0xa8358b8 <col:28> 'int' 0)")
          (DeclStmt 0xa835998 <line:1019:8, col:43>
            0xa8358f0 "const streamsize __w =
              (CallExpr 0xa835978 <col:31, col:42> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa835940 <col:31, col:36> '<dependent type>' lvalue
                  (DeclRefExpr 0xa835924 <col:31> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &')))")
          (DeclStmt 0xa835b08 <line:1020:8, line:1021:51>
            0xa8359b0 "const __size_type __n =
              (ConditionalOperator 0xa835ae8 <line:1020:32, line:1021:50> '<dependent type>'
                (BinaryOperator 0xa835a28 <line:1020:32, col:38> '_Bool' '>'
                  (ImplicitCastExpr 0xa835a18 <col:32> 'streamsize':'int' <LValueToRValue>
                    (DeclRefExpr 0xa8359e4 <col:32> 'const streamsize':'const int' lvalue Var 0xa8358f0 '__w' 'const streamsize':'const int'))
                  (IntegerLiteral 0xa835a00 <col:38> 'int' 0))
                (CXXStaticCastExpr 0xa835a60 <col:42, col:70> '__size_type':'typename __string_type::size_type' static_cast<__size_type> <Dependent>
                  (DeclRefExpr 0xa835a40 <col:67> 'const streamsize':'const int' lvalue Var 0xa8358f0 '__w' 'const streamsize':'const int'))
                (CallExpr 0xa835ac8 <line:1021:35, col:50> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa835a90 <col:35, col:41> '<dependent type>' lvalue
                    (DeclRefExpr 0xa835a78 <col:35> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa834bc0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &'))))")
          (DeclStmt 0xa835ca8 <line:1022:8, col:73>
            0xa835b70 "const __ctype_type &__ct =
              (CallExpr 0xa835c88 <col:35, col:72> '<dependent type>'
                (UnresolvedLookupExpr 0xa835bb0 <col:35, col:57> '<dependent type>' lvalue (ADL) = '1' 0xa741cc0)
                (CallExpr 0xa835c68 <col:59, col:71> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa835c30 <col:59, col:64> '<dependent type>' lvalue
                    (DeclRefExpr 0xa835c18 <col:59> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &'))))")
          (DeclStmt 0xa835d88 <line:1023:8, col:47>
            0xa835ce0 "const __int_type __eof =
              (CallExpr 0xa835d68 <col:33, col:46> '<dependent type>'
                (DependentScopeDeclRefExpr 0xa835d40 <col:33, col:42> '<dependent type>' lvalue))")
          (DeclStmt 0xa835ea0 <line:1024:8, col:46>
            0xa835da0 "__int_type __c =
              (CallExpr 0xa835e80 <col:25, col:45> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa835e48 <col:25, col:39> '<dependent type>' lvalue
                  (CallExpr 0xa835e28 <col:25, col:36> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa835df0 <col:25, col:30> '<dependent type>' lvalue
                      (DeclRefExpr 0xa835dd4 <col:25> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &')))))")
          (WhileStmt 0xa8366c0 <line:1026:8, line:1039:3>
            <<<NULL>>>
            (BinaryOperator 0xa8361a0 <line:1026:15, line:1029:32> '<dependent type>' '&&'
              (BinaryOperator 0xa836010 <line:1026:15, line:1027:43> '<dependent type>' '&&'
                (CXXOperatorCallExpr 0xa835f30 <line:1026:15, col:29> '<dependent type>'
                  (UnresolvedLookupExpr 0xa835ee0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
                  (DeclRefExpr 0xa835eb0 <col:15> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835490 '__extracted' '__size_type':'typename __string_type::size_type')
                  (DeclRefExpr 0xa835ec8 <col:29> 'const __size_type':'const typename __string_type::size_type' lvalue Var 0xa8359b0 '__n' 'const __size_type':'const typename __string_type::size_type'))
                (UnaryOperator 0xa835ff8 <line:1027:11, col:43> '<dependent type>' prefix '!'
                  (CallExpr 0xa835fd0 <col:12, col:43> '<dependent type>'
                    (DependentScopeDeclRefExpr 0xa835f78 <col:12, col:21> '<dependent type>' lvalue)
                    (DeclRefExpr 0xa835f9c <col:33> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa835da0 '__c' '__int_type':'typename __istream_type::int_type')
                    (DeclRefExpr 0xa835fb4 <col:38> 'const __int_type':'const typename __istream_type::int_type' lvalue Var 0xa835ce0 '__eof' 'const __int_type':'const typename __istream_type::int_type'))))
              (UnaryOperator 0xa836188 <line:1028:11, line:1029:32> '<dependent type>' prefix '!'
                (CallExpr 0xa836160 <line:1028:12, line:1029:32> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa836040 <line:1028:12, col:17> '<dependent type>' lvalue
                    (DeclRefExpr 0xa836028 <col:12> 'const __ctype_type':'const ctype<_CharT>' lvalue Var 0xa835b70 '__ct' 'const __ctype_type &'))
                  (DependentScopeDeclRefExpr 0xa8360b8 <col:20, col:34> '<dependent type>' lvalue)
                  (CallExpr 0xa836140 <line:1029:6, col:31> '<dependent type>'
                    (DependentScopeDeclRefExpr 0xa836100 <col:6, col:15> '<dependent type>' lvalue)
                    (DeclRefExpr 0xa836124 <col:28> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa835da0 '__c' '__int_type':'typename __istream_type::int_type')))))
            (CompoundStmt 0xa8366a0 <line:1030:3, line:1039:3>
              (IfStmt 0xa836448 <line:1031:5, line:1035:7>
                <<<NULL>>>
                (CXXOperatorCallExpr 0xa8362b0 <line:1031:9, col:47> '<dependent type>'
                  (UnresolvedLookupExpr 0xa836250 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                  (DeclRefExpr 0xa8361b8 <col:9> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835880 '__len' '__size_type':'typename __string_type::size_type')
                  (BinaryOperator 0xa836238 <col:18, col:47> 'unsigned int' '/'
                    (UnaryExprOrTypeTraitExpr 0xa836200 <col:18, col:30> 'unsigned int' sizeof 
                      (ParenExpr 0xa8361e8 <col:24, col:30> '_CharT [128]' lvalue
                        (DeclRefExpr 0xa8361d0 <col:25> '_CharT [128]' lvalue Var 0xa835830 '__buf' '_CharT [128]')))
                    (UnaryExprOrTypeTraitExpr 0xa836220 <col:34, col:47> 'unsigned int' sizeof '_CharT')))
                (CompoundStmt 0xa836430 <line:1032:7, line:1035:7>
                  (CallExpr 0xa8363c0 <line:1033:9, col:59> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa8362f0 <col:9, col:15> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8362d4 <col:9> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa834bc0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &'))
                    (DeclRefExpr 0xa836324 <col:22> '_CharT [128]' lvalue Var 0xa835830 '__buf' '_CharT [128]')
                    (BinaryOperator 0xa8363a8 <col:29, col:58> 'unsigned int' '/'
                      (UnaryExprOrTypeTraitExpr 0xa836370 <col:29, col:41> 'unsigned int' sizeof 
                        (ParenExpr 0xa836358 <col:35, col:41> '_CharT [128]' lvalue
                          (DeclRefExpr 0xa83633c <col:36> '_CharT [128]' lvalue Var 0xa835830 '__buf' '_CharT [128]')))
                      (UnaryExprOrTypeTraitExpr 0xa836390 <col:45, col:58> 'unsigned int' sizeof '_CharT')))
                  (BinaryOperator 0xa836418 <line:1034:9, col:17> '<dependent type>' '='
                    (DeclRefExpr 0xa8363e4 <col:9> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835880 '__len' '__size_type':'typename __string_type::size_type')
                    (IntegerLiteral 0xa836400 <col:17> 'int' 0)))
                <<<NULL>>>)
              (BinaryOperator 0xa836560 <line:1036:5, col:47> '<dependent type>' '='
                (ArraySubscriptExpr 0xa8364c8 <col:5, col:18> '<dependent type>' lvalue
                  (DeclRefExpr 0xa836464 <col:5> '_CharT [128]' lvalue Var 0xa835830 '__buf' '_CharT [128]')
                  (UnaryOperator 0xa8364b0 <col:11, col:16> '<dependent type>' postfix '++'
                    (DeclRefExpr 0xa83647c <col:11> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835880 '__len' '__size_type':'typename __string_type::size_type')))
                (CallExpr 0xa836540 <col:22, col:47> '<dependent type>'
                  (DependentScopeDeclRefExpr 0xa836500 <col:22, col:31> '<dependent type>' lvalue)
                  (DeclRefExpr 0xa836524 <col:44> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa835da0 '__c' '__int_type':'typename __istream_type::int_type')))
              (UnaryOperator 0xa836590 <line:1037:5, col:7> '<dependent type>' prefix '++'
                (DeclRefExpr 0xa836578 <col:7> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835490 '__extracted' '__size_type':'typename __string_type::size_type'))
              (BinaryOperator 0xa836688 <line:1038:5, col:32> '<dependent type>' '='
                (DeclRefExpr 0xa8365a4 <col:5> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa835da0 '__c' '__int_type':'typename __istream_type::int_type')
                (CallExpr 0xa836668 <col:11, col:32> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa836630 <col:11, col:25> '<dependent type>' lvalue
                    (CallExpr 0xa836610 <col:11, col:22> '<dependent type>'
                      (CXXDependentScopeMemberExpr 0xa8365d8 <col:11, col:16> '<dependent type>' lvalue
                        (DeclRefExpr 0xa8365bc <col:11> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &'))))))))
          (CallExpr 0xa836758 <line:1040:8, col:33> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8366f0 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa8366d4 <col:8> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa834bc0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &'))
            (DeclRefExpr 0xa836724 <col:21> '_CharT [128]' lvalue Var 0xa835830 '__buf' '_CharT [128]')
            (DeclRefExpr 0xa83673c <col:28> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835880 '__len' '__size_type':'typename __string_type::size_type'))
          (IfStmt 0xa8368a8 <line:1042:8, line:1043:24>
            <<<NULL>>>
            (CallExpr 0xa836800 <line:1042:12, col:43> '<dependent type>'
              (DependentScopeDeclRefExpr 0xa8367a8 <col:12, col:21> '<dependent type>' lvalue)
              (DeclRefExpr 0xa8367cc <col:33> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa835da0 '__c' '__int_type':'typename __istream_type::int_type')
              (DeclRefExpr 0xa8367e4 <col:38> 'const __int_type':'const typename __istream_type::int_type' lvalue Var 0xa835ce0 '__eof' 'const __int_type':'const typename __istream_type::int_type'))
            (CompoundAssignOperator 0xa836888 <line:1043:3, col:24> '<dependent type>' lvalue '|=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
              (DeclRefExpr 0xa836824 <col:3> 'typename __ios_base::iostate' lvalue Var 0xa8355a0 '__err' 'typename __ios_base::iostate')
              (DependentScopeDeclRefExpr 0xa836860 <col:12, col:24> '<dependent type>' lvalue))
            <<<NULL>>>)
          (CallExpr 0xa836930 <line:1044:8, col:20> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8368e0 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa8368c4 <col:8> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &'))
            (IntegerLiteral 0xa836918 <col:19> 'int' 0)))
        <<<NULL>>>)
      (IfStmt 0xa836aa0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/basic_string.tcc:1050:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa8369b0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa836a88 </usr/include/c++/4.6/bits/basic_string.tcc:1047:6, line:1050:6>
          (CallExpr 0xa836a58 <line:1048:8, col:43> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8369d8 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa8369c0 <col:8> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa836a30 <col:25, col:37> '<dependent type>' lvalue))
          (NullStmt 0xa836a78 <line:1049:31>))
        <<<NULL>>>)
      (IfStmt 0xa836ba0 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/basic_string.tcc:1057:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa836ac0 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa836b88 </usr/include/c++/4.6/bits/basic_string.tcc:1052:6, line:1057:6>
          (CallExpr 0xa836b68 <line:1056:8, col:43> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa836ae8 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa836ad0 <col:8> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa836b40 <col:25, col:37> '<dependent type>' lvalue)))
        <<<NULL>>>))
    <<<NULL>>>)
  (IfStmt 0xa836cb0 <line:1060:7, line:1061:23>
    <<<NULL>>>
    (UnaryOperator 0xa836c18 <line:1060:11, col:12> '<dependent type>' prefix '!'
      (DeclRefExpr 0xa836bfc <col:12> '__size_type':'typename __string_type::size_type' lvalue Var 0xa835490 '__extracted' '__size_type':'typename __string_type::size_type'))
    (CompoundAssignOperator 0xa836c90 <line:1061:2, col:23> '<dependent type>' lvalue '|=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
      (DeclRefExpr 0xa836c2c <col:2> 'typename __ios_base::iostate' lvalue Var 0xa8355a0 '__err' 'typename __ios_base::iostate')
      (DependentScopeDeclRefExpr 0xa836c68 <col:11, col:23> '<dependent type>' lvalue))
    <<<NULL>>>)
  (IfStmt 0xa836d70 <line:1062:7, line:1063:21>
    <<<NULL>>>
    (DeclRefExpr 0xa836ccc <line:1062:11> 'typename __ios_base::iostate' lvalue Var 0xa8355a0 '__err' 'typename __ios_base::iostate')
    (CallExpr 0xa836d50 <line:1063:2, col:21> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa836d00 <col:2, col:7> '<dependent type>' lvalue
        (DeclRefExpr 0xa836ce4 <col:2> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &'))
      (DeclRefExpr 0xa836d34 <col:16> 'typename __ios_base::iostate' lvalue Var 0xa8355a0 '__err' 'typename __ios_base::iostate'))
    <<<NULL>>>)
  (ReturnStmt 0xa836da8 <line:1064:7, col:14>
    (DeclRefExpr 0xa836d8c <col:14> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa834a10 '__in' 'basic_istream<_CharT, _Traits> &')))

;
    template <typename _CharT = wchar_t, typename _Traits = std::char_traits<wchar_t>, typename _Alloc = std::allocator<wchar_t>> basic_istream<wchar_t> &getline(basic_istream<wchar_t> &__in, basic_string<wchar_t> &__str, wchar_t __delim)template <typename _CharT = char, typename _Traits = std::char_traits<char>, typename _Alloc = std::allocator<char>> basic_istream<char> &getline(basic_istream<char> &__in, basic_string<char> &__str, char __delim)template <typename _CharT, typename _Traits, typename _Alloc> basic_istream<_CharT, _Traits> &getline(basic_istream<_CharT, _Traits> &__in, basic_string<_CharT, _Traits, _Alloc> &__str, _CharT __delim) (CompoundStmt 0xa838ca0 </usr/include/c++/4.6/bits/basic_string.tcc:1071:5, line:1128:5>
  (DeclStmt 0xa8375c0 <line:1072:7, col:61>
    0xa837590 "typedef basic_istream<_CharT, _Traits> __istream_type")
  (DeclStmt 0xa837760 <line:1073:7, col:66>
    0xa837730 "typedef basic_string<_CharT, _Traits, _Alloc> __string_type")
  (DeclStmt 0xa837820 <line:1074:7, col:67>
    0xa8377f0 "typedef typename __istream_type::ios_base __ios_base")
  (DeclStmt 0xa8378c0 <line:1075:7, col:60>
    0xa837890 "typedef typename __istream_type::int_type __int_type")
  (DeclStmt 0xa837980 <line:1076:7, col:61>
    0xa837950 "typedef typename __string_type::size_type __size_type")
  (DeclStmt 0xa837a00 <line:1078:7, col:34>
    0xa8379b0 "__size_type __extracted =
      (IntegerLiteral 0xa8379e8 <col:33> 'int' 0)")
  (DeclStmt 0xa837ac8 <line:1079:7, col:47>
    0xa837a20 "const __size_type __n =
      (CallExpr 0xa837aa8 <col:31, col:46> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa837a70 <col:31, col:37> '<dependent type>' lvalue
          (DeclRefExpr 0xa837a54 <col:31> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8372c0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &')))")
  (DeclStmt 0xa837be0 <line:1080:7, col:63>
    0xa837b60 "typename __ios_base::iostate __err =
      (DependentScopeDeclRefExpr 0xa837bb8 <col:44, col:56> '<dependent type>' lvalue)")
  (DeclStmt 0xa837cd0 <line:1081:7, col:57>
    0xa837c50 "typename __istream_type::sentry __cerb =
      (ParenListExpr 0xa837cb0 <col:45, col:56> 'typename __istream_type::sentry'
        (DeclRefExpr 0xa837c84 <col:46> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &')
        (CXXBoolLiteralExpr 0xa837ca0 <col:52> '_Bool' true))")
  (IfStmt 0xa838ac8 <line:1082:7, line:1122:2>
    <<<NULL>>>
    (DeclRefExpr 0xa837ce0 <line:1082:11> 'typename __istream_type::sentry' lvalue Var 0xa837c50 '__cerb' 'typename __istream_type::sentry')
    (CompoundStmt 0xa838aa8 <line:1083:2, line:1122:2>
      (IfStmt 0xa838878 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/basic_string.tcc:1109:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa837cf8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
        (CompoundStmt 0xa838850 </usr/include/c++/4.6/bits/basic_string.tcc:1085:6, line:1109:6>
          (CallExpr 0xa837d58 <line:1086:8, col:20> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa837d20 <col:8, col:14> '<dependent type>' lvalue
              (DeclRefExpr 0xa837d08 <col:8> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8372c0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &')))
          (DeclStmt 0xa837e60 <line:1087:8, col:65>
            0xa837da0 "const __int_type __idelim =
              (CallExpr 0xa837e40 <col:36, col:64> '<dependent type>'
                (DependentScopeDeclRefExpr 0xa837e00 <col:36, col:45> '<dependent type>' lvalue)
                (DeclRefExpr 0xa837e24 <col:57> '_CharT' lvalue ParmVar 0xa837300 '__delim' '_CharT'))")
          (DeclStmt 0xa837f20 <line:1088:8, col:47>
            0xa837e80 "const __int_type __eof =
              (CallExpr 0xa837f00 <col:33, col:46> '<dependent type>'
                (DependentScopeDeclRefExpr 0xa837ed8 <col:33, col:42> '<dependent type>' lvalue))")
          (DeclStmt 0xa838040 <line:1089:8, col:46>
            0xa837f40 "__int_type __c =
              (CallExpr 0xa838020 <col:25, col:45> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa837fe8 <col:25, col:39> '<dependent type>' lvalue
                  (CallExpr 0xa837fc8 <col:25, col:36> '<dependent type>'
                    (CXXDependentScopeMemberExpr 0xa837f90 <col:25, col:30> '<dependent type>' lvalue
                      (DeclRefExpr 0xa837f74 <col:25> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &')))))")
          (WhileStmt 0xa838498 <line:1091:8, line:1098:3>
            <<<NULL>>>
            (BinaryOperator 0xa838280 <line:1091:15, line:1093:46> '<dependent type>' '&&'
              (BinaryOperator 0xa8381b0 <line:1091:15, line:1092:43> '<dependent type>' '&&'
                (CXXOperatorCallExpr 0xa8380d0 <line:1091:15, col:29> '<dependent type>'
                  (UnresolvedLookupExpr 0xa838080 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
                  (DeclRefExpr 0xa838050 <col:15> '__size_type':'typename __string_type::size_type' lvalue Var 0xa8379b0 '__extracted' '__size_type':'typename __string_type::size_type')
                  (DeclRefExpr 0xa838068 <col:29> 'const __size_type':'const typename __string_type::size_type' lvalue Var 0xa837a20 '__n' 'const __size_type':'const typename __string_type::size_type'))
                (UnaryOperator 0xa838198 <line:1092:11, col:43> '<dependent type>' prefix '!'
                  (CallExpr 0xa838170 <col:12, col:43> '<dependent type>'
                    (DependentScopeDeclRefExpr 0xa838118 <col:12, col:21> '<dependent type>' lvalue)
                    (DeclRefExpr 0xa83813c <col:33> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa837f40 '__c' '__int_type':'typename __istream_type::int_type')
                    (DeclRefExpr 0xa838154 <col:38> 'const __int_type':'const typename __istream_type::int_type' lvalue Var 0xa837e80 '__eof' 'const __int_type':'const typename __istream_type::int_type'))))
              (UnaryOperator 0xa838268 <line:1093:11, col:46> '<dependent type>' prefix '!'
                (CallExpr 0xa838240 <col:12, col:46> '<dependent type>'
                  (DependentScopeDeclRefExpr 0xa8381e8 <col:12, col:21> '<dependent type>' lvalue)
                  (DeclRefExpr 0xa83820c <col:33> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa837f40 '__c' '__int_type':'typename __istream_type::int_type')
                  (DeclRefExpr 0xa838224 <col:38> 'const __int_type':'const typename __istream_type::int_type' lvalue Var 0xa837da0 '__idelim' 'const __int_type':'const typename __istream_type::int_type'))))
            (CompoundStmt 0xa838478 <line:1094:3, line:1098:3>
              (CompoundAssignOperator 0xa838330 <line:1095:5, col:39> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (DeclRefExpr 0xa838298 <col:5> 'basic_string<_CharT, _Traits, _Alloc>' lvalue ParmVar 0xa8372c0 '__str' 'basic_string<_CharT, _Traits, _Alloc> &')
                (CallExpr 0xa838310 <col:14, col:39> '<dependent type>'
                  (DependentScopeDeclRefExpr 0xa8382d0 <col:14, col:23> '<dependent type>' lvalue)
                  (DeclRefExpr 0xa8382f4 <col:36> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa837f40 '__c' '__int_type':'typename __istream_type::int_type')))
              (UnaryOperator 0xa838368 <line:1096:5, col:7> '<dependent type>' prefix '++'
                (DeclRefExpr 0xa838350 <col:7> '__size_type':'typename __string_type::size_type' lvalue Var 0xa8379b0 '__extracted' '__size_type':'typename __string_type::size_type'))
              (BinaryOperator 0xa838460 <line:1097:5, col:32> '<dependent type>' '='
                (DeclRefExpr 0xa83837c <col:5> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa837f40 '__c' '__int_type':'typename __istream_type::int_type')
                (CallExpr 0xa838440 <col:11, col:32> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa838408 <col:11, col:25> '<dependent type>' lvalue
                    (CallExpr 0xa8383e8 <col:11, col:22> '<dependent type>'
                      (CXXDependentScopeMemberExpr 0xa8383b0 <col:11, col:16> '<dependent type>' lvalue
                        (DeclRefExpr 0xa838394 <col:11> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &'))))))))
          (IfStmt 0xa838830 <line:1100:8, line:1108:24>
            <<<NULL>>>
            (CallExpr 0xa838530 <line:1100:12, col:43> '<dependent type>'
              (DependentScopeDeclRefExpr 0xa8384d8 <col:12, col:21> '<dependent type>' lvalue)
              (DeclRefExpr 0xa8384fc <col:33> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa837f40 '__c' '__int_type':'typename __istream_type::int_type')
              (DeclRefExpr 0xa838514 <col:38> 'const __int_type':'const typename __istream_type::int_type' lvalue Var 0xa837e80 '__eof' 'const __int_type':'const typename __istream_type::int_type'))
            (CompoundAssignOperator 0xa8385b8 <line:1101:3, col:24> '<dependent type>' lvalue '|=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
              (DeclRefExpr 0xa838554 <col:3> 'typename __ios_base::iostate' lvalue Var 0xa837b60 '__err' 'typename __ios_base::iostate')
              (DependentScopeDeclRefExpr 0xa838590 <col:12, col:24> '<dependent type>' lvalue))
            (IfStmt 0xa838810 <line:1102:13, line:1108:24>
              <<<NULL>>>
              (CallExpr 0xa838658 <line:1102:17, col:51> '<dependent type>'
                (DependentScopeDeclRefExpr 0xa838600 <col:17, col:26> '<dependent type>' lvalue)
                (DeclRefExpr 0xa838624 <col:38> '__int_type':'typename __istream_type::int_type' lvalue Var 0xa837f40 '__c' '__int_type':'typename __istream_type::int_type')
                (DeclRefExpr 0xa83863c <col:43> 'const __int_type':'const typename __istream_type::int_type' lvalue Var 0xa837da0 '__idelim' 'const __int_type':'const typename __istream_type::int_type'))
              (CompoundStmt 0xa838778 <line:1103:3, line:1106:3>
                (UnaryOperator 0xa838698 <line:1104:5, col:7> '<dependent type>' prefix '++'
                  (DeclRefExpr 0xa83867c <col:7> '__size_type':'typename __string_type::size_type' lvalue Var 0xa8379b0 '__extracted' '__size_type':'typename __string_type::size_type'))
                (CallExpr 0xa838758 <line:1105:5, col:26> '<dependent type>'
                  (CXXDependentScopeMemberExpr 0xa838720 <col:5, col:19> '<dependent type>' lvalue
                    (CallExpr 0xa838700 <col:5, col:16> '<dependent type>'
                      (CXXDependentScopeMemberExpr 0xa8386c8 <col:5, col:10> '<dependent type>' lvalue
                        (DeclRefExpr 0xa8386ac <col:5> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &'))))))
              (CompoundAssignOperator 0xa8387f0 <line:1108:3, col:24> '<dependent type>' lvalue '|=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
                (DeclRefExpr 0xa838790 <col:3> 'typename __ios_base::iostate' lvalue Var 0xa837b60 '__err' 'typename __ios_base::iostate')
                (DependentScopeDeclRefExpr 0xa8387c8 <col:12, col:24> '<dependent type>' lvalue)))))
        <<<NULL>>>)
      (IfStmt 0xa838988 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/basic_string.tcc:1114:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa838898 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa838970 </usr/include/c++/4.6/bits/basic_string.tcc:1111:6, line:1114:6>
          (CallExpr 0xa838940 <line:1112:8, col:43> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8388c0 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa8388a8 <col:8> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa838918 <col:25, col:37> '<dependent type>' lvalue))
          (NullStmt 0xa838960 <line:1113:31>))
        <<<NULL>>>)
      (IfStmt 0xa838a88 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/basic_string.tcc:1121:6>
        <<<NULL>>>
        (CXXBoolLiteralExpr 0xa8389a8 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
        (CompoundStmt 0xa838a70 </usr/include/c++/4.6/bits/basic_string.tcc:1116:6, line:1121:6>
          (CallExpr 0xa838a50 <line:1120:8, col:43> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8389d0 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa8389b8 <col:8> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &'))
            (DependentScopeDeclRefExpr 0xa838a28 <col:25, col:37> '<dependent type>' lvalue)))
        <<<NULL>>>))
    <<<NULL>>>)
  (IfStmt 0xa838b98 <line:1123:7, line:1124:23>
    <<<NULL>>>
    (UnaryOperator 0xa838b00 <line:1123:11, col:12> '<dependent type>' prefix '!'
      (DeclRefExpr 0xa838ae4 <col:12> '__size_type':'typename __string_type::size_type' lvalue Var 0xa8379b0 '__extracted' '__size_type':'typename __string_type::size_type'))
    (CompoundAssignOperator 0xa838b78 <line:1124:2, col:23> '<dependent type>' lvalue '|=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
      (DeclRefExpr 0xa838b14 <col:2> 'typename __ios_base::iostate' lvalue Var 0xa837b60 '__err' 'typename __ios_base::iostate')
      (DependentScopeDeclRefExpr 0xa838b50 <col:11, col:23> '<dependent type>' lvalue))
    <<<NULL>>>)
  (IfStmt 0xa838c58 <line:1125:7, line:1126:21>
    <<<NULL>>>
    (DeclRefExpr 0xa838bb4 <line:1125:11> 'typename __ios_base::iostate' lvalue Var 0xa837b60 '__err' 'typename __ios_base::iostate')
    (CallExpr 0xa838c38 <line:1126:2, col:21> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa838be8 <col:2, col:7> '<dependent type>' lvalue
        (DeclRefExpr 0xa838bcc <col:2> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &'))
      (DeclRefExpr 0xa838c1c <col:16> 'typename __ios_base::iostate' lvalue Var 0xa837b60 '__err' 'typename __ios_base::iostate'))
    <<<NULL>>>)
  (ReturnStmt 0xa838c90 <line:1127:7, col:14>
    (DeclRefExpr 0xa838c74 <col:14> 'basic_istream<_CharT, _Traits>' lvalue ParmVar 0xa837110 '__in' 'basic_istream<_CharT, _Traits> &')))

;
    class basic_string {
        class basic_string;
        typedef typename allocator<char>::rebind<char>::other _CharT_alloc_type;
    public:
    public:
        typedef std::char_traits<char> traits_type;
        typedef typename char_traits<char>::char_type value_type;
        typedef std::allocator<char> allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<char> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<char> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base {
            struct _Rep;
            typedef typename allocator<char>::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const char _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep &_S_empty_rep() (CompoundStmt 0xa9cff18 </usr/include/c++/4.6/bits/basic_string.h:176:9, line:182:2>
  (DeclStmt 0xa9cfd78 <line:180:4, col:62>
    0xa9cfba0 "void *__p =
      (CXXReinterpretCastExpr 0xa9cfd60 <col:16, col:61> 'void *' reinterpret_cast<void *> <BitCast>
        (UnaryOperator 0xa9cfd48 <col:40, col:41> 'size_type (*)[]' prefix '&'
          (DeclRefExpr 0xa9cfcf0 <col:41> 'size_type []' lvalue Var 0xa867b50 '_S_empty_rep_storage' 'size_type []')))")
  (ReturnStmt 0xa9cff08 <line:181:4, col:39>
    (UnaryOperator 0xa9cfef0 <col:11, col:39> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue prefix '*'
      (CXXReinterpretCastExpr 0xa9cfed8 <col:12, col:39> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' reinterpret_cast<struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *> <BitCast>
        (ImplicitCastExpr 0xa9cfec8 <col:36> 'void *' <LValueToRValue>
          (DeclRefExpr 0xa9cfeac <col:36> 'void *' lvalue Var 0xa9cfba0 '__p' 'void *'))))))


            bool _M_is_leaked() const;
            bool _M_is_shared() const;
            void _M_set_leaked();
            void _M_set_sharable();
            void _M_set_length_and_sharable(size_type __n);
            char *_M_refdata() throw() (CompoundStmt 0xa9d7f18 </usr/include/c++/4.6/bits/basic_string.h:217:2, col:48>
  (ReturnStmt 0xa9d7f08 <col:4, col:45>
    (CXXReinterpretCastExpr 0xa9d7ef0 <col:11, col:45> 'char *' reinterpret_cast<char *> <BitCast>
      (BinaryOperator 0xa9d7ed8 <col:37, col:44> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' '+'
        (CXXThisExpr 0xa9d7ec8 <col:37> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this)
        (IntegerLiteral 0xa7e5070 <col:44> 'int' 1)))))


            char *_M_grab(const std::allocator<char> &__alloc1, const std::allocator<char> &__alloc2);
            static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep *_S_create(size_type, size_type, const std::allocator<char> &);
            void _M_dispose(const std::allocator<char> &__a) (CompoundStmt 0xa9cfb88 </usr/include/c++/4.6/bits/basic_string.h:232:2, line:246:2>
  (IfStmt 0xa9cfb68 <line:234:4, line:245:6>
    <<<NULL>>>
    (ImplicitCastExpr 0xa9cf890 <line:234:8, col:55> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa9cf848 <col:8, col:55> 'long'
        (ImplicitCastExpr 0xa9cf838 <col:8> 'long (*)(long, long)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa7e537c <col:8> 'long (long, long)' lvalue Function 0xa7e4b70 '__builtin_expect' 'long (long, long)'))
        (ImplicitCastExpr 0xa9cf870 <col:25, col:47> 'long' <IntegralCast>
          (BinaryOperator 0xa9cf800 <col:25, col:47> '_Bool' '!='
            (CXXThisExpr 0xa9cf658 <col:25> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this)
            (UnaryOperator 0xa9cf7e8 <col:33, col:47> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' prefix '&'
              (CallExpr 0xa9cf7c8 <col:34, col:47> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
                (ImplicitCastExpr 0xa9cf7b8 <col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa9cf780 <col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa867cd0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)'))))))
        (ImplicitCastExpr 0xa9cf880 <col:50> 'long' <IntegralCast>
          (CXXBoolLiteralExpr 0xa7e5470 <col:50> '_Bool' false))))
    (CompoundStmt 0xa9cfb50 <line:236:6, line:245:6>
      (NullStmt 0xa7e54a8 <line:238:67>)
      (IfStmt 0xa9cfb30 <line:239:8, line:244:3>
        <<<NULL>>>
        (BinaryOperator 0xa9cf988 <line:239:12, line:240:16> '_Bool' '<='
          (CallExpr 0xa9cf960 <line:239:12, line:240:11> '_Atomic_word':'int'
            (ImplicitCastExpr 0xa9cf950 <line:239:12, col:23> '_Atomic_word (*)(_Atomic_word *, int)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa7e54d8 <col:12, col:23> '_Atomic_word (_Atomic_word *, int)' lvalue Function 0xa7bf420 '__exchange_and_add_dispatch' '_Atomic_word (_Atomic_word *, int)'))
            (UnaryOperator 0xa9cf938 <col:51, col:58> '_Atomic_word *' prefix '&'
              (MemberExpr 0xa9cf918 <col:52, col:58> '_Atomic_word':'int' lvalue ->_M_refcount 0xa867530
                (ImplicitCastExpr 0xa9cf908 <col:52> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep_base *' <UncheckedDerivedToBase (_Rep_base)>
                  (CXXThisExpr 0xa9cf8e0 <col:52> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this))))
            (UnaryOperator 0xa7e5570 <line:240:9, col:10> 'int' prefix '-'
              (IntegerLiteral 0xa7e5558 <col:10> 'int' 1)))
          (IntegerLiteral 0xa7e55b0 <col:16> 'int' 0))
        (CompoundStmt 0xa9cfb18 <line:241:3, line:244:3>
          (NullStmt 0xa7e5630 <line:242:63>)
          (CXXMemberCallExpr 0xa9cfaf8 <line:243:5, col:19> 'void'
            (MemberExpr 0xa9cfac0 <col:5> '<bound member function type>' ->_M_destroy 0xa868960
              (CXXThisExpr 0xa9cf9a0 <col:5> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' this))
            (DeclRefExpr 0xa9cfae0 <col:16> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue ParmVar 0xa868840 '__a' 'const class std::allocator<char> &')))
        <<<NULL>>>))
    <<<NULL>>>))


            void _M_destroy(const std::allocator<char> &) throw();
            char *_M_refcopy() throw();
            char *_M_clone(const std::allocator<char> &, size_type __res);
        };
        struct _Alloc_hider :  std::allocator<char> {
            struct _Alloc_hider;
            _Alloc_hider(char *__dat, const std::allocator<char> &__a) : std::allocator<char>((DeclRefExpr 0xa9d7f2c </usr/include/c++/4.6/bits/basic_string.h:269:11> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue ParmVar 0xa83b1a0 '__a' 'const class std::allocator<char> &')
), _M_p((ImplicitCastExpr 0xa9d80e0 </usr/include/c++/4.6/bits/basic_string.h:269:22> 'char *' <LValueToRValue>
  (DeclRefExpr 0xa9d7fb8 <col:22> 'char *' lvalue ParmVar 0xa83b130 '__dat' 'char *'))
) (CompoundStmt 0xa7e5a80 </usr/include/c++/4.6/bits/basic_string.h:269:29, col:31>)


            char *_M_p;
            inline void ~_Alloc_hider() throw() (CompoundStmt 0xa9cedb0 </usr/include/c++/4.6/bits/basic_string.h:266:14>)


            inline _Alloc_hider(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider &) throw();
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa83ae88 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'unsigned int' static_cast<size_type> <NoOp>
  (ImplicitCastExpr 0xa83ae78 <col:60, col:61> 'size_type':'unsigned int' <IntegralCast>
    (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
      (IntegerLiteral 0xa7c5128 <col:61> 'int' 1))))
;
    private:
    private:
        mutable std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider _M_dataplus;
        char *_M_data() const (CompoundStmt 0xa9cf5f0 </usr/include/c++/4.6/bits/basic_string.h:287:7, col:35>
  (ReturnStmt 0xa9cf5e0 <col:9, col:29>
    (ImplicitCastExpr 0xa9cf5d0 <col:17, col:29> 'char *' <LValueToRValue>
      (MemberExpr 0xa9cf5b0 <col:17, col:29> 'char *' lvalue ._M_p 0xa83b410
        (MemberExpr 0xa9cf590 <col:17> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Alloc_hider' lvalue ->_M_dataplus 0xa83b440
          (CXXThisExpr 0xa9cf470 <col:17> 'const class std::basic_string<char> *' this))))))


        char *_M_data(char *__p);
        std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep *_M_rep() const (CompoundStmt 0xa9cf458 </usr/include/c++/4.6/bits/basic_string.h:295:7, col:62>
  (ReturnStmt 0xa9cf448 <col:9, col:59>
    (UnaryOperator 0xa9cf430 <col:16, col:59> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' prefix '&'
      (ParenExpr 0xa9cf418 <col:17, col:59> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
        (ArraySubscriptExpr 0xa9cf400 <col:18, col:58> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
          (ParenExpr 0xa9cf3e8 <col:18, col:54> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
            (CXXReinterpretCastExpr 0xa9cf3d0 <col:19, col:53> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *' reinterpret_cast<struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *> <BitCast>
              (CXXMemberCallExpr 0xa9cf3b0 <col:44, col:52> 'char *'
                (MemberExpr 0xa9cf390 <col:44> '<bound member function type>' ->_M_data 0xa83b4c0
                  (CXXThisExpr 0xa9cf380 <col:44> 'const class std::basic_string<char> *' this)))))
          (UnaryOperator 0xa7e5cf8 <col:56, col:57> 'int' prefix '-'
            (IntegerLiteral 0xa7e5ce0 <col:57> 'int' 1)))))))


        iterator _M_ibegin() const;
        iterator _M_iend() const;
        void _M_leak();
        size_type _M_check(size_type __pos, const char *__s) const;
        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const;
        size_type _M_limit(size_type __pos, size_type __off) const;
        bool _M_disjunct(const char *__s) const;
        static void _M_copy(char *__d, const char *__s, size_type __n);
        static void _M_move(char *__d, const char *__s, size_type __n);
        static void _M_assign(char *__d, size_type __n, char __c);
        template <class _Iterator> static void _S_copy_chars(char *__p, _Iterator __k1, _Iterator __k2);
        static void _S_copy_chars(char *__p, iterator __k1, iterator __k2);
        static void _S_copy_chars(char *__p, const_iterator __k1, const_iterator __k2);
        static void _S_copy_chars(char *__p, char *__k1, char *__k2);
        static void _S_copy_chars(char *__p, const char *__k1, const char *__k2);
        static int _S_compare(size_type __n1, size_type __n2) (CompoundStmt 0xa9e9098 </usr/include/c++/4.6/bits/basic_string.h:402:7, line:411:7>
  (DeclStmt 0xa9e8e98 <line:403:2, col:58>
    0xa9e8c70 "const difference_type __d =
      (CXXFunctionalCastExpr 0xa9e8e80 <col:30, col:57> 'difference_type':'int' functional cast to difference_type <NoOp>
        (ImplicitCastExpr 0xa9e8e70 <col:46, col:53> 'difference_type':'int' <IntegralCast>
          (BinaryOperator 0xa9e8e58 <col:46, col:53> 'unsigned int' '-'
            (ImplicitCastExpr 0xa9e8e38 <col:46> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9e8e04 <col:46> 'size_type':'unsigned int' lvalue ParmVar 0xa83e160 '__n1' 'size_type':'unsigned int'))
            (ImplicitCastExpr 0xa9e8e48 <col:53> 'size_type':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa9e8e1c <col:53> 'size_type':'unsigned int' lvalue ParmVar 0xa83e2c0 '__n2' 'size_type':'unsigned int')))))")
  (IfStmt 0xa9e9078 <line:405:2, line:410:18>
    <<<NULL>>>
    (BinaryOperator 0xa9e8f20 <line:405:6, col:46> '_Bool' '>'
      (ImplicitCastExpr 0xa9e8f00 <col:6> 'difference_type':'int' <LValueToRValue>
        (DeclRefExpr 0xa9e8ee8 <col:6> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int'))
      (ImplicitCastExpr 0xa9e8f10 <col:12, col:46> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebc80 <col:12, col:46> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (ReturnStmt 0xa9e8f48 <line:406:4, col:45>
      (ImplicitCastExpr 0xa9e8f38 <col:11, col:45> 'int':'int' <LValueToRValue>
        (DeclRefExpr 0xa7ebda0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6382c0 '__max' 'const int':'const int')))
    (IfStmt 0xa9e9058 <line:407:7, line:410:18>
      <<<NULL>>>
      (BinaryOperator 0xa9e8fd0 <line:407:11, col:51> '_Bool' '<'
        (ImplicitCastExpr 0xa9e8fb0 <col:11> 'difference_type':'int' <LValueToRValue>
          (DeclRefExpr 0xa9e8f98 <col:11> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int'))
        (ImplicitCastExpr 0xa9e8fc0 <col:17, col:51> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebe90 <col:17, col:51> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa9e8ff8 <line:408:4, col:45>
        (ImplicitCastExpr 0xa9e8fe8 <col:11, col:45> 'int':'int' <LValueToRValue>
          (DeclRefExpr 0xa7ebfb0 <col:11, col:45> 'const int':'const int' lvalue Var 0xa6380b0 '__min' 'const int':'const int')))
      (ReturnStmt 0xa9e9048 <line:410:4, col:18>
        (CXXFunctionalCastExpr 0xa9e9030 <col:11, col:18> 'int' functional cast to int <NoOp>
          (ImplicitCastExpr 0xa9e9020 <col:15> 'difference_type':'int' <LValueToRValue>
            (DeclRefExpr 0xa9e9008 <col:15> 'const difference_type':'const int' lvalue Var 0xa9e8c70 '__d' 'const difference_type':'const int')))))))


        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep &_S_empty_rep() (CompoundStmt 0xa9d7e60 </usr/include/c++/4.6/bits/basic_string.h:421:7, col:38>
  (ReturnStmt 0xa9d7e50 <col:9, col:35>
    (CallExpr 0xa9d7e30 <col:16, col:35> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
      (ImplicitCastExpr 0xa9d7e20 <col:16, col:22> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d7dfc <col:16, col:22> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa867cd0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)')))))


    public:
    public:
        basic_string() : _M_dataplus((CXXMemberCallExpr 0xa9d7938 </usr/include/c++/4.6/bits/basic_string.h:433:21, col:47> 'char *'
  (MemberExpr 0xa9d7914 <col:21, col:36> '<bound member function type>' ._M_refdata 0xa868110
    (CallExpr 0xa9d78f8 <col:21, col:34> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep' lvalue
      (ImplicitCastExpr 0xa9d78e8 <col:21> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(*)(void)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9d78d0 <col:21> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)' lvalue CXXMethod 0xa83eaa0 '_S_empty_rep' 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep &(void)')))))
, (MaterializeTemporaryExpr 0xa9d7c58 </usr/include/c++/4.6/bits/basic_string.h:433:50, col:57> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue
  (ImplicitCastExpr 0xa9d7c48 <col:50, col:57> 'const class std::allocator<char>':'const class std::allocator<char>' <NoOp>
    (CXXBindTemporaryExpr 0xa9d7998 <col:50, col:57> 'class std::allocator<char>':'class std::allocator<char>' (CXXTemporary 0xa9d7990)
      (CXXTemporaryObjectExpr 0xa9d7960 <col:50, col:57> 'class std::allocator<char>':'class std::allocator<char>''void (void) throw()'))))
) (CompoundStmt 0xa7ec230 </usr/include/c++/4.6/bits/basic_string.h:433:60, col:62>)


        basic_string(const std::allocator<char> &__a);
        basic_string(const std::basic_string<char> &__str);
        basic_string(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        basic_string(const std::basic_string<char> &__str, size_type __pos, size_type __n, const std::allocator<char> &__a);
        basic_string(const char *__s, size_type __n, const std::allocator<char> &__a);
        basic_string(const char *__s, const std::allocator<char> &__a);
        basic_string(size_type __n, char __c, const std::allocator<char> &__a);
        template <class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const std::allocator<char> &__a);
        void ~basic_string() (CompoundStmt 0xa9ced00 </usr/include/c++/4.6/bits/basic_string.h:533:7, col:54>
  (ExprWithCleanups 0xa9cece0 <col:9, col:51> 'void'
    (CXXTemporary 0xa9cec60)
    (CXXMemberCallExpr 0xa9cec78 <col:9, col:51> 'void'
      (MemberExpr 0xa9cebdc <col:9, col:19> '<bound member function type>' ->_M_dispose 0xa868890
        (CXXMemberCallExpr 0xa9cebb0 <col:9, col:16> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
          (MemberExpr 0xa9ceb90 <col:9> '<bound member function type>' ->_M_rep 0xa83b790
            (ImplicitCastExpr 0xa9cebd0 <col:9> 'const class std::basic_string<char> *' <NoOp>
              (CXXThisExpr 0xa9cea70 <col:9> 'class std::basic_string<char> *' this)))))
      (MaterializeTemporaryExpr 0xa9cecd0 <col:30, col:50> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue
        (ImplicitCastExpr 0xa9cecc0 <col:30, col:50> 'const class std::allocator<char>':'const class std::allocator<char>' <NoOp>
          (CXXBindTemporaryExpr 0xa9cec68 <col:30, col:50> 'allocator_type':'class std::allocator<char>' (CXXTemporary 0xa9cec60)
            (CXXMemberCallExpr 0xa9cec30 <col:30, col:50> 'allocator_type':'class std::allocator<char>'
              (MemberExpr 0xa9cec10 <col:30, col:36> '<bound member function type>' ->get_allocator 0xa6d9670
                (ImplicitCastExpr 0xa9cec50 <col:30> 'const class std::basic_string<char> *' <NoOp>
                  (CXXThisExpr 0xa9cec00 <col:30> 'class std::basic_string<char> *' this))))))))))


        std::basic_string<char> &operator=(const std::basic_string<char> &__str) (CompoundStmt 0xa9d81d8 </usr/include/c++/4.6/bits/basic_string.h:541:7, col:37>
  (ReturnStmt 0xa9d81c8 <col:9, col:34>
    (CXXMemberCallExpr 0xa9d81a8 <col:16, col:34> 'class std::basic_string<char>' lvalue
      (MemberExpr 0xa9d8188 <col:16, col:22> '<bound member function type>' ->assign 0xa846050
        (CXXThisExpr 0xa9d8110 <col:16> 'class std::basic_string<char> *' this))
      (DeclRefExpr 0xa9d8170 <col:29> 'const class std::basic_string<char>' lvalue ParmVar 0xa841270 '__str' 'const class std::basic_string<char> &'))))


        std::basic_string<char> &operator=(const char *__s);
        std::basic_string<char> &operator=(char __c);
        iterator begin();
        const_iterator begin() const;
        iterator end();
        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
    public:
    public:
        size_type size() const (CompoundStmt 0xa9d8fb0 </usr/include/c++/4.6/bits/basic_string.h:710:7, col:37>
  (ReturnStmt 0xa9d8fa0 <col:9, col:26>
    (ImplicitCastExpr 0xa9d8f90 <col:16, col:26> 'size_type':'unsigned int' <LValueToRValue>
      (MemberExpr 0xa9d8f70 <col:16, col:26> 'size_type':'unsigned int' lvalue ->_M_length 0xa8673b0
        (ImplicitCastExpr 0xa9d8f60 <col:16, col:23> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep_base *' <UncheckedDerivedToBase (_Rep_base)>
          (CXXMemberCallExpr 0xa9d8f40 <col:16, col:23> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Rep *'
            (MemberExpr 0xa9d8f20 <col:16> '<bound member function type>' ->_M_rep 0xa83b790
              (CXXThisExpr 0xa9d8e00 <col:16> 'const class std::basic_string<char> *' this))))))))


        size_type length() const;
        size_type max_size() const;
        void resize(size_type __n, char __c);
        void resize(size_type __n) (CompoundStmt 0xa9d8de8 </usr/include/c++/4.6/bits/basic_string.h:748:7, col:38>
  (CXXMemberCallExpr 0xa9d8db0 <col:9, col:35> 'void'
    (MemberExpr 0xa9d8d90 <col:9, col:15> '<bound member function type>' ->resize 0xa842cd0
      (CXXThisExpr 0xa9d8d10 <col:9> 'class std::basic_string<char> *' this))
    (ImplicitCastExpr 0xa9d8dd8 <col:22> 'size_type':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa9d8d60 <col:22> 'size_type':'unsigned int' lvalue ParmVar 0xa842e60 '__n' 'size_type':'unsigned int'))
    (CXXScalarValueInitExpr 0xa9d8d80 <col:27, col:34> 'char':'char')))


        size_type capacity() const;
        void reserve(size_type __res_arg);
        void clear();
        bool empty() const (CompoundStmt 0xa9d82c8 </usr/include/c++/4.6/bits/basic_string.h:803:7, col:35>
  (ReturnStmt 0xa9d82b8 <col:9, col:32>
    (BinaryOperator 0xa9d82a0 <col:16, col:32> '_Bool' '=='
      (CXXMemberCallExpr 0xa9d8270 <col:16, col:27> 'size_type':'unsigned int'
        (MemberExpr 0xa9d8250 <col:16, col:22> '<bound member function type>' ->size 0xa842720
          (CXXThisExpr 0xa9d8240 <col:16> 'const class std::basic_string<char> *' this)))
      (ImplicitCastExpr 0xa9d8290 <col:32> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa7ed288 <col:32> 'int' 0)))))


        const_reference operator[](size_type __pos) const;
        reference operator[](size_type __pos);
        const_reference at(size_type __n) const;
        reference at(size_type __n);
        std::basic_string<char> &operator+=(const std::basic_string<char> &__str);
        std::basic_string<char> &operator+=(const char *__s);
        std::basic_string<char> &operator+=(char __c);
        std::basic_string<char> &append(const std::basic_string<char> &__str);
        std::basic_string<char> &append(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        std::basic_string<char> &append(const char *__s, size_type __n);
        std::basic_string<char> &append(const char *__s);
        std::basic_string<char> &append(size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &append(_InputIterator __first, _InputIterator __last);
        void push_back(char __c);
        std::basic_string<char> &assign(const std::basic_string<char> &__str);
        std::basic_string<char> &assign(const std::basic_string<char> &__str, size_type __pos, size_type __n);
        std::basic_string<char> &assign(const char *__s, size_type __n);
        std::basic_string<char> &assign(const char *__s);
        std::basic_string<char> &assign(size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &assign(_InputIterator __first, _InputIterator __last);
        void insert(iterator __p, size_type __n, char __c);
        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end);
        std::basic_string<char> &insert(size_type __pos1, const std::basic_string<char> &__str);
        std::basic_string<char> &insert(size_type __pos1, const std::basic_string<char> &__str, size_type __pos2, size_type __n);
        std::basic_string<char> &insert(size_type __pos, const char *__s, size_type __n);
        std::basic_string<char> &insert(size_type __pos, const char *__s);
        std::basic_string<char> &insert(size_type __pos, size_type __n, char __c);
        iterator insert(iterator __p, char __c);
        std::basic_string<char> &erase(size_type __pos, size_type __n);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        std::basic_string<char> &replace(size_type __pos, size_type __n, const std::basic_string<char> &__str);
        std::basic_string<char> &replace(size_type __pos1, size_type __n1, const std::basic_string<char> &__str, size_type __pos2, size_type __n2);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, const char *__s, size_type __n2);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, const char *__s);
        std::basic_string<char> &replace(size_type __pos, size_type __n1, size_type __n2, char __c);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const std::basic_string<char> &__str);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__s, size_type __n);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__s);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, size_type __n, char __c);
        template <class _InputIterator> std::basic_string<char> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, char *__k1, char *__k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const char *__k1, const char *__k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2);
        std::basic_string<char> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2);
    private:
    private:
        template <class _Integer> std::basic_string<char> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type);
        template <class _InputIterator> std::basic_string<char> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        std::basic_string<char> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, char __c);
        std::basic_string<char> &_M_replace_safe(size_type __pos1, size_type __n1, const char *__s, size_type __n2);
        template <class _InIterator> static char *_S_construct_aux(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a, std::__false_type);
        template <class _Integer> static char *_S_construct_aux(_Integer __beg, _Integer __end, const std::allocator<char> &__a, std::__true_type);
        static char *_S_construct_aux_2(size_type __req, char __c, const std::allocator<char> &__a);
        template <class _InIterator> static char *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a);
        template <class _InIterator> static char *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<char> &__a, std::input_iterator_tag);
        template <class _FwdIterator> static char *_S_construct(_FwdIterator __beg, _FwdIterator __end, const std::allocator<char> &__a, std::forward_iterator_tag);
        static char *_S_construct(size_type __req, char __c, const std::allocator<char> &__a);
    public:
    public:
        size_type copy(char *__s, size_type __n, size_type __pos) const;
        void swap(std::basic_string<char> &__s);
        const char *c_str() const (CompoundStmt 0xa9d87f0 </usr/include/c++/4.6/bits/basic_string.h:1766:7, col:27>
  (ReturnStmt 0xa9d87e0 <col:9, col:24>
    (ImplicitCastExpr 0xa9d87d0 <col:16, col:24> 'const char *' <NoOp>
      (CXXMemberCallExpr 0xa9d87b0 <col:16, col:24> 'char *'
        (MemberExpr 0xa9d8790 <col:16> '<bound member function type>' ->_M_data 0xa83b4c0
          (CXXThisExpr 0xa9d8780 <col:16> 'const class std::basic_string<char> *' this))))))


        const char *data() const (CompoundStmt 0xa9e8b20 </usr/include/c++/4.6/bits/basic_string.h:1776:7, col:27>
  (ReturnStmt 0xa9e8b10 <col:9, col:24>
    (ImplicitCastExpr 0xa9e8b00 <col:16, col:24> 'const char *' <NoOp>
      (CXXMemberCallExpr 0xa9e8ae0 <col:16, col:24> 'char *'
        (MemberExpr 0xa9e8ac0 <col:16> '<bound member function type>' ->_M_data 0xa83b4c0
          (CXXThisExpr 0xa9e8ab0 <col:16> 'const class std::basic_string<char> *' this))))))


        allocator_type get_allocator() const (CompoundStmt 0xa9d00f0 </usr/include/c++/4.6/bits/basic_string.h:1783:7, col:29>
  (ReturnStmt 0xa9d00e0 <col:9, col:16>
    (CXXConstructExpr 0xa9d00b8 <col:16> 'allocator_type':'class std::allocator<char>''void (const class std::allocator<char> &) throw()'
      (ImplicitCastExpr 0xa9d00a8 <col:16> 'const class std::allocator<char>' lvalue <NoOp>
        (ImplicitCastExpr 0xa9d0098 <col:16> 'class std::allocator<char>' lvalue <DerivedToBase (allocator)>
          (MemberExpr 0xa9d0050 <col:16> 'struct std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::_Alloc_hider' lvalue ->_M_dataplus 0xa83b440
            (CXXThisExpr 0xa9cff30 <col:16> 'const class std::basic_string<char> *' this)))))))


        size_type find(const char *__s, size_type __pos, size_type __n) const;
        size_type find(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find(const char *__s, size_type __pos) const;
        size_type find(char __c, size_type __pos) const;
        size_type rfind(const std::basic_string<char> &__str, size_type __pos) const;
        size_type rfind(const char *__s, size_type __pos, size_type __n) const;
        size_type rfind(const char *__s, size_type __pos) const;
        size_type rfind(char __c, size_type __pos) const;
        size_type find_first_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_first_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const char *__s, size_type __pos) const;
        size_type find_first_of(char __c, size_type __pos) const;
        size_type find_last_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_last_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const char *__s, size_type __pos) const;
        size_type find_last_of(char __c, size_type __pos) const;
        size_type find_first_not_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_first_not_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const char *__s, size_type __pos) const;
        size_type find_first_not_of(char __c, size_type __pos) const;
        size_type find_last_not_of(const std::basic_string<char> &__str, size_type __pos) const;
        size_type find_last_not_of(const char *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const char *__s, size_type __pos) const;
        size_type find_last_not_of(char __c, size_type __pos) const;
        std::basic_string<char> substr(size_type __pos, size_type __n) const;
        int compare(const std::basic_string<char> &__str) const (CompoundStmt 0xa9e84b0 </usr/include/c++/4.6/bits/basic_string.h:2173:7, line:2182:7>
  (DeclStmt 0xa9e74e8 <line:2174:2, col:39>
    0xa9e7460 "const size_type __size =
      (CXXMemberCallExpr 0xa9e74c8 <col:27, col:38> 'size_type':'unsigned int'
        (MemberExpr 0xa9e74a8 <col:27, col:33> '<bound member function type>' ->size 0xa842720
          (CXXThisExpr 0xa9e7498 <col:27> 'const class std::basic_string<char> *' this)))")
  (DeclStmt 0xa9e76b0 <line:2175:2, col:40>
    0xa9e7620 "const size_type __osize =
      (CXXMemberCallExpr 0xa9e7690 <col:28, col:39> 'size_type':'unsigned int'
        (MemberExpr 0xa9e766c <col:28, col:34> '<bound member function type>' .size 0xa842720
          (DeclRefExpr 0xa9e7654 <col:28> 'const class std::basic_string<char>' lvalue ParmVar 0xa865930 '__str' 'const class std::basic_string<char> &')))")
  (DeclStmt 0xa9e7920 <line:2176:2, col:51>
    0xa9e77e0 "const size_type __len =
      (ImplicitCastExpr 0xa9e7910 <col:26, col:50> 'unsigned int':'unsigned int' <LValueToRValue>
        (CallExpr 0xa9e78e8 <col:26, col:50> 'const unsigned int':'const unsigned int' lvalue
          (ImplicitCastExpr 0xa9e78d8 <col:26, col:31> 'const unsigned int &(*)(const unsigned int &, const unsigned int &)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9e78b0 <col:26, col:31> 'const unsigned int &(const unsigned int &, const unsigned int &)' lvalue Function 0xa65fdc0 'min' 'const unsigned int &(const unsigned int &, const unsigned int &)' (FunctionTemplate 0xa6435c0 'min')))
          (DeclRefExpr 0xa9e7850 <col:35> 'const size_type':'const unsigned int' lvalue Var 0xa9e7460 '__size' 'const size_type':'const unsigned int')
          (DeclRefExpr 0xa9e7868 <col:43> 'const size_type':'const unsigned int' lvalue Var 0xa9e7620 '__osize' 'const size_type':'const unsigned int')))")
  (DeclStmt 0xa9e81d0 <line:2178:2, col:64>
    0xa9e7930 "int __r =
      (CallExpr 0xa9e8188 <col:12, col:63> 'int'
        (ImplicitCastExpr 0xa9e8178 <col:12, col:25> 'int (*)(const char_type *, const char_type *, size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e7bdc <col:12, col:25> 'int (const char_type *, const char_type *, size_t)' lvalue CXXMethod 0xa71eda0 'compare' 'int (const char_type *, const char_type *, size_t)'))
        (ImplicitCastExpr 0xa9e81b0 <col:33, col:41> 'const char_type *' <NoOp>
          (CXXMemberCallExpr 0xa9e80d0 <col:33, col:41> 'char *'
            (MemberExpr 0xa9e80b0 <col:33> '<bound member function type>' ->_M_data 0xa83b4c0
              (CXXThisExpr 0xa9e80a0 <col:33> 'const class std::basic_string<char> *' this))))
        (CXXMemberCallExpr 0xa9e8128 <col:44, col:55> 'const char *'
          (MemberExpr 0xa9e8104 <col:44, col:50> '<bound member function type>' .data 0xa6d9490
            (DeclRefExpr 0xa9e80ec <col:44> 'const class std::basic_string<char>' lvalue ParmVar 0xa865930 '__str' 'const class std::basic_string<char> &')))
        (ImplicitCastExpr 0xa9e81c0 <col:58> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8144 <col:58> 'const size_type':'const unsigned int' lvalue Var 0xa9e77e0 '__len' 'const size_type':'const unsigned int')))")
  (IfStmt 0xa9e8458 <line:2179:2, line:2180:36>
    <<<NULL>>>
    (UnaryOperator 0xa9e8218 <line:2179:6, col:7> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9e8208 <col:7> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa9e81f8 <col:7> 'int' <LValueToRValue>
          (DeclRefExpr 0xa9e81e0 <col:7> 'int' lvalue Var 0xa9e7930 '__r' 'int'))))
    (BinaryOperator 0xa9e8440 <line:2180:4, col:36> 'int' lvalue '='
      (DeclRefExpr 0xa9e822c <col:4> 'int' lvalue Var 0xa9e7930 '__r' 'int')
      (CallExpr 0xa9e83f8 <col:10, col:36> 'int'
        (ImplicitCastExpr 0xa9e83e8 <col:10> 'int (*)(size_type, size_type)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e8360 <col:10> 'int (size_type, size_type)' lvalue CXXMethod 0xa83e340 '_S_compare' 'int (size_type, size_type)'))
        (ImplicitCastExpr 0xa9e8420 <col:21> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8378 <col:21> 'const size_type':'const unsigned int' lvalue Var 0xa9e7460 '__size' 'const size_type':'const unsigned int'))
        (ImplicitCastExpr 0xa9e8430 <col:29> 'size_type':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9e8390 <col:29> 'const size_type':'const unsigned int' lvalue Var 0xa9e7620 '__osize' 'const size_type':'const unsigned int'))))
    <<<NULL>>>)
  (ReturnStmt 0xa9e84a0 <line:2181:2, col:9>
    (ImplicitCastExpr 0xa9e8490 <col:9> 'int' <LValueToRValue>
      (DeclRefExpr 0xa9e8474 <col:9> 'int' lvalue Var 0xa9e7930 '__r' 'int'))))


        int compare(size_type __pos, size_type __n, const std::basic_string<char> &__str) const;
        int compare(size_type __pos1, size_type __n1, const std::basic_string<char> &__str, size_type __pos2, size_type __n2) const;
        int compare(const char *__s) const;
        int compare(size_type __pos, size_type __n1, const char *__s) const;
        int compare(size_type __pos, size_type __n1, const char *__s, size_type __n2) const;
    };
    class basic_string {
        class basic_string;
        typedef typename allocator<wchar_t>::rebind<wchar_t>::other _CharT_alloc_type;
    public:
    public:
        typedef std::char_traits<wchar_t> traits_type;
        typedef typename char_traits<wchar_t>::char_type value_type;
        typedef std::allocator<wchar_t> allocator_type;
        typedef typename _CharT_alloc_type::size_type size_type;
        typedef typename _CharT_alloc_type::difference_type difference_type;
        typedef typename _CharT_alloc_type::reference reference;
        typedef typename _CharT_alloc_type::const_reference const_reference;
        typedef typename _CharT_alloc_type::pointer pointer;
        typedef typename _CharT_alloc_type::const_pointer const_pointer;
        typedef __gnu_cxx::__normal_iterator<pointer, basic_string<wchar_t> > iterator;
        typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string<wchar_t> > const_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
    private:
    private:
        struct _Rep_base {
            struct _Rep_base;
            size_type _M_length;
            size_type _M_capacity;
            _Atomic_word _M_refcount;
        };
        struct _Rep :  std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep_base {
            struct _Rep;
            typedef typename allocator<wchar_t>::rebind<char>::other _Raw_bytes_alloc;
            static const size_type _S_max_size;
            static const wchar_t _S_terminal;
            static size_type _S_empty_rep_storage[];
            static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep &_S_empty_rep();
            bool _M_is_leaked() const;
            bool _M_is_shared() const;
            void _M_set_leaked();
            void _M_set_sharable();
            void _M_set_length_and_sharable(size_type __n);
            wchar_t *_M_refdata() throw();
            wchar_t *_M_grab(const std::allocator<wchar_t> &__alloc1, const std::allocator<wchar_t> &__alloc2);
            static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep *_S_create(size_type, size_type, const std::allocator<wchar_t> &);
            void _M_dispose(const std::allocator<wchar_t> &__a);
            void _M_destroy(const std::allocator<wchar_t> &) throw();
            wchar_t *_M_refcopy() throw();
            wchar_t *_M_clone(const std::allocator<wchar_t> &, size_type __res);
        };
        struct _Alloc_hider :  std::allocator<wchar_t> {
            struct _Alloc_hider;
            _Alloc_hider(wchar_t *__dat, const std::allocator<wchar_t> &__a);
            wchar_t *_M_p;
        };
    public:
    public:
        static const size_type npos = (CXXStaticCastExpr 0xa86c438 </usr/include/c++/4.6/bits/basic_string.h:279:37, col:62> 'size_type':'unsigned int' static_cast<size_type> <NoOp>
  (ImplicitCastExpr 0xa86c428 <col:60, col:61> 'size_type':'unsigned int' <IntegralCast>
    (UnaryOperator 0xa7c5140 <col:60, col:61> 'int' prefix '-'
      (IntegerLiteral 0xa7c5128 <col:61> 'int' 1))))
;
    private:
    private:
        mutable std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider _M_dataplus;
        wchar_t *_M_data() const;
        wchar_t *_M_data(wchar_t *__p);
        std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep *_M_rep() const;
        iterator _M_ibegin() const;
        iterator _M_iend() const;
        void _M_leak();
        size_type _M_check(size_type __pos, const char *__s) const;
        void _M_check_length(size_type __n1, size_type __n2, const char *__s) const;
        size_type _M_limit(size_type __pos, size_type __off) const;
        bool _M_disjunct(const wchar_t *__s) const;
        static void _M_copy(wchar_t *__d, const wchar_t *__s, size_type __n);
        static void _M_move(wchar_t *__d, const wchar_t *__s, size_type __n);
        static void _M_assign(wchar_t *__d, size_type __n, wchar_t __c);
        template <class _Iterator> static void _S_copy_chars(wchar_t *__p, _Iterator __k1, _Iterator __k2);
        static void _S_copy_chars(wchar_t *__p, iterator __k1, iterator __k2);
        static void _S_copy_chars(wchar_t *__p, const_iterator __k1, const_iterator __k2);
        static void _S_copy_chars(wchar_t *__p, wchar_t *__k1, wchar_t *__k2);
        static void _S_copy_chars(wchar_t *__p, const wchar_t *__k1, const wchar_t *__k2);
        static int _S_compare(size_type __n1, size_type __n2);
        void _M_mutate(size_type __pos, size_type __len1, size_type __len2);
        void _M_leak_hard();
        static std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep &_S_empty_rep();
    public:
    public:
        basic_string();
        basic_string(const std::allocator<wchar_t> &__a);
        basic_string(const std::basic_string<wchar_t> &__str);
        basic_string(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        basic_string(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n, const std::allocator<wchar_t> &__a);
        basic_string(const wchar_t *__s, size_type __n, const std::allocator<wchar_t> &__a);
        basic_string(const wchar_t *__s, const std::allocator<wchar_t> &__a);
        basic_string(size_type __n, wchar_t __c, const std::allocator<wchar_t> &__a);
        template <class _InputIterator> basic_string(_InputIterator __beg, _InputIterator __end, const std::allocator<wchar_t> &__a);
        void ~basic_string();
        std::basic_string<wchar_t> &operator=(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &operator=(const wchar_t *__s);
        std::basic_string<wchar_t> &operator=(wchar_t __c);
        iterator begin();
        const_iterator begin() const;
        iterator end();
        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
    public:
    public:
        size_type size() const;
        size_type length() const;
        size_type max_size() const;
        void resize(size_type __n, wchar_t __c);
        void resize(size_type __n);
        size_type capacity() const;
        void reserve(size_type __res_arg);
        void clear();
        bool empty() const;
        const_reference operator[](size_type __pos) const;
        reference operator[](size_type __pos);
        const_reference at(size_type __n) const;
        reference at(size_type __n);
        std::basic_string<wchar_t> &operator+=(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &operator+=(const wchar_t *__s);
        std::basic_string<wchar_t> &operator+=(wchar_t __c);
        std::basic_string<wchar_t> &append(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &append(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        std::basic_string<wchar_t> &append(const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &append(const wchar_t *__s);
        std::basic_string<wchar_t> &append(size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &append(_InputIterator __first, _InputIterator __last);
        void push_back(wchar_t __c);
        std::basic_string<wchar_t> &assign(const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &assign(const std::basic_string<wchar_t> &__str, size_type __pos, size_type __n);
        std::basic_string<wchar_t> &assign(const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &assign(const wchar_t *__s);
        std::basic_string<wchar_t> &assign(size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &assign(_InputIterator __first, _InputIterator __last);
        void insert(iterator __p, size_type __n, wchar_t __c);
        template <class _InputIterator> void insert(iterator __p, _InputIterator __beg, _InputIterator __end);
        std::basic_string<wchar_t> &insert(size_type __pos1, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &insert(size_type __pos1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n);
        std::basic_string<wchar_t> &insert(size_type __pos, const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &insert(size_type __pos, const wchar_t *__s);
        std::basic_string<wchar_t> &insert(size_type __pos, size_type __n, wchar_t __c);
        iterator insert(iterator __p, wchar_t __c);
        std::basic_string<wchar_t> &erase(size_type __pos, size_type __n);
        iterator erase(iterator __position);
        iterator erase(iterator __first, iterator __last);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &replace(size_type __pos1, size_type __n1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n2);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, const wchar_t *__s, size_type __n2);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, const wchar_t *__s);
        std::basic_string<wchar_t> &replace(size_type __pos, size_type __n1, size_type __n2, wchar_t __c);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const std::basic_string<wchar_t> &__str);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__s, size_type __n);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__s);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, size_type __n, wchar_t __c);
        template <class _InputIterator> std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, wchar_t *__k1, wchar_t *__k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const wchar_t *__k1, const wchar_t *__k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2);
        std::basic_string<wchar_t> &replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2);
    private:
    private:
        template <class _Integer> std::basic_string<wchar_t> &_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, _Integer __val, std::__true_type);
        template <class _InputIterator> std::basic_string<wchar_t> &_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type);
        std::basic_string<wchar_t> &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, wchar_t __c);
        std::basic_string<wchar_t> &_M_replace_safe(size_type __pos1, size_type __n1, const wchar_t *__s, size_type __n2);
        template <class _InIterator> static wchar_t *_S_construct_aux(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a, std::__false_type);
        template <class _Integer> static wchar_t *_S_construct_aux(_Integer __beg, _Integer __end, const std::allocator<wchar_t> &__a, std::__true_type);
        static wchar_t *_S_construct_aux_2(size_type __req, wchar_t __c, const std::allocator<wchar_t> &__a);
        template <class _InIterator> static wchar_t *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a);
        template <class _InIterator> static wchar_t *_S_construct(_InIterator __beg, _InIterator __end, const std::allocator<wchar_t> &__a, std::input_iterator_tag);
        template <class _FwdIterator> static wchar_t *_S_construct(_FwdIterator __beg, _FwdIterator __end, const std::allocator<wchar_t> &__a, std::forward_iterator_tag);
        static wchar_t *_S_construct(size_type __req, wchar_t __c, const std::allocator<wchar_t> &__a);
    public:
    public:
        size_type copy(wchar_t *__s, size_type __n, size_type __pos) const;
        void swap(std::basic_string<wchar_t> &__s);
        const wchar_t *c_str() const;
        const wchar_t *data() const;
        allocator_type get_allocator() const;
        size_type find(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find(const wchar_t *__s, size_type __pos) const;
        size_type find(wchar_t __c, size_type __pos) const;
        size_type rfind(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type rfind(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type rfind(const wchar_t *__s, size_type __pos) const;
        size_type rfind(wchar_t __c, size_type __pos) const;
        size_type find_first_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_first_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_first_of(const wchar_t *__s, size_type __pos) const;
        size_type find_first_of(wchar_t __c, size_type __pos) const;
        size_type find_last_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_last_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_last_of(const wchar_t *__s, size_type __pos) const;
        size_type find_last_of(wchar_t __c, size_type __pos) const;
        size_type find_first_not_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_first_not_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_first_not_of(const wchar_t *__s, size_type __pos) const;
        size_type find_first_not_of(wchar_t __c, size_type __pos) const;
        size_type find_last_not_of(const std::basic_string<wchar_t> &__str, size_type __pos) const;
        size_type find_last_not_of(const wchar_t *__s, size_type __pos, size_type __n) const;
        size_type find_last_not_of(const wchar_t *__s, size_type __pos) const;
        size_type find_last_not_of(wchar_t __c, size_type __pos) const;
        std::basic_string<wchar_t> substr(size_type __pos, size_type __n) const;
        int compare(const std::basic_string<wchar_t> &__str) const;
        int compare(size_type __pos, size_type __n, const std::basic_string<wchar_t> &__str) const;
        int compare(size_type __pos1, size_type __n1, const std::basic_string<wchar_t> &__str, size_type __pos2, size_type __n2) const;
        int compare(const wchar_t *__s) const;
        int compare(size_type __pos, size_type __n1, const wchar_t *__s) const;
        int compare(size_type __pos, size_type __n1, const wchar_t *__s, size_type __n2) const;
    };
}
namespace std {
    enum _Rb_tree_color {
        _S_red = (ImplicitCastExpr 0xa88ffc8 </usr/include/c++/4.6/bits/stl_tree.h:88:34> 'unsigned int' <IntegralCast>
  (CXXBoolLiteralExpr 0xa88ff30 <col:34> '_Bool' false))
,
        _S_black = (ImplicitCastExpr 0xa88ffd8 </usr/include/c++/4.6/bits/stl_tree.h:88:52> 'unsigned int' <IntegralCast>
  (CXXBoolLiteralExpr 0xa88ff78 <col:52> '_Bool' true))

    };
    struct _Rb_tree_node_base {
        struct _Rb_tree_node_base;
        typedef std::_Rb_tree_node_base *_Base_ptr;
        typedef const std::_Rb_tree_node_base *_Const_Base_ptr;
        std::_Rb_tree_color _M_color;
        _Base_ptr _M_parent;
        _Base_ptr _M_left;
        _Base_ptr _M_right;
        static _Base_ptr _S_minimum(_Base_ptr __x) (CompoundStmt 0xa890830 </usr/include/c++/4.6/bits/stl_tree.h:102:5, line:105:5>
  (WhileStmt 0xa8907e0 <line:103:7, col:44>
    <<<NULL>>>
    (BinaryOperator 0xa890740 <col:14, col:30> '_Bool' '!='
      (ImplicitCastExpr 0xa890720 <col:14, col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa8906e4 <col:14, col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_left 0xa890270
          (ImplicitCastExpr 0xa8906d8 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
            (DeclRefExpr 0xa8906c0 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8902f0 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))
      (ImplicitCastExpr 0xa890730 <col:30> '_Base_ptr':'struct std::_Rb_tree_node_base *' <NullToPointer>
        (IntegerLiteral 0xa890708 <col:30> 'int' 0)))
    (BinaryOperator 0xa8907c8 <col:33, col:44> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
      (DeclRefExpr 0xa890758 <col:33> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8902f0 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *')
      (ImplicitCastExpr 0xa8907b8 <col:39, col:44> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa890794 <col:39, col:44> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_left 0xa890270
          (ImplicitCastExpr 0xa890788 <col:39> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
            (DeclRefExpr 0xa890770 <col:39> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8902f0 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))))
  (ReturnStmt 0xa890820 <line:104:7, col:14>
    (ImplicitCastExpr 0xa890810 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
      (DeclRefExpr 0xa8907f4 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8902f0 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))


        static _Const_Base_ptr _S_minimum(_Const_Base_ptr __x) (CompoundStmt 0xa8909c8 </usr/include/c++/4.6/bits/stl_tree.h:109:5, line:112:5>
  (WhileStmt 0xa890978 <line:110:7, col:44>
    <<<NULL>>>
    (BinaryOperator 0xa8908c8 <col:14, col:30> '_Bool' '!='
      (ImplicitCastExpr 0xa8908a8 <col:14, col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa89086c <col:14, col:19> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_left 0xa890270
          (ImplicitCastExpr 0xa890860 <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
            (DeclRefExpr 0xa890848 <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890420 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))
      (ImplicitCastExpr 0xa8908b8 <col:30> '_Base_ptr':'struct std::_Rb_tree_node_base *' <NullToPointer>
        (IntegerLiteral 0xa890890 <col:30> 'int' 0)))
    (BinaryOperator 0xa890960 <col:33, col:44> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue '='
      (DeclRefExpr 0xa8908e0 <col:33> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890420 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')
      (ImplicitCastExpr 0xa890950 <col:39, col:44> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
        (ImplicitCastExpr 0xa890940 <col:39, col:44> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
          (MemberExpr 0xa89091c <col:39, col:44> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_left 0xa890270
            (ImplicitCastExpr 0xa890910 <col:39> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
              (DeclRefExpr 0xa8908f8 <col:39> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890420 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))))
  (ReturnStmt 0xa8909b8 <line:111:7, col:14>
    (ImplicitCastExpr 0xa8909a8 <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
      (DeclRefExpr 0xa89098c <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890420 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))


        static _Base_ptr _S_maximum(_Base_ptr __x) (CompoundStmt 0xa890b50 </usr/include/c++/4.6/bits/stl_tree.h:116:5, line:119:5>
  (WhileStmt 0xa890b00 <line:117:7, col:45>
    <<<NULL>>>
    (BinaryOperator 0xa890a60 <col:14, col:31> '_Bool' '!='
      (ImplicitCastExpr 0xa890a40 <col:14, col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa890a04 <col:14, col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_right 0xa8902b0
          (ImplicitCastExpr 0xa8909f8 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
            (DeclRefExpr 0xa8909e0 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890530 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))
      (ImplicitCastExpr 0xa890a50 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' <NullToPointer>
        (IntegerLiteral 0xa890a28 <col:31> 'int' 0)))
    (BinaryOperator 0xa890ae8 <col:34, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
      (DeclRefExpr 0xa890a78 <col:34> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890530 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *')
      (ImplicitCastExpr 0xa890ad8 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa890ab4 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_right 0xa8902b0
          (ImplicitCastExpr 0xa890aa8 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
            (DeclRefExpr 0xa890a90 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890530 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))))
  (ReturnStmt 0xa890b40 <line:118:7, col:14>
    (ImplicitCastExpr 0xa890b30 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
      (DeclRefExpr 0xa890b14 <col:14> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa890530 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))


        static _Const_Base_ptr _S_maximum(_Const_Base_ptr __x) (CompoundStmt 0xa890ce8 </usr/include/c++/4.6/bits/stl_tree.h:123:5, line:126:5>
  (WhileStmt 0xa890c98 <line:124:7, col:45>
    <<<NULL>>>
    (BinaryOperator 0xa890be8 <col:14, col:31> '_Bool' '!='
      (ImplicitCastExpr 0xa890bc8 <col:14, col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa890b8c <col:14, col:19> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_right 0xa8902b0
          (ImplicitCastExpr 0xa890b80 <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
            (DeclRefExpr 0xa890b68 <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8905f0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))
      (ImplicitCastExpr 0xa890bd8 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' <NullToPointer>
        (IntegerLiteral 0xa890bb0 <col:31> 'int' 0)))
    (BinaryOperator 0xa890c80 <col:34, col:45> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue '='
      (DeclRefExpr 0xa890c00 <col:34> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8905f0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')
      (ImplicitCastExpr 0xa890c70 <col:40, col:45> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
        (ImplicitCastExpr 0xa890c60 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
          (MemberExpr 0xa890c3c <col:40, col:45> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_right 0xa8902b0
            (ImplicitCastExpr 0xa890c30 <col:40> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
              (DeclRefExpr 0xa890c18 <col:40> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8905f0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))))
  (ReturnStmt 0xa890cd8 <line:125:7, col:14>
    (ImplicitCastExpr 0xa890cc8 <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
      (DeclRefExpr 0xa890cac <col:14> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8905f0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))


        inline _Rb_tree_node_base() throw();
        inline _Rb_tree_node_base(const std::_Rb_tree_node_base &) throw();
        inline void ~_Rb_tree_node_base() throw();
    };
    template <typename _Val = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct _Rb_tree_node : public std::_Rb_tree_node_base {
        struct _Rb_tree_node;
        typedef _Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *_Link_type;
        std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > _M_value_field;
    }
template <typename _Val> struct _Rb_tree_node : public std::_Rb_tree_node_base {
        struct _Rb_tree_node;
        typedef _Rb_tree_node<_Val> *_Link_type;
        _Val _M_value_field;
    };
    std::_Rb_tree_node_base *_Rb_tree_increment(std::_Rb_tree_node_base *__x) throw();
    const std::_Rb_tree_node_base *_Rb_tree_increment(const std::_Rb_tree_node_base *__x) throw();
    std::_Rb_tree_node_base *_Rb_tree_decrement(std::_Rb_tree_node_base *__x) throw();
    const std::_Rb_tree_node_base *_Rb_tree_decrement(const std::_Rb_tree_node_base *__x) throw();
    template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct _Rb_tree_iterator {
        struct _Rb_tree_iterator;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef _Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > _Self;
        typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
        typedef _Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *_Link_type;
        _Rb_tree_iterator();
        _Rb_tree_iterator(_Link_type __x) : _M_node((ImplicitCastExpr 0xa9e63b0 </usr/include/c++/4.6/bits/stl_tree.h:174:17> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
  (ImplicitCastExpr 0xa9e63a0 <col:17> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
    (DeclRefExpr 0xa9e62fc <col:17> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xaa28ac0 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
) (CompoundStmt 0xa892630 </usr/include/c++/4.6/bits/stl_tree.h:174:22, col:24>)


        reference operator*() const (CompoundStmt 0xa9e6c90 </usr/include/c++/4.6/bits/stl_tree.h:178:7, col:66>
  (ReturnStmt 0xa9e6c80 <col:9, col:50>
    (MemberExpr 0xa9e6c5c <col:16, col:50> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ->_M_value_field 0xa9dc1a0
      (CXXStaticCastExpr 0xa9e6c40 <col:16, col:47> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
        (ImplicitCastExpr 0xa9e6c30 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
          (MemberExpr 0xa9e6c10 <col:40> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xaa29790
            (CXXThisExpr 0xa9e6b78 <col:40> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))))))


        pointer operator->() const (CompoundStmt 0xaa40d90 </usr/include/c++/4.6/bits/stl_tree.h:182:7, line:183:33>
  (ReturnStmt 0xaa40d80 <line:182:9, line:183:30>
    (CallExpr 0xaa40d60 <line:182:16, line:183:30> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'
      (ImplicitCastExpr 0xaa40d50 <line:182:16, col:21> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(*)(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa40d28 <col:16, col:21> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' lvalue Function 0xa9dd590 '__addressof' 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' (FunctionTemplate 0xa606990 '__addressof')))
      (MemberExpr 0xaa40cdc <col:33, line:183:16> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ->_M_value_field 0xa9dc1a0
        (CXXStaticCastExpr 0xaa40cc0 <line:182:33, line:183:13> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
          (ImplicitCastExpr 0xaa40cb0 <col:6> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
            (MemberExpr 0xaa40c90 <col:6> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xaa29790
              (CXXThisExpr 0xaa40bf8 <col:6> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))))))


        _Self &operator++() (CompoundStmt 0xaa40b18 </usr/include/c++/4.6/bits/stl_tree.h:187:7, line:190:7>
  (BinaryOperator 0xaa40ac8 <line:188:2, col:38> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xaa40960 <col:2> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xaa29790
      (CXXThisExpr 0xaa408c8 <col:2> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))
    (CallExpr 0xaa40a98 <col:12, col:38> 'struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xaa40a88 <col:12> 'struct std::_Rb_tree_node_base *(*)(struct std::_Rb_tree_node_base *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa40a70 <col:12> 'struct std::_Rb_tree_node_base *(struct std::_Rb_tree_node_base *) throw()' lvalue Function 0xa8911e0 '_Rb_tree_increment' 'struct std::_Rb_tree_node_base *(struct std::_Rb_tree_node_base *) throw()'))
      (ImplicitCastExpr 0xaa40ab8 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa40a50 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xaa29790
          (CXXThisExpr 0xaa409b8 <col:31> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))))
  (ReturnStmt 0xaa40b08 <line:189:2, col:10>
    (UnaryOperator 0xaa40af0 <col:9, col:10> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue prefix '*'
      (CXXThisExpr 0xaa40ae0 <col:10> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))


        _Self operator++(int);
        _Self &operator--() (CompoundStmt 0xaa3f0e8 </usr/include/c++/4.6/bits/stl_tree.h:202:7, line:205:7>
  (BinaryOperator 0xaa3f098 <line:203:2, col:38> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xaa3ef10 <col:2> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xaa29790
      (CXXThisExpr 0xaa3ee80 <col:2> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))
    (CallExpr 0xaa3f068 <col:12, col:38> 'struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xaa3f058 <col:12> 'struct std::_Rb_tree_node_base *(*)(struct std::_Rb_tree_node_base *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa3f020 <col:12> 'struct std::_Rb_tree_node_base *(struct std::_Rb_tree_node_base *) throw()' lvalue Function 0xa891440 '_Rb_tree_decrement' 'struct std::_Rb_tree_node_base *(struct std::_Rb_tree_node_base *) throw()'))
      (ImplicitCastExpr 0xaa3f088 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa3f000 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xaa29790
          (CXXThisExpr 0xaa3ef68 <col:31> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))))
  (ReturnStmt 0xaa3f0d8 <line:204:2, col:10>
    (UnaryOperator 0xaa3f0c0 <col:9, col:10> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue prefix '*'
      (CXXThisExpr 0xaa3f0b0 <col:10> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))


        _Self operator--(int);
        bool operator==(const _Self &__x) const (CompoundStmt 0xa9e6570 </usr/include/c++/4.6/bits/stl_tree.h:217:7, col:40>
  (ReturnStmt 0xa9e6560 <col:9, col:31>
    (BinaryOperator 0xa9e6548 <col:16, col:31> '_Bool' '=='
      (ImplicitCastExpr 0xa9e6528 <col:16> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa9e64d0 <col:16> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xaa29790
          (CXXThisExpr 0xa9e6440 <col:16> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))
      (ImplicitCastExpr 0xa9e6538 <col:27, col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa9e6508 <col:27, col:31> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ._M_node 0xaa29790
          (DeclRefExpr 0xa9e64f0 <col:27> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xaa29530 '__x' 'const _Self &'))))))


        bool operator!=(const _Self &__x) const (CompoundStmt 0xaa408b0 </usr/include/c++/4.6/bits/stl_tree.h:221:7, col:40>
  (ReturnStmt 0xaa408a0 <col:9, col:31>
    (BinaryOperator 0xaa40888 <col:16, col:31> '_Bool' '!='
      (ImplicitCastExpr 0xaa40868 <col:16> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa40810 <col:16> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xaa29790
          (CXXThisExpr 0xaa40778 <col:16> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))
      (ImplicitCastExpr 0xaa40878 <col:27, col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa40848 <col:27, col:31> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ._M_node 0xaa29790
          (DeclRefExpr 0xaa40830 <col:27> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xaa296d0 '__x' 'const _Self &'))))))


        _Base_ptr _M_node;
        inline _Rb_tree_iterator(const std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw() : _M_node((ImplicitCastExpr 0xaa29908 </usr/include/c++/4.6/bits/stl_tree.h:156:12> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
  (MemberExpr 0xaa298e4 <col:12> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ._M_node 0xaa29790
    (DeclRefExpr 0xaa298cc <col:12> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xaa29870 '' 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &')))
) (CompoundStmt 0xaa29938 </usr/include/c++/4.6/bits/stl_tree.h:156:12>)


        inline std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &operator=(const std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw() (CompoundStmt 0xa9e1c28 </usr/include/c++/4.6/bits/stl_tree.h:156:12>
  (BinaryOperator 0xa9e1be8 <col:12> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xa9e1bb8 <col:12> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xaa29790
      (CXXThisExpr 0xa9e1b88 <col:12> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))
    (ImplicitCastExpr 0xa9e1bd8 <col:12> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
      (MemberExpr 0xa9e1b98 <col:12> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ._M_node 0xaa29790
        (DeclRefExpr 0xa9e1b6c <col:12> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9e1b30 '' 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &'))))
  (ReturnStmt 0xa9e1c18 <col:12>
    (UnaryOperator 0xa9e1c00 <col:12> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue prefix '*'
      (CXXThisExpr 0xa9e1b88 <col:12> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))


    }
template <typename _Tp> struct _Rb_tree_iterator {
        struct _Rb_tree_iterator;
        typedef _Tp value_type;
        typedef _Tp &reference;
        typedef _Tp *pointer;
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef _Rb_tree_iterator<_Tp> _Self;
        typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
        typedef _Rb_tree_node<_Tp> *_Link_type;
        _Rb_tree_iterator<_Tp>() : _M_node() (CompoundStmt 0xa8925c0 </usr/include/c++/4.6/bits/stl_tree.h:170:19, col:21>)


        _Rb_tree_iterator<_Tp>(_Link_type __x) : _M_node((DeclRefExpr 0xa8925d0 </usr/include/c++/4.6/bits/stl_tree.h:174:17> '_Link_type':'_Rb_tree_node<_Tp> *' lvalue ParmVar 0xa891d30 '__x' '_Link_type':'_Rb_tree_node<_Tp> *')
) (CompoundStmt 0xa892630 </usr/include/c++/4.6/bits/stl_tree.h:174:22, col:24>)


        reference operator*() const (CompoundStmt 0xa892710 </usr/include/c++/4.6/bits/stl_tree.h:178:7, col:66>
  (ReturnStmt 0xa892700 <col:9, col:50>
    (CXXDependentScopeMemberExpr 0xa8926c8 <col:16, col:50> '<dependent type>' lvalue
      (CXXStaticCastExpr 0xa8926b0 <col:16, col:47> '_Link_type':'_Rb_tree_node<_Tp> *' static_cast<_Link_type> <Dependent>
        (MemberExpr 0xa892684 <col:40> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa892550
          (CXXThisExpr 0xa892658 <col:40> 'const _Rb_tree_iterator<_Tp> *' this))))))


        pointer operator->() const (CompoundStmt 0xa892838 </usr/include/c++/4.6/bits/stl_tree.h:182:7, line:183:33>
  (ReturnStmt 0xa892828 <line:182:9, line:183:30>
    (CallExpr 0xa892808 <line:182:16, line:183:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa892748 <line:182:16, col:21> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (CXXDependentScopeMemberExpr 0xa8927d0 <col:33, line:183:16> '<dependent type>' lvalue
        (CXXStaticCastExpr 0xa8927b8 <line:182:33, line:183:13> '_Link_type':'_Rb_tree_node<_Tp> *' static_cast<_Link_type> <Dependent>
          (MemberExpr 0xa892790 <col:6> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa892550
            (CXXThisExpr 0xa892780 <col:6> 'const _Rb_tree_iterator<_Tp> *' this)))))))


        _Self &operator++() (CompoundStmt 0xa892958 </usr/include/c++/4.6/bits/stl_tree.h:187:7, line:190:7>
  (BinaryOperator 0xa892908 <line:188:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa892860 <col:2> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
      (CXXThisExpr 0xa892850 <col:2> '_Rb_tree_iterator<_Tp> *' this))
    (CallExpr 0xa8928e8 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa892880 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891320 0xa8911e0)
      (MemberExpr 0xa8928c8 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
        (CXXThisExpr 0xa8928b8 <col:31> '_Rb_tree_iterator<_Tp> *' this))))
  (ReturnStmt 0xa892948 <line:189:2, col:10>
    (UnaryOperator 0xa892930 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa892920 <col:10> '_Rb_tree_iterator<_Tp> *' this))))


        _Self operator++(int) (CompoundStmt 0xa892ae8 </usr/include/c++/4.6/bits/stl_tree.h:194:7, line:198:7>
  (DeclStmt 0xa8929e0 <line:195:2, col:21>
    0xa892980 "_Self __tmp =
      (UnaryOperator 0xa8929c8 <col:16, col:17> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa8929b8 <col:17> '_Rb_tree_iterator<_Tp> *' this))")
  (BinaryOperator 0xa892aa8 <line:196:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa892a00 <col:2> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
      (CXXThisExpr 0xa8929f0 <col:2> '_Rb_tree_iterator<_Tp> *' this))
    (CallExpr 0xa892a88 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa892a20 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891320 0xa8911e0)
      (MemberExpr 0xa892a68 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
        (CXXThisExpr 0xa892a58 <col:31> '_Rb_tree_iterator<_Tp> *' this))))
  (ReturnStmt 0xa892ad8 <line:197:2, col:9>
    (DeclRefExpr 0xa892ac0 <col:9> '_Self':'_Rb_tree_iterator<_Tp>' lvalue Var 0xa892980 '__tmp' '_Self':'_Rb_tree_iterator<_Tp>')))


        _Self &operator--() (CompoundStmt 0xa892c10 </usr/include/c++/4.6/bits/stl_tree.h:202:7, line:205:7>
  (BinaryOperator 0xa892bc0 <line:203:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa892b18 <col:2> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
      (CXXThisExpr 0xa892b08 <col:2> '_Rb_tree_iterator<_Tp> *' this))
    (CallExpr 0xa892ba0 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa892b38 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891560 0xa891440)
      (MemberExpr 0xa892b80 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
        (CXXThisExpr 0xa892b70 <col:31> '_Rb_tree_iterator<_Tp> *' this))))
  (ReturnStmt 0xa892c00 <line:204:2, col:10>
    (UnaryOperator 0xa892be8 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa892bd8 <col:10> '_Rb_tree_iterator<_Tp> *' this))))


        _Self operator--(int) (CompoundStmt 0xa892d98 </usr/include/c++/4.6/bits/stl_tree.h:209:7, line:213:7>
  (DeclStmt 0xa892c90 <line:210:2, col:21>
    0xa892c30 "_Self __tmp =
      (UnaryOperator 0xa892c78 <col:16, col:17> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa892c68 <col:17> '_Rb_tree_iterator<_Tp> *' this))")
  (BinaryOperator 0xa892d58 <line:211:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa892cb0 <col:2> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
      (CXXThisExpr 0xa892ca0 <col:2> '_Rb_tree_iterator<_Tp> *' this))
    (CallExpr 0xa892d38 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa892cd0 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891560 0xa891440)
      (MemberExpr 0xa892d18 <col:31> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa892550
        (CXXThisExpr 0xa892d08 <col:31> '_Rb_tree_iterator<_Tp> *' this))))
  (ReturnStmt 0xa892d88 <line:212:2, col:9>
    (DeclRefExpr 0xa892d70 <col:9> '_Self':'_Rb_tree_iterator<_Tp>' lvalue Var 0xa892c30 '__tmp' '_Self':'_Rb_tree_iterator<_Tp>')))


        bool operator==(const _Self &__x) const (CompoundStmt 0xa892ed0 </usr/include/c++/4.6/bits/stl_tree.h:217:7, col:40>
  (ReturnStmt 0xa892ec0 <col:9, col:31>
    (CXXOperatorCallExpr 0xa892e98 <col:16, col:31> '<dependent type>'
      (UnresolvedLookupExpr 0xa892e38 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (MemberExpr 0xa892dc8 <col:16> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa892550
        (CXXThisExpr 0xa892db8 <col:16> 'const _Rb_tree_iterator<_Tp> *' this))
      (CXXDependentScopeMemberExpr 0xa892e00 <col:27, col:31> '<dependent type>' lvalue
        (DeclRefExpr 0xa892de8 <col:27> 'const _Self':'const _Rb_tree_iterator<_Tp>' lvalue ParmVar 0xa892350 '__x' 'const _Self &')))))


        bool operator!=(const _Self &__x) const (CompoundStmt 0xa892ff8 </usr/include/c++/4.6/bits/stl_tree.h:221:7, col:40>
  (ReturnStmt 0xa892fe8 <col:9, col:31>
    (CXXOperatorCallExpr 0xa892fc0 <col:16, col:31> '<dependent type>'
      (UnresolvedLookupExpr 0xa892f68 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (MemberExpr 0xa892ef8 <col:16> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa892550
        (CXXThisExpr 0xa892ee8 <col:16> 'const _Rb_tree_iterator<_Tp> *' this))
      (CXXDependentScopeMemberExpr 0xa892f30 <col:27, col:31> '<dependent type>' lvalue
        (DeclRefExpr 0xa892f18 <col:27> 'const _Self':'const _Rb_tree_iterator<_Tp>' lvalue ParmVar 0xa892470 '__x' 'const _Self &')))))


        _Base_ptr _M_node;
    };
    template <typename _Tp = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >> struct _Rb_tree_const_iterator {
        struct _Rb_tree_const_iterator;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > &reference;
        typedef const std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > *pointer;
        typedef _Rb_tree_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > iterator;
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef _Rb_tree_const_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > _Self;
        typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
        typedef const _Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *_Link_type;
        _Rb_tree_const_iterator();
        _Rb_tree_const_iterator(_Link_type __x);
        _Rb_tree_const_iterator(const iterator &__it) : _M_node((ImplicitCastExpr 0xaa3fd60 </usr/include/c++/4.6/bits/stl_tree.h:250:17, col:22> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
  (ImplicitCastExpr 0xaa3fd50 <col:17, col:22> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
    (MemberExpr 0xaa3fcac <col:17, col:22> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ._M_node 0xaa29790
      (DeclRefExpr 0xaa3fc94 <col:17> 'const iterator':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9eea40 '__it' 'const iterator &'))))
) (CompoundStmt 0xa8943a0 </usr/include/c++/4.6/bits/stl_tree.h:250:31, col:33>)


        iterator _M_const_cast() const (CompoundStmt 0xaa3fc80 </usr/include/c++/4.6/bits/stl_tree.h:254:7, line:255:58>
  (ReturnStmt 0xaa3fc70 <line:254:9, line:255:55>
    (CXXConstructExpr 0xaa3fc48 <line:254:16, line:255:55> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa3fc38 <line:254:16, line:255:55> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xaa3fc28 <line:254:16, line:255:55> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXFunctionalCastExpr 0xaa3fc10 <line:254:16, line:255:55> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xaa3fbe8 <line:254:16, line:255:54> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (_Link_type)'
              (CXXStaticCastExpr 0xaa3fbc8 <line:254:25, line:255:54> 'typename iterator::_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<typename iterator::_Link_type> <BaseToDerived (_Rb_tree_node_base)>
                (CXXConstCastExpr 0xaa3fbb0 <col:5, col:53> 'typename iterator::_Base_ptr':'struct std::_Rb_tree_node_base *' const_cast<typename iterator::_Base_ptr> <NoOp>
                  (ImplicitCastExpr 0xaa3fba0 <col:46> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                    (MemberExpr 0xaa3fb80 <col:46> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa9ef850
                      (CXXThisExpr 0xaa3fae8 <col:46> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))))))))))


        reference operator*() const;
        pointer operator->() const;
        _Self &operator++() (CompoundStmt 0xaa3f8a8 </usr/include/c++/4.6/bits/stl_tree.h:268:7, line:271:7>
  (BinaryOperator 0xaa3f858 <line:269:2, col:38> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xaa3f6f0 <col:2> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa9ef850
      (CXXThisExpr 0xaa3f658 <col:2> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))
    (CallExpr 0xaa3f828 <col:12, col:38> 'const struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xaa3f818 <col:12> 'const struct std::_Rb_tree_node_base *(*)(const struct std::_Rb_tree_node_base *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa3f800 <col:12> 'const struct std::_Rb_tree_node_base *(const struct std::_Rb_tree_node_base *) throw()' lvalue Function 0xa891320 '_Rb_tree_increment' 'const struct std::_Rb_tree_node_base *(const struct std::_Rb_tree_node_base *) throw()'))
      (ImplicitCastExpr 0xaa3f848 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa3f7e0 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa9ef850
          (CXXThisExpr 0xaa3f748 <col:31> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))))
  (ReturnStmt 0xaa3f898 <line:270:2, col:10>
    (UnaryOperator 0xaa3f880 <col:9, col:10> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue prefix '*'
      (CXXThisExpr 0xaa3f870 <col:10> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))


        _Self operator++(int);
        _Self &operator--() (CompoundStmt 0xaa3f408 </usr/include/c++/4.6/bits/stl_tree.h:283:7, line:286:7>
  (BinaryOperator 0xaa3f3b8 <line:284:2, col:38> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xaa3f230 <col:2> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa9ef850
      (CXXThisExpr 0xaa3f198 <col:2> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))
    (CallExpr 0xaa3f388 <col:12, col:38> 'const struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xaa3f378 <col:12> 'const struct std::_Rb_tree_node_base *(*)(const struct std::_Rb_tree_node_base *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa3f340 <col:12> 'const struct std::_Rb_tree_node_base *(const struct std::_Rb_tree_node_base *) throw()' lvalue Function 0xa891560 '_Rb_tree_decrement' 'const struct std::_Rb_tree_node_base *(const struct std::_Rb_tree_node_base *) throw()'))
      (ImplicitCastExpr 0xaa3f3a8 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa3f320 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa9ef850
          (CXXThisExpr 0xaa3f288 <col:31> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this)))))
  (ReturnStmt 0xaa3f3f8 <line:285:2, col:10>
    (UnaryOperator 0xaa3f3e0 <col:9, col:10> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue prefix '*'
      (CXXThisExpr 0xaa3f3d0 <col:10> 'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' this))))


        _Self operator--(int);
        bool operator==(const _Self &__x) const;
        bool operator!=(const _Self &__x) const;
        _Base_ptr _M_node;
        inline _Rb_tree_const_iterator(const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > &) throw() : _M_node((ImplicitCastExpr 0xa9ef9f0 </usr/include/c++/4.6/bits/stl_tree.h:227:12> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
  (MemberExpr 0xa9ef9cc <col:12> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ._M_node 0xa9ef850
    (DeclRefExpr 0xa9ef9b4 <col:12> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa9ef930 '' 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &')))
) (CompoundStmt 0xa9efa20 </usr/include/c++/4.6/bits/stl_tree.h:227:12>)


    }
template <typename _Tp> struct _Rb_tree_const_iterator {
        struct _Rb_tree_const_iterator;
        typedef _Tp value_type;
        typedef const _Tp &reference;
        typedef const _Tp *pointer;
        typedef _Rb_tree_iterator<_Tp> iterator;
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef _Rb_tree_const_iterator<_Tp> _Self;
        typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
        typedef const _Rb_tree_node<_Tp> *_Link_type;
        _Rb_tree_const_iterator<_Tp>() : _M_node() (CompoundStmt 0xa894290 </usr/include/c++/4.6/bits/stl_tree.h:243:19, col:21>)


        _Rb_tree_const_iterator<_Tp>(_Link_type __x) : _M_node((DeclRefExpr 0xa8942a0 </usr/include/c++/4.6/bits/stl_tree.h:247:17> '_Link_type':'const _Rb_tree_node<_Tp> *' lvalue ParmVar 0xa893800 '__x' '_Link_type':'const _Rb_tree_node<_Tp> *')
) (CompoundStmt 0xa894300 </usr/include/c++/4.6/bits/stl_tree.h:247:22, col:24>)


        _Rb_tree_const_iterator<_Tp>(const iterator &__it) : _M_node((CXXDependentScopeMemberExpr 0xa894328 </usr/include/c++/4.6/bits/stl_tree.h:250:17, col:22> '<dependent type>' lvalue
  (DeclRefExpr 0xa894310 <col:17> 'const iterator':'const _Rb_tree_iterator<_Tp>' lvalue ParmVar 0xa893970 '__it' 'const iterator &'))
) (CompoundStmt 0xa8943a0 </usr/include/c++/4.6/bits/stl_tree.h:250:31, col:33>)


        iterator _M_const_cast() const (CompoundStmt 0xa894588 </usr/include/c++/4.6/bits/stl_tree.h:254:7, line:255:58>
  (ReturnStmt 0xa894578 <line:254:9, line:255:55>
    (CXXUnresolvedConstructExpr 0xa894558 <line:254:16, line:255:55> 'iterator':'_Rb_tree_iterator<_Tp>'
      (CXXStaticCastExpr 0xa894540 <line:254:25, line:255:54> 'typename iterator::_Link_type' static_cast<typename iterator::_Link_type> <Dependent>
        (CXXConstCastExpr 0xa894510 <col:5, col:53> 'typename iterator::_Base_ptr' const_cast<typename iterator::_Base_ptr> <NoOp>
          (MemberExpr 0xa8944d4 <col:46> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa894220
            (CXXThisExpr 0xa8944a8 <col:46> 'const _Rb_tree_const_iterator<_Tp> *' this)))))))


        reference operator*() const (CompoundStmt 0xa894638 </usr/include/c++/4.6/bits/stl_tree.h:259:7, col:66>
  (ReturnStmt 0xa894628 <col:9, col:50>
    (CXXDependentScopeMemberExpr 0xa8945f0 <col:16, col:50> '<dependent type>' lvalue
      (CXXStaticCastExpr 0xa8945d8 <col:16, col:47> '_Link_type':'const _Rb_tree_node<_Tp> *' static_cast<_Link_type> <Dependent>
        (MemberExpr 0xa8945b0 <col:40> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa894220
          (CXXThisExpr 0xa8945a0 <col:40> 'const _Rb_tree_const_iterator<_Tp> *' this))))))


        pointer operator->() const (CompoundStmt 0xa894758 </usr/include/c++/4.6/bits/stl_tree.h:263:7, line:264:33>
  (ReturnStmt 0xa894748 <line:263:9, line:264:30>
    (CallExpr 0xa894728 <line:263:16, line:264:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa894668 <line:263:16, col:21> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (CXXDependentScopeMemberExpr 0xa8946f0 <col:33, line:264:16> '<dependent type>' lvalue
        (CXXStaticCastExpr 0xa8946d8 <line:263:33, line:264:13> '_Link_type':'const _Rb_tree_node<_Tp> *' static_cast<_Link_type> <Dependent>
          (MemberExpr 0xa8946b0 <col:6> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa894220
            (CXXThisExpr 0xa8946a0 <col:6> 'const _Rb_tree_const_iterator<_Tp> *' this)))))))


        _Self &operator++() (CompoundStmt 0xa894878 </usr/include/c++/4.6/bits/stl_tree.h:268:7, line:271:7>
  (BinaryOperator 0xa894828 <line:269:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa894780 <col:2> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
      (CXXThisExpr 0xa894770 <col:2> '_Rb_tree_const_iterator<_Tp> *' this))
    (CallExpr 0xa894808 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa8947a0 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891320 0xa8911e0)
      (MemberExpr 0xa8947e8 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
        (CXXThisExpr 0xa8947d8 <col:31> '_Rb_tree_const_iterator<_Tp> *' this))))
  (ReturnStmt 0xa894868 <line:270:2, col:10>
    (UnaryOperator 0xa894850 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa894840 <col:10> '_Rb_tree_const_iterator<_Tp> *' this))))


        _Self operator++(int) (CompoundStmt 0xa894a08 </usr/include/c++/4.6/bits/stl_tree.h:275:7, line:279:7>
  (DeclStmt 0xa894900 <line:276:2, col:21>
    0xa8948a0 "_Self __tmp =
      (UnaryOperator 0xa8948e8 <col:16, col:17> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa8948d8 <col:17> '_Rb_tree_const_iterator<_Tp> *' this))")
  (BinaryOperator 0xa8949c8 <line:277:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa894920 <col:2> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
      (CXXThisExpr 0xa894910 <col:2> '_Rb_tree_const_iterator<_Tp> *' this))
    (CallExpr 0xa8949a8 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa894940 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891320 0xa8911e0)
      (MemberExpr 0xa894988 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
        (CXXThisExpr 0xa894978 <col:31> '_Rb_tree_const_iterator<_Tp> *' this))))
  (ReturnStmt 0xa8949f8 <line:278:2, col:9>
    (DeclRefExpr 0xa8949e0 <col:9> '_Self':'_Rb_tree_const_iterator<_Tp>' lvalue Var 0xa8948a0 '__tmp' '_Self':'_Rb_tree_const_iterator<_Tp>')))


        _Self &operator--() (CompoundStmt 0xa894b30 </usr/include/c++/4.6/bits/stl_tree.h:283:7, line:286:7>
  (BinaryOperator 0xa894ae0 <line:284:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa894a38 <col:2> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
      (CXXThisExpr 0xa894a28 <col:2> '_Rb_tree_const_iterator<_Tp> *' this))
    (CallExpr 0xa894ac0 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa894a58 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891560 0xa891440)
      (MemberExpr 0xa894aa0 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
        (CXXThisExpr 0xa894a90 <col:31> '_Rb_tree_const_iterator<_Tp> *' this))))
  (ReturnStmt 0xa894b20 <line:285:2, col:10>
    (UnaryOperator 0xa894b08 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa894af8 <col:10> '_Rb_tree_const_iterator<_Tp> *' this))))


        _Self operator--(int) (CompoundStmt 0xa894cb8 </usr/include/c++/4.6/bits/stl_tree.h:290:7, line:294:7>
  (DeclStmt 0xa894bb0 <line:291:2, col:21>
    0xa894b50 "_Self __tmp =
      (UnaryOperator 0xa894b98 <col:16, col:17> '<dependent type>' prefix '*'
        (CXXThisExpr 0xa894b88 <col:17> '_Rb_tree_const_iterator<_Tp> *' this))")
  (BinaryOperator 0xa894c78 <line:292:2, col:38> '<dependent type>' '='
    (MemberExpr 0xa894bd0 <col:2> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
      (CXXThisExpr 0xa894bc0 <col:2> '_Rb_tree_const_iterator<_Tp> *' this))
    (CallExpr 0xa894c58 <col:12, col:38> '<dependent type>'
      (UnresolvedLookupExpr 0xa894bf0 <col:12> '<overloaded function type>' lvalue (ADL) = '1' 0xa891560 0xa891440)
      (MemberExpr 0xa894c38 <col:31> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ->_M_node 0xa894220
        (CXXThisExpr 0xa894c28 <col:31> '_Rb_tree_const_iterator<_Tp> *' this))))
  (ReturnStmt 0xa894ca8 <line:293:2, col:9>
    (DeclRefExpr 0xa894c90 <col:9> '_Self':'_Rb_tree_const_iterator<_Tp>' lvalue Var 0xa894b50 '__tmp' '_Self':'_Rb_tree_const_iterator<_Tp>')))


        bool operator==(const _Self &__x) const (CompoundStmt 0xa894df0 </usr/include/c++/4.6/bits/stl_tree.h:298:7, col:40>
  (ReturnStmt 0xa894de0 <col:9, col:31>
    (CXXOperatorCallExpr 0xa894db8 <col:16, col:31> '<dependent type>'
      (UnresolvedLookupExpr 0xa894d58 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (MemberExpr 0xa894ce8 <col:16> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa894220
        (CXXThisExpr 0xa894cd8 <col:16> 'const _Rb_tree_const_iterator<_Tp> *' this))
      (CXXDependentScopeMemberExpr 0xa894d20 <col:27, col:31> '<dependent type>' lvalue
        (DeclRefExpr 0xa894d08 <col:27> 'const _Self':'const _Rb_tree_const_iterator<_Tp>' lvalue ParmVar 0xa894020 '__x' 'const _Self &')))))


        bool operator!=(const _Self &__x) const (CompoundStmt 0xa894f18 </usr/include/c++/4.6/bits/stl_tree.h:302:7, col:40>
  (ReturnStmt 0xa894f08 <col:9, col:31>
    (CXXOperatorCallExpr 0xa894ee0 <col:16, col:31> '<dependent type>'
      (UnresolvedLookupExpr 0xa894e88 <col:24, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (MemberExpr 0xa894e18 <col:16> 'const _Base_ptr':'const struct std::_Rb_tree_node_base *const' lvalue ->_M_node 0xa894220
        (CXXThisExpr 0xa894e08 <col:16> 'const _Rb_tree_const_iterator<_Tp> *' this))
      (CXXDependentScopeMemberExpr 0xa894e50 <col:27, col:31> '<dependent type>' lvalue
        (DeclRefExpr 0xa894e38 <col:27> 'const _Self':'const _Rb_tree_const_iterator<_Tp>' lvalue ParmVar 0xa894140 '__x' 'const _Self &')))))


        _Base_ptr _M_node;
    };
    template <typename _Val> inline bool operator==(const _Rb_tree_iterator<_Val> &__x, const _Rb_tree_const_iterator<_Val> &__y) (CompoundStmt 0xa8953e8 </usr/include/c++/4.6/bits/stl_tree.h:311:5, col:42>
  (ReturnStmt 0xa8953d8 <col:7, col:33>
    (CXXOperatorCallExpr 0xa8953b0 <col:14, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa895350 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CXXDependentScopeMemberExpr 0xa8952c8 <col:14, col:18> '<dependent type>' lvalue
        (DeclRefExpr 0xa8952b0 <col:14> 'const _Rb_tree_iterator<_Val>' lvalue ParmVar 0xa895050 '__x' 'const _Rb_tree_iterator<_Val> &'))
      (CXXDependentScopeMemberExpr 0xa895318 <col:29, col:33> '<dependent type>' lvalue
        (DeclRefExpr 0xa8952fc <col:29> 'const _Rb_tree_const_iterator<_Val>' lvalue ParmVar 0xa895170 '__y' 'const _Rb_tree_const_iterator<_Val> &')))))

;
    template <typename _Val> inline bool operator!=(const _Rb_tree_iterator<_Val> &__x, const _Rb_tree_const_iterator<_Val> &__y) (CompoundStmt 0xa895868 </usr/include/c++/4.6/bits/stl_tree.h:317:5, col:42>
  (ReturnStmt 0xa895858 <col:7, col:33>
    (CXXOperatorCallExpr 0xa895830 <col:14, col:33> '<dependent type>'
      (UnresolvedLookupExpr 0xa8957d0 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (CXXDependentScopeMemberExpr 0xa895748 <col:14, col:18> '<dependent type>' lvalue
        (DeclRefExpr 0xa895730 <col:14> 'const _Rb_tree_iterator<_Val>' lvalue ParmVar 0xa895520 '__x' 'const _Rb_tree_iterator<_Val> &'))
      (CXXDependentScopeMemberExpr 0xa895798 <col:29, col:33> '<dependent type>' lvalue
        (DeclRefExpr 0xa89577c <col:29> 'const _Rb_tree_const_iterator<_Val>' lvalue ParmVar 0xa895620 '__y' 'const _Rb_tree_const_iterator<_Val> &')))))

;
    void _Rb_tree_insert_and_rebalance(const bool __insert_left, std::_Rb_tree_node_base *__x, std::_Rb_tree_node_base *__p, std::_Rb_tree_node_base &__header) throw();
    std::_Rb_tree_node_base *_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *const __z, std::_Rb_tree_node_base &__header) throw();
    template <typename _Key = std::basic_string<char>, typename _Val = std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, typename _KeyOfValue = std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, typename _Compare = std::less<std::basic_string<char> >, typename _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class _Rb_tree {
        class _Rb_tree;
        typedef typename allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >::rebind<_Rb_tree_node<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > > >::other _Node_allocator;
    protected:
    protected:
        typedef std::_Rb_tree_node_base *_Base_ptr;
        typedef const std::_Rb_tree_node_base *_Const_Base_ptr;
    public:
    public:
        typedef std::basic_string<char> key_type;
        typedef std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > value_type;
        typedef value_type *pointer;
        typedef const value_type *const_pointer;
        typedef value_type &reference;
        typedef const value_type &const_reference;
        typedef _Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *_Link_type;
        typedef const _Rb_tree_node<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > *_Const_Link_type;
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > allocator_type;
        _Node_allocator &_M_get_Node_allocator();
        const _Node_allocator &_M_get_Node_allocator() const (CompoundStmt 0xa9dea90 </usr/include/c++/4.6/bits/stl_tree.h:360:7, col:70>
  (ReturnStmt 0xa9dea80 <col:9, col:67>
    (UnaryOperator 0xa9dea68 <col:16, col:67> 'const _Node_allocator':'const class std::allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue prefix '*'
      (CXXStaticCastExpr 0xa9dea50 <col:17, col:67> 'const _Node_allocator *' static_cast<const _Node_allocator *> <NoOp>
        (ImplicitCastExpr 0xa9dea40 <col:53, col:60> 'const _Node_allocator *' <DerivedToBase (allocator)>
          (UnaryOperator 0xa9dea28 <col:53, col:60> 'const _Rb_tree_impl<struct std::less<class std::basic_string<char> > > *' prefix '&'
            (MemberExpr 0xa9de9c8 <col:54, col:60> 'const _Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'const struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
              (CXXThisExpr 0xa9de9b8 <col:54> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))))


        allocator_type get_allocator() const (CompoundStmt 0xa9de7b0 </usr/include/c++/4.6/bits/stl_tree.h:364:7, col:57>
  (ReturnStmt 0xa9de7a0 <col:9, col:54>
    (ExprWithCleanups 0xa9de780 <col:16, col:54> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
      (CXXTemporary 0xa9de4d0)
      (CXXConstructExpr 0xa9de758 <col:16, col:54> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
        (MaterializeTemporaryExpr 0xa9de748 <col:16, col:54> 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xa9de738 <col:16, col:54> 'const class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
            (CXXFunctionalCastExpr 0xa9de4e8 <col:16, col:54> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to allocator_type <ConstructorConversion>
              (CXXBindTemporaryExpr 0xa9de4d8 <col:16, col:53> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' (CXXTemporary 0xa9de4d0)
                (CXXConstructExpr 0xa9de4a0 <col:16, col:53> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > &) throw()'
                  (CXXMemberCallExpr 0xa9de230 <col:31, col:53> 'const _Node_allocator':'const class std::allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue
                    (MemberExpr 0xa9de210 <col:31> '<bound member function type>' ->_M_get_Node_allocator 0xa9c4c50
                      (CXXThisExpr 0xa9de200 <col:31> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))))))))


    protected:
    protected:
        _Link_type _M_get_node() (CompoundStmt 0xaa38b40 </usr/include/c++/4.6/bits/stl_tree.h:369:7, col:54>
  (ReturnStmt 0xaa38b30 <col:9, col:51>
    (CXXMemberCallExpr 0xaa38aa8 <col:16, col:51> 'pointer':'struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
      (MemberExpr 0xaa38a7c <col:16, col:41> '<bound member function type>' .allocate 0xa9b7db0
        (ImplicitCastExpr 0xaa38ad8 <col:16> 'class __gnu_cxx::new_allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue <UncheckedDerivedToBase (new_allocator)>
          (ImplicitCastExpr 0xaa38ac8 <col:16> '_Node_allocator':'class std::allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue <UncheckedDerivedToBase (allocator)>
            (MemberExpr 0xaa388b0 <col:16> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
              (CXXThisExpr 0xaa386f8 <col:16> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
      (ImplicitCastExpr 0xaa38af8 <col:50> 'size_type':'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa8a1530 <col:50> 'int' 1))
      (CXXDefaultArgExpr 0xaa38b18 <<invalid sloc>> 'const void *'))))


        void _M_put_node(_Link_type __p) (CompoundStmt 0xa9df488 </usr/include/c++/4.6/bits/stl_tree.h:373:7, col:54>
  (CXXMemberCallExpr 0xa9df400 <col:9, col:51> 'void'
    (MemberExpr 0xa9df3b8 <col:9, col:34> '<bound member function type>' .deallocate 0xa9b7f90
      (ImplicitCastExpr 0xa9df458 <col:9> 'class __gnu_cxx::new_allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue <UncheckedDerivedToBase (new_allocator)>
        (ImplicitCastExpr 0xa9df448 <col:9> '_Node_allocator':'class std::allocator<struct std::_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue <UncheckedDerivedToBase (allocator)>
          (MemberExpr 0xa9df1e0 <col:9> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
            (CXXThisExpr 0xa9df028 <col:9> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
    (ImplicitCastExpr 0xa9df468 <col:45> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
      (DeclRefExpr 0xa9df3e4 <col:45> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9c5390 '__p' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))
    (ImplicitCastExpr 0xa9df478 <col:50> 'size_type':'unsigned int' <IntegralCast>
      (IntegerLiteral 0xa8a1618 <col:50> 'int' 1))))


        _Link_type _M_create_node(const value_type &__x) (CompoundStmt 0xaa386d8 </usr/include/c++/4.6/bits/stl_tree.h:378:7, line:389:7>
  (DeclStmt 0xaa38060 <line:379:2, col:34>
    0xaa37e30 "_Link_type __tmp =
      (CXXMemberCallExpr 0xaa38040 <col:21, col:33> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
        (MemberExpr 0xaa38020 <col:21> '<bound member function type>' ->_M_get_node 0xa9c5170
          (CXXThisExpr 0xaa37e68 <col:21> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))")
  (IfStmt 0xaa38430 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_tree.h:382:56>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa8a4ce8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xaa38418 </usr/include/c++/4.6/bits/stl_tree.h:381:4, line:382:56>
      (ExprWithCleanups 0xaa383f8 <line:381:6, line:382:53> 'void'
        (CXXTemporary 0xaa38270)
        (CXXMemberCallExpr 0xaa383c0 <line:381:6, line:382:53> 'void'
          (MemberExpr 0xaa38288 <line:381:6, col:22> '<bound member function type>' .construct 0xa9c1590
            (ImplicitCastExpr 0xaa383e8 <col:6, col:20> 'class __gnu_cxx::new_allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <UncheckedDerivedToBase (new_allocator)>
              (CXXBindTemporaryExpr 0xaa38278 <col:6, col:20> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' (CXXTemporary 0xaa38270)
                (CXXMemberCallExpr 0xaa38240 <col:6, col:20> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                  (MemberExpr 0xaa38220 <col:6> '<bound member function type>' ->get_allocator 0xa9c4ec0
                    (ImplicitCastExpr 0xaa38260 <col:6> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' <NoOp>
                      (CXXThisExpr 0xaa38070 <col:6> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))
          (CallExpr 0xaa38388 <line:382:9, col:47> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'
            (ImplicitCastExpr 0xaa38378 <col:9, col:14> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(*)(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa38350 <col:9, col:14> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' lvalue Function 0xa9dd590 '__addressof' 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' (FunctionTemplate 0xa606990 '__addressof')))
            (MemberExpr 0xaa38304 <col:26, col:33> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ->_M_value_field 0xa9dc1a0
              (ImplicitCastExpr 0xaa382f8 <col:26> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xaa382dc <col:26> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa37e30 '__tmp' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))
          (DeclRefExpr 0xaa383a8 <col:50> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9c57f0 '__x' 'const value_type &'))))
    <<<NULL>>>)
  (IfStmt 0xaa38680 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_tree.h:387:4>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa8a4eb8 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xaa38668 </usr/include/c++/4.6/bits/stl_tree.h:384:4, line:387:4>
      (CXXMemberCallExpr 0xaa38638 <line:385:6, col:23> 'void'
        (MemberExpr 0xaa38600 <col:6> '<bound member function type>' ->_M_put_node 0xa9c5430
          (CXXThisExpr 0xaa38450 <col:6> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
        (ImplicitCastExpr 0xaa38658 <col:18> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
          (DeclRefExpr 0xaa38620 <col:18> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa37e30 '__tmp' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
      (NullStmt 0xa8a4f30 <line:386:29>))
    <<<NULL>>>)
  (ReturnStmt 0xaa386c8 <line:388:2, col:9>
    (ImplicitCastExpr 0xaa386b8 <col:9> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
      (DeclRefExpr 0xaa3869c <col:9> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa37e30 '__tmp' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))


        void _M_destroy_node(_Link_type __p) (CompoundStmt 0xa9dd958 </usr/include/c++/4.6/bits/stl_tree.h:393:7, line:396:7>
  (ExprWithCleanups 0xa9dd718 <line:394:2, col:63> 'void'
    (CXXTemporary 0xa9dd3a0)
    (CXXMemberCallExpr 0xa9dd6c8 <col:2, col:63> 'void'
      (MemberExpr 0xa9dd3b8 <col:2, col:18> '<bound member function type>' .destroy 0xa9c1730
        (ImplicitCastExpr 0xa9dd708 <col:2, col:16> 'class __gnu_cxx::new_allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <UncheckedDerivedToBase (new_allocator)>
          (CXXBindTemporaryExpr 0xa9dd3a8 <col:2, col:16> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' (CXXTemporary 0xa9dd3a0)
            (CXXMemberCallExpr 0xa9dd350 <col:2, col:16> 'allocator_type':'class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
              (MemberExpr 0xa9dd330 <col:2> '<bound member function type>' ->get_allocator 0xa9c4ec0
                (ImplicitCastExpr 0xa9dd388 <col:2> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' <NoOp>
                  (CXXThisExpr 0xa9dd178 <col:2> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))
      (CallExpr 0xa9dd6a8 <col:26, col:62> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'
        (ImplicitCastExpr 0xa9dd698 <col:26, col:31> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(*)(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9dd638 <col:26, col:31> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' lvalue Function 0xa9dd590 '__addressof' 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *(struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &)' (FunctionTemplate 0xa606990 '__addressof')))
        (MemberExpr 0xa9dd434 <col:43, col:48> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ->_M_value_field 0xa9dc1a0
          (ImplicitCastExpr 0xa9dd428 <col:43> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
            (DeclRefExpr 0xa9dd40c <col:43> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9c5ab0 '__p' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))))
  (CXXMemberCallExpr 0xa9dd928 <line:395:2, col:17> 'void'
    (MemberExpr 0xa9dd8f0 <col:2> '<bound member function type>' ->_M_put_node 0xa9c5430
      (CXXThisExpr 0xa9dd738 <col:2> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
    (ImplicitCastExpr 0xa9dd948 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
      (DeclRefExpr 0xa9dd910 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9c5ab0 '__p' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))


        _Link_type _M_clone_node(_Const_Link_type __x);
    protected:
    protected:
        template <typename _Key_compare = std::less<std::basic_string<char> >, bool _Is_pod_comparator = false> struct _Rb_tree_impl : public _Node_allocator {
            struct _Rb_tree_impl;
            std::less<std::basic_string<char> > _M_key_compare;
            std::_Rb_tree_node_base _M_header;
            size_type _M_node_count;
            _Rb_tree_impl() : _Node_allocator(), _M_key_compare(), _M_header(), _M_node_count((ImplicitCastExpr 0xa9da868 </usr/include/c++/4.6/bits/stl_tree.h:445:20> 'size_type':'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa8a56e8 <col:20> 'int' 0))
) (CompoundStmt 0xa9dab98 </usr/include/c++/4.6/bits/stl_tree.h:446:4, col:23>
  (CXXMemberCallExpr 0xa9dab78 <col:6, col:20> 'void'
    (MemberExpr 0xa9dab58 <col:6> '<bound member function type>' ->_M_initialize 0xa9b9a60
      (CXXThisExpr 0xa9da8c8 <col:6> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this))))


            _Rb_tree_impl(const std::less<std::basic_string<char> > &__comp, const _Node_allocator &__a);
        private:
        private:
            void _M_initialize() (CompoundStmt 0xa9daea8 </usr/include/c++/4.6/bits/stl_tree.h:456:4, line:461:4>
  (BinaryOperator 0xa9dacb8 <line:457:6, col:33> 'enum std::_Rb_tree_color' lvalue '='
    (MemberExpr 0xa9dac60 <col:6, col:22> 'enum std::_Rb_tree_color' lvalue ._M_color 0xa8901e0
      (MemberExpr 0xa9dac40 <col:6, col:12> 'struct std::_Rb_tree_node_base' lvalue ->_M_header 0xa9b90b0
        (CXXThisExpr 0xa9dac30 <col:6> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this)))
    (DeclRefExpr 0xa8a5a2c <col:33> 'enum std::_Rb_tree_color' EnumConstant 0xa88ff40 '_S_red' 'enum std::_Rb_tree_color'))
  (BinaryOperator 0xa9dad30 <line:458:6, col:34> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xa9dad00 <col:6, col:22> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_parent 0xa890230
      (MemberExpr 0xa9dace0 <col:6, col:12> 'struct std::_Rb_tree_node_base' lvalue ->_M_header 0xa9b90b0
        (CXXThisExpr 0xa9dacd0 <col:6> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this)))
    (ImplicitCastExpr 0xa9dad20 <col:34> '_Base_ptr':'struct std::_Rb_tree_node_base *' <NullToPointer>
      (IntegerLiteral 0xa8a5ae0 <col:34> 'int' 0)))
  (BinaryOperator 0xa9dade0 <line:459:6, col:39> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xa9dad78 <col:6, col:22> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_left 0xa890270
      (MemberExpr 0xa9dad58 <col:6, col:12> 'struct std::_Rb_tree_node_base' lvalue ->_M_header 0xa9b90b0
        (CXXThisExpr 0xa9dad48 <col:6> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this)))
    (UnaryOperator 0xa9dadc8 <col:32, col:39> 'struct std::_Rb_tree_node_base *' prefix '&'
      (MemberExpr 0xa9dada8 <col:33, col:39> 'struct std::_Rb_tree_node_base' lvalue ->_M_header 0xa9b90b0
        (CXXThisExpr 0xa9dad98 <col:33> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this))))
  (BinaryOperator 0xa9dae90 <line:460:6, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue '='
    (MemberExpr 0xa9dae28 <col:6, col:22> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_right 0xa8902b0
      (MemberExpr 0xa9dae08 <col:6, col:12> 'struct std::_Rb_tree_node_base' lvalue ->_M_header 0xa9b90b0
        (CXXThisExpr 0xa9dadf8 <col:6> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this)))
    (UnaryOperator 0xa9dae78 <col:33, col:40> 'struct std::_Rb_tree_node_base *' prefix '&'
      (MemberExpr 0xa9dae58 <col:34, col:40> 'struct std::_Rb_tree_node_base' lvalue ->_M_header 0xa9b90b0
        (CXXThisExpr 0xa9dae48 <col:34> 'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false> *' this)))))


            inline _Rb_tree_impl(const std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > >::_Rb_tree_impl<std::less<std::basic_string<char> >, false> &) throw();
            inline void ~_Rb_tree_impl() throw() (CompoundStmt 0xa9d9d80 </usr/include/c++/4.6/bits/stl_tree.h:437:16>)


        }
template <typename _Key_compare, bool _Is_pod_comparator = (UnaryTypeTraitExpr 0xa897260 </usr/include/c++/4.6/bits/stl_tree.h:436:35, col:56> '_Bool')
> struct _Rb_tree_impl;
        _Rb_tree_impl<std::less<std::basic_string<char> > > _M_impl;
    protected:
    protected:
        _Base_ptr &_M_root();
        _Const_Base_ptr _M_root() const;
        _Base_ptr &_M_leftmost() (CompoundStmt 0xaa3f180 </usr/include/c++/4.6/bits/stl_tree.h:477:7, col:49>
  (ReturnStmt 0xaa3f170 <col:9, col:40>
    (MemberExpr 0xaa3f150 <col:16, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_left 0xa890270
      (MemberExpr 0xaa3f130 <col:16, col:30> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
        (MemberExpr 0xaa3f110 <col:16, col:22> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
          (CXXThisExpr 0xaa3f100 <col:16> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))


        _Const_Base_ptr _M_leftmost() const;
        _Base_ptr &_M_rightmost() (CompoundStmt 0xaa357b8 </usr/include/c++/4.6/bits/stl_tree.h:485:7, col:50>
  (ReturnStmt 0xaa357a8 <col:9, col:40>
    (MemberExpr 0xaa35788 <col:16, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_right 0xa8902b0
      (MemberExpr 0xaa35768 <col:16, col:30> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
        (MemberExpr 0xaa35748 <col:16, col:22> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
          (CXXThisExpr 0xaa35738 <col:16> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))


        _Const_Base_ptr _M_rightmost() const;
        _Link_type _M_begin() (CompoundStmt 0xa9df7d8 </usr/include/c++/4.6/bits/stl_tree.h:493:7, col:76>
  (ReturnStmt 0xa9df7c8 <col:9, col:73>
    (CXXStaticCastExpr 0xa9df7a8 <col:16, col:73> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
      (ImplicitCastExpr 0xa9df798 <col:40, col:64> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa9df778 <col:40, col:64> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_parent 0xa890230
          (MemberExpr 0xa9df758 <col:40, col:54> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
            (MemberExpr 0xa9df738 <col:40, col:46> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
              (CXXThisExpr 0xa9df728 <col:40> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))))


        _Const_Link_type _M_begin() const;
        _Link_type _M_end() (CompoundStmt 0xa9e3900 </usr/include/c++/4.6/bits/stl_tree.h:504:7, col:67>
  (ReturnStmt 0xa9e38f0 <col:9, col:64>
    (CXXStaticCastExpr 0xa9e38d0 <col:16, col:64> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
      (UnaryOperator 0xa9e38b8 <col:40, col:55> 'struct std::_Rb_tree_node_base *' prefix '&'
        (MemberExpr 0xa9e3898 <col:41, col:55> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
          (MemberExpr 0xa9e3878 <col:41, col:47> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
            (CXXThisExpr 0xa9e3868 <col:41> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))


        _Const_Link_type _M_end() const;
        static const_reference _S_value(_Const_Link_type __x) (CompoundStmt 0xa9e6288 </usr/include/c++/4.6/bits/stl_tree.h:512:7, col:37>
  (ReturnStmt 0xa9e6278 <col:9, col:21>
    (MemberExpr 0xa9e6254 <col:16, col:21> 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ->_M_value_field 0xa9dc1a0
      (ImplicitCastExpr 0xa9e6248 <col:16> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
        (DeclRefExpr 0xa9e622c <col:16> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9baa30 '__x' '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))


        static const std::basic_string<char> &_S_key(_Const_Link_type __x) (CompoundStmt 0xa9e6218 </usr/include/c++/4.6/bits/stl_tree.h:516:7, col:46>
  (ReturnStmt 0xa9e6208 <col:9, col:43>
    (CXXOperatorCallExpr 0xa9e61b8 <col:16, col:43> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa9e61a8 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xa9e6158 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
      (ImplicitCastExpr 0xa9e61f8 <col:16, col:28> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
        (CXXTemporaryObjectExpr 0xa9e5b60 <col:16, col:28> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
      (CallExpr 0xa9e6128 <col:30, col:42> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xa9e6118 <col:30> 'const_reference (*)(_Const_Link_type)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e60c0 <col:30> 'const_reference (_Const_Link_type)' lvalue CXXMethod 0xa9baad0 '_S_value' 'const_reference (_Const_Link_type)'))
        (ImplicitCastExpr 0xa9e6148 <col:39> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
          (DeclRefExpr 0xa9e60a8 <col:39> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9bad10 '__x' '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))))


        static _Link_type _S_left(_Base_ptr __x) (CompoundStmt 0xa9dd160 </usr/include/c++/4.6/bits/stl_tree.h:520:7, col:55>
  (ReturnStmt 0xa9dd150 <col:9, col:52>
    (CXXStaticCastExpr 0xa9dd130 <col:16, col:52> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
      (ImplicitCastExpr 0xa9dd120 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa9dd100 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_left 0xa890270
          (DeclRefExpr 0xa9dd0e8 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bafc0 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))))


        static _Const_Link_type _S_left(_Const_Base_ptr __x);
        static _Link_type _S_right(_Base_ptr __x) (CompoundStmt 0xa9dcf20 </usr/include/c++/4.6/bits/stl_tree.h:528:7, col:56>
  (ReturnStmt 0xa9dcf10 <col:9, col:53>
    (CXXStaticCastExpr 0xa9dcef0 <col:16, col:53> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
      (ImplicitCastExpr 0xa9dcee0 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa9dcec0 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_right 0xa8902b0
          (DeclRefExpr 0xa9dcea8 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bb520 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))))


        static _Const_Link_type _S_right(_Const_Base_ptr __x) (CompoundStmt 0xaa3f640 </usr/include/c++/4.6/bits/stl_tree.h:532:7, col:62>
  (ReturnStmt 0xaa3f630 <col:9, col:59>
    (CXXStaticCastExpr 0xaa3f610 <col:16, col:59> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Const_Link_type> <BaseToDerived (_Rb_tree_node_base)>
      (ImplicitCastExpr 0xaa3f600 <col:46, col:51> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xaa3f5e0 <col:46, col:51> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_right 0xa8902b0
          (DeclRefExpr 0xaa3f5c8 <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bb780 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))))


        static const_reference _S_value(_Const_Base_ptr __x) (CompoundStmt 0xaa36070 </usr/include/c++/4.6/bits/stl_tree.h:536:7, col:68>
  (ReturnStmt 0xaa36060 <col:9, col:52>
    (MemberExpr 0xaa3603c <col:16, col:52> 'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ->_M_value_field 0xa9dc1a0
      (CXXStaticCastExpr 0xaa36020 <col:16, col:49> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Const_Link_type> <BaseToDerived (_Rb_tree_node_base)>
        (ImplicitCastExpr 0xaa36010 <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
          (DeclRefExpr 0xaa35ff8 <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bb9e0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))))


        static const std::basic_string<char> &_S_key(_Const_Base_ptr __x) (CompoundStmt 0xaa35e38 </usr/include/c++/4.6/bits/stl_tree.h:540:7, col:46>
  (ReturnStmt 0xaa35e28 <col:9, col:43>
    (CXXOperatorCallExpr 0xaa35df0 <col:16, col:43> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xaa35de0 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa35dc8 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
      (ImplicitCastExpr 0xaa35e18 <col:16, col:28> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
        (CXXTemporaryObjectExpr 0xaa357d8 <col:16, col:28> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
      (CallExpr 0xaa35d98 <col:30, col:42> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (ImplicitCastExpr 0xaa35d88 <col:30> 'const_reference (*)(_Const_Base_ptr)' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa35d30 <col:30> 'const_reference (_Const_Base_ptr)' lvalue CXXMethod 0xa9bba80 '_S_value' 'const_reference (_Const_Base_ptr)'))
        (ImplicitCastExpr 0xaa35db8 <col:39> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
          (DeclRefExpr 0xaa35d18 <col:39> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bbaf0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))))


        static _Base_ptr _S_minimum(_Base_ptr __x);
        static _Const_Base_ptr _S_minimum(_Const_Base_ptr __x);
        static _Base_ptr _S_maximum(_Base_ptr __x);
        static _Const_Base_ptr _S_maximum(_Const_Base_ptr __x);
    public:
    public:
        typedef _Rb_tree_iterator<value_type> iterator;
        typedef _Rb_tree_const_iterator<value_type> const_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    private:
    private:
        iterator _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, const value_type &__v) (CompoundStmt 0xaa37c58 </usr/include/c++/4.6/bits/stl_tree.h:966:5, line:978:5>
  (DeclStmt 0xaa371e8 <line:967:7, line:969:26>
    0xaa36090 "bool __insert_left =
      (ParenExpr 0xaa371d0 <line:967:28, line:969:25> '_Bool'
        (BinaryOperator 0xaa371b8 <line:967:29, line:969:24> '_Bool' '||'
          (BinaryOperator 0xaa36908 <line:967:29, col:55> '_Bool' '||'
            (BinaryOperator 0xaa36100 <col:29, col:36> '_Bool' '!='
              (ImplicitCastExpr 0xaa360e0 <col:29> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                (DeclRefExpr 0xaa360c4 <col:29> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bccc0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))
              (ImplicitCastExpr 0xaa360f0 <col:36> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NullToPointer>
                (IntegerLiteral 0xa8b0f80 <col:36> 'int' 0)))
            (BinaryOperator 0xaa368f0 <col:41, col:55> '_Bool' '=='
              (ImplicitCastExpr 0xaa368d0 <col:41> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                (DeclRefExpr 0xaa3617c <col:41> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bcd00 '__p' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))
              (ImplicitCastExpr 0xaa368e0 <col:48, col:55> 'const struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
                (CXXMemberCallExpr 0xaa368b0 <col:48, col:55> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
                  (MemberExpr 0xaa36890 <col:48> '<bound member function type>' ->_M_end 0xa9ba430
                    (CXXThisExpr 0xaa36880 <col:48> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))
          (CXXOperatorCallExpr 0xaa37180 <line:968:11, line:969:24> '_Bool'
            (ImplicitCastExpr 0xaa37170 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa37158 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
            (ImplicitCastExpr 0xaa371a8 <line:968:11, col:19> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
              (MemberExpr 0xaa36af0 <col:11, col:19> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
                (MemberExpr 0xaa36ad0 <col:11> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                  (CXXThisExpr 0xaa36920 <col:11> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
            (CXXOperatorCallExpr 0xaa36b98 <col:34, col:51> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
              (ImplicitCastExpr 0xaa36b88 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
                (DeclRefExpr 0xaa36b70 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
              (ImplicitCastExpr 0xaa36bc0 <col:34, col:46> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                (CXXTemporaryObjectExpr 0xaa36b30 <col:34, col:46> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
              (DeclRefExpr 0xaa36b54 <col:48> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9bcef0 '__v' 'const value_type &'))
            (CallExpr 0xaa37128 <line:969:13, col:23> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
              (ImplicitCastExpr 0xaa37118 <col:13> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
                (DeclRefExpr 0xaa37100 <col:13> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
              (ImplicitCastExpr 0xaa37148 <col:20> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                (DeclRefExpr 0xaa370e8 <col:20> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bcd00 '__p' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))))")
  (DeclStmt 0xaa37610 <line:971:7, col:67>
    0xaa373b0 "_Link_type __z =
      (CXXMemberCallExpr 0xaa375f0 <col:24, col:66> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
        (MemberExpr 0xaa375a0 <col:24> '<bound member function type>' ->_M_create_node 0xa9c5890
          (CXXThisExpr 0xaa373e8 <col:24> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
        (ParenExpr 0xaa375d8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
          (DeclRefExpr 0xaa375c0 </usr/include/c++/4.6/bits/stl_tree.h:971:62> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9bcef0 '__v' 'const value_type &')))")
  (CallExpr 0xaa37778 <line:973:7, line:975:32> 'void'
    (ImplicitCastExpr 0xaa37768 <line:973:7> 'void (*)(const _Bool, struct std::_Rb_tree_node_base *, struct std::_Rb_tree_node_base *, struct std::_Rb_tree_node_base &) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xaa37718 <col:7> 'void (const _Bool, struct std::_Rb_tree_node_base *, struct std::_Rb_tree_node_base *, struct std::_Rb_tree_node_base &) throw()' lvalue Function 0xa895a60 '_Rb_tree_insert_and_rebalance' 'void (const _Bool, struct std::_Rb_tree_node_base *, struct std::_Rb_tree_node_base *, struct std::_Rb_tree_node_base &) throw()'))
    (ImplicitCastExpr 0xaa377a8 <col:37> '_Bool' <LValueToRValue>
      (DeclRefExpr 0xaa37654 <col:37> '_Bool' lvalue Var 0xaa36090 '__insert_left' '_Bool'))
    (ImplicitCastExpr 0xaa377c8 <col:52> 'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
      (ImplicitCastExpr 0xaa377b8 <col:52> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
        (DeclRefExpr 0xaa3766c <col:52> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa373b0 '__z' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
    (CXXConstCastExpr 0xaa376b0 <line:974:9, col:34> '_Base_ptr':'struct std::_Rb_tree_node_base *' const_cast<_Base_ptr> <NoOp>
      (ImplicitCastExpr 0xaa376a0 <col:31> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (DeclRefExpr 0xaa37684 <col:31> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa9bcd00 '__p' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))
    (MemberExpr 0xaa376f8 <line:975:9, col:23> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
      (MemberExpr 0xaa376d8 <col:9, col:15> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
        (CXXThisExpr 0xaa376c8 <col:9> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
  (UnaryOperator 0xaa379d0 <line:976:7, col:17> 'size_type':'unsigned int' lvalue prefix '++'
    (MemberExpr 0xaa379b0 <col:9, col:17> 'size_type':'unsigned int' lvalue ._M_node_count 0xa9b90e0
      (MemberExpr 0xaa37990 <col:9> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
        (CXXThisExpr 0xaa377d8 <col:9> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
  (ReturnStmt 0xaa37c48 <line:977:7, col:26>
    (CXXConstructExpr 0xaa37c20 <col:14, col:26> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa37c10 <col:14, col:26> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xaa37c00 <col:14, col:26> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXFunctionalCastExpr 0xaa37be8 <col:14, col:26> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xaa37bc0 <col:14, col:23> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (_Link_type)'
              (ImplicitCastExpr 0xaa37bb0 <col:23> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xaa37b98 <col:23> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa373b0 '__z' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))))))


        iterator _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type &__v);
        iterator _M_insert_equal_lower(const value_type &__x);
        _Link_type _M_copy(_Const_Link_type __x, _Link_type __p);
        void _M_erase(_Link_type __x) (CompoundStmt 0xa9dcce8 </usr/include/c++/4.6/bits/stl_tree.h:1070:5, line:1079:5>
  (WhileStmt 0xa9dccd0 <line:1072:7, line:1078:2>
    <<<NULL>>>
    (BinaryOperator 0xa9db8c0 <line:1072:14, col:21> '_Bool' '!='
      (ImplicitCastExpr 0xa9db8a0 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
        (DeclRefExpr 0xa9db888 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9be1a0 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))
      (ImplicitCastExpr 0xa9db8b0 <col:21> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NullToPointer>
        (IntegerLiteral 0xa8b53a0 <col:21> 'int' 0)))
    (CompoundStmt 0xa9dccb0 <line:1073:2, line:1078:2>
      (CXXMemberCallExpr 0xa9dc278 <line:1074:4, col:26> 'void'
        (MemberExpr 0xa9dba90 <col:4> '<bound member function type>' ->_M_erase 0xa9be1f0
          (CXXThisExpr 0xa9db8d8 <col:4> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
        (CallExpr 0xa9dc238 <col:13, col:25> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
          (ImplicitCastExpr 0xa9dc228 <col:13> '_Link_type (*)(_Base_ptr)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9dc1d0 <col:13> '_Link_type (_Base_ptr)' lvalue CXXMethod 0xa9bb570 '_S_right' '_Link_type (_Base_ptr)'))
          (ImplicitCastExpr 0xa9dc268 <col:22> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
            (ImplicitCastExpr 0xa9dc258 <col:22> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
              (DeclRefExpr 0xa9dbfc8 <col:22> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9be1a0 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))
      (DeclStmt 0xa9dca28 <line:1075:4, col:33>
        0xa9dc450 "_Link_type __y =
          (CallExpr 0xa9dc9e8 <col:21, col:32> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
            (ImplicitCastExpr 0xa9dc9d8 <col:21> '_Link_type (*)(_Base_ptr)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9dc9c0 <col:21> '_Link_type (_Base_ptr)' lvalue CXXMethod 0xa9bb060 '_S_left' '_Link_type (_Base_ptr)'))
            (ImplicitCastExpr 0xa9dca18 <col:29> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
              (ImplicitCastExpr 0xa9dca08 <col:29> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xa9dc9a8 <col:29> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9be1a0 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))")
      (CXXMemberCallExpr 0xa9dcc28 <line:1076:4, col:23> 'void'
        (MemberExpr 0xa9dcbf0 <col:4> '<bound member function type>' ->_M_destroy_node 0xa9c5b00
          (CXXThisExpr 0xa9dca38 <col:4> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
        (ImplicitCastExpr 0xa9dcc48 <col:20> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
          (DeclRefExpr 0xa9dcc10 <col:20> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9be1a0 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
      (BinaryOperator 0xa9dcc98 <line:1077:4, col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue '='
        (DeclRefExpr 0xa9dcc54 <col:4> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa9be1a0 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')
        (ImplicitCastExpr 0xa9dcc88 <col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
          (DeclRefExpr 0xa9dcc6c <col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xa9dc450 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))))


        iterator _M_lower_bound(_Link_type __x, _Link_type __y, const std::basic_string<char> &__k) (CompoundStmt 0xa9e50d8 </usr/include/c++/4.6/bits/stl_tree.h:1088:5, line:1095:5>
  (WhileStmt 0xa9e4e50 <line:1089:7, line:1093:22>
    <<<NULL>>>
    (BinaryOperator 0xa9e39b0 <line:1089:14, col:21> '_Bool' '!='
      (ImplicitCastExpr 0xa9e3990 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
        (DeclRefExpr 0xa9e3978 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))
      (ImplicitCastExpr 0xa9e39a0 <col:21> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NullToPointer>
        (IntegerLiteral 0xa8b61d8 <col:21> 'int' 0)))
    (IfStmt 0xa9e4e30 <line:1090:2, line:1093:22>
      <<<NULL>>>
      (UnaryOperator 0xa9e4210 <line:1090:6, col:46> '_Bool' prefix '!'
        (CXXOperatorCallExpr 0xa9e41d8 <col:7, col:46> '_Bool'
          (ImplicitCastExpr 0xa9e41c8 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9e41b0 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
          (ImplicitCastExpr 0xa9e4200 <col:7, col:15> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
            (MemberExpr 0xa9e3ba0 <col:7, col:15> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
              (MemberExpr 0xa9e3b80 <col:7> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                (CXXThisExpr 0xa9e39c8 <col:7> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
          (CallExpr 0xa9e4158 <col:30, col:40> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xa9e4148 <col:30> 'const class std::basic_string<char> &(*)(_Const_Link_type)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9e40f0 <col:30> 'const class std::basic_string<char> &(_Const_Link_type)' lvalue CXXMethod 0xa9badb0 '_S_key' 'const class std::basic_string<char> &(_Const_Link_type)'))
            (ImplicitCastExpr 0xa9e4188 <col:37> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NoOp>
              (ImplicitCastExpr 0xa9e4178 <col:37> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xa9e40d8 <col:37> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))
          (DeclRefExpr 0xa9e4194 <col:43> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ParmVar 0xa981680 '__k' 'const class std::basic_string<char> &')))
      (BinaryOperator 0xa9e4850 <line:1091:4, col:32> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ','
        (BinaryOperator 0xa9e4268 <col:4, col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue '='
          (DeclRefExpr 0xa9e4224 <col:4> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981630 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')
          (ImplicitCastExpr 0xa9e4258 <col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
            (DeclRefExpr 0xa9e423c <col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
        (BinaryOperator 0xa9e4838 <col:15, col:32> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue '='
          (DeclRefExpr 0xa9e4280 <col:15> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')
          (CallExpr 0xa9e47f8 <col:21, col:32> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
            (ImplicitCastExpr 0xa9e47e8 <col:21> '_Link_type (*)(_Base_ptr)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9e47d0 <col:21> '_Link_type (_Base_ptr)' lvalue CXXMethod 0xa9bb060 '_S_left' '_Link_type (_Base_ptr)'))
            (ImplicitCastExpr 0xa9e4828 <col:29> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
              (ImplicitCastExpr 0xa9e4818 <col:29> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xa9e47b8 <col:29> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))))
      (BinaryOperator 0xa9e4e18 <line:1093:4, col:22> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue '='
        (DeclRefExpr 0xa9e4868 <col:4> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')
        (CallExpr 0xa9e4dd8 <col:10, col:22> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
          (ImplicitCastExpr 0xa9e4dc8 <col:10> '_Link_type (*)(_Base_ptr)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9e4db0 <col:10> '_Link_type (_Base_ptr)' lvalue CXXMethod 0xa9bb570 '_S_right' '_Link_type (_Base_ptr)'))
          (ImplicitCastExpr 0xa9e4e08 <col:19> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
            (ImplicitCastExpr 0xa9e4df8 <col:19> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
              (DeclRefExpr 0xa9e4d98 <col:19> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981440 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))))
  (ReturnStmt 0xa9e50c8 <line:1094:7, col:26>
    (CXXConstructExpr 0xa9e50a0 <col:14, col:26> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9e5090 <col:14, col:26> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xa9e5080 <col:14, col:26> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXFunctionalCastExpr 0xa9e5068 <col:14, col:26> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xa9e5040 <col:14, col:23> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (_Link_type)'
              (ImplicitCastExpr 0xa9e5030 <col:23> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xa9e5018 <col:23> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue ParmVar 0xa981630 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))))))


        const_iterator _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y, const std::basic_string<char> &__k) const;
        iterator _M_upper_bound(_Link_type __x, _Link_type __y, const std::basic_string<char> &__k);
        const_iterator _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y, const std::basic_string<char> &__k) const;
    public:
    public:
        _Rb_tree() : _M_impl() (CompoundStmt 0xa8a6f70 </usr/include/c++/4.6/bits/stl_tree.h:616:18, col:20>)


        _Rb_tree(const std::less<std::basic_string<char> > &__comp, const allocator_type &__a);
        _Rb_tree(const std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__x);
        void ~_Rb_tree() (CompoundStmt 0xa9db810 </usr/include/c++/4.6/bits/stl_tree.h:639:7, col:31>
  (CXXMemberCallExpr 0xa9db7f0 <col:9, col:28> 'void'
    (MemberExpr 0xa9db0a0 <col:9> '<bound member function type>' ->_M_erase 0xa9be1f0
      (CXXThisExpr 0xa9daee8 <col:9> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
    (CXXMemberCallExpr 0xa9db7d0 <col:18, col:27> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
      (MemberExpr 0xa9db7b0 <col:18> '<bound member function type>' ->_M_begin 0xa9b9fa0
        (CXXThisExpr 0xa9db7a0 <col:18> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))


        std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &operator=(const std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__x);
        std::less<std::basic_string<char> > key_comp() const (CompoundStmt 0xa9e6ad8 </usr/include/c++/4.6/bits/stl_tree.h:647:7, col:40>
  (ReturnStmt 0xa9e6ac8 <col:9, col:24>
    (CXXConstructExpr 0xa9e6aa0 <col:16, col:24> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >''void (const struct std::less<class std::basic_string<char> > &) throw()'
      (MemberExpr 0xa9e6a80 <col:16, col:24> 'const struct std::less<class std::basic_string<char> >':'const struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
        (MemberExpr 0xa9e6a60 <col:16> 'const _Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'const struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
          (CXXThisExpr 0xa9e68b0 <col:16> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))


        iterator begin() (CompoundStmt 0xaa3ec30 </usr/include/c++/4.6/bits/stl_tree.h:651:7, line:654:7>
  (ReturnStmt 0xaa3ec20 <line:652:2, line:653:37>
    (CXXConstructExpr 0xaa3ebf8 <line:652:9, line:653:37> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa3ebe8 <line:652:9, line:653:37> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xaa3ebd8 <line:652:9, line:653:37> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXFunctionalCastExpr 0xaa3ebc0 <line:652:9, line:653:37> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xaa3eb98 <line:652:9, line:653:36> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (_Link_type)'
              (CXXStaticCastExpr 0xaa3eb78 <line:652:18, line:653:36> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
                (ImplicitCastExpr 0xaa3eb68 <col:5, col:29> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                  (MemberExpr 0xaa3eb48 <col:5, col:29> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_left 0xa890270
                    (MemberExpr 0xaa3eb28 <col:5, col:19> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
                      (MemberExpr 0xaa3eb08 <col:5, col:11> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                        (CXXThisExpr 0xaa3eaf8 <col:5> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))))))))


        const_iterator begin() const;
        iterator end() (CompoundStmt 0xaa40708 </usr/include/c++/4.6/bits/stl_tree.h:665:7, col:77>
  (ReturnStmt 0xaa406f8 <col:9, col:74>
    (CXXConstructExpr 0xaa406d0 <col:16, col:74> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa406c0 <col:16, col:74> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xaa406b0 <col:16, col:74> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXFunctionalCastExpr 0xaa40698 <col:16, col:74> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to iterator <ConstructorConversion>
            (CXXConstructExpr 0xaa40670 <col:16, col:73> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (_Link_type)'
              (CXXStaticCastExpr 0xaa40650 <col:25, col:73> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' static_cast<_Link_type> <BaseToDerived (_Rb_tree_node_base)>
                (UnaryOperator 0xaa40638 <col:49, col:64> 'struct std::_Rb_tree_node_base *' prefix '&'
                  (MemberExpr 0xaa40618 <col:50, col:64> 'struct std::_Rb_tree_node_base' lvalue ._M_header 0xa9b90b0
                    (MemberExpr 0xaa405f8 <col:50, col:56> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                      (CXXThisExpr 0xaa405e8 <col:50> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))))))))


        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
        bool empty() const;
        size_type size() const (CompoundStmt 0xaa35720 </usr/include/c++/4.6/bits/stl_tree.h:696:7, col:39>
  (ReturnStmt 0xaa35710 <col:9, col:24>
    (ImplicitCastExpr 0xaa35700 <col:16, col:24> 'size_type':'unsigned int' <LValueToRValue>
      (MemberExpr 0xaa356e0 <col:16, col:24> 'const size_type':'const unsigned int' lvalue ._M_node_count 0xa9b90e0
        (MemberExpr 0xaa356c0 <col:16> 'const _Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'const struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
          (CXXThisExpr 0xaa35508 <col:16> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))


        size_type max_size() const;
        void swap(std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > >, std::_Select1st<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__t);
        pair<iterator, bool> _M_insert_unique(const value_type &__v) (CompoundStmt 0xaa3e768 </usr/include/c++/4.6/bits/stl_tree.h:1270:5, line:1293:5>
  (DeclStmt 0xaa39db0 <line:1271:7, col:34>
    0xaa39640 "_Link_type __x =
      (CXXMemberCallExpr 0xaa39d90 <col:24, col:33> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
        (MemberExpr 0xaa39d70 <col:24> '<bound member function type>' ->_M_begin 0xa9b9fa0
          (CXXThisExpr 0xaa39d60 <col:24> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))")
  (DeclStmt 0xaa3a6e0 <line:1272:7, col:32>
    0xaa39f70 "_Link_type __y =
      (CXXMemberCallExpr 0xaa3a6c0 <col:24, col:31> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
        (MemberExpr 0xaa3a6a0 <col:24> '<bound member function type>' ->_M_end 0xa9ba430
          (CXXThisExpr 0xaa3a690 <col:24> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))")
  (DeclStmt 0xaa3a728 <line:1273:7, col:25>
    0xaa3a6f0 "bool __comp =
      (CXXBoolLiteralExpr 0xa8c05b8 <col:21> '_Bool' true)")
  (WhileStmt 0xaa3bd20 <line:1274:7, line:1279:2>
    <<<NULL>>>
    (BinaryOperator 0xaa3a7d0 <line:1274:14, col:21> '_Bool' '!='
      (ImplicitCastExpr 0xaa3a7b0 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
        (DeclRefExpr 0xaa3a798 <col:14> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))
      (ImplicitCastExpr 0xaa3a7c0 <col:21> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NullToPointer>
        (IntegerLiteral 0xa8c05f0 <col:21> 'int' 0)))
    (CompoundStmt 0xaa3bd00 <line:1275:2, line:1279:2>
      (BinaryOperator 0xaa3a828 <line:1276:4, col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue '='
        (DeclRefExpr 0xaa3a7e8 <col:4> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39f70 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')
        (ImplicitCastExpr 0xaa3a818 <col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
          (DeclRefExpr 0xaa3a800 <col:10> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
      (BinaryOperator 0xaa3b108 <line:1277:4, col:67> '_Bool' lvalue '='
        (DeclRefExpr 0xaa3a840 <col:4> '_Bool' lvalue Var 0xaa3a6f0 '__comp' '_Bool')
        (CXXOperatorCallExpr 0xaa3b0d0 <col:13, col:67> '_Bool'
          (ImplicitCastExpr 0xaa3b0c0 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa3b0a8 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
          (ImplicitCastExpr 0xaa3b0f8 <col:13, col:21> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
            (MemberExpr 0xaa3aa30 <col:13, col:21> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
              (MemberExpr 0xaa3aa10 <col:13> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                (CXXThisExpr 0xaa3a858 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
          (CXXOperatorCallExpr 0xaa3aad8 <col:36, col:53> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xaa3aac8 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa3aab0 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
            (ImplicitCastExpr 0xaa3ab00 <col:36, col:48> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
              (CXXTemporaryObjectExpr 0xaa3aa70 <col:36, col:48> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
            (DeclRefExpr 0xaa3aa94 <col:50> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9859d0 '__v' 'const value_type &'))
          (CallExpr 0xaa3b068 <col:56, col:66> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xaa3b058 <col:56> 'const class std::basic_string<char> &(*)(_Const_Link_type)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa3b040 <col:56> 'const class std::basic_string<char> &(_Const_Link_type)' lvalue CXXMethod 0xa9badb0 '_S_key' 'const class std::basic_string<char> &(_Const_Link_type)'))
            (ImplicitCastExpr 0xaa3b098 <col:63> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NoOp>
              (ImplicitCastExpr 0xaa3b088 <col:63> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xaa3b028 <col:63> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))))
      (BinaryOperator 0xaa3bce8 <line:1278:4, col:46> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue '='
        (DeclRefExpr 0xaa3b120 <col:4> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')
        (ConditionalOperator 0xaa3bcc8 <col:10, col:46> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
          (ImplicitCastExpr 0xaa3bcb8 <col:10> '_Bool' <LValueToRValue>
            (DeclRefExpr 0xaa3b138 <col:10> '_Bool' lvalue Var 0xaa3a6f0 '__comp' '_Bool'))
          (CallExpr 0xaa3b6a8 <col:19, col:30> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
            (ImplicitCastExpr 0xaa3b698 <col:19> '_Link_type (*)(_Base_ptr)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa3b680 <col:19> '_Link_type (_Base_ptr)' lvalue CXXMethod 0xa9bb060 '_S_left' '_Link_type (_Base_ptr)'))
            (ImplicitCastExpr 0xaa3b6d8 <col:27> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
              (ImplicitCastExpr 0xaa3b6c8 <col:27> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xaa3b668 <col:27> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))
          (CallExpr 0xaa3bc78 <col:34, col:46> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
            (ImplicitCastExpr 0xaa3bc68 <col:34> '_Link_type (*)(_Base_ptr)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa3bc50 <col:34> '_Link_type (_Base_ptr)' lvalue CXXMethod 0xa9bb570 '_S_right' '_Link_type (_Base_ptr)'))
            (ImplicitCastExpr 0xaa3bca8 <col:43> '_Base_ptr':'struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
              (ImplicitCastExpr 0xaa3bc98 <col:43> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                (DeclRefExpr 0xaa3bc38 <col:43> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'))))))))
  (DeclStmt 0xaa3c188 <line:1280:7, col:35>
    0xaa3bef0 "iterator __j =
      (CXXConstructExpr 0xaa3c160 <col:22, col:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
        (MaterializeTemporaryExpr 0xaa3c150 <col:22, col:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xaa3c140 <col:22, col:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
            (CXXFunctionalCastExpr 0xaa3c128 <col:22, col:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' functional cast to iterator <ConstructorConversion>
              (CXXConstructExpr 0xaa3c100 <col:22, col:31> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (_Link_type)'
                (ImplicitCastExpr 0xaa3c0f0 <col:31> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                  (DeclRefExpr 0xaa3c0d8 <col:31> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39f70 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))))))")
  (IfStmt 0xaa3d4e8 <line:1281:7, line:1288:2>
    <<<NULL>>>
    (ImplicitCastExpr 0xaa3c1b0 <line:1281:11> '_Bool' <LValueToRValue>
      (DeclRefExpr 0xaa3c198 <col:11> '_Bool' lvalue Var 0xaa3a6f0 '__comp' '_Bool'))
    (CompoundStmt 0xaa3d4d0 <line:1282:2, line:1288:2>
      (IfStmt 0xaa3d4b0 <line:1283:4, line:1287:8>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xaa3c9c8 <line:1283:8, col:21> '_Bool'
          (ImplicitCastExpr 0xaa3c9b8 <col:12, <invalid sloc>> '_Bool (*)(const _Self &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa3c9a0 <col:12, <invalid sloc>> '_Bool (const _Self &) const' lvalue CXXMethod 0xaa295d0 'operator==' '_Bool (const _Self &) const'))
          (ImplicitCastExpr 0xaa3c990 <col:8> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
            (DeclRefExpr 0xaa3c224 <col:8> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa3bef0 '__j' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))
          (MaterializeTemporaryExpr 0xaa3c980 <col:15, col:21> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
            (ImplicitCastExpr 0xaa3c970 <col:15, col:21> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
              (CXXMemberCallExpr 0xaa3c950 <col:15, col:21> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                (MemberExpr 0xaa3c930 <col:15> '<bound member function type>' ->begin 0xa984100
                  (CXXThisExpr 0xaa3c920 <col:15> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))
        (ReturnStmt 0xaa3d440 <line:1284:6, line:1285:64>
          (CXXConstructExpr 0xaa3d418 <line:1284:13, line:1285:64> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>''void (const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool> &) throw()' elidable
            (MaterializeTemporaryExpr 0xaa3d318 <line:1284:13, line:1285:64> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' lvalue
              (ImplicitCastExpr 0xaa3d308 <line:1284:13, line:1285:64> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' <NoOp>
                (CXXTemporaryObjectExpr 0xaa3d020 <line:1284:13, line:1285:64> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &, const _Bool &)'
                  (MaterializeTemporaryExpr 0xaa3d000 <col:9, col:57> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                    (ImplicitCastExpr 0xaa3cff0 <col:9, col:57> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                      (CXXMemberCallExpr 0xaa3ce50 <col:9, col:57> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                        (MemberExpr 0xaa3cdd0 <col:9> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                          (CXXThisExpr 0xaa3cc18 <col:9> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                        (ImplicitCastExpr 0xaa3ce88 <col:20> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
                          (ImplicitCastExpr 0xaa3ce78 <col:20> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                            (DeclRefExpr 0xaa3cdf0 <col:20> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
                        (ImplicitCastExpr 0xaa3cea8 <col:25> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
                          (ImplicitCastExpr 0xaa3ce98 <col:25> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                            (DeclRefExpr 0xaa3ce08 <col:25> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39f70 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
                        (ParenExpr 0xaa3ce38 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                          (DeclRefExpr 0xaa3ce20 </usr/include/c++/4.6/bits/stl_tree.h:1285:53> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9859d0 '__v' 'const value_type &')))))
                  (MaterializeTemporaryExpr 0xaa3d010 <col:60> 'const _Bool':'const _Bool' lvalue
                    (CXXBoolLiteralExpr 0xa8c0d90 <col:60> '_Bool' true)))))))
        (CXXOperatorCallExpr 0xaa3d490 <line:1287:6, col:8> '_Self':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xaa3d480 <<invalid sloc>> '_Self &(*)(void)' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa3d468 <<invalid sloc>> '_Self &(void)' lvalue CXXMethod 0xaa292b0 'operator--' '_Self &(void)'))
          (DeclRefExpr 0xaa3d450 <col:8> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa3bef0 '__j' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))
    <<<NULL>>>)
  (IfStmt 0xaa3e3d0 <line:1289:7, line:1291:60>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xaa3dd88 <line:1289:11, col:73> '_Bool'
      (ImplicitCastExpr 0xaa3dd78 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa3dd60 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
      (ImplicitCastExpr 0xaa3ddb0 <col:11, col:19> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
        (MemberExpr 0xaa3d6e0 <col:11, col:19> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
          (MemberExpr 0xaa3d6c0 <col:11> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
            (CXXThisExpr 0xaa3d508 <col:11> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
      (CallExpr 0xaa3dc78 <col:34, col:52> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
        (ImplicitCastExpr 0xaa3dc68 <col:34> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa3dc50 <col:34> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
        (ImplicitCastExpr 0xaa3dca8 <col:41, col:45> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
          (ImplicitCastExpr 0xaa3dc98 <col:41, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
            (MemberExpr 0xaa3dc30 <col:41, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ._M_node 0xaa29790
              (DeclRefExpr 0xaa3dc18 <col:41> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa3bef0 '__j' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))))
      (CXXOperatorCallExpr 0xaa3dd28 <col:55, col:72> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
        (ImplicitCastExpr 0xaa3dd18 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa3dd00 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
        (ImplicitCastExpr 0xaa3dd50 <col:55, col:67> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
          (CXXTemporaryObjectExpr 0xaa3dcc0 <col:55, col:67> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
        (DeclRefExpr 0xaa3dce4 <col:69> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9859d0 '__v' 'const value_type &')))
    (ReturnStmt 0xaa3e3c0 <line:1290:2, line:1291:60>
      (CXXConstructExpr 0xaa3e398 <line:1290:9, line:1291:60> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>''void (const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool> &) throw()' elidable
        (MaterializeTemporaryExpr 0xaa3e388 <line:1290:9, line:1291:60> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' lvalue
          (ImplicitCastExpr 0xaa3e378 <line:1290:9, line:1291:60> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' <NoOp>
            (CXXTemporaryObjectExpr 0xaa3e2b8 <line:1290:9, line:1291:60> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &, const _Bool &)'
              (MaterializeTemporaryExpr 0xaa3e298 <col:5, col:53> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                (ImplicitCastExpr 0xaa3e288 <col:5, col:53> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                  (CXXMemberCallExpr 0xaa3e220 <col:5, col:53> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                    (MemberExpr 0xaa3e1a0 <col:5> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                      (CXXThisExpr 0xaa3dfe8 <col:5> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                    (ImplicitCastExpr 0xaa3e258 <col:16> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
                      (ImplicitCastExpr 0xaa3e248 <col:16> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                        (DeclRefExpr 0xaa3e1c0 <col:16> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39640 '__x' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
                    (ImplicitCastExpr 0xaa3e278 <col:21> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
                      (ImplicitCastExpr 0xaa3e268 <col:21> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <LValueToRValue>
                        (DeclRefExpr 0xaa3e1d8 <col:21> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' lvalue Var 0xaa39f70 '__y' '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *')))
                    (ParenExpr 0xaa3e208 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                      (DeclRefExpr 0xaa3e1f0 </usr/include/c++/4.6/bits/stl_tree.h:1291:49> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9859d0 '__v' 'const value_type &')))))
              (MaterializeTemporaryExpr 0xaa3e2a8 <col:56> 'const _Bool':'const _Bool' lvalue
                (CXXBoolLiteralExpr 0xa8c11b0 <col:56> '_Bool' true)))))))
    <<<NULL>>>)
  (ReturnStmt 0xaa3e758 <line:1292:7, col:45>
    (CXXConstructExpr 0xaa3e730 <col:14, col:45> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>''void (const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool> &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa3e720 <col:14, col:45> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' lvalue
        (ImplicitCastExpr 0xaa3e710 <col:14, col:45> 'const struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>' <NoOp>
          (CXXTemporaryObjectExpr 0xaa3e650 <col:14, col:45> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &, const _Bool &)'
            (ImplicitCastExpr 0xaa3e630 <col:35> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
              (DeclRefExpr 0xaa3e618 <col:35> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa3bef0 '__j' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))
            (MaterializeTemporaryExpr 0xaa3e640 <col:40> 'const _Bool':'const _Bool' lvalue
              (CXXBoolLiteralExpr 0xa8c1330 <col:40> '_Bool' false))))))))


        iterator _M_insert_equal(const value_type &__x);
        iterator _M_insert_unique_(const_iterator __position, const value_type &__v) (CompoundStmt 0xaa354f0 </usr/include/c++/4.6/bits/stl_tree.h:1331:5, line:1388:5>
  (IfStmt 0xaa354d0 <line:1333:7, line:1387:34>
    <<<NULL>>>
    (BinaryOperator 0xa9f02e0 <line:1333:11, col:40> '_Bool' '=='
      (ImplicitCastExpr 0xa9f02c0 <col:11, col:22> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (MemberExpr 0xa9efb64 <col:11, col:22> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
          (DeclRefExpr 0xa9efb4c <col:11> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
      (ImplicitCastExpr 0xa9f02d0 <col:33, col:40> 'const struct std::_Rb_tree_node_base *' <DerivedToBase (_Rb_tree_node_base)>
        (CXXMemberCallExpr 0xa9f02a0 <col:33, col:40> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
          (MemberExpr 0xa9f0280 <col:33> '<bound member function type>' ->_M_end 0xa9ba430
            (CXXThisExpr 0xa9f0270 <col:33> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
    (CompoundStmt 0xaa2d688 <line:1334:2, line:1341:2>
      (IfStmt 0xaa2d668 <line:1335:4, line:1340:59>
        <<<NULL>>>
        (BinaryOperator 0xa9f1590 <line:1335:8, line:1337:24> '_Bool' '&&'
          (BinaryOperator 0xa9f0560 <line:1335:8, col:17> '_Bool' '>'
            (CXXMemberCallExpr 0xa9f0520 <col:8, col:13> 'size_type':'unsigned int'
              (MemberExpr 0xa9f0500 <col:8> '<bound member function type>' ->size 0xa9851e0
                (ImplicitCastExpr 0xa9f0540 <col:8> 'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' <NoOp>
                  (CXXThisExpr 0xa9f0348 <col:8> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
            (ImplicitCastExpr 0xa9f0550 <col:17> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa8c3088 <col:17> 'int' 0)))
          (CXXOperatorCallExpr 0xa9f1558 <line:1336:11, line:1337:24> '_Bool'
            (ImplicitCastExpr 0xa9f1548 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9f1530 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
            (ImplicitCastExpr 0xa9f1580 <line:1336:11, col:19> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
              (MemberExpr 0xa9f0750 <col:11, col:19> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
                (MemberExpr 0xa9f0730 <col:11> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                  (CXXThisExpr 0xa9f0578 <col:11> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
            (CallExpr 0xa9f1428 <col:34, col:55> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
              (ImplicitCastExpr 0xa9f1418 <col:34> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9f13bc <col:34> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
              (ImplicitCastExpr 0xa9f1458 <col:41, col:54> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
                (ImplicitCastExpr 0xa9f1448 <col:41, col:54> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                  (CXXMemberCallExpr 0xa9f13a0 <col:41, col:54> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                    (MemberExpr 0xa9f1380 <col:41> '<bound member function type>' ->_M_rightmost 0xa9b9d00
                      (CXXThisExpr 0xa9f1370 <col:41> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))
            (CXXOperatorCallExpr 0xa9f14f8 <line:1337:6, col:23> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
              (ImplicitCastExpr 0xa9f14e8 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9f14d0 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
              (ImplicitCastExpr 0xa9f1520 <col:6, col:18> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                (CXXTemporaryObjectExpr 0xa9f1490 <col:6, col:18> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
              (DeclRefExpr 0xa9f14b4 <col:20> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &'))))
        (ReturnStmt 0xaa2c4d0 <line:1338:6, col:70>
          (CXXConstructExpr 0xaa2c4a8 <col:13, col:70> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
            (MaterializeTemporaryExpr 0xaa2c498 <col:13, col:70> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
              (ImplicitCastExpr 0xaa2c488 <col:13, col:70> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                (CXXMemberCallExpr 0xaa2c430 <col:13, col:70> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                  (MemberExpr 0xaa2bcb0 <col:13> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                    (CXXThisExpr 0xaa2baf8 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                  (ImplicitCastExpr 0xaa2c458 <col:24> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NullToPointer>
                    (IntegerLiteral 0xa8c3310 <col:24> 'int' 0))
                  (ImplicitCastExpr 0xaa2c478 <col:27, col:40> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
                    (ImplicitCastExpr 0xaa2c468 <col:27, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                      (CXXMemberCallExpr 0xaa2c3e0 <col:27, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                        (MemberExpr 0xaa2c3c0 <col:27> '<bound member function type>' ->_M_rightmost 0xa9b9d00
                          (CXXThisExpr 0xaa2c3b0 <col:27> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
                  (ParenExpr 0xaa2c418 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                    (DeclRefExpr 0xaa2c3fc </usr/include/c++/4.6/bits/stl_tree.h:1338:66> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))
        (ReturnStmt 0xaa2d658 <line:1340:6, col:59>
          (CXXConstructExpr 0xaa2d630 <col:13, col:59> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'
            (MaterializeTemporaryExpr 0xaa2d620 <col:13, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
              (ImplicitCastExpr 0xaa2d610 <col:13, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                (MemberExpr 0xaa2d5ec <col:13, col:59> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' .first 0xaa2cdb0
                  (CXXMemberCallExpr 0xaa2cc20 <col:13, col:57> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>'
                    (MemberExpr 0xaa2cc00 <col:13> '<bound member function type>' ->_M_insert_unique 0xa985a90
                      (CXXThisExpr 0xaa2cbf0 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                    (ParenExpr 0xaa2cbd8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                      (DeclRefExpr 0xaa2cbc0 </usr/include/c++/4.6/bits/stl_tree.h:1340:53> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &'))))))))))
    (IfStmt 0xaa354b0 <line:1342:12, line:1387:34>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xaa2df10 <line:1342:16, line:1343:37> '_Bool'
        (ImplicitCastExpr 0xaa2df00 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa2dee8 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
        (ImplicitCastExpr 0xaa2df38 <line:1342:16, col:24> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
          (MemberExpr 0xaa2d870 <col:16, col:24> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
            (MemberExpr 0xaa2d850 <col:16> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
              (CXXThisExpr 0xaa2d6a0 <col:16> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
        (CXXOperatorCallExpr 0xaa2d900 <col:39, col:56> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
          (ImplicitCastExpr 0xaa2d8f0 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa2d8d8 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
          (ImplicitCastExpr 0xaa2d928 <col:39, col:51> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
            (CXXTemporaryObjectExpr 0xaa2d898 <col:39, col:51> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
          (DeclRefExpr 0xaa2d8bc <col:53> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &'))
        (CallExpr 0xaa2deb8 <line:1343:11, col:36> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
          (ImplicitCastExpr 0xaa2dea8 <col:11> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa2de90 <col:11> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
          (ImplicitCastExpr 0xaa2ded8 <col:18, col:29> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
            (MemberExpr 0xaa2de70 <col:18, col:29> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
              (DeclRefExpr 0xaa2de58 <col:18> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))))
      (CompoundStmt 0xaa318f8 <line:1344:2, line:1363:2>
        (DeclStmt 0xaa2e188 <line:1346:4, col:40>
          0xaa2e100 "const_iterator __before =
            (CXXConstructExpr 0xaa2e160 <col:30> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'
              (ImplicitCastExpr 0xaa2e150 <col:30> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                (DeclRefExpr 0xaa2e134 <col:30> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))")
        (IfStmt 0xaa318d8 <line:1347:4, line:1362:59>
          <<<NULL>>>
          (BinaryOperator 0xaa2e9a0 <line:1347:8, col:42> '_Bool' '=='
            (ImplicitCastExpr 0xaa2e970 <col:8, col:19> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
              (MemberExpr 0xaa2e214 <col:8, col:19> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                (DeclRefExpr 0xaa2e1fc <col:8> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
            (ImplicitCastExpr 0xaa2e990 <col:30, col:42> 'const struct std::_Rb_tree_node_base *' <NoOp>
              (ImplicitCastExpr 0xaa2e980 <col:30, col:42> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                (CXXMemberCallExpr 0xaa2e950 <col:30, col:42> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                  (MemberExpr 0xaa2e930 <col:30> '<bound member function type>' ->_M_leftmost 0xa9b9c20
                    (CXXThisExpr 0xaa2e920 <col:30> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))
          (ReturnStmt 0xaa2fad0 <line:1348:6, line:1349:37>
            (CXXConstructExpr 0xaa2faa8 <line:1348:13, line:1349:37> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
              (MaterializeTemporaryExpr 0xaa2fa98 <line:1348:13, line:1349:37> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                (ImplicitCastExpr 0xaa2fa88 <line:1348:13, line:1349:37> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                  (CXXMemberCallExpr 0xaa2fa20 <line:1348:13, line:1349:37> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                    (MemberExpr 0xaa2eb70 <line:1348:13> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                      (CXXThisExpr 0xaa2e9b8 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                    (ImplicitCastExpr 0xaa2fa58 <col:24, col:36> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
                      (ImplicitCastExpr 0xaa2fa48 <col:24, col:36> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                        (CXXMemberCallExpr 0xaa2f2a0 <col:24, col:36> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                          (MemberExpr 0xaa2f280 <col:24> '<bound member function type>' ->_M_leftmost 0xa9b9c20
                            (CXXThisExpr 0xaa2f270 <col:24> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
                    (ImplicitCastExpr 0xaa2fa78 <col:39, col:51> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
                      (ImplicitCastExpr 0xaa2fa68 <col:39, col:51> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                        (CXXMemberCallExpr 0xaa2f9d0 <col:39, col:51> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                          (MemberExpr 0xaa2f9b0 <col:39> '<bound member function type>' ->_M_leftmost 0xa9b9c20
                            (CXXThisExpr 0xaa2f9a0 <col:39> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
                    (ParenExpr 0xaa2fa08 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                      (DeclRefExpr 0xaa2f9ec </usr/include/c++/4.6/bits/stl_tree.h:1349:33> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))
          (IfStmt 0xaa318b8 <line:1350:9, line:1362:59>
            <<<NULL>>>
            (CXXOperatorCallExpr 0xaa303f8 <line:1350:13, line:1351:26> '_Bool'
              (ImplicitCastExpr 0xaa303e8 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
                (DeclRefExpr 0xaa303d0 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
              (ImplicitCastExpr 0xaa30420 <line:1350:13, col:21> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
                (MemberExpr 0xaa2fcb0 <col:13, col:21> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
                  (MemberExpr 0xaa2fc90 <col:13> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                    (CXXThisExpr 0xaa2fae0 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
              (CallExpr 0xaa302f8 <col:36, col:63> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                (ImplicitCastExpr 0xaa302e8 <col:36> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa302cc <col:36> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
                (ImplicitCastExpr 0xaa30318 <col:43, col:56> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                  (MemberExpr 0xaa302ac <col:43, col:56> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                    (ParenExpr 0xaa30298 <col:43, col:54> '_Self':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                      (CXXOperatorCallExpr 0xaa30278 <col:44, col:46> '_Self':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                        (ImplicitCastExpr 0xaa30268 <<invalid sloc>> '_Self &(*)(void)' <FunctionToPointerDecay>
                          (DeclRefExpr 0xaa30218 <<invalid sloc>> '_Self &(void)' lvalue CXXMethod 0xa9ef370 'operator--' '_Self &(void)'))
                        (DeclRefExpr 0xaa301e8 <col:46> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa2e100 '__before' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))))
              (CXXOperatorCallExpr 0xaa30398 <line:1351:8, col:25> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
                (ImplicitCastExpr 0xaa30388 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa30370 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
                (ImplicitCastExpr 0xaa303c0 <col:8, col:20> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                  (CXXTemporaryObjectExpr 0xaa30330 <col:8, col:20> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
                (DeclRefExpr 0xaa30354 <col:22> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))
            (CompoundStmt 0xaa310c0 <line:1352:6, line:1360:6>
              (IfStmt 0xaa310a0 <line:1353:8, line:1359:34>
                <<<NULL>>>
                (BinaryOperator 0xaa30a98 <line:1353:12, col:42> '_Bool' '=='
                  (CallExpr 0xaa30a58 <col:12, col:37> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
                    (ImplicitCastExpr 0xaa30a48 <col:12> '_Const_Link_type (*)(_Const_Base_ptr)' <FunctionToPointerDecay>
                      (DeclRefExpr 0xaa309f0 <col:12> '_Const_Link_type (_Const_Base_ptr)' lvalue CXXMethod 0xa9bb7d0 '_S_right' '_Const_Link_type (_Const_Base_ptr)'))
                    (ImplicitCastExpr 0xaa30a78 <col:21, col:30> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                      (MemberExpr 0xaa309d0 <col:21, col:30> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                        (DeclRefExpr 0xaa309b8 <col:21> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa2e100 '__before' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))
                  (ImplicitCastExpr 0xaa30a88 <col:42> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NullToPointer>
                    (IntegerLiteral 0xa8c3c50 <col:42> 'int' 0)))
                (ReturnStmt 0xaa30d78 <line:1354:3, line:1355:34>
                  (CXXConstructExpr 0xaa30d50 <line:1354:10, line:1355:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
                    (MaterializeTemporaryExpr 0xaa30d40 <line:1354:10, line:1355:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                      (ImplicitCastExpr 0xaa30d30 <line:1354:10, line:1355:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                        (CXXMemberCallExpr 0xaa30ce8 <line:1354:10, line:1355:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                          (MemberExpr 0xaa30c60 <line:1354:10> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                            (CXXThisExpr 0xaa30ab0 <col:10> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                          (ImplicitCastExpr 0xaa30d10 <col:21> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NullToPointer>
                            (IntegerLiteral 0xa8c3d28 <col:21> 'int' 0))
                          (ImplicitCastExpr 0xaa30d20 <col:24, col:33> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                            (MemberExpr 0xaa30c98 <col:24, col:33> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                              (DeclRefExpr 0xaa30c80 <col:24> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa2e100 '__before' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
                          (ParenExpr 0xaa30cd0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                            (DeclRefExpr 0xaa30cb8 </usr/include/c++/4.6/bits/stl_tree.h:1355:30> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))
                (ReturnStmt 0xaa31090 <line:1357:3, line:1359:34>
                  (CXXConstructExpr 0xaa31068 <line:1357:10, line:1359:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
                    (MaterializeTemporaryExpr 0xaa31058 <line:1357:10, line:1359:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                      (ImplicitCastExpr 0xaa31048 <line:1357:10, line:1359:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                        (CXXMemberCallExpr 0xaa31000 <line:1357:10, line:1359:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                          (MemberExpr 0xaa30f40 <line:1357:10> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                            (CXXThisExpr 0xaa30d88 <col:10> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                          (ImplicitCastExpr 0xaa31028 <col:21, col:32> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                            (MemberExpr 0xaa30f78 <col:21, col:32> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                              (DeclRefExpr 0xaa30f60 <col:21> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
                          (ImplicitCastExpr 0xaa31038 <line:1358:7, col:18> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                            (MemberExpr 0xaa30fb0 <col:7, col:18> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                              (DeclRefExpr 0xaa30f98 <col:7> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
                          (ParenExpr 0xaa30fe8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                            (DeclRefExpr 0xaa30fd0 </usr/include/c++/4.6/bits/stl_tree.h:1359:30> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))))
            (ReturnStmt 0xaa318a8 <line:1362:6, col:59>
              (CXXConstructExpr 0xaa31880 <col:13, col:59> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'
                (MaterializeTemporaryExpr 0xaa31870 <col:13, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                  (ImplicitCastExpr 0xaa31860 <col:13, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                    (MemberExpr 0xaa31840 <col:13, col:59> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' .first 0xaa2cdb0
                      (CXXMemberCallExpr 0xaa31820 <col:13, col:57> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>'
                        (MemberExpr 0xaa31800 <col:13> '<bound member function type>' ->_M_insert_unique 0xa985a90
                          (CXXThisExpr 0xaa317f0 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                        (ParenExpr 0xaa317d8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                          (DeclRefExpr 0xaa317c0 </usr/include/c++/4.6/bits/stl_tree.h:1362:53> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))))))
      (IfStmt 0xaa35490 <line:1364:12, line:1387:34>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xaa32178 <line:1364:16, line:1365:29> '_Bool'
          (ImplicitCastExpr 0xaa32168 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa32150 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
          (ImplicitCastExpr 0xaa321a0 <line:1364:16, col:24> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
            (MemberExpr 0xaa31ae0 <col:16, col:24> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
              (MemberExpr 0xaa31ac0 <col:16> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                (CXXThisExpr 0xaa31910 <col:16> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
          (CallExpr 0xaa32078 <col:39, col:64> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xaa32068 <col:39> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa32050 <col:39> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
            (ImplicitCastExpr 0xaa32098 <col:46, col:57> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
              (MemberExpr 0xaa32030 <col:46, col:57> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                (DeclRefExpr 0xaa32018 <col:46> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))
          (CXXOperatorCallExpr 0xaa32118 <line:1365:11, col:28> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xaa32108 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa320f0 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
            (ImplicitCastExpr 0xaa32140 <col:11, col:23> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
              (CXXTemporaryObjectExpr 0xaa320b0 <col:11, col:23> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
            (DeclRefExpr 0xaa320d4 <col:25> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))
        (CompoundStmt 0xaa35398 <line:1366:2, line:1384:2>
          (DeclStmt 0xaa323e8 <line:1368:4, col:39>
            0xaa32360 "const_iterator __after =
              (CXXConstructExpr 0xaa323c0 <col:29> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'
                (ImplicitCastExpr 0xaa323b0 <col:29> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                  (DeclRefExpr 0xaa32394 <col:29> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))")
          (IfStmt 0xaa35378 <line:1369:4, line:1383:59>
            <<<NULL>>>
            (BinaryOperator 0xaa32c00 <line:1369:8, col:43> '_Bool' '=='
              (ImplicitCastExpr 0xaa32bd0 <col:8, col:19> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                (MemberExpr 0xaa32474 <col:8, col:19> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                  (DeclRefExpr 0xaa3245c <col:8> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
              (ImplicitCastExpr 0xaa32bf0 <col:30, col:43> 'const struct std::_Rb_tree_node_base *' <NoOp>
                (ImplicitCastExpr 0xaa32be0 <col:30, col:43> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                  (CXXMemberCallExpr 0xaa32bb0 <col:30, col:43> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                    (MemberExpr 0xaa32b90 <col:30> '<bound member function type>' ->_M_rightmost 0xa9b9d00
                      (CXXThisExpr 0xaa32b80 <col:30> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))
            (ReturnStmt 0xaa335f0 <line:1370:6, line:1371:37>
              (CXXConstructExpr 0xaa335c8 <line:1370:13, line:1371:37> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
                (MaterializeTemporaryExpr 0xaa335b8 <line:1370:13, line:1371:37> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                  (ImplicitCastExpr 0xaa335a8 <line:1370:13, line:1371:37> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                    (CXXMemberCallExpr 0xaa33550 <line:1370:13, line:1371:37> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                      (MemberExpr 0xaa32dd0 <line:1370:13> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                        (CXXThisExpr 0xaa32c18 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                      (ImplicitCastExpr 0xaa33578 <col:24> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NullToPointer>
                        (IntegerLiteral 0xa8c4420 <col:24> 'int' 0))
                      (ImplicitCastExpr 0xaa33598 <col:27, col:40> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NoOp>
                        (ImplicitCastExpr 0xaa33588 <col:27, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                          (CXXMemberCallExpr 0xaa33500 <col:27, col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue
                            (MemberExpr 0xaa334e0 <col:27> '<bound member function type>' ->_M_rightmost 0xa9b9d00
                              (CXXThisExpr 0xaa334d0 <col:27> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
                      (ParenExpr 0xaa33538 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                        (DeclRefExpr 0xaa3351c </usr/include/c++/4.6/bits/stl_tree.h:1371:33> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))
            (IfStmt 0xaa35358 <line:1372:9, line:1383:59>
              <<<NULL>>>
              (CXXOperatorCallExpr 0xaa33ee0 <line:1372:13, line:1373:35> '_Bool'
                (ImplicitCastExpr 0xaa33ed0 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa33eb8 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
                (ImplicitCastExpr 0xaa33f08 <line:1372:13, col:21> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
                  (MemberExpr 0xaa337d0 <col:13, col:21> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >' lvalue ._M_key_compare 0xa9b9080
                    (MemberExpr 0xaa337b0 <col:13> '_Rb_tree_impl<struct std::less<class std::basic_string<char> > >':'struct std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >::_Rb_tree_impl<struct std::less<class std::basic_string<char> >, false>' lvalue ->_M_impl 0xa9b9ad0
                      (CXXThisExpr 0xaa33600 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))
                (CXXOperatorCallExpr 0xaa33860 <col:36, col:53> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type':'const class std::basic_string<char>' lvalue
                  (ImplicitCastExpr 0xaa33850 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(*)(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' <FunctionToPointerDecay>
                    (DeclRefExpr 0xaa33838 <<invalid sloc>> 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const' lvalue CXXMethod 0xa9e57a0 'operator()' 'const typename struct pair<const class basic_string<char>, class vector<class basic_string<char>, class allocator<class basic_string<char> > > >::first_type &(const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > &) const'))
                  (ImplicitCastExpr 0xaa33888 <col:36, col:48> 'const struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                    (CXXTemporaryObjectExpr 0xaa337f8 <col:36, col:48> 'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (void) throw()' zeroing))
                  (DeclRefExpr 0xaa3381c <col:50> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &'))
                (CallExpr 0xaa33e88 <line:1373:8, col:34> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                  (ImplicitCastExpr 0xaa33e78 <col:8> 'const class std::basic_string<char> &(*)(_Const_Base_ptr)' <FunctionToPointerDecay>
                    (DeclRefExpr 0xaa33e5c <col:8> 'const class std::basic_string<char> &(_Const_Base_ptr)' lvalue CXXMethod 0xa9bbb90 '_S_key' 'const class std::basic_string<char> &(_Const_Base_ptr)'))
                  (ImplicitCastExpr 0xaa33ea8 <col:15, col:27> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                    (MemberExpr 0xaa33e3c <col:15, col:27> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                      (ParenExpr 0xaa33e28 <col:15, col:25> '_Self':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                        (CXXOperatorCallExpr 0xaa33e08 <col:16, col:18> '_Self':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                          (ImplicitCastExpr 0xaa33df8 <<invalid sloc>> '_Self &(*)(void)' <FunctionToPointerDecay>
                            (DeclRefExpr 0xaa33de0 <<invalid sloc>> '_Self &(void)' lvalue CXXMethod 0xa9ef0d0 'operator++' '_Self &(void)'))
                          (DeclRefExpr 0xaa33dc8 <col:18> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa32360 '__after' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))))))
              (CompoundStmt 0xaa34b60 <line:1374:6, line:1381:6>
                (IfStmt 0xaa34b40 <line:1375:8, line:1380:34>
                  <<<NULL>>>
                  (BinaryOperator 0xaa34538 <line:1375:12, col:44> '_Bool' '=='
                    (CallExpr 0xaa344f8 <col:12, col:39> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
                      (ImplicitCastExpr 0xaa344e8 <col:12> '_Const_Link_type (*)(_Const_Base_ptr)' <FunctionToPointerDecay>
                        (DeclRefExpr 0xaa344d0 <col:12> '_Const_Link_type (_Const_Base_ptr)' lvalue CXXMethod 0xa9bb7d0 '_S_right' '_Const_Link_type (_Const_Base_ptr)'))
                      (ImplicitCastExpr 0xaa34518 <col:21, col:32> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                        (MemberExpr 0xaa344b0 <col:21, col:32> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                          (DeclRefExpr 0xaa34498 <col:21> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))
                    (ImplicitCastExpr 0xaa34528 <col:44> '_Const_Link_type':'const _Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *' <NullToPointer>
                      (IntegerLiteral 0xa8c4778 <col:44> 'int' 0)))
                  (ReturnStmt 0xaa34818 <line:1376:3, line:1377:34>
                    (CXXConstructExpr 0xaa347f0 <line:1376:10, line:1377:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
                      (MaterializeTemporaryExpr 0xaa347e0 <line:1376:10, line:1377:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                        (ImplicitCastExpr 0xaa347d0 <line:1376:10, line:1377:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                          (CXXMemberCallExpr 0xaa34788 <line:1376:10, line:1377:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                            (MemberExpr 0xaa34700 <line:1376:10> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                              (CXXThisExpr 0xaa34550 <col:10> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                            (ImplicitCastExpr 0xaa347b0 <col:21> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NullToPointer>
                              (IntegerLiteral 0xa8c4850 <col:21> 'int' 0))
                            (ImplicitCastExpr 0xaa347c0 <col:24, col:35> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                              (MemberExpr 0xaa34738 <col:24, col:35> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                                (DeclRefExpr 0xaa34720 <col:24> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
                            (ParenExpr 0xaa34770 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                              (DeclRefExpr 0xaa34758 </usr/include/c++/4.6/bits/stl_tree.h:1377:30> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))
                  (ReturnStmt 0xaa34b30 <line:1379:3, line:1380:34>
                    (CXXConstructExpr 0xaa34b08 <line:1379:10, line:1380:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
                      (MaterializeTemporaryExpr 0xaa34af8 <line:1379:10, line:1380:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                        (ImplicitCastExpr 0xaa34ae8 <line:1379:10, line:1380:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                          (CXXMemberCallExpr 0xaa34aa0 <line:1379:10, line:1380:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                            (MemberExpr 0xaa349e0 <line:1379:10> '<bound member function type>' ->_M_insert_ 0xa9bcfb0
                              (CXXThisExpr 0xaa34828 <col:10> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                            (ImplicitCastExpr 0xaa34ac8 <col:21, col:29> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                              (MemberExpr 0xaa34a18 <col:21, col:29> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                                (DeclRefExpr 0xaa34a00 <col:21> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa32360 '__after' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
                            (ImplicitCastExpr 0xaa34ad8 <col:38, col:46> '_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                              (MemberExpr 0xaa34a50 <col:38, col:46> '_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ._M_node 0xa9ef850
                                (DeclRefExpr 0xaa34a38 <col:38> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa32360 '__after' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
                            (ParenExpr 0xaa34a88 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                              (DeclRefExpr 0xaa34a70 </usr/include/c++/4.6/bits/stl_tree.h:1380:30> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))))
              (ReturnStmt 0xaa35348 <line:1383:6, col:59>
                (CXXConstructExpr 0xaa35320 <col:13, col:59> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'
                  (MaterializeTemporaryExpr 0xaa35310 <col:13, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                    (ImplicitCastExpr 0xaa35300 <col:13, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                      (MemberExpr 0xaa352e0 <col:13, col:59> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' .first 0xaa2cdb0
                        (CXXMemberCallExpr 0xaa352c0 <col:13, col:57> 'pair<iterator, _Bool>':'struct std::pair<struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, _Bool>'
                          (MemberExpr 0xaa352a0 <col:13> '<bound member function type>' ->_M_insert_unique 0xa985a90
                            (CXXThisExpr 0xaa35290 <col:13> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
                          (ParenExpr 0xaa35278 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                            (DeclRefExpr 0xaa35260 </usr/include/c++/4.6/bits/stl_tree.h:1383:53> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa986450 '__v' 'const value_type &')))))))))))
        (ReturnStmt 0xaa35480 <line:1387:2, col:34>
          (CXXConstructExpr 0xaa35458 <col:9, col:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
            (MaterializeTemporaryExpr 0xaa35448 <col:9, col:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
              (ImplicitCastExpr 0xaa35438 <col:9, col:34> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                (CXXMemberCallExpr 0xaa353e8 <col:9, col:34> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                  (MemberExpr 0xaa353c8 <col:9, col:20> '<bound member function type>' ._M_const_cast 0xa9eeca0
                    (ImplicitCastExpr 0xaa35428 <col:9> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                      (DeclRefExpr 0xaa353b0 <col:9> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa986260 '__position' 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))))))))))


        iterator _M_insert_equal_(const_iterator __position, const value_type &__x);
        template <typename _InputIterator> void _M_insert_unique(_InputIterator __first, _InputIterator __last);
        template <typename _InputIterator> void _M_insert_equal(_InputIterator __first, _InputIterator __last);
    private:
    private:
        void _M_erase_aux(const_iterator __position);
        void _M_erase_aux(const_iterator __first, const_iterator __last);
    public:
    public:
        void erase(iterator __position);
        void erase(const_iterator __position);
        size_type erase(const key_type &__x);
        void erase(iterator __first, iterator __last);
        void erase(const_iterator __first, const_iterator __last);
        void erase(const key_type *__first, const key_type *__last);
        void clear();
        iterator find(const key_type &__k);
        const_iterator find(const key_type &__k) const;
        size_type count(const key_type &__k) const;
        iterator lower_bound(const key_type &__k) (CompoundStmt 0xa9e36a8 </usr/include/c++/4.6/bits/stl_tree.h:828:7, col:59>
  (ReturnStmt 0xa9e3698 <col:9, col:56>
    (CXXConstructExpr 0xa9e3670 <col:16, col:56> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9e3660 <col:16, col:56> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xa9e3650 <col:16, col:56> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXMemberCallExpr 0xa9e3628 <col:16, col:56> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
            (MemberExpr 0xa9e3608 <col:16> '<bound member function type>' ->_M_lower_bound 0xa981740
              (CXXThisExpr 0xa9e35f8 <col:16> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
            (CXXMemberCallExpr 0xa9e2e90 <col:31, col:40> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
              (MemberExpr 0xa9e2e70 <col:31> '<bound member function type>' ->_M_begin 0xa9b9fa0
                (CXXThisExpr 0xa9e2e60 <col:31> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))
            (CXXMemberCallExpr 0xa9e35c0 <col:43, col:50> '_Link_type':'_Rb_tree_node<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > *'
              (MemberExpr 0xa9e35a0 <col:43> '<bound member function type>' ->_M_end 0xa9ba430
                (CXXThisExpr 0xa9e3590 <col:43> 'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))
            (DeclRefExpr 0xa9e35dc <col:53> 'const key_type':'const class std::basic_string<char>' lvalue ParmVar 0xa98a590 '__k' 'const key_type &')))))))


        const_iterator lower_bound(const key_type &__k) const;
        iterator upper_bound(const key_type &__k);
        const_iterator upper_bound(const key_type &__k) const;
        pair<iterator, iterator> equal_range(const key_type &__k);
        pair<const_iterator, const_iterator> equal_range(const key_type &__k) const;
        bool __rb_verify() const;
    }
template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc = allocator<_Val>> class _Rb_tree {
        class _Rb_tree;
        typedef typename _Alloc::_Alloc::rebind<_Rb_tree_node<_Val> >::other _Node_allocator;
    protected:
    protected:
        typedef std::_Rb_tree_node_base *_Base_ptr;
        typedef const std::_Rb_tree_node_base *_Const_Base_ptr;
    public:
    public:
        typedef _Key key_type;
        typedef _Val value_type;
        typedef value_type *pointer;
        typedef const value_type *const_pointer;
        typedef value_type &reference;
        typedef const value_type &const_reference;
        typedef _Rb_tree_node<_Val> *_Link_type;
        typedef const _Rb_tree_node<_Val> *_Const_Link_type;
        typedef size_t size_type;
        typedef ptrdiff_t difference_type;
        typedef _Alloc allocator_type;
        _Node_allocator &_M_get_Node_allocator() (CompoundStmt 0xa8a12b8 </usr/include/c++/4.6/bits/stl_tree.h:356:7, col:64>
  (ReturnStmt 0xa8a12a8 <col:9, col:61>
    (UnaryOperator 0xa8a1290 <col:16, col:61> '<dependent type>' prefix '*'
      (CXXStaticCastExpr 0xa8a1278 <col:17, col:61> '_Node_allocator *' static_cast<_Node_allocator *> <Dependent>
        (UnaryOperator 0xa8a1210 <col:47, col:54> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa8a11d8 <col:48, col:54> '<dependent type>' lvalue
            (CXXThisExpr 0xa8a11c8 <col:48> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))))


        const _Node_allocator &_M_get_Node_allocator() const (CompoundStmt 0xa8a13d8 </usr/include/c++/4.6/bits/stl_tree.h:360:7, col:70>
  (ReturnStmt 0xa8a13c8 <col:9, col:67>
    (UnaryOperator 0xa8a13b0 <col:16, col:67> '<dependent type>' prefix '*'
      (CXXStaticCastExpr 0xa8a1398 <col:17, col:67> 'const _Node_allocator *' static_cast<const _Node_allocator *> <Dependent>
        (UnaryOperator 0xa8a1330 <col:53, col:60> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa8a12f8 <col:54, col:60> '<dependent type>' lvalue
            (CXXThisExpr 0xa8a12e8 <col:54> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))))


        allocator_type get_allocator() const (CompoundStmt 0xa8a1498 </usr/include/c++/4.6/bits/stl_tree.h:364:7, col:57>
  (ReturnStmt 0xa8a1488 <col:9, col:54>
    (CXXUnresolvedConstructExpr 0xa8a1468 <col:16, col:54> 'allocator_type':'_Alloc'
      (CallExpr 0xa8a1448 <col:31, col:53> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a1408 <col:31> '<bound member function type>' lvalue)))))


    protected:
    protected:
        _Link_type _M_get_node() (CompoundStmt 0xa8a1578 </usr/include/c++/4.6/bits/stl_tree.h:369:7, col:54>
  (ReturnStmt 0xa8a1568 <col:9, col:51>
    (CallExpr 0xa8a1548 <col:16, col:51> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8a14f8 <col:16, col:41> '<dependent type>' lvalue
        (MemberExpr 0xa8a14c0 <col:16> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
          (CXXThisExpr 0xa8a14b0 <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
      (IntegerLiteral 0xa8a1530 <col:50> 'int' 1))))


        void _M_put_node(_Link_type __p) (CompoundStmt 0xa8a1658 </usr/include/c++/4.6/bits/stl_tree.h:373:7, col:54>
  (CallExpr 0xa8a1630 <col:9, col:51> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8a15c8 <col:9, col:34> '<dependent type>' lvalue
      (MemberExpr 0xa8a15a0 <col:9> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8a1590 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8a15fc <col:45> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa896db0 '__p' '_Link_type':'_Rb_tree_node<_Val> *')
    (IntegerLiteral 0xa8a1618 <col:50> 'int' 1)))


        _Link_type _M_create_node(const value_type &__x) (CompoundStmt 0xa8a4fa0 </usr/include/c++/4.6/bits/stl_tree.h:378:7, line:389:7>
  (DeclStmt 0xa8a4cd8 <line:379:2, col:34>
    0xa8a4c50 "_Link_type __tmp =
      (CallExpr 0xa8a4cb8 <col:21, col:33> '<dependent type>'
        (MemberExpr 0xa8a4c98 <col:21> '<bound member function type>' ->_M_get_node 0xa896d40
          (CXXThisExpr 0xa8a4c88 <col:21> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))")
  (IfStmt 0xa8a4e98 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_tree.h:382:56>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa8a4ce8 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa8a4e80 </usr/include/c++/4.6/bits/stl_tree.h:381:4, line:382:56>
      (CallExpr 0xa8a4e58 <line:381:6, line:382:53> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8a4d48 <line:381:6, col:22> '<dependent type>' lvalue
          (CallExpr 0xa8a4d28 <col:6, col:20> '<dependent type>'
            (MemberExpr 0xa8a4d08 <col:6> '<bound member function type>' ->get_allocator 0xa896c40
              (CXXThisExpr 0xa8a4cf8 <col:6> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
        (CallExpr 0xa8a4e20 <line:382:9, col:47> '<dependent type>'
          (UnresolvedLookupExpr 0xa8a4d98 <col:9, col:14> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
          (CXXDependentScopeMemberExpr 0xa8a4de8 <col:26, col:33> '<dependent type>' lvalue
            (DeclRefExpr 0xa8a4dcc <col:26> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a4c50 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *')))
        (DeclRefExpr 0xa8a4e40 <col:50> 'const value_type':'const _Val' lvalue ParmVar 0xa896ed0 '__x' 'const value_type &')))
    <<<NULL>>>)
  (IfStmt 0xa8a4f58 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_tree.h:387:4>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa8a4eb8 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa8a4f40 </usr/include/c++/4.6/bits/stl_tree.h:384:4, line:387:4>
      (CallExpr 0xa8a4f10 <line:385:6, col:23> '<dependent type>'
        (MemberExpr 0xa8a4ed8 <col:6> '<bound member function type>' ->_M_put_node 0xa896e50
          (CXXThisExpr 0xa8a4ec8 <col:6> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (DeclRefExpr 0xa8a4ef8 <col:18> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a4c50 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *'))
      (NullStmt 0xa8a4f30 <line:386:29>))
    <<<NULL>>>)
  (ReturnStmt 0xa8a4f90 <line:388:2, col:9>
    (DeclRefExpr 0xa8a4f74 <col:9> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a4c50 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *')))


        void _M_destroy_node(_Link_type __p) (CompoundStmt 0xa8a5190 </usr/include/c++/4.6/bits/stl_tree.h:393:7, line:396:7>
  (CallExpr 0xa8a5108 <line:394:2, col:63> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8a5010 <col:2, col:18> '<dependent type>' lvalue
      (CallExpr 0xa8a4ff0 <col:2, col:16> '<dependent type>'
        (MemberExpr 0xa8a4fd0 <col:2> '<bound member function type>' ->get_allocator 0xa896c40
          (CXXThisExpr 0xa8a4fc0 <col:2> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
    (CallExpr 0xa8a50e8 <col:26, col:62> '<dependent type>'
      (UnresolvedLookupExpr 0xa8a5060 <col:26, col:31> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606990)
      (CXXDependentScopeMemberExpr 0xa8a50b0 <col:43, col:48> '<dependent type>' lvalue
        (DeclRefExpr 0xa8a5094 <col:43> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa896fe0 '__p' '_Link_type':'_Rb_tree_node<_Val> *'))))
  (CallExpr 0xa8a5170 <line:395:2, col:17> '<dependent type>'
    (MemberExpr 0xa8a5138 <col:2> '<bound member function type>' ->_M_put_node 0xa896e50
      (CXXThisExpr 0xa8a5128 <col:2> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
    (DeclRefExpr 0xa8a5158 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa896fe0 '__p' '_Link_type':'_Rb_tree_node<_Val> *')))


        _Link_type _M_clone_node(_Const_Link_type __x) (CompoundStmt 0xa8a5478 </usr/include/c++/4.6/bits/stl_tree.h:426:7, line:432:7>
  (DeclStmt 0xa8a5288 <line:427:2, col:56>
    0xa8a51b0 "_Link_type __tmp =
      (CallExpr 0xa8a5268 <col:21, col:55> '<dependent type>'
        (MemberExpr 0xa8a51f8 <col:21> '<bound member function type>' ->_M_create_node 0xa896f70
          (CXXThisExpr 0xa8a51e8 <col:21> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (CXXDependentScopeMemberExpr 0xa8a5230 <col:36, col:41> '<dependent type>' lvalue
          (DeclRefExpr 0xa8a5218 <col:36> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8970c0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))")
  (BinaryOperator 0xa8a5338 <line:428:2, col:25> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a52b0 <col:2, col:9> '<dependent type>' lvalue
      (DeclRefExpr 0xa8a5298 <col:2> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a51b0 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *'))
    (CXXDependentScopeMemberExpr 0xa8a5300 <col:20, col:25> '<dependent type>' lvalue
      (DeclRefExpr 0xa8a52e4 <col:20> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8970c0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
  (BinaryOperator 0xa8a53b8 <line:429:2, col:19> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a5368 <col:2, col:9> '<dependent type>' lvalue
      (DeclRefExpr 0xa8a5350 <col:2> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a51b0 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *'))
    (IntegerLiteral 0xa8a53a0 <col:19> 'int' 0))
  (BinaryOperator 0xa8a5438 <line:430:2, col:20> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a53e8 <col:2, col:9> '<dependent type>' lvalue
      (DeclRefExpr 0xa8a53d0 <col:2> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a51b0 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *'))
    (IntegerLiteral 0xa8a5420 <col:20> 'int' 0))
  (ReturnStmt 0xa8a5468 <line:431:2, col:9>
    (DeclRefExpr 0xa8a5450 <col:9> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8a51b0 '__tmp' '_Link_type':'_Rb_tree_node<_Val> *')))


    protected:
    protected:
        template <typename _Key_compare, bool _Is_pod_comparator = (UnaryTypeTraitExpr 0xa897260 </usr/include/c++/4.6/bits/stl_tree.h:436:35, col:56> '_Bool')
> struct _Rb_tree_impl : public _Node_allocator {
            struct _Rb_tree_impl;
            _Key_compare _M_key_compare;
            std::_Rb_tree_node_base _M_header;
            size_type _M_node_count;
            _Rb_tree_impl<_Key_compare, _Is_pod_comparator>() : _Node_allocator(), _M_key_compare(), _M_header(), _M_node_count((IntegerLiteral 0xa8a56e8 </usr/include/c++/4.6/bits/stl_tree.h:445:20> 'int' 0)
) (CompoundStmt 0xa8a57c8 </usr/include/c++/4.6/bits/stl_tree.h:446:4, col:23>
  (CallExpr 0xa8a57a8 <col:6, col:20> '<dependent type>'
    (MemberExpr 0xa8a5788 <col:6> '<bound member function type>' ->_M_initialize 0xa8978f0
      (CXXThisExpr 0xa8a5778 <col:6> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this))))


            _Rb_tree_impl<_Key_compare, _Is_pod_comparator>(const _Key_compare &__comp, const _Node_allocator &__a) : _Node_allocator((DeclRefExpr 0xa8a57dc </usr/include/c++/4.6/bits/stl_tree.h:449:22> 'const _Node_allocator':'const typename _Alloc::_Alloc::rebind<_Rb_tree_node<_Val> >::other' lvalue ParmVar 0xa897780 '__a' 'const _Node_allocator &')
), _M_key_compare((DeclRefExpr 0xa8a5838 </usr/include/c++/4.6/bits/stl_tree.h:449:43> 'const _Key_compare' lvalue ParmVar 0xa897730 '__comp' 'const _Key_compare &')
), _M_header(), _M_node_count((IntegerLiteral 0xa8a58d8 </usr/include/c++/4.6/bits/stl_tree.h:450:20> 'int' 0)
) (CompoundStmt 0xa8a5998 </usr/include/c++/4.6/bits/stl_tree.h:451:4, col:23>
  (CallExpr 0xa8a5978 <col:6, col:20> '<dependent type>'
    (MemberExpr 0xa8a5958 <col:6> '<bound member function type>' ->_M_initialize 0xa8978f0
      (CXXThisExpr 0xa8a5948 <col:6> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this))))


        private:
        private:
            void _M_initialize() (CompoundStmt 0xa8a5d00 </usr/include/c++/4.6/bits/stl_tree.h:456:4, line:461:4>
  (BinaryOperator 0xa8a5a48 <line:457:6, col:33> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a59f8 <col:6, col:22> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a59c0 <col:6, col:12> '<dependent type>' lvalue
        (CXXThisExpr 0xa8a59b0 <col:6> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this)))
    (DeclRefExpr 0xa8a5a2c <col:33> 'enum std::_Rb_tree_color' EnumConstant 0xa88ff40 '_S_red' 'enum std::_Rb_tree_color'))
  (BinaryOperator 0xa8a5af8 <line:458:6, col:34> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a5aa8 <col:6, col:22> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a5a70 <col:6, col:12> '<dependent type>' lvalue
        (CXXThisExpr 0xa8a5a60 <col:6> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this)))
    (IntegerLiteral 0xa8a5ae0 <col:34> 'int' 0))
  (BinaryOperator 0xa8a5bf0 <line:459:6, col:39> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a5b58 <col:6, col:22> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a5b20 <col:6, col:12> '<dependent type>' lvalue
        (CXXThisExpr 0xa8a5b10 <col:6> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this)))
    (UnaryOperator 0xa8a5bd8 <col:32, col:39> '<dependent type>' prefix '&'
      (CXXDependentScopeMemberExpr 0xa8a5ba0 <col:33, col:39> '<dependent type>' lvalue
        (CXXThisExpr 0xa8a5b90 <col:33> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this))))
  (BinaryOperator 0xa8a5ce8 <line:460:6, col:40> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a5c50 <col:6, col:22> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a5c18 <col:6, col:12> '<dependent type>' lvalue
        (CXXThisExpr 0xa8a5c08 <col:6> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this)))
    (UnaryOperator 0xa8a5cd0 <col:33, col:40> '<dependent type>' prefix '&'
      (CXXDependentScopeMemberExpr 0xa8a5c98 <col:34, col:40> '<dependent type>' lvalue
        (CXXThisExpr 0xa8a5c88 <col:34> '_Rb_tree_impl<_Key_compare, _Is_pod_comparator> *' this)))))


        };
        _Rb_tree_impl<_Compare> _M_impl;
    protected:
    protected:
        _Base_ptr &_M_root() (CompoundStmt 0xa8a5de8 </usr/include/c++/4.6/bits/stl_tree.h:469:7, col:51>
  (ReturnStmt 0xa8a5dd8 <col:9, col:40>
    (CXXDependentScopeMemberExpr 0xa8a5da0 <col:16, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a5d68 <col:16, col:30> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a5d30 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa8a5d20 <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


        _Const_Base_ptr _M_root() const (CompoundStmt 0xa8a5ec8 </usr/include/c++/4.6/bits/stl_tree.h:473:7, col:51>
  (ReturnStmt 0xa8a5eb8 <col:9, col:40>
    (CXXDependentScopeMemberExpr 0xa8a5e80 <col:16, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a5e48 <col:16, col:30> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a5e10 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa8a5e00 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


        _Base_ptr &_M_leftmost() (CompoundStmt 0xa8a5fa8 </usr/include/c++/4.6/bits/stl_tree.h:477:7, col:49>
  (ReturnStmt 0xa8a5f98 <col:9, col:40>
    (CXXDependentScopeMemberExpr 0xa8a5f60 <col:16, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a5f28 <col:16, col:30> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a5ef0 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa8a5ee0 <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


        _Const_Base_ptr _M_leftmost() const (CompoundStmt 0xa8a6088 </usr/include/c++/4.6/bits/stl_tree.h:481:7, col:49>
  (ReturnStmt 0xa8a6078 <col:9, col:40>
    (CXXDependentScopeMemberExpr 0xa8a6040 <col:16, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a6008 <col:16, col:30> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a5fd0 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa8a5fc0 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


        _Base_ptr &_M_rightmost() (CompoundStmt 0xa8a6168 </usr/include/c++/4.6/bits/stl_tree.h:485:7, col:50>
  (ReturnStmt 0xa8a6158 <col:9, col:40>
    (CXXDependentScopeMemberExpr 0xa8a6120 <col:16, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a60e8 <col:16, col:30> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a60b0 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa8a60a0 <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


        _Const_Base_ptr _M_rightmost() const (CompoundStmt 0xa8a6248 </usr/include/c++/4.6/bits/stl_tree.h:489:7, col:50>
  (ReturnStmt 0xa8a6238 <col:9, col:40>
    (CXXDependentScopeMemberExpr 0xa8a6200 <col:16, col:40> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8a61c8 <col:16, col:30> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a6190 <col:16, col:22> '<dependent type>' lvalue
          (CXXThisExpr 0xa8a6180 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


        _Link_type _M_begin() (CompoundStmt 0xa8a6348 </usr/include/c++/4.6/bits/stl_tree.h:493:7, col:76>
  (ReturnStmt 0xa8a6338 <col:9, col:73>
    (CXXStaticCastExpr 0xa8a6320 <col:16, col:73> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
      (CXXDependentScopeMemberExpr 0xa8a62e0 <col:40, col:64> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a62a8 <col:40, col:54> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a6270 <col:40, col:46> '<dependent type>' lvalue
            (CXXThisExpr 0xa8a6260 <col:40> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))))


        _Const_Link_type _M_begin() const (CompoundStmt 0xa8a6448 </usr/include/c++/4.6/bits/stl_tree.h:497:7, line:500:7>
  (ReturnStmt 0xa8a6438 <line:498:2, line:499:38>
    (CXXStaticCastExpr 0xa8a6420 <line:498:9, line:499:38> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
      (CXXDependentScopeMemberExpr 0xa8a63e0 <col:5, col:29> '<dependent type>' lvalue
        (CXXDependentScopeMemberExpr 0xa8a63a8 <col:5, col:19> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a6370 <col:5, col:11> '<dependent type>' lvalue
            (CXXThisExpr 0xa8a6360 <col:5> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))))


        _Link_type _M_end() (CompoundStmt 0xa8a6528 </usr/include/c++/4.6/bits/stl_tree.h:504:7, col:67>
  (ReturnStmt 0xa8a6518 <col:9, col:64>
    (CXXStaticCastExpr 0xa8a6500 <col:16, col:64> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
      (UnaryOperator 0xa8a64e0 <col:40, col:55> '<dependent type>' prefix '&'
        (CXXDependentScopeMemberExpr 0xa8a64a8 <col:41, col:55> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a6470 <col:41, col:47> '<dependent type>' lvalue
            (CXXThisExpr 0xa8a6460 <col:41> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))))


        _Const_Link_type _M_end() const (CompoundStmt 0xa8a6608 </usr/include/c++/4.6/bits/stl_tree.h:508:7, col:73>
  (ReturnStmt 0xa8a65f8 <col:9, col:70>
    (CXXStaticCastExpr 0xa8a65e0 <col:16, col:70> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
      (UnaryOperator 0xa8a65c0 <col:46, col:61> '<dependent type>' prefix '&'
        (CXXDependentScopeMemberExpr 0xa8a6588 <col:47, col:61> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a6550 <col:47, col:53> '<dependent type>' lvalue
            (CXXThisExpr 0xa8a6540 <col:47> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))))


        static const_reference _S_value(_Const_Link_type __x) (CompoundStmt 0xa8a6680 </usr/include/c++/4.6/bits/stl_tree.h:512:7, col:37>
  (ReturnStmt 0xa8a6670 <col:9, col:21>
    (CXXDependentScopeMemberExpr 0xa8a6638 <col:16, col:21> '<dependent type>' lvalue
      (DeclRefExpr 0xa8a661c <col:16> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa898130 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))


        static const _Key &_S_key(_Const_Link_type __x) (CompoundStmt 0xa8a6758 </usr/include/c++/4.6/bits/stl_tree.h:516:7, col:46>
  (ReturnStmt 0xa8a6748 <col:9, col:43>
    (CallExpr 0xa8a6728 <col:16, col:43> '<dependent type>'
      (CXXUnresolvedConstructExpr 0xa8a66a0 <col:16, col:28> '_KeyOfValue')
      (CallExpr 0xa8a6708 <col:30, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa8a66b8 <col:30> '<dependent type>' lvalue (no ADL) = '1' 0xa8987b0 0xa8981d0)
        (DeclRefExpr 0xa8a66f0 <col:39> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa898240 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))))


        static _Link_type _S_left(_Base_ptr __x) (CompoundStmt 0xa8a67e8 </usr/include/c++/4.6/bits/stl_tree.h:520:7, col:55>
  (ReturnStmt 0xa8a67d8 <col:9, col:52>
    (CXXStaticCastExpr 0xa8a67c0 <col:16, col:52> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
      (MemberExpr 0xa8a6794 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_left 0xa890270
        (ImplicitCastExpr 0xa8a6788 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
          (DeclRefExpr 0xa8a676c <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898370 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))))


        static _Const_Link_type _S_left(_Const_Base_ptr __x) (CompoundStmt 0xa8a6878 </usr/include/c++/4.6/bits/stl_tree.h:524:7, col:61>
  (ReturnStmt 0xa8a6868 <col:9, col:58>
    (CXXStaticCastExpr 0xa8a6850 <col:16, col:58> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
      (MemberExpr 0xa8a6824 <col:46, col:51> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_left 0xa890270
        (ImplicitCastExpr 0xa8a6818 <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
          (DeclRefExpr 0xa8a67fc <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898480 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))))


        static _Link_type _S_right(_Base_ptr __x) (CompoundStmt 0xa8a6908 </usr/include/c++/4.6/bits/stl_tree.h:528:7, col:56>
  (ReturnStmt 0xa8a68f8 <col:9, col:53>
    (CXXStaticCastExpr 0xa8a68e0 <col:16, col:53> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
      (MemberExpr 0xa8a68b4 <col:40, col:45> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ->_M_right 0xa8902b0
        (ImplicitCastExpr 0xa8a68a8 <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
          (DeclRefExpr 0xa8a688c <col:40> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898590 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))))))


        static _Const_Link_type _S_right(_Const_Base_ptr __x) (CompoundStmt 0xa8a6998 </usr/include/c++/4.6/bits/stl_tree.h:532:7, col:62>
  (ReturnStmt 0xa8a6988 <col:9, col:59>
    (CXXStaticCastExpr 0xa8a6970 <col:16, col:59> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
      (MemberExpr 0xa8a6944 <col:46, col:51> 'const _Base_ptr':'struct std::_Rb_tree_node_base *const' lvalue ->_M_right 0xa8902b0
        (ImplicitCastExpr 0xa8a6938 <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
          (DeclRefExpr 0xa8a691c <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898650 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))))))


        static const_reference _S_value(_Const_Base_ptr __x) (CompoundStmt 0xa8a6a30 </usr/include/c++/4.6/bits/stl_tree.h:536:7, col:68>
  (ReturnStmt 0xa8a6a20 <col:9, col:52>
    (CXXDependentScopeMemberExpr 0xa8a69e8 <col:16, col:52> '<dependent type>' lvalue
      (CXXStaticCastExpr 0xa8a69d0 <col:16, col:49> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
        (DeclRefExpr 0xa8a69ac <col:46> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898710 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))


        static const _Key &_S_key(_Const_Base_ptr __x) (CompoundStmt 0xa8a6b08 </usr/include/c++/4.6/bits/stl_tree.h:540:7, col:46>
  (ReturnStmt 0xa8a6af8 <col:9, col:43>
    (CallExpr 0xa8a6ad8 <col:16, col:43> '<dependent type>'
      (CXXUnresolvedConstructExpr 0xa8a6a50 <col:16, col:28> '_KeyOfValue')
      (CallExpr 0xa8a6ab8 <col:30, col:42> '<dependent type>'
        (UnresolvedLookupExpr 0xa8a6a68 <col:30> '<dependent type>' lvalue (no ADL) = '1' 0xa8987b0 0xa8981d0)
        (DeclRefExpr 0xa8a6aa0 <col:39> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898820 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))


        static _Base_ptr _S_minimum(_Base_ptr __x) (CompoundStmt 0xa8a6c38 </usr/include/c++/4.6/bits/stl_tree.h:544:7, col:53>
  (ReturnStmt 0xa8a6c28 <col:9, col:50>
    (CallExpr 0xa8a6bf8 <col:16, col:50> '_Base_ptr':'struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xa8a6be8 <col:16, col:36> '_Base_ptr (*)(_Base_ptr)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa8a6b90 <col:16, col:36> '_Base_ptr (_Base_ptr)' lvalue CXXMethod 0xa890390 '_S_minimum' '_Base_ptr (_Base_ptr)'))
      (ImplicitCastExpr 0xa8a6c18 <col:47> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (DeclRefExpr 0xa8a6b78 <col:47> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898930 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *')))))


        static _Const_Base_ptr _S_minimum(_Const_Base_ptr __x) (CompoundStmt 0xa8a6d68 </usr/include/c++/4.6/bits/stl_tree.h:548:7, col:53>
  (ReturnStmt 0xa8a6d58 <col:9, col:50>
    (CallExpr 0xa8a6d28 <col:16, col:50> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xa8a6d18 <col:16, col:36> '_Const_Base_ptr (*)(_Const_Base_ptr)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa8a6cc0 <col:16, col:36> '_Const_Base_ptr (_Const_Base_ptr)' lvalue CXXMethod 0xa8904c0 '_S_minimum' '_Const_Base_ptr (_Const_Base_ptr)'))
      (ImplicitCastExpr 0xa8a6d48 <col:47> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (DeclRefExpr 0xa8a6ca8 <col:47> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898a20 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))


        static _Base_ptr _S_maximum(_Base_ptr __x) (CompoundStmt 0xa8a6e60 </usr/include/c++/4.6/bits/stl_tree.h:552:7, col:53>
  (ReturnStmt 0xa8a6e50 <col:9, col:50>
    (CallExpr 0xa8a6e20 <col:16, col:50> '_Base_ptr':'struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xa8a6e10 <col:16, col:36> '_Base_ptr (*)(_Base_ptr)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa8a6df0 <col:16, col:36> '_Base_ptr (_Base_ptr)' lvalue CXXMethod 0xa890580 '_S_maximum' '_Base_ptr (_Base_ptr)'))
      (ImplicitCastExpr 0xa8a6e40 <col:47> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
        (DeclRefExpr 0xa8a6dd8 <col:47> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898b10 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *')))))


        static _Const_Base_ptr _S_maximum(_Const_Base_ptr __x) (CompoundStmt 0xa8a6f58 </usr/include/c++/4.6/bits/stl_tree.h:556:7, col:53>
  (ReturnStmt 0xa8a6f48 <col:9, col:50>
    (CallExpr 0xa8a6f18 <col:16, col:50> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'
      (ImplicitCastExpr 0xa8a6f08 <col:16, col:36> '_Const_Base_ptr (*)(_Const_Base_ptr)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa8a6ee8 <col:16, col:36> '_Const_Base_ptr (_Const_Base_ptr)' lvalue CXXMethod 0xa890640 '_S_maximum' '_Const_Base_ptr (_Const_Base_ptr)'))
      (ImplicitCastExpr 0xa8a6f38 <col:47> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (DeclRefExpr 0xa8a6ed0 <col:47> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa898bd0 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))


    public:
    public:
        typedef _Rb_tree_iterator<value_type> iterator;
        typedef _Rb_tree_const_iterator<value_type> const_iterator;
        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    private:
    private:
        iterator _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __y, const value_type &__v);
        iterator _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type &__v);
        iterator _M_insert_equal_lower(const value_type &__x);
        _Link_type _M_copy(_Const_Link_type __x, _Link_type __p);
        void _M_erase(_Link_type __x);
        iterator _M_lower_bound(_Link_type __x, _Link_type __y, const _Key &__k);
        const_iterator _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key &__k) const;
        iterator _M_upper_bound(_Link_type __x, _Link_type __y, const _Key &__k);
        const_iterator _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key &__k) const;
    public:
    public:
        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>() (CompoundStmt 0xa8a6f70 </usr/include/c++/4.6/bits/stl_tree.h:616:18, col:20>)


        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>(const _Compare &__comp, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa8a1198 </usr/include/c++/4.6/bits/stl_tree.h:619:37, col:52> 'allocator_type':'_Alloc')
) : _M_impl((DeclRefExpr 0xa8a6f80 </usr/include/c++/4.6/bits/stl_tree.h:620:17> 'const _Compare' lvalue ParmVar 0xa89e560 '__comp' 'const _Compare &')
, (DeclRefExpr 0xa8a6f98 </usr/include/c++/4.6/bits/stl_tree.h:620:25> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa89e5f0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa8a6ff0 </usr/include/c++/4.6/bits/stl_tree.h:620:30, col:32>)


        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x) : _M_impl((CXXDependentScopeMemberExpr 0xa8a7050 </usr/include/c++/4.6/bits/stl_tree.h:623:17, col:29> '<dependent type>' lvalue
  (CXXDependentScopeMemberExpr 0xa8a7018 <col:17, col:21> '<dependent type>' lvalue
    (DeclRefExpr 0xa8a7000 <col:17> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa89e730 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
, (CallExpr 0xa8a70d8 </usr/include/c++/4.6/bits/stl_tree.h:623:45, col:71> '<dependent type>'
  (CXXDependentScopeMemberExpr 0xa8a70a0 <col:45, col:49> '<dependent type>' lvalue
    (DeclRefExpr 0xa8a7084 <col:45> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa89e730 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
) (CompoundStmt 0xa8a77f8 </usr/include/c++/4.6/bits/stl_tree.h:624:7, line:632:7>
  (IfStmt 0xa8a77d8 <line:625:2, line:631:4>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8a7228 <line:625:6, col:23> '<dependent type>'
      (UnresolvedLookupExpr 0xa8a71c8 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (CallExpr 0xa8a7190 <col:6, col:18> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8a7158 <col:6, col:10> '<dependent type>' lvalue
          (DeclRefExpr 0xa8a713c <col:6> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa89e730 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
      (IntegerLiteral 0xa8a71b0 <col:23> 'int' 0))
    (CompoundStmt 0xa8a77b8 <line:626:4, line:631:4>
      (BinaryOperator 0xa8a73f8 <line:627:6, col:50> '<dependent type>' '='
        (CallExpr 0xa8a72a0 <col:6, col:14> '<dependent type>'
          (UnresolvedMemberExpr 0xa8a7260 <col:6> '<bound member function type>' lvalue))
        (CallExpr 0xa8a73d0 <col:18, col:50> '<dependent type>'
          (MemberExpr 0xa8a72d0 <col:18> '<bound member function type>' ->_M_copy 0xa89dc90
            (CXXThisExpr 0xa8a72c0 <col:18> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
          (CallExpr 0xa8a7340 <col:26, col:39> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8a7308 <col:26, col:30> '<dependent type>' lvalue
              (DeclRefExpr 0xa8a72f0 <col:26> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa89e730 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
          (CallExpr 0xa8a73b0 <col:42, col:49> '<dependent type>'
            (UnresolvedMemberExpr 0xa8a7370 <col:42> '<bound member function type>' lvalue))))
      (BinaryOperator 0xa8a7548 <line:628:6, col:42> '<dependent type>' '='
        (CallExpr 0xa8a7460 <col:6, col:18> '<dependent type>'
          (UnresolvedMemberExpr 0xa8a7420 <col:6> '<bound member function type>' lvalue))
        (CallExpr 0xa8a7528 <col:22, col:42> '<dependent type>'
          (UnresolvedLookupExpr 0xa8a7480 <col:22> '<dependent type>' lvalue (no ADL) = '1' 0xa898aa0 0xa8989b0)
          (CallExpr 0xa8a7508 <col:33, col:41> '<dependent type>'
            (UnresolvedMemberExpr 0xa8a74c8 <col:33> '<bound member function type>' lvalue))))
      (BinaryOperator 0xa8a7698 <line:629:6, col:43> '<dependent type>' '='
        (CallExpr 0xa8a75b0 <col:6, col:19> '<dependent type>'
          (UnresolvedMemberExpr 0xa8a7570 <col:6> '<bound member function type>' lvalue))
        (CallExpr 0xa8a7678 <col:23, col:43> '<dependent type>'
          (UnresolvedLookupExpr 0xa8a75d0 <col:23> '<dependent type>' lvalue (no ADL) = '1' 0xa898c20 0xa898b60)
          (CallExpr 0xa8a7658 <col:34, col:42> '<dependent type>'
            (UnresolvedMemberExpr 0xa8a7618 <col:34> '<bound member function type>' lvalue))))
      (BinaryOperator 0xa8a77a0 <line:630:6, col:42> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa8a76e0 <col:6, col:14> '<dependent type>' lvalue
          (MemberExpr 0xa8a76c0 <col:6> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
            (CXXThisExpr 0xa8a76b0 <col:6> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa8a7768 <col:30, col:42> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a7730 <col:30, col:34> '<dependent type>' lvalue
            (DeclRefExpr 0xa8a7714 <col:30> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa89e730 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))))
    <<<NULL>>>))


        void ~_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>() (CompoundStmt 0xa8a78d0 </usr/include/c++/4.6/bits/stl_tree.h:639:7, col:31>
  (CallExpr 0xa8a78b0 <col:9, col:28> '<dependent type>'
    (MemberExpr 0xa8a7820 <col:9> '<bound member function type>' ->_M_erase 0xa89dd50
      (CXXThisExpr 0xa8a7810 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
    (CallExpr 0xa8a7890 <col:18, col:27> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a7850 <col:18> '<bound member function type>' lvalue))))


        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x);
        _Compare key_comp() const (CompoundStmt 0xa8a7960 </usr/include/c++/4.6/bits/stl_tree.h:647:7, col:40>
  (ReturnStmt 0xa8a7950 <col:9, col:24>
    (CXXDependentScopeMemberExpr 0xa8a7918 <col:16, col:24> '<dependent type>' lvalue
      (MemberExpr 0xa8a78f8 <col:16> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8a78e8 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))


        iterator begin() (CompoundStmt 0xa8a7a88 </usr/include/c++/4.6/bits/stl_tree.h:651:7, line:654:7>
  (ReturnStmt 0xa8a7a78 <line:652:2, line:653:37>
    (CXXUnresolvedConstructExpr 0xa8a7a58 <line:652:9, line:653:37> 'iterator':'_Rb_tree_iterator<value_type>'
      (CXXStaticCastExpr 0xa8a7a40 <line:652:18, line:653:36> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
        (CXXDependentScopeMemberExpr 0xa8a7a00 <col:5, col:29> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a79c8 <col:5, col:19> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa8a7990 <col:5, col:11> '<dependent type>' lvalue
              (CXXThisExpr 0xa8a7980 <col:5> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))))


        const_iterator begin() const (CompoundStmt 0xa8a7bb0 </usr/include/c++/4.6/bits/stl_tree.h:658:7, line:661:7>
  (ReturnStmt 0xa8a7ba0 <line:659:2, line:660:43>
    (CXXUnresolvedConstructExpr 0xa8a7b80 <line:659:9, line:660:43> 'const_iterator':'_Rb_tree_const_iterator<value_type>'
      (CXXStaticCastExpr 0xa8a7b68 <line:659:24, line:660:42> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
        (CXXDependentScopeMemberExpr 0xa8a7b28 <col:11, col:35> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8a7af0 <col:11, col:25> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa8a7ab8 <col:11, col:17> '<dependent type>' lvalue
              (CXXThisExpr 0xa8a7aa8 <col:11> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))))


        iterator end() (CompoundStmt 0xa8a7cb8 </usr/include/c++/4.6/bits/stl_tree.h:665:7, col:77>
  (ReturnStmt 0xa8a7ca8 <col:9, col:74>
    (CXXUnresolvedConstructExpr 0xa8a7c88 <col:16, col:74> 'iterator':'_Rb_tree_iterator<value_type>'
      (CXXStaticCastExpr 0xa8a7c70 <col:25, col:73> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
        (UnaryOperator 0xa8a7c50 <col:49, col:64> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa8a7c18 <col:50, col:64> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa8a7be0 <col:50, col:56> '<dependent type>' lvalue
              (CXXThisExpr 0xa8a7bd0 <col:50> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))))


        const_iterator end() const (CompoundStmt 0xa8a7dc0 </usr/include/c++/4.6/bits/stl_tree.h:669:7, line:672:7>
  (ReturnStmt 0xa8a7db0 <line:670:2, line:671:36>
    (CXXUnresolvedConstructExpr 0xa8a7d90 <line:670:9, line:671:36> 'const_iterator':'_Rb_tree_const_iterator<value_type>'
      (CXXStaticCastExpr 0xa8a7d78 <line:670:24, line:671:35> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
        (UnaryOperator 0xa8a7d58 <col:11, col:26> '<dependent type>' prefix '&'
          (CXXDependentScopeMemberExpr 0xa8a7d20 <col:12, col:26> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa8a7ce8 <col:12, col:18> '<dependent type>' lvalue
              (CXXThisExpr 0xa8a7cd8 <col:12> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))))


        reverse_iterator rbegin() (CompoundStmt 0xa8a7e80 </usr/include/c++/4.6/bits/stl_tree.h:676:7, col:41>
  (ReturnStmt 0xa8a7e70 <col:9, col:38>
    (CXXUnresolvedConstructExpr 0xa8a7e50 <col:16, col:38> 'reverse_iterator':'reverse_iterator<iterator>'
      (CallExpr 0xa8a7e30 <col:33, col:37> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a7df0 <col:33> '<bound member function type>' lvalue)))))


        const_reverse_iterator rbegin() const (CompoundStmt 0xa8a7f40 </usr/include/c++/4.6/bits/stl_tree.h:680:7, col:47>
  (ReturnStmt 0xa8a7f30 <col:9, col:44>
    (CXXUnresolvedConstructExpr 0xa8a7f10 <col:16, col:44> 'const_reverse_iterator':'reverse_iterator<const_iterator>'
      (CallExpr 0xa8a7ef0 <col:39, col:43> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a7eb0 <col:39> '<bound member function type>' lvalue)))))


        reverse_iterator rend() (CompoundStmt 0xa8a8000 </usr/include/c++/4.6/bits/stl_tree.h:684:7, col:43>
  (ReturnStmt 0xa8a7ff0 <col:9, col:40>
    (CXXUnresolvedConstructExpr 0xa8a7fd0 <col:16, col:40> 'reverse_iterator':'reverse_iterator<iterator>'
      (CallExpr 0xa8a7fb0 <col:33, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a7f70 <col:33> '<bound member function type>' lvalue)))))


        const_reverse_iterator rend() const (CompoundStmt 0xa8a80c0 </usr/include/c++/4.6/bits/stl_tree.h:688:7, col:49>
  (ReturnStmt 0xa8a80b0 <col:9, col:46>
    (CXXUnresolvedConstructExpr 0xa8a8090 <col:16, col:46> 'const_reverse_iterator':'reverse_iterator<const_iterator>'
      (CallExpr 0xa8a8070 <col:39, col:45> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a8030 <col:39> '<bound member function type>' lvalue)))))


        bool empty() const (CompoundStmt 0xa8a81f0 </usr/include/c++/4.6/bits/stl_tree.h:692:7, col:44>
  (ReturnStmt 0xa8a81e0 <col:9, col:41>
    (CXXOperatorCallExpr 0xa8a81b8 <col:16, col:41> '<dependent type>'
      (UnresolvedLookupExpr 0xa8a8158 <col:38, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CXXDependentScopeMemberExpr 0xa8a8108 <col:16, col:24> '<dependent type>' lvalue
        (MemberExpr 0xa8a80e8 <col:16> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
          (CXXThisExpr 0xa8a80d8 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
      (IntegerLiteral 0xa8a8140 <col:41> 'int' 0))))


        size_type size() const (CompoundStmt 0xa8a8280 </usr/include/c++/4.6/bits/stl_tree.h:696:7, col:39>
  (ReturnStmt 0xa8a8270 <col:9, col:24>
    (CXXDependentScopeMemberExpr 0xa8a8238 <col:16, col:24> '<dependent type>' lvalue
      (MemberExpr 0xa8a8218 <col:16> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8a8208 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))


        size_type max_size() const (CompoundStmt 0xa8a8370 </usr/include/c++/4.6/bits/stl_tree.h:700:7, col:52>
  (ReturnStmt 0xa8a8360 <col:9, col:49>
    (CallExpr 0xa8a8340 <col:16, col:49> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8a8308 <col:16, col:40> '<dependent type>' lvalue
        (CallExpr 0xa8a82e8 <col:16, col:38> '<dependent type>'
          (UnresolvedMemberExpr 0xa8a82a8 <col:16> '<bound member function type>' lvalue))))))


        void swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__t);
        pair<iterator, bool> _M_insert_unique(const value_type &__x);
        iterator _M_insert_equal(const value_type &__x);
        iterator _M_insert_unique_(const_iterator __position, const value_type &__x);
        iterator _M_insert_equal_(const_iterator __position, const value_type &__x);
        template <typename _InputIterator> void _M_insert_unique(_InputIterator __first, _InputIterator __last);
        template <typename _InputIterator> void _M_insert_equal(_InputIterator __first, _InputIterator __last);
    private:
    private:
        void _M_erase_aux(const_iterator __position);
        void _M_erase_aux(const_iterator __first, const_iterator __last);
    public:
    public:
        void erase(iterator __position) (CompoundStmt 0xa8a8410 </usr/include/c++/4.6/bits/stl_tree.h:776:7, col:35>
  (CallExpr 0xa8a83f0 <col:9, col:32> '<dependent type>'
    (UnresolvedMemberExpr 0xa8a8398 <col:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa8a83d8 <col:22> 'iterator':'_Rb_tree_iterator<value_type>' lvalue ParmVar 0xa89fe20 '__position' 'iterator':'_Rb_tree_iterator<value_type>')))


        void erase(const_iterator __position) (CompoundStmt 0xa8a84b0 </usr/include/c++/4.6/bits/stl_tree.h:780:7, col:35>
  (CallExpr 0xa8a8490 <col:9, col:32> '<dependent type>'
    (UnresolvedMemberExpr 0xa8a8438 <col:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa8a8478 <col:22> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa89ff30 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))


        size_type erase(const key_type &__x);
        void erase(iterator __first, iterator __last) (CompoundStmt 0xa8a8570 </usr/include/c++/4.6/bits/stl_tree.h:797:7, col:40>
  (CallExpr 0xa8a8548 <col:9, col:37> '<dependent type>'
    (UnresolvedMemberExpr 0xa8a84d8 <col:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa8a8518 <col:22> 'iterator':'_Rb_tree_iterator<value_type>' lvalue ParmVar 0xa8a0140 '__first' 'iterator':'_Rb_tree_iterator<value_type>')
    (DeclRefExpr 0xa8a8530 <col:31> 'iterator':'_Rb_tree_iterator<value_type>' lvalue ParmVar 0xa8a0180 '__last' 'iterator':'_Rb_tree_iterator<value_type>')))


        void erase(const_iterator __first, const_iterator __last) (CompoundStmt 0xa8a8630 </usr/include/c++/4.6/bits/stl_tree.h:801:7, col:40>
  (CallExpr 0xa8a8608 <col:9, col:37> '<dependent type>'
    (UnresolvedMemberExpr 0xa8a8598 <col:9> '<bound member function type>' lvalue)
    (DeclRefExpr 0xa8a85d8 <col:22> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8a0290 '__first' 'const_iterator':'_Rb_tree_const_iterator<value_type>')
    (DeclRefExpr 0xa8a85f0 <col:31> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8a02d0 '__last' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))


        void erase(const key_type *__first, const key_type *__last);
        void clear() (CompoundStmt 0xa8a8a30 </usr/include/c++/4.6/bits/stl_tree.h:808:7, line:814:7>
  (CallExpr 0xa8a86e8 <line:809:9, col:28> '<dependent type>'
    (MemberExpr 0xa8a8658 <col:9> '<bound member function type>' ->_M_erase 0xa89dd50
      (CXXThisExpr 0xa8a8648 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
    (CallExpr 0xa8a86c8 <col:18, col:27> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8688 <col:18> '<bound member function type>' lvalue)))
  (BinaryOperator 0xa8a87e8 <line:810:9, col:32> '<dependent type>' '='
    (CallExpr 0xa8a8758 <col:9, col:21> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8718 <col:9> '<bound member function type>' lvalue))
    (CallExpr 0xa8a87c8 <col:25, col:32> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8788 <col:25> '<bound member function type>' lvalue)))
  (BinaryOperator 0xa8a8888 <line:811:9, col:21> '<dependent type>' '='
    (CallExpr 0xa8a8850 <col:9, col:17> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8810 <col:9> '<bound member function type>' lvalue))
    (IntegerLiteral 0xa8a8870 <col:21> 'int' 0))
  (BinaryOperator 0xa8a8980 <line:812:9, col:33> '<dependent type>' '='
    (CallExpr 0xa8a88f0 <col:9, col:22> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a88b0 <col:9> '<bound member function type>' lvalue))
    (CallExpr 0xa8a8960 <col:26, col:33> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8920 <col:26> '<bound member function type>' lvalue)))
  (BinaryOperator 0xa8a8a18 <line:813:9, col:33> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8a89c8 <col:9, col:17> '<dependent type>' lvalue
      (MemberExpr 0xa8a89a8 <col:9> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8a8998 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
    (IntegerLiteral 0xa8a8a00 <col:33> 'int' 0)))


        iterator find(const key_type &__k);
        const_iterator find(const key_type &__k) const;
        size_type count(const key_type &__k) const;
        iterator lower_bound(const key_type &__k) (CompoundStmt 0xa8a8bd8 </usr/include/c++/4.6/bits/stl_tree.h:828:7, col:59>
  (ReturnStmt 0xa8a8bc8 <col:9, col:56>
    (CallExpr 0xa8a8ba0 <col:16, col:56> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8a68 <col:16> '<bound member function type>' lvalue)
      (CallExpr 0xa8a8af8 <col:31, col:40> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a8ab8 <col:31> '<bound member function type>' lvalue))
      (CallExpr 0xa8a8b68 <col:43, col:50> '<dependent type>'
        (UnresolvedMemberExpr 0xa8a8b28 <col:43> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa8a8b84 <col:53> 'const key_type':'const _Key' lvalue ParmVar 0xa8a0910 '__k' 'const key_type &'))))


        const_iterator lower_bound(const key_type &__k) const (CompoundStmt 0xa8aacc0 </usr/include/c++/4.6/bits/stl_tree.h:832:7, col:59>
  (ReturnStmt 0xa8aacb0 <col:9, col:56>
    (CallExpr 0xa8aac88 <col:16, col:56> '<dependent type>'
      (UnresolvedMemberExpr 0xa8a8c00 <col:16> '<bound member function type>' lvalue)
      (CallExpr 0xa8aabe0 <col:31, col:40> '<dependent type>'
        (UnresolvedMemberExpr 0xa8aaba0 <col:31> '<bound member function type>' lvalue))
      (CallExpr 0xa8aac50 <col:43, col:50> '<dependent type>'
        (UnresolvedMemberExpr 0xa8aac10 <col:43> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa8aac6c <col:53> 'const key_type':'const _Key' lvalue ParmVar 0xa8a09e0 '__k' 'const key_type &'))))


        iterator upper_bound(const key_type &__k) (CompoundStmt 0xa8aae58 </usr/include/c++/4.6/bits/stl_tree.h:836:7, col:59>
  (ReturnStmt 0xa8aae48 <col:9, col:56>
    (CallExpr 0xa8aae20 <col:16, col:56> '<dependent type>'
      (UnresolvedMemberExpr 0xa8aace8 <col:16> '<bound member function type>' lvalue)
      (CallExpr 0xa8aad78 <col:31, col:40> '<dependent type>'
        (UnresolvedMemberExpr 0xa8aad38 <col:31> '<bound member function type>' lvalue))
      (CallExpr 0xa8aade8 <col:43, col:50> '<dependent type>'
        (UnresolvedMemberExpr 0xa8aada8 <col:43> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa8aae04 <col:53> 'const key_type':'const _Key' lvalue ParmVar 0xa8a0ab0 '__k' 'const key_type &'))))


        const_iterator upper_bound(const key_type &__k) const (CompoundStmt 0xa8aaff0 </usr/include/c++/4.6/bits/stl_tree.h:840:7, col:59>
  (ReturnStmt 0xa8aafe0 <col:9, col:56>
    (CallExpr 0xa8aafb8 <col:16, col:56> '<dependent type>'
      (UnresolvedMemberExpr 0xa8aae80 <col:16> '<bound member function type>' lvalue)
      (CallExpr 0xa8aaf10 <col:31, col:40> '<dependent type>'
        (UnresolvedMemberExpr 0xa8aaed0 <col:31> '<bound member function type>' lvalue))
      (CallExpr 0xa8aaf80 <col:43, col:50> '<dependent type>'
        (UnresolvedMemberExpr 0xa8aaf40 <col:43> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa8aaf9c <col:53> 'const key_type':'const _Key' lvalue ParmVar 0xa8a0b80 '__k' 'const key_type &'))))


        pair<iterator, iterator> equal_range(const key_type &__k);
        pair<const_iterator, const_iterator> equal_range(const key_type &__k) const;
        bool __rb_verify() const;
    };
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline bool operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8abaf0 </usr/include/c++/4.6/bits/stl_tree.h:858:5, line:861:5>
  (ReturnStmt 0xa8abae0 <line:859:7, line:860:56>
    (BinaryOperator 0xa8abac8 <line:859:14, line:860:56> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa8ab8d8 <line:859:14, col:37> '<dependent type>'
        (UnresolvedLookupExpr 0xa8ab870 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (CallExpr 0xa8ab7e0 <col:14, col:23> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8ab7a8 <col:14, col:18> '<dependent type>' lvalue
            (DeclRefExpr 0xa8ab790 <col:14> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ab400 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
        (CallExpr 0xa8ab850 <col:28, col:37> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8ab818 <col:28, col:32> '<dependent type>' lvalue
            (DeclRefExpr 0xa8ab7fc <col:28> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ab660 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
      (CallExpr 0xa8abaa0 <line:860:10, col:56> '<dependent type>'
        (UnresolvedLookupExpr 0xa8ab918 <col:10, col:15> '<overloaded function type>' lvalue (no ADL) = '1' 0xa663a80 0xa664a50)
        (CallExpr 0xa8ab9a0 <col:21, col:31> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8ab968 <col:21, col:25> '<dependent type>' lvalue
            (DeclRefExpr 0xa8ab950 <col:21> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ab400 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
        (CallExpr 0xa8aba10 <col:34, col:42> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8ab9d8 <col:34, col:38> '<dependent type>' lvalue
            (DeclRefExpr 0xa8ab9bc <col:34> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ab400 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
        (CallExpr 0xa8aba80 <col:45, col:55> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8aba48 <col:45, col:49> '<dependent type>' lvalue
            (DeclRefExpr 0xa8aba2c <col:45> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ab660 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))))))

;
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline bool operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ac4a0 </usr/include/c++/4.6/bits/stl_tree.h:868:5, line:871:5>
  (ReturnStmt 0xa8ac490 <line:869:7, line:870:30>
    (CallExpr 0xa8ac460 <line:869:14, line:870:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ac268 <line:869:14, col:19> '<overloaded function type>' lvalue (no ADL) = '1' 0xa664fa0 0xa665870)
      (CallExpr 0xa8ac2f0 <col:43, col:53> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8ac2b8 <col:43, col:47> '<dependent type>' lvalue
          (DeclRefExpr 0xa8ac2a0 <col:43> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8abee0 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
      (CallExpr 0xa8ac360 <col:56, col:64> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8ac328 <col:56, col:60> '<dependent type>' lvalue
          (DeclRefExpr 0xa8ac30c <col:56> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8abee0 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
      (CallExpr 0xa8ac3d0 <line:870:8, col:18> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8ac398 <col:8, col:12> '<dependent type>' lvalue
          (DeclRefExpr 0xa8ac37c <col:8> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ac140 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
      (CallExpr 0xa8ac440 <col:21, col:29> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8ac408 <col:21, col:25> '<dependent type>' lvalue
          (DeclRefExpr 0xa8ac3ec <col:21> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ac140 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline bool operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8acd00 </usr/include/c++/4.6/bits/stl_tree.h:878:5, col:29>
  (ReturnStmt 0xa8accf0 <col:7, col:26>
    (UnaryOperator 0xa8accd8 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa8accc0 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa8acc98 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa8acc30 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
          (DeclRefExpr 0xa8acc00 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ac890 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8acc18 <col:23> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8acaf0 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline bool operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ad518 </usr/include/c++/4.6/bits/stl_tree.h:885:5, col:25>
  (ReturnStmt 0xa8ad508 <col:7, col:20>
    (CXXOperatorCallExpr 0xa8ad4e0 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ad490 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ac220 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
      (DeclRefExpr 0xa8ad460 <col:14> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ad350 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')
      (DeclRefExpr 0xa8ad478 <col:20> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ad0f0 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))

;
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline bool operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8add58 </usr/include/c++/4.6/bits/stl_tree.h:892:5, col:28>
  (ReturnStmt 0xa8add48 <col:7, col:25>
    (UnaryOperator 0xa8add30 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa8add18 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa8adcf0 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8adca0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ac220 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
          (DeclRefExpr 0xa8adc70 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8adb60 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8adc88 <col:22> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ad900 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline bool operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ae598 </usr/include/c++/4.6/bits/stl_tree.h:899:5, col:28>
  (ReturnStmt 0xa8ae588 <col:7, col:25>
    (UnaryOperator 0xa8ae570 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa8ae558 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa8ae530 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8ae4e0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ac220 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0)
          (DeclRefExpr 0xa8ae4b0 <col:16> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ae140 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8ae4c8 <col:22> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ae3a0 '__y' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc> inline void swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x, _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__y) (CompoundStmt 0xa8aee48 </usr/include/c++/4.6/bits/stl_tree.h:906:5, col:22>
  (CallExpr 0xa8aee28 <col:7, col:19> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8aedd8 <col:7, col:11> '<dependent type>' lvalue
      (DeclRefExpr 0xa8aedc0 <col:7> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8ae9a0 '__x' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))
    (DeclRefExpr 0xa8aee0c <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8aec90 '__y' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))

;
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__x) (CompoundStmt 0xa8b03e8 </usr/include/c++/4.6/bits/stl_tree.h:937:5, line:952:5>
  (IfStmt 0xa8b0390 <line:938:7, line:950:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8afb38 <line:938:11, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa8afad8 <col:16, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (CXXThisExpr 0xa8afa98 <col:11> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)
      (UnaryOperator 0xa8afac0 <col:19, col:20> '<dependent type>' prefix '&'
        (DeclRefExpr 0xa8afaa8 <col:20> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8af760 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
    (CompoundStmt 0xa8b0370 <line:939:2, line:950:2>
      (CallExpr 0xa8afb90 <line:941:4, col:10> '<dependent type>'
        (MemberExpr 0xa8afb70 <col:4> '<bound member function type>' ->clear 0xa8a0540
          (CXXThisExpr 0xa8afb60 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
      (BinaryOperator 0xa8afca0 <line:942:4, col:41> '<dependent type>' '='
        (CXXDependentScopeMemberExpr 0xa8afbe0 <col:4, col:12> '<dependent type>' lvalue
          (MemberExpr 0xa8afbc0 <col:4> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
            (CXXThisExpr 0xa8afbb0 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
        (CXXDependentScopeMemberExpr 0xa8afc68 <col:29, col:41> '<dependent type>' lvalue
          (CXXDependentScopeMemberExpr 0xa8afc30 <col:29, col:33> '<dependent type>' lvalue
            (DeclRefExpr 0xa8afc14 <col:29> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8af760 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
      (IfStmt 0xa8b0350 <line:943:4, line:949:6>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8afda0 <line:943:8, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa8afd40 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
          (CallExpr 0xa8afd08 <col:8, col:20> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8afcd0 <col:8, col:12> '<dependent type>' lvalue
              (DeclRefExpr 0xa8afcb8 <col:8> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8af760 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
          (IntegerLiteral 0xa8afd28 <col:25> 'int' 0))
        (CompoundStmt 0xa8b0330 <line:944:6, line:949:6>
          (BinaryOperator 0xa8aff70 <line:945:8, col:52> '<dependent type>' '='
            (CallExpr 0xa8afe18 <col:8, col:16> '<dependent type>'
              (UnresolvedMemberExpr 0xa8afdd8 <col:8> '<bound member function type>' lvalue))
            (CallExpr 0xa8aff48 <col:20, col:52> '<dependent type>'
              (MemberExpr 0xa8afe48 <col:20> '<bound member function type>' ->_M_copy 0xa89dc90
                (CXXThisExpr 0xa8afe38 <col:20> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
              (CallExpr 0xa8afeb8 <col:28, col:41> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa8afe80 <col:28, col:32> '<dependent type>' lvalue
                  (DeclRefExpr 0xa8afe68 <col:28> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8af760 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
              (CallExpr 0xa8aff28 <col:44, col:51> '<dependent type>'
                (UnresolvedMemberExpr 0xa8afee8 <col:44> '<bound member function type>' lvalue))))
          (BinaryOperator 0xa8b00c0 <line:946:8, col:44> '<dependent type>' '='
            (CallExpr 0xa8affd8 <col:8, col:20> '<dependent type>'
              (UnresolvedMemberExpr 0xa8aff98 <col:8> '<bound member function type>' lvalue))
            (CallExpr 0xa8b00a0 <col:24, col:44> '<dependent type>'
              (UnresolvedLookupExpr 0xa8afff8 <col:24> '<dependent type>' lvalue (no ADL) = '1' 0xa8989b0 0xa898aa0)
              (CallExpr 0xa8b0080 <col:35, col:43> '<dependent type>'
                (UnresolvedMemberExpr 0xa8b0040 <col:35> '<bound member function type>' lvalue))))
          (BinaryOperator 0xa8b0210 <line:947:8, col:45> '<dependent type>' '='
            (CallExpr 0xa8b0128 <col:8, col:21> '<dependent type>'
              (UnresolvedMemberExpr 0xa8b00e8 <col:8> '<bound member function type>' lvalue))
            (CallExpr 0xa8b01f0 <col:25, col:45> '<dependent type>'
              (UnresolvedLookupExpr 0xa8b0148 <col:25> '<dependent type>' lvalue (no ADL) = '1' 0xa898b60 0xa898c20)
              (CallExpr 0xa8b01d0 <col:36, col:44> '<dependent type>'
                (UnresolvedMemberExpr 0xa8b0190 <col:36> '<bound member function type>' lvalue))))
          (BinaryOperator 0xa8b0318 <line:948:8, col:44> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa8b0258 <col:8, col:16> '<dependent type>' lvalue
              (MemberExpr 0xa8b0238 <col:8> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8b0228 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (CXXDependentScopeMemberExpr 0xa8b02e0 <col:32, col:44> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa8b02a8 <col:32, col:36> '<dependent type>' lvalue
                (DeclRefExpr 0xa8b028c <col:32> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8af760 '__x' 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))))
        <<<NULL>>>))
    <<<NULL>>>)
  (ReturnStmt 0xa8b03d8 <line:951:7, col:15>
    (UnaryOperator 0xa8b03c0 <col:14, col:15> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa8b03b0 <col:15> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val &__v) (CompoundStmt 0xa8b1598 </usr/include/c++/4.6/bits/stl_tree.h:966:5, line:978:5>
  (DeclStmt 0xa8b1288 <line:967:7, line:969:26>
    0xa8b0f30 "bool __insert_left =
      (ParenExpr 0xa8b1270 <line:967:28, line:969:25> '<dependent type>'
        (BinaryOperator 0xa8b1258 <line:967:29, line:969:24> '<dependent type>' '||'
          (BinaryOperator 0xa8b10e8 <line:967:29, col:55> '<dependent type>' '||'
            (BinaryOperator 0xa8b0fb8 <col:29, col:36> '_Bool' '!='
              (ImplicitCastExpr 0xa8b0f98 <col:29> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
                (DeclRefExpr 0xa8b0f64 <col:29> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b0b50 '__x' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *'))
              (ImplicitCastExpr 0xa8b0fa8 <col:36> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <NullToPointer>
                (IntegerLiteral 0xa8b0f80 <col:36> 'int' 0)))
            (CXXOperatorCallExpr 0xa8b10c0 <col:41, col:55> '<dependent type>'
              (UnresolvedLookupExpr 0xa8b1058 <col:45, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (DeclRefExpr 0xa8b0fd0 <col:41> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b0b90 '__p' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')
              (CallExpr 0xa8b1038 <col:48, col:55> '<dependent type>'
                (UnresolvedMemberExpr 0xa8b0ff8 <col:48> '<bound member function type>' lvalue))))
          (CallExpr 0xa8b1230 <line:968:11, line:969:24> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8b1130 <line:968:11, col:19> '<dependent type>' lvalue
              (MemberExpr 0xa8b1110 <col:11> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8b1100 <col:11> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (CallExpr 0xa8b11a0 <col:34, col:51> '<dependent type>'
              (CXXUnresolvedConstructExpr 0xa8b1170 <col:34, col:46> '_KeyOfValue')
              (DeclRefExpr 0xa8b1188 <col:48> 'const _Val' lvalue ParmVar 0xa8b0c00 '__v' 'const _Val &'))
            (CallExpr 0xa8b1210 <line:969:13, col:23> '<dependent type>'
              (UnresolvedLookupExpr 0xa8b11c0 <col:13> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8b11f8 <col:20> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b0b90 '__p' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))))")
  (DeclStmt 0xa8b1358 <line:971:7, col:67>
    0xa8b12a0 "_Link_type __z =
      (CallExpr 0xa8b1338 <col:24, col:66> '<dependent type>'
        (MemberExpr 0xa8b12e8 <col:24> '<bound member function type>' ->_M_create_node 0xa896f70
          (CXXThisExpr 0xa8b12d8 <col:24> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (ParenExpr 0xa8b1320 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
          (DeclRefExpr 0xa8b1308 </usr/include/c++/4.6/bits/stl_tree.h:971:62> 'const _Val' lvalue ParmVar 0xa8b0c00 '__v' 'const _Val &')))")
  (CallExpr 0xa8b1498 <line:973:7, line:975:32> '<dependent type>'
    (UnresolvedLookupExpr 0xa8b1368 <line:973:7> '<overloaded function type>' lvalue (ADL) = '1' 0xa895a60)
    (DeclRefExpr 0xa8b139c <col:37> '_Bool' lvalue Var 0xa8b0f30 '__insert_left' '_Bool')
    (DeclRefExpr 0xa8b13b4 <col:52> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b12a0 '__z' '_Link_type':'_Rb_tree_node<_Val> *')
    (CXXConstCastExpr 0xa8b1400 <line:974:9, col:34> '_Base_ptr':'struct std::_Rb_tree_node_base *' const_cast<_Base_ptr> <NoOp>
      (ImplicitCastExpr 0xa8b13f0 <col:31> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' <LValueToRValue>
        (DeclRefExpr 0xa8b13cc <col:31> '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b0b90 '__p' '_Const_Base_ptr':'const struct std::_Rb_tree_node_base *')))
    (CXXDependentScopeMemberExpr 0xa8b1460 <line:975:9, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8b1428 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa8b1418 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
  (UnaryOperator 0xa8b1530 <line:976:7, col:17> '<dependent type>' prefix '++'
    (CXXDependentScopeMemberExpr 0xa8b14f8 <col:9, col:17> '<dependent type>' lvalue
      (MemberExpr 0xa8b14d8 <col:9> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8b14c8 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
  (ReturnStmt 0xa8b1588 <line:977:7, col:26>
    (CXXUnresolvedConstructExpr 0xa8b1568 <col:14, col:26> 'iterator':'_Rb_tree_iterator<value_type>'
      (DeclRefExpr 0xa8b1550 <col:23> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b12a0 '__z' '_Link_type':'_Rb_tree_node<_Val> *'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val &__v) (CompoundStmt 0xa8b2718 </usr/include/c++/4.6/bits/stl_tree.h:992:5, line:1003:5>
  (DeclStmt 0xa8b2430 <line:993:7, line:995:34>
    0xa8b20c0 "bool __insert_left =
      (ParenExpr 0xa8b2418 <line:993:28, line:995:33> '<dependent type>'
        (BinaryOperator 0xa8b2400 <line:993:29, line:995:32> '<dependent type>' '||'
          (BinaryOperator 0xa8b2278 <line:993:29, col:55> '<dependent type>' '||'
            (BinaryOperator 0xa8b2148 <col:29, col:36> '_Bool' '!='
              (ImplicitCastExpr 0xa8b2128 <col:29> '_Base_ptr':'struct std::_Rb_tree_node_base *' <LValueToRValue>
                (DeclRefExpr 0xa8b20f4 <col:29> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b1ce0 '__x' '_Base_ptr':'struct std::_Rb_tree_node_base *'))
              (ImplicitCastExpr 0xa8b2138 <col:36> '_Base_ptr':'struct std::_Rb_tree_node_base *' <NullToPointer>
                (IntegerLiteral 0xa8b2110 <col:36> 'int' 0)))
            (CXXOperatorCallExpr 0xa8b2250 <col:41, col:55> '<dependent type>'
              (UnresolvedLookupExpr 0xa8b21e8 <col:45, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (DeclRefExpr 0xa8b2160 <col:41> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b1d20 '__p' '_Base_ptr':'struct std::_Rb_tree_node_base *')
              (CallExpr 0xa8b21c8 <col:48, col:55> '<dependent type>'
                (UnresolvedMemberExpr 0xa8b2188 <col:48> '<bound member function type>' lvalue))))
          (UnaryOperator 0xa8b23e8 <line:994:11, line:995:32> '<dependent type>' prefix '!'
            (CallExpr 0xa8b23c0 <line:994:12, line:995:32> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8b22c0 <line:994:12, col:20> '<dependent type>' lvalue
                (MemberExpr 0xa8b22a0 <col:12> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                  (CXXThisExpr 0xa8b2290 <col:12> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
              (CallExpr 0xa8b2348 <col:35, col:45> '<dependent type>'
                (UnresolvedLookupExpr 0xa8b22f8 <col:35> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                (DeclRefExpr 0xa8b2330 <col:42> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b1d20 '__p' '_Base_ptr':'struct std::_Rb_tree_node_base *'))
              (CallExpr 0xa8b23a0 <line:995:14, col:31> '<dependent type>'
                (CXXUnresolvedConstructExpr 0xa8b2370 <col:14, col:26> '_KeyOfValue')
                (DeclRefExpr 0xa8b2388 <col:28> 'const _Val' lvalue ParmVar 0xa8b1d90 '__v' 'const _Val &'))))))")
  (DeclStmt 0xa8b2508 <line:997:7, col:67>
    0xa8b2450 "_Link_type __z =
      (CallExpr 0xa8b24e8 <col:24, col:66> '<dependent type>'
        (MemberExpr 0xa8b2498 <col:24> '<bound member function type>' ->_M_create_node 0xa896f70
          (CXXThisExpr 0xa8b2488 <col:24> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (ParenExpr 0xa8b24d0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
          (DeclRefExpr 0xa8b24b8 </usr/include/c++/4.6/bits/stl_tree.h:997:62> 'const _Val' lvalue ParmVar 0xa8b1d90 '__v' 'const _Val &')))")
  (CallExpr 0xa8b2618 <line:999:7, line:1000:32> '<dependent type>'
    (UnresolvedLookupExpr 0xa8b2518 <line:999:7> '<overloaded function type>' lvalue (ADL) = '1' 0xa895a60)
    (DeclRefExpr 0xa8b254c <col:37> '_Bool' lvalue Var 0xa8b20c0 '__insert_left' '_Bool')
    (DeclRefExpr 0xa8b2564 <col:52> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b2450 '__z' '_Link_type':'_Rb_tree_node<_Val> *')
    (DeclRefExpr 0xa8b257c <col:57> '_Base_ptr':'struct std::_Rb_tree_node_base *' lvalue ParmVar 0xa8b1d20 '__p' '_Base_ptr':'struct std::_Rb_tree_node_base *')
    (CXXDependentScopeMemberExpr 0xa8b25e0 <line:1000:9, col:23> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8b25a8 <col:9, col:15> '<dependent type>' lvalue
        (CXXThisExpr 0xa8b2598 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
  (UnaryOperator 0xa8b26b0 <line:1001:7, col:17> '<dependent type>' prefix '++'
    (CXXDependentScopeMemberExpr 0xa8b2678 <col:9, col:17> '<dependent type>' lvalue
      (MemberExpr 0xa8b2658 <col:9> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8b2648 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
  (ReturnStmt 0xa8b2708 <line:1002:7, col:26>
    (CXXUnresolvedConstructExpr 0xa8b26e8 <col:14, col:26> 'iterator':'_Rb_tree_iterator<value_type>'
      (DeclRefExpr 0xa8b26d0 <col:23> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b2450 '__z' '_Link_type':'_Rb_tree_node<_Val> *'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_insert_equal_lower(const _Val &__v) (CompoundStmt 0xa8b3830 </usr/include/c++/4.6/bits/stl_tree.h:1017:5, line:1027:5>
  (DeclStmt 0xa8b32c8 <line:1018:7, col:34>
    0xa8b3220 "_Link_type __x =
      (CallExpr 0xa8b32a8 <col:24, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa8b3268 <col:24> '<bound member function type>' lvalue))")
  (DeclStmt 0xa8b3388 <line:1019:7, col:32>
    0xa8b32e0 "_Link_type __y =
      (CallExpr 0xa8b3368 <col:24, col:31> '<dependent type>'
        (UnresolvedMemberExpr 0xa8b3328 <col:24> '<bound member function type>' lvalue))")
  (WhileStmt 0xa8b3750 <line:1020:7, line:1025:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8b3428 <line:1020:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8b33c8 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8b3398 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8b33b0 <col:21> 'int' 0))
    (CompoundStmt 0xa8b3738 <line:1021:2, line:1025:2>
      (BinaryOperator 0xa8b3480 <line:1022:4, col:10> '<dependent type>' '='
        (DeclRefExpr 0xa8b344c <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b32e0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
        (DeclRefExpr 0xa8b3464 <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
      (BinaryOperator 0xa8b3720 <line:1023:4, line:1024:37> '<dependent type>' '='
        (DeclRefExpr 0xa8b3498 <line:1023:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
        (ConditionalOperator 0xa8b3700 <col:10, line:1024:37> '<dependent type>'
          (UnaryOperator 0xa8b3608 <line:1023:10, col:65> '<dependent type>' prefix '!'
            (CallExpr 0xa8b35e0 <col:11, col:65> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8b34e0 <col:11, col:19> '<dependent type>' lvalue
                (MemberExpr 0xa8b34c0 <col:11> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                  (CXXThisExpr 0xa8b34b0 <col:11> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
              (CallExpr 0xa8b3568 <col:34, col:44> '<dependent type>'
                (UnresolvedLookupExpr 0xa8b3518 <col:34> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                (DeclRefExpr 0xa8b3550 <col:41> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
              (CallExpr 0xa8b35c0 <col:47, col:64> '<dependent type>'
                (CXXUnresolvedConstructExpr 0xa8b3590 <col:47, col:59> '_KeyOfValue')
                (DeclRefExpr 0xa8b35a8 <col:61> 'const _Val' lvalue ParmVar 0xa8b2f10 '__v' 'const _Val &'))))
          (CallExpr 0xa8b3670 <line:1024:10, col:21> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b3620 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8b3658 <col:18> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
          (CallExpr 0xa8b36e0 <col:25, col:37> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b3690 <col:25> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
            (DeclRefExpr 0xa8b36c8 <col:34> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))))
  (ReturnStmt 0xa8b3820 <line:1026:7, col:67>
    (CallExpr 0xa8b37f8 <col:14, col:67> '<dependent type>'
      (MemberExpr 0xa8b3778 <col:14> '<bound member function type>' ->_M_insert_lower 0xa8b2010
        (CXXThisExpr 0xa8b3768 <col:14> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
      (DeclRefExpr 0xa8b3798 <col:30> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b3220 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (DeclRefExpr 0xa8b37b0 <col:35> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b32e0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
      (ParenExpr 0xa8b37e0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
        (DeclRefExpr 0xa8b37c8 </usr/include/c++/4.6/bits/stl_tree.h:1026:63> 'const _Val' lvalue ParmVar 0xa8b2f10 '__v' 'const _Val &')))))


    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type _M_copy(_Const_Link_type __x, _Link_type __p) (CompoundStmt 0xa8b4d48 </usr/include/c++/4.6/bits/stl_tree.h:1034:5, line:1063:5>
  (DeclStmt 0xa8b4390 <line:1036:7, col:44>
    0xa8b42f0 "_Link_type __top =
      (CallExpr 0xa8b4370 <col:26, col:43> '<dependent type>'
        (MemberExpr 0xa8b4338 <col:26> '<bound member function type>' ->_M_clone_node 0xa897160
          (CXXThisExpr 0xa8b4328 <col:26> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (DeclRefExpr 0xa8b4358 <col:40> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))")
  (BinaryOperator 0xa8b4408 <line:1037:7, col:26> '<dependent type>' '='
    (CXXDependentScopeMemberExpr 0xa8b43b8 <col:7, col:14> '<dependent type>' lvalue
      (DeclRefExpr 0xa8b43a0 <col:7> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b42f0 '__top' '_Link_type':'_Rb_tree_node<_Val> *'))
    (DeclRefExpr 0xa8b43ec <col:26> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3fd0 '__p' '_Link_type':'_Rb_tree_node<_Val> *'))
  (IfStmt 0xa8b4c40 </usr/include/c++/4.6/bits/exception_defines.h:37:21, /usr/include/c++/4.6/bits/stl_tree.h:1056:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa8b4420 </usr/include/c++/4.6/bits/exception_defines.h:37:25> '_Bool' true)
    (CompoundStmt 0xa8b4c20 </usr/include/c++/4.6/bits/stl_tree.h:1040:2, line:1056:2>
      (IfStmt 0xa8b45c8 <line:1041:4, line:1042:52>
        <<<NULL>>>
        (CXXDependentScopeMemberExpr 0xa8b4448 <line:1041:8, col:13> '<dependent type>' lvalue
          (DeclRefExpr 0xa8b4430 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
        (BinaryOperator 0xa8b45b0 <line:1042:6, col:52> '<dependent type>' '='
          (CXXDependentScopeMemberExpr 0xa8b4498 <col:6, col:13> '<dependent type>' lvalue
            (DeclRefExpr 0xa8b447c <col:6> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b42f0 '__top' '_Link_type':'_Rb_tree_node<_Val> *'))
          (CallExpr 0xa8b4588 <col:24, col:52> '<dependent type>'
            (MemberExpr 0xa8b44e0 <col:24> '<bound member function type>' ->_M_copy 0xa8b4250
              (CXXThisExpr 0xa8b44d0 <col:24> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
            (CallExpr 0xa8b4550 <col:32, col:44> '<dependent type>'
              (UnresolvedLookupExpr 0xa8b4500 <col:32> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
              (DeclRefExpr 0xa8b4538 <col:41> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
            (DeclRefExpr 0xa8b4570 <col:47> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b42f0 '__top' '_Link_type':'_Rb_tree_node<_Val> *')))
        <<<NULL>>>)
      (BinaryOperator 0xa8b4618 <line:1043:4, col:10> '<dependent type>' '='
        (DeclRefExpr 0xa8b45e4 <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3fd0 '__p' '_Link_type':'_Rb_tree_node<_Val> *')
        (DeclRefExpr 0xa8b45fc <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b42f0 '__top' '_Link_type':'_Rb_tree_node<_Val> *'))
      (BinaryOperator 0xa8b46b8 <line:1044:4, col:21> '<dependent type>' '='
        (DeclRefExpr 0xa8b4630 <col:4> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
        (CallExpr 0xa8b4698 <col:10, col:21> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b4648 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
          (DeclRefExpr 0xa8b4680 <col:18> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
      (WhileStmt 0xa8b4c08 <line:1046:4, line:1055:6>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8b4760 <line:1046:11, col:18> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b4700 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
          (DeclRefExpr 0xa8b46d0 <col:11> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (IntegerLiteral 0xa8b46e8 <col:18> 'int' 0))
        (CompoundStmt 0xa8b4be0 <line:1047:6, line:1055:6>
          (DeclStmt 0xa8b4830 <line:1048:8, col:43>
            0xa8b4790 "_Link_type __y =
              (CallExpr 0xa8b4810 <col:25, col:42> '<dependent type>'
                (MemberExpr 0xa8b47d8 <col:25> '<bound member function type>' ->_M_clone_node 0xa897160
                  (CXXThisExpr 0xa8b47c8 <col:25> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                (DeclRefExpr 0xa8b47f8 <col:39> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))")
          (BinaryOperator 0xa8b48a8 <line:1049:8, col:23> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa8b4858 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa8b4840 <col:8> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3fd0 '__p' '_Link_type':'_Rb_tree_node<_Val> *'))
            (DeclRefExpr 0xa8b488c <col:23> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b4790 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))
          (BinaryOperator 0xa8b4928 <line:1050:8, col:25> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa8b48d8 <col:8, col:13> '<dependent type>' lvalue
              (DeclRefExpr 0xa8b48c0 <col:8> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b4790 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))
            (DeclRefExpr 0xa8b490c <col:25> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3fd0 '__p' '_Link_type':'_Rb_tree_node<_Val> *'))
          (IfStmt 0xa8b4ad8 <line:1051:8, line:1052:45>
            <<<NULL>>>
            (CXXDependentScopeMemberExpr 0xa8b4958 <line:1051:12, col:17> '<dependent type>' lvalue
              (DeclRefExpr 0xa8b4940 <col:12> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
            (BinaryOperator 0xa8b4ac0 <line:1052:3, col:45> '<dependent type>' '='
              (CXXDependentScopeMemberExpr 0xa8b49a8 <col:3, col:8> '<dependent type>' lvalue
                (DeclRefExpr 0xa8b498c <col:3> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b4790 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))
              (CallExpr 0xa8b4a98 <col:19, col:45> '<dependent type>'
                (MemberExpr 0xa8b49f0 <col:19> '<bound member function type>' ->_M_copy 0xa8b4250
                  (CXXThisExpr 0xa8b49e0 <col:19> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                (CallExpr 0xa8b4a60 <col:27, col:39> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8b4a10 <col:27> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                  (DeclRefExpr 0xa8b4a48 <col:36> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
                (DeclRefExpr 0xa8b4a80 <col:42> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b4790 '__y' '_Link_type':'_Rb_tree_node<_Val> *')))
            <<<NULL>>>)
          (BinaryOperator 0xa8b4b28 <line:1053:8, col:14> '<dependent type>' '='
            (DeclRefExpr 0xa8b4af4 <col:8> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3fd0 '__p' '_Link_type':'_Rb_tree_node<_Val> *')
            (DeclRefExpr 0xa8b4b0c <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b4790 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))
          (BinaryOperator 0xa8b4bc8 <line:1054:8, col:25> '<dependent type>' '='
            (DeclRefExpr 0xa8b4b40 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
            (CallExpr 0xa8b4ba8 <col:14, col:25> '<dependent type>'
              (UnresolvedLookupExpr 0xa8b4b58 <col:14> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
              (DeclRefExpr 0xa8b4b90 <col:22> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b3f90 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))))
    <<<NULL>>>)
  (IfStmt 0xa8b4d00 </usr/include/c++/4.6/bits/exception_defines.h:38:21, /usr/include/c++/4.6/bits/stl_tree.h:1061:2>
    <<<NULL>>>
    (CXXBoolLiteralExpr 0xa8b4c60 </usr/include/c++/4.6/bits/exception_defines.h:38:25> '_Bool' false)
    (CompoundStmt 0xa8b4ce8 </usr/include/c++/4.6/bits/stl_tree.h:1058:2, line:1061:2>
      (CallExpr 0xa8b4cb8 <line:1059:4, col:18> '<dependent type>'
        (MemberExpr 0xa8b4c80 <col:4> '<bound member function type>' ->_M_erase 0xa89dd50
          (CXXThisExpr 0xa8b4c70 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (DeclRefExpr 0xa8b4ca0 <col:13> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b42f0 '__top' '_Link_type':'_Rb_tree_node<_Val> *'))
      (NullStmt 0xa8b4cd8 <line:1060:27>))
    <<<NULL>>>)
  (ReturnStmt 0xa8b4d38 <line:1062:7, col:14>
    (DeclRefExpr 0xa8b4d1c <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b42f0 '__top' '_Link_type':'_Rb_tree_node<_Val> *')))


    void _M_erase(_Link_type __x) (CompoundStmt 0xa8b56b0 </usr/include/c++/4.6/bits/stl_tree.h:1070:5, line:1079:5>
  (WhileStmt 0xa8b5698 <line:1072:7, line:1078:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8b5418 <line:1072:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8b53b8 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8b5384 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b52a0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8b53a0 <col:21> 'int' 0))
    (CompoundStmt 0xa8b5678 <line:1073:2, line:1078:2>
      (CallExpr 0xa8b54e0 <line:1074:4, col:26> '<dependent type>'
        (MemberExpr 0xa8b5450 <col:4> '<bound member function type>' ->_M_erase 0xa8b52f0
          (CXXThisExpr 0xa8b5440 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (CallExpr 0xa8b54c0 <col:13, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b5470 <col:13> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
          (DeclRefExpr 0xa8b54a8 <col:22> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b52a0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))
      (DeclStmt 0xa8b55b8 <line:1075:4, col:33>
        0xa8b5510 "_Link_type __y =
          (CallExpr 0xa8b5598 <col:21, col:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b5548 <col:21> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8b5580 <col:29> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b52a0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))")
      (CallExpr 0xa8b5610 <line:1076:4, col:23> '<dependent type>'
        (MemberExpr 0xa8b55d8 <col:4> '<bound member function type>' ->_M_destroy_node 0xa897030
          (CXXThisExpr 0xa8b55c8 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
        (DeclRefExpr 0xa8b55f8 <col:20> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b52a0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
      (BinaryOperator 0xa8b5660 <line:1077:4, col:10> '<dependent type>' '='
        (DeclRefExpr 0xa8b5630 <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b52a0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
        (DeclRefExpr 0xa8b5648 <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8b5510 '__y' '_Link_type':'_Rb_tree_node<_Val> *')))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_lower_bound(_Link_type __x, _Link_type __y, const _Key &__k) (CompoundStmt 0xa8b65d0 </usr/include/c++/4.6/bits/stl_tree.h:1088:5, line:1095:5>
  (WhileStmt 0xa8b6568 <line:1089:7, line:1093:22>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8b6250 <line:1089:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8b61f0 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8b61bc <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8b61d8 <col:21> 'int' 0))
    (IfStmt 0xa8b6548 <line:1090:2, line:1093:22>
      <<<NULL>>>
      (UnaryOperator 0xa8b6390 <line:1090:6, col:46> '<dependent type>' prefix '!'
        (CallExpr 0xa8b6368 <col:7, col:46> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8b62a8 <col:7, col:15> '<dependent type>' lvalue
            (MemberExpr 0xa8b6288 <col:7> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8b6278 <col:7> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8b6330 <col:30, col:40> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b62e0 <col:30> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (DeclRefExpr 0xa8b6318 <col:37> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
          (DeclRefExpr 0xa8b6350 <col:43> 'const _Key' lvalue ParmVar 0xa8b5ea0 '__k' 'const _Key &')))
      (BinaryOperator 0xa8b6490 <line:1091:4, col:32> '<dependent type>' ','
        (BinaryOperator 0xa8b63d8 <col:4, col:10> '<dependent type>' '='
          (DeclRefExpr 0xa8b63a4 <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5e30 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
          (DeclRefExpr 0xa8b63bc <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
        (BinaryOperator 0xa8b6478 <col:15, col:32> '<dependent type>' '='
          (DeclRefExpr 0xa8b63f0 <col:15> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
          (CallExpr 0xa8b6458 <col:21, col:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b6408 <col:21> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8b6440 <col:29> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))
      (BinaryOperator 0xa8b6530 <line:1093:4, col:22> '<dependent type>' '='
        (DeclRefExpr 0xa8b64a8 <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
        (CallExpr 0xa8b6510 <col:10, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b64c0 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
          (DeclRefExpr 0xa8b64f8 <col:19> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5df0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))))
  (ReturnStmt 0xa8b65c0 <line:1094:7, col:26>
    (CXXUnresolvedConstructExpr 0xa8b65a0 <col:14, col:26> 'iterator':'_Rb_tree_iterator<value_type>'
      (DeclRefExpr 0xa8b6588 <col:23> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b5e30 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key &__k) const (CompoundStmt 0xa8b75a0 </usr/include/c++/4.6/bits/stl_tree.h:1104:5, line:1111:5>
  (WhileStmt 0xa8b7538 <line:1105:7, line:1109:22>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8b7220 <line:1105:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8b71c0 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8b718c <col:14> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8b71a8 <col:21> 'int' 0))
    (IfStmt 0xa8b7518 <line:1106:2, line:1109:22>
      <<<NULL>>>
      (UnaryOperator 0xa8b7360 <line:1106:6, col:46> '<dependent type>' prefix '!'
        (CallExpr 0xa8b7338 <col:7, col:46> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8b7278 <col:7, col:15> '<dependent type>' lvalue
            (MemberExpr 0xa8b7258 <col:7> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8b7248 <col:7> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8b7300 <col:30, col:40> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b72b0 <col:30> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (DeclRefExpr 0xa8b72e8 <col:37> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
          (DeclRefExpr 0xa8b7320 <col:43> 'const _Key' lvalue ParmVar 0xa8b6e70 '__k' 'const _Key &')))
      (BinaryOperator 0xa8b7460 <line:1107:4, col:32> '<dependent type>' ','
        (BinaryOperator 0xa8b73a8 <col:4, col:10> '<dependent type>' '='
          (DeclRefExpr 0xa8b7374 <col:4> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6e00 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (DeclRefExpr 0xa8b738c <col:10> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
        (BinaryOperator 0xa8b7448 <col:15, col:32> '<dependent type>' '='
          (DeclRefExpr 0xa8b73c0 <col:15> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (CallExpr 0xa8b7428 <col:21, col:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b73d8 <col:21> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8b7410 <col:29> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))
      (BinaryOperator 0xa8b7500 <line:1109:4, col:22> '<dependent type>' '='
        (DeclRefExpr 0xa8b7478 <col:4> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
        (CallExpr 0xa8b74e0 <col:10, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b7490 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
          (DeclRefExpr 0xa8b74c8 <col:19> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6dc0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))))
  (ReturnStmt 0xa8b7590 <line:1110:7, col:32>
    (CXXUnresolvedConstructExpr 0xa8b7570 <col:14, col:32> 'const_iterator':'_Rb_tree_const_iterator<value_type>'
      (DeclRefExpr 0xa8b7558 <col:29> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b6e00 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_upper_bound(_Link_type __x, _Link_type __y, const _Key &__k) (CompoundStmt 0xa8b84a8 </usr/include/c++/4.6/bits/stl_tree.h:1120:5, line:1127:5>
  (WhileStmt 0xa8b8440 <line:1121:7, line:1125:22>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8b8140 <line:1121:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8b80e0 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8b80ac <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8b80c8 <col:21> 'int' 0))
    (IfStmt 0xa8b8420 <line:1122:2, line:1125:22>
      <<<NULL>>>
      (CallExpr 0xa8b8258 <line:1122:6, col:45> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8b8198 <col:6, col:14> '<dependent type>' lvalue
          (MemberExpr 0xa8b8178 <col:6> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
            (CXXThisExpr 0xa8b8168 <col:6> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
        (DeclRefExpr 0xa8b81cc <col:29> 'const _Key' lvalue ParmVar 0xa8b7d90 '__k' 'const _Key &')
        (CallExpr 0xa8b8238 <col:34, col:44> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b81e8 <col:34> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
          (DeclRefExpr 0xa8b8220 <col:41> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))
      (BinaryOperator 0xa8b8368 <line:1123:4, col:32> '<dependent type>' ','
        (BinaryOperator 0xa8b82b0 <col:4, col:10> '<dependent type>' '='
          (DeclRefExpr 0xa8b827c <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7d20 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
          (DeclRefExpr 0xa8b8294 <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
        (BinaryOperator 0xa8b8350 <col:15, col:32> '<dependent type>' '='
          (DeclRefExpr 0xa8b82c8 <col:15> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
          (CallExpr 0xa8b8330 <col:21, col:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b82e0 <col:21> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8b8318 <col:29> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))
      (BinaryOperator 0xa8b8408 <line:1125:4, col:22> '<dependent type>' '='
        (DeclRefExpr 0xa8b8380 <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
        (CallExpr 0xa8b83e8 <col:10, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b8398 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
          (DeclRefExpr 0xa8b83d0 <col:19> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7ce0 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))))
  (ReturnStmt 0xa8b8498 <line:1126:7, col:26>
    (CXXUnresolvedConstructExpr 0xa8b8478 <col:14, col:26> 'iterator':'_Rb_tree_iterator<value_type>'
      (DeclRefExpr 0xa8b8460 <col:23> '_Link_type':'_Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b7d20 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key &__k) const (CompoundStmt 0xa8b93a8 </usr/include/c++/4.6/bits/stl_tree.h:1136:5, line:1143:5>
  (WhileStmt 0xa8b9340 <line:1137:7, line:1141:22>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8b9040 <line:1137:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8b8fe0 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8b8fac <col:14> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8b8fc8 <col:21> 'int' 0))
    (IfStmt 0xa8b9320 <line:1138:2, line:1141:22>
      <<<NULL>>>
      (CallExpr 0xa8b9158 <line:1138:6, col:45> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8b9098 <col:6, col:14> '<dependent type>' lvalue
          (MemberExpr 0xa8b9078 <col:6> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
            (CXXThisExpr 0xa8b9068 <col:6> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
        (DeclRefExpr 0xa8b90cc <col:29> 'const _Key' lvalue ParmVar 0xa8b8c90 '__k' 'const _Key &')
        (CallExpr 0xa8b9138 <col:34, col:44> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b90e8 <col:34> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
          (DeclRefExpr 0xa8b9120 <col:41> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
      (BinaryOperator 0xa8b9268 <line:1139:4, col:32> '<dependent type>' ','
        (BinaryOperator 0xa8b91b0 <col:4, col:10> '<dependent type>' '='
          (DeclRefExpr 0xa8b917c <col:4> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8c20 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (DeclRefExpr 0xa8b9194 <col:10> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
        (BinaryOperator 0xa8b9250 <col:15, col:32> '<dependent type>' '='
          (DeclRefExpr 0xa8b91c8 <col:15> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (CallExpr 0xa8b9230 <col:21, col:32> '<dependent type>'
            (UnresolvedLookupExpr 0xa8b91e0 <col:21> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8b9218 <col:29> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))
      (BinaryOperator 0xa8b9308 <line:1141:4, col:22> '<dependent type>' '='
        (DeclRefExpr 0xa8b9280 <col:4> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
        (CallExpr 0xa8b92e8 <col:10, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8b9298 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
          (DeclRefExpr 0xa8b92d0 <col:19> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8be0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))))
  (ReturnStmt 0xa8b9398 <line:1142:7, col:32>
    (CXXUnresolvedConstructExpr 0xa8b9378 <col:14, col:32> 'const_iterator':'_Rb_tree_const_iterator<value_type>'
      (DeclRefExpr 0xa8b9360 <col:29> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue ParmVar 0xa8b8c20 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))


    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator, typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator> equal_range(const _Key &__k) (CompoundStmt 0xa8bb208 </usr/include/c++/4.6/bits/stl_tree.h:1153:5, line:1174:5>
  (DeclStmt 0xa8ba4d8 <line:1154:7, col:34>
    0xa8ba430 "_Link_type __x =
      (CallExpr 0xa8ba4b8 <col:24, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa8ba478 <col:24> '<bound member function type>' lvalue))")
  (DeclStmt 0xa8ba598 <line:1155:7, col:32>
    0xa8ba4f0 "_Link_type __y =
      (CallExpr 0xa8ba578 <col:24, col:31> '<dependent type>'
        (UnresolvedMemberExpr 0xa8ba538 <col:24> '<bound member function type>' lvalue))")
  (WhileStmt 0xa8bb030 <line:1156:7, line:1171:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8ba638 <line:1156:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ba5d8 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8ba5a8 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8ba5c0 <col:21> 'int' 0))
    (CompoundStmt 0xa8bb018 <line:1157:2, line:1171:2>
      (IfStmt 0xa8baff8 <line:1158:4, line:1170:6>
        <<<NULL>>>
        (CallExpr 0xa8ba750 <line:1158:8, col:47> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8ba690 <col:8, col:16> '<dependent type>' lvalue
            (MemberExpr 0xa8ba670 <col:8> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8ba660 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8ba718 <col:31, col:41> '<dependent type>'
            (UnresolvedLookupExpr 0xa8ba6c8 <col:31> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (DeclRefExpr 0xa8ba700 <col:38> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
          (DeclRefExpr 0xa8ba738 <col:44> 'const _Key' lvalue ParmVar 0xa8b9e40 '__k' 'const _Key &'))
        (BinaryOperator 0xa8ba800 <line:1159:6, col:24> '<dependent type>' '='
          (DeclRefExpr 0xa8ba774 <col:6> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
          (CallExpr 0xa8ba7e0 <col:12, col:24> '<dependent type>'
            (UnresolvedLookupExpr 0xa8ba790 <col:12> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
            (DeclRefExpr 0xa8ba7c8 <col:21> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))
        (IfStmt 0xa8bafd8 <line:1160:9, line:1170:6>
          <<<NULL>>>
          (CallExpr 0xa8ba908 <line:1160:13, col:52> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8ba848 <col:13, col:21> '<dependent type>' lvalue
              (MemberExpr 0xa8ba828 <col:13> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8ba818 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (DeclRefExpr 0xa8ba87c <col:36> 'const _Key' lvalue ParmVar 0xa8b9e40 '__k' 'const _Key &')
            (CallExpr 0xa8ba8e8 <col:41, col:51> '<dependent type>'
              (UnresolvedLookupExpr 0xa8ba898 <col:41> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8ba8d0 <col:48> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))
          (BinaryOperator 0xa8baa18 <line:1161:6, col:34> '<dependent type>' ','
            (BinaryOperator 0xa8ba960 <col:6, col:12> '<dependent type>' '='
              (DeclRefExpr 0xa8ba92c <col:6> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba4f0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
              (DeclRefExpr 0xa8ba944 <col:12> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
            (BinaryOperator 0xa8baa00 <col:17, col:34> '<dependent type>' '='
              (DeclRefExpr 0xa8ba978 <col:17> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
              (CallExpr 0xa8ba9e0 <col:23, col:34> '<dependent type>'
                (UnresolvedLookupExpr 0xa8ba990 <col:23> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
                (DeclRefExpr 0xa8ba9c8 <col:31> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))
          (CompoundStmt 0xa8bafb8 <line:1163:6, line:1170:6>
            (DeclStmt 0xa8bab38 <line:1164:8, col:39>
              0xa8baa40 "_Link_type __xu =
                (ParenListExpr 0xa8baa90 <col:23, col:27> '_Link_type':'_Rb_tree_node<_Val> *'
                  (DeclRefExpr 0xa8baa74 <col:24> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))"
              0xa8baac0 "_Link_type __yu =
                (ParenListExpr 0xa8bab10 <col:34, col:38> '_Link_type':'_Rb_tree_node<_Val> *'
                  (DeclRefExpr 0xa8baaf4 <col:35> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba4f0 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))")
            (BinaryOperator 0xa8bac40 <line:1165:8, col:36> '<dependent type>' ','
              (BinaryOperator 0xa8bab78 <col:8, col:14> '<dependent type>' '='
                (DeclRefExpr 0xa8bab48 <col:8> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba4f0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
                (DeclRefExpr 0xa8bab60 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
              (BinaryOperator 0xa8bac28 <col:19, col:36> '<dependent type>' '='
                (DeclRefExpr 0xa8bab90 <col:19> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
                (CallExpr 0xa8babf8 <col:25, col:36> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8baba8 <col:25> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
                  (DeclRefExpr 0xa8babe0 <col:33> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))
            (BinaryOperator 0xa8bace0 <line:1166:8, col:28> '<dependent type>' '='
              (DeclRefExpr 0xa8bac58 <col:8> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8baa40 '__xu' '_Link_type':'_Rb_tree_node<_Val> *')
              (CallExpr 0xa8bacc0 <col:15, col:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa8bac70 <col:15> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                (DeclRefExpr 0xa8baca8 <col:24> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8baa40 '__xu' '_Link_type':'_Rb_tree_node<_Val> *')))
            (ReturnStmt 0xa8bafa8 <line:1167:8, line:1169:40>
              (CXXUnresolvedConstructExpr 0xa8baf88 <line:1167:15, line:1169:40> 'pair<iterator, iterator>'
                (CallExpr 0xa8baea0 <line:1168:23, col:51> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8bae18 <col:23> '<bound member function type>' lvalue)
                  (DeclRefExpr 0xa8bae58 <col:38> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba430 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8bae70 <col:43> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba4f0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8bae88 <col:48> 'const _Key' lvalue ParmVar 0xa8b9e40 '__k' 'const _Key &'))
                (CallExpr 0xa8baf60 <line:1169:9, col:39> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8baed8 <col:9> '<bound member function type>' lvalue)
                  (DeclRefExpr 0xa8baf18 <col:24> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8baa40 '__xu' '_Link_type':'_Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8baf30 <col:30> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8baac0 '__yu' '_Link_type':'_Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8baf48 <col:36> 'const _Key' lvalue ParmVar 0xa8b9e40 '__k' 'const _Key &')))))))))
  (ReturnStmt 0xa8bb1f8 <line:1172:7, line:1173:24>
    (CXXUnresolvedConstructExpr 0xa8bb1d8 <line:1172:14, line:1173:24> 'pair<iterator, iterator>'
      (CXXUnresolvedConstructExpr 0xa8bb178 <line:1172:39, col:51> 'iterator':'_Rb_tree_iterator<value_type>'
        (DeclRefExpr 0xa8bb160 <col:48> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba4f0 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))
      (CXXUnresolvedConstructExpr 0xa8bb1b8 <line:1173:11, col:23> 'iterator':'_Rb_tree_iterator<value_type>'
        (DeclRefExpr 0xa8bb1a0 <col:20> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8ba4f0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')))))


    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator> equal_range(const _Key &__k) const (CompoundStmt 0xa8bd068 </usr/include/c++/4.6/bits/stl_tree.h:1184:5, line:1205:5>
  (DeclStmt 0xa8bc348 <line:1185:7, col:40>
    0xa8bc2a0 "_Const_Link_type __x =
      (CallExpr 0xa8bc328 <col:30, col:39> '<dependent type>'
        (UnresolvedMemberExpr 0xa8bc2e8 <col:30> '<bound member function type>' lvalue))")
  (DeclStmt 0xa8bc408 <line:1186:7, col:38>
    0xa8bc360 "_Const_Link_type __y =
      (CallExpr 0xa8bc3e8 <col:30, col:37> '<dependent type>'
        (UnresolvedMemberExpr 0xa8bc3a8 <col:30> '<bound member function type>' lvalue))")
  (WhileStmt 0xa8bce90 <line:1187:7, line:1202:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8bc4a8 <line:1187:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8bc448 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8bc418 <col:14> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8bc430 <col:21> 'int' 0))
    (CompoundStmt 0xa8bce78 <line:1188:2, line:1202:2>
      (IfStmt 0xa8bce58 <line:1189:4, line:1201:6>
        <<<NULL>>>
        (CallExpr 0xa8bc5c0 <line:1189:8, col:47> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8bc500 <col:8, col:16> '<dependent type>' lvalue
            (MemberExpr 0xa8bc4e0 <col:8> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8bc4d0 <col:8> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8bc588 <col:31, col:41> '<dependent type>'
            (UnresolvedLookupExpr 0xa8bc538 <col:31> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (DeclRefExpr 0xa8bc570 <col:38> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
          (DeclRefExpr 0xa8bc5a8 <col:44> 'const _Key' lvalue ParmVar 0xa8bbcb0 '__k' 'const _Key &'))
        (BinaryOperator 0xa8bc670 <line:1190:6, col:24> '<dependent type>' '='
          (DeclRefExpr 0xa8bc5e4 <col:6> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (CallExpr 0xa8bc650 <col:12, col:24> '<dependent type>'
            (UnresolvedLookupExpr 0xa8bc600 <col:12> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
            (DeclRefExpr 0xa8bc638 <col:21> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
        (IfStmt 0xa8bce38 <line:1191:9, line:1201:6>
          <<<NULL>>>
          (CallExpr 0xa8bc778 <line:1191:13, col:52> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8bc6b8 <col:13, col:21> '<dependent type>' lvalue
              (MemberExpr 0xa8bc698 <col:13> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8bc688 <col:13> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (DeclRefExpr 0xa8bc6ec <col:36> 'const _Key' lvalue ParmVar 0xa8bbcb0 '__k' 'const _Key &')
            (CallExpr 0xa8bc758 <col:41, col:51> '<dependent type>'
              (UnresolvedLookupExpr 0xa8bc708 <col:41> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8bc740 <col:48> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
          (BinaryOperator 0xa8bc888 <line:1192:6, col:34> '<dependent type>' ','
            (BinaryOperator 0xa8bc7d0 <col:6, col:12> '<dependent type>' '='
              (DeclRefExpr 0xa8bc79c <col:6> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc360 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
              (DeclRefExpr 0xa8bc7b4 <col:12> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
            (BinaryOperator 0xa8bc870 <col:17, col:34> '<dependent type>' '='
              (DeclRefExpr 0xa8bc7e8 <col:17> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
              (CallExpr 0xa8bc850 <col:23, col:34> '<dependent type>'
                (UnresolvedLookupExpr 0xa8bc800 <col:23> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
                (DeclRefExpr 0xa8bc838 <col:31> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))
          (CompoundStmt 0xa8bce18 <line:1194:6, line:1201:6>
            (DeclStmt 0xa8bc9a8 <line:1195:8, col:45>
              0xa8bc8b0 "_Const_Link_type __xu =
                (ParenListExpr 0xa8bc900 <col:29, col:33> '_Const_Link_type':'const _Rb_tree_node<_Val> *'
                  (DeclRefExpr 0xa8bc8e4 <col:30> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))"
              0xa8bc930 "_Const_Link_type __yu =
                (ParenListExpr 0xa8bc980 <col:40, col:44> '_Const_Link_type':'const _Rb_tree_node<_Val> *'
                  (DeclRefExpr 0xa8bc964 <col:41> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc360 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))")
            (BinaryOperator 0xa8bcaa0 <line:1196:8, col:36> '<dependent type>' ','
              (BinaryOperator 0xa8bc9e8 <col:8, col:14> '<dependent type>' '='
                (DeclRefExpr 0xa8bc9b8 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc360 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                (DeclRefExpr 0xa8bc9d0 <col:14> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
              (BinaryOperator 0xa8bca88 <col:19, col:36> '<dependent type>' '='
                (DeclRefExpr 0xa8bca00 <col:19> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                (CallExpr 0xa8bca68 <col:25, col:36> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8bca18 <col:25> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
                  (DeclRefExpr 0xa8bca50 <col:33> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))
            (BinaryOperator 0xa8bcb40 <line:1197:8, col:28> '<dependent type>' '='
              (DeclRefExpr 0xa8bcab8 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc8b0 '__xu' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
              (CallExpr 0xa8bcb20 <col:15, col:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa8bcad0 <col:15> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                (DeclRefExpr 0xa8bcb08 <col:24> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc8b0 '__xu' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
            (ReturnStmt 0xa8bce08 <line:1198:8, line:1200:39>
              (CXXUnresolvedConstructExpr 0xa8bcde8 <line:1198:15, line:1200:39> 'pair<const_iterator, const_iterator>'
                (CallExpr 0xa8bcd00 <line:1199:29, col:57> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8bcc78 <col:29> '<bound member function type>' lvalue)
                  (DeclRefExpr 0xa8bccb8 <col:44> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc2a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8bccd0 <col:49> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc360 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8bcce8 <col:54> 'const _Key' lvalue ParmVar 0xa8bbcb0 '__k' 'const _Key &'))
                (CallExpr 0xa8bcdc0 <line:1200:8, col:38> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8bcd38 <col:8> '<bound member function type>' lvalue)
                  (DeclRefExpr 0xa8bcd78 <col:23> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc8b0 '__xu' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8bcd90 <col:29> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc930 '__yu' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                  (DeclRefExpr 0xa8bcda8 <col:35> 'const _Key' lvalue ParmVar 0xa8bbcb0 '__k' 'const _Key &')))))))))
  (ReturnStmt 0xa8bd058 <line:1203:7, line:1204:28>
    (CXXUnresolvedConstructExpr 0xa8bd038 <line:1203:14, line:1204:28> 'pair<const_iterator, const_iterator>'
      (CXXUnresolvedConstructExpr 0xa8bcfd8 <line:1203:51, col:69> 'const_iterator':'_Rb_tree_const_iterator<value_type>'
        (DeclRefExpr 0xa8bcfc0 <col:66> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc360 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
      (CXXUnresolvedConstructExpr 0xa8bd018 <line:1204:9, col:27> 'const_iterator':'_Rb_tree_const_iterator<value_type>'
        (DeclRefExpr 0xa8bd000 <col:24> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8bc360 '__y' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))))


    void swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &__t) (CompoundStmt 0xa8bf758 </usr/include/c++/4.6/bits/stl_tree.h:1212:5, line:1255:5>
  (IfStmt 0xa8bf138 <line:1213:7, line:1246:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8bd9e8 <line:1213:11, col:24> '<dependent type>'
      (UnresolvedLookupExpr 0xa8bd980 <col:21, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CallExpr 0xa8bd948 <col:11, col:19> '<dependent type>'
        (UnresolvedMemberExpr 0xa8bd908 <col:11> '<bound member function type>' lvalue))
      (IntegerLiteral 0xa8bd968 <col:24> 'int' 0))
    (CompoundStmt 0xa8be218 <line:1214:2, line:1226:2>
      (IfStmt 0xa8be1f8 <line:1215:4, line:1225:6>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8bdaf8 <line:1215:8, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa8bda98 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
          (CallExpr 0xa8bda60 <col:8, col:20> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8bda28 <col:8, col:12> '<dependent type>' lvalue
              (DeclRefExpr 0xa8bda0c <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
          (IntegerLiteral 0xa8bda80 <col:25> 'int' 0))
        (CompoundStmt 0xa8be1c8 <line:1216:6, line:1225:6>
          (BinaryOperator 0xa8bdc00 <line:1217:8, col:32> '<dependent type>' '='
            (CallExpr 0xa8bdb70 <col:8, col:16> '<dependent type>'
              (UnresolvedMemberExpr 0xa8bdb30 <col:8> '<bound member function type>' lvalue))
            (CallExpr 0xa8bdbe0 <col:20, col:32> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8bdba8 <col:20, col:24> '<dependent type>' lvalue
                (DeclRefExpr 0xa8bdb8c <col:20> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
          (BinaryOperator 0xa8bdcf8 <line:1218:8, col:40> '<dependent type>' '='
            (CallExpr 0xa8bdc68 <col:8, col:20> '<dependent type>'
              (UnresolvedMemberExpr 0xa8bdc28 <col:8> '<bound member function type>' lvalue))
            (CallExpr 0xa8bdcd8 <col:24, col:40> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8bdca0 <col:24, col:28> '<dependent type>' lvalue
                (DeclRefExpr 0xa8bdc84 <col:24> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
          (BinaryOperator 0xa8bddf0 <line:1219:8, col:42> '<dependent type>' '='
            (CallExpr 0xa8bdd60 <col:8, col:21> '<dependent type>'
              (UnresolvedMemberExpr 0xa8bdd20 <col:8> '<bound member function type>' lvalue))
            (CallExpr 0xa8bddd0 <col:25, col:42> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8bdd98 <col:25, col:29> '<dependent type>' lvalue
                (DeclRefExpr 0xa8bdd7c <col:25> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
          (BinaryOperator 0xa8bdf20 <line:1220:8, col:38> '<dependent type>' '='
            (CXXDependentScopeMemberExpr 0xa8bde78 <col:8, col:19> '<dependent type>' lvalue
              (CallExpr 0xa8bde58 <col:8, col:16> '<dependent type>'
                (UnresolvedMemberExpr 0xa8bde18 <col:8> '<bound member function type>' lvalue)))
            (CallExpr 0xa8bdf00 <col:31, col:38> '<dependent type>'
              (UnresolvedMemberExpr 0xa8bdec0 <col:31> '<bound member function type>' lvalue)))
          (BinaryOperator 0xa8bdfc0 <line:1222:8, col:24> '<dependent type>' '='
            (CallExpr 0xa8bdf88 <col:8, col:20> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8bdf50 <col:8, col:12> '<dependent type>' lvalue
                (DeclRefExpr 0xa8bdf38 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
            (IntegerLiteral 0xa8bdfa8 <col:24> 'int' 0))
          (BinaryOperator 0xa8be0b8 <line:1223:8, col:39> '<dependent type>' '='
            (CallExpr 0xa8be028 <col:8, col:24> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8bdff0 <col:8, col:12> '<dependent type>' lvalue
                (DeclRefExpr 0xa8bdfd8 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
            (CallExpr 0xa8be098 <col:28, col:39> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8be060 <col:28, col:32> '<dependent type>' lvalue
                (DeclRefExpr 0xa8be044 <col:28> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
          (BinaryOperator 0xa8be1b0 <line:1224:8, col:40> '<dependent type>' '='
            (CallExpr 0xa8be120 <col:8, col:25> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8be0e8 <col:8, col:12> '<dependent type>' lvalue
                (DeclRefExpr 0xa8be0d0 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
            (CallExpr 0xa8be190 <col:29, col:40> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8be158 <col:29, col:33> '<dependent type>' lvalue
                (DeclRefExpr 0xa8be13c <col:29> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))))
        <<<NULL>>>))
    (IfStmt 0xa8bf118 <line:1227:12, line:1246:2>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa8be320 <line:1227:16, col:33> '<dependent type>'
        (UnresolvedLookupExpr 0xa8be2b8 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (CallExpr 0xa8be280 <col:16, col:28> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8be248 <col:16, col:20> '<dependent type>' lvalue
            (DeclRefExpr 0xa8be22c <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
        (IntegerLiteral 0xa8be2a0 <col:33> 'int' 0))
      (CompoundStmt 0xa8be9f0 <line:1228:2, line:1237:2>
        (BinaryOperator 0xa8be428 <line:1229:4, col:28> '<dependent type>' '='
          (CallExpr 0xa8be398 <col:4, col:16> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8be360 <col:4, col:8> '<dependent type>' lvalue
              (DeclRefExpr 0xa8be344 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
          (CallExpr 0xa8be408 <col:20, col:28> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be3c8 <col:20> '<bound member function type>' lvalue)))
        (BinaryOperator 0xa8be520 <line:1230:4, col:36> '<dependent type>' '='
          (CallExpr 0xa8be490 <col:4, col:20> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8be458 <col:4, col:8> '<dependent type>' lvalue
              (DeclRefExpr 0xa8be440 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
          (CallExpr 0xa8be500 <col:24, col:36> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be4c0 <col:24> '<bound member function type>' lvalue)))
        (BinaryOperator 0xa8be618 <line:1231:4, col:38> '<dependent type>' '='
          (CallExpr 0xa8be588 <col:4, col:21> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8be550 <col:4, col:8> '<dependent type>' lvalue
              (DeclRefExpr 0xa8be538 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))
          (CallExpr 0xa8be5f8 <col:25, col:38> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be5b8 <col:25> '<bound member function type>' lvalue)))
        (BinaryOperator 0xa8be748 <line:1232:4, col:42> '<dependent type>' '='
          (CXXDependentScopeMemberExpr 0xa8be6a0 <col:4, col:19> '<dependent type>' lvalue
            (CallExpr 0xa8be680 <col:4, col:16> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8be648 <col:4, col:8> '<dependent type>' lvalue
                (DeclRefExpr 0xa8be630 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
          (CallExpr 0xa8be728 <col:31, col:42> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8be6f0 <col:31, col:35> '<dependent type>' lvalue
              (DeclRefExpr 0xa8be6d4 <col:31> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
        (BinaryOperator 0xa8be7e8 <line:1234:4, col:16> '<dependent type>' '='
          (CallExpr 0xa8be7b0 <col:4, col:12> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be770 <col:4> '<bound member function type>' lvalue))
          (IntegerLiteral 0xa8be7d0 <col:16> 'int' 0))
        (BinaryOperator 0xa8be8e0 <line:1235:4, col:27> '<dependent type>' '='
          (CallExpr 0xa8be850 <col:4, col:16> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be810 <col:4> '<bound member function type>' lvalue))
          (CallExpr 0xa8be8c0 <col:20, col:27> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be880 <col:20> '<bound member function type>' lvalue)))
        (BinaryOperator 0xa8be9d8 <line:1236:4, col:28> '<dependent type>' '='
          (CallExpr 0xa8be948 <col:4, col:17> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be908 <col:4> '<bound member function type>' lvalue))
          (CallExpr 0xa8be9b8 <col:21, col:28> '<dependent type>'
            (UnresolvedMemberExpr 0xa8be978 <col:21> '<bound member function type>' lvalue))))
      (CompoundStmt 0xa8bf0f0 <line:1239:2, line:1246:2>
        (CallExpr 0xa8beb68 <line:1240:4, col:37> '<dependent type>'
          (UnresolvedLookupExpr 0xa8bea40 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0 0xa805240 0xa8aed90)
          (CallExpr 0xa8bead8 <col:14, col:22> '<dependent type>'
            (UnresolvedMemberExpr 0xa8bea98 <col:14> '<bound member function type>' lvalue))
          (CallExpr 0xa8beb48 <col:24, col:36> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8beb10 <col:24, col:28> '<dependent type>' lvalue
              (DeclRefExpr 0xa8beaf4 <col:24> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
        (CallExpr 0xa8becf8 <line:1241:4, col:45> '<dependent type>'
          (UnresolvedLookupExpr 0xa8bebb0 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0 0xa805240 0xa8aed90)
          (CallExpr 0xa8bec68 <col:14, col:26> '<dependent type>'
            (UnresolvedMemberExpr 0xa8bec28 <col:14> '<bound member function type>' lvalue))
          (CallExpr 0xa8becd8 <col:28, col:44> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8beca0 <col:28, col:32> '<dependent type>' lvalue
              (DeclRefExpr 0xa8bec84 <col:28> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
        (CallExpr 0xa8bee68 <line:1242:4, col:47> '<dependent type>'
          (UnresolvedLookupExpr 0xa8bed40 <col:4, col:9> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0 0xa805240 0xa8aed90)
          (CallExpr 0xa8bedd8 <col:14, col:27> '<dependent type>'
            (UnresolvedMemberExpr 0xa8bed98 <col:14> '<bound member function type>' lvalue))
          (CallExpr 0xa8bee48 <col:29, col:46> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8bee10 <col:29, col:33> '<dependent type>' lvalue
              (DeclRefExpr 0xa8bedf4 <col:29> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
        (BinaryOperator 0xa8befa8 <line:1244:4, col:34> '<dependent type>' '='
          (CXXDependentScopeMemberExpr 0xa8bef00 <col:4, col:15> '<dependent type>' lvalue
            (CallExpr 0xa8beee0 <col:4, col:12> '<dependent type>'
              (UnresolvedMemberExpr 0xa8beea0 <col:4> '<bound member function type>' lvalue)))
          (CallExpr 0xa8bef88 <col:27, col:34> '<dependent type>'
            (UnresolvedMemberExpr 0xa8bef48 <col:27> '<bound member function type>' lvalue)))
        (BinaryOperator 0xa8bf0d8 <line:1245:4, col:42> '<dependent type>' '='
          (CXXDependentScopeMemberExpr 0xa8bf030 <col:4, col:19> '<dependent type>' lvalue
            (CallExpr 0xa8bf010 <col:4, col:16> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8befd8 <col:4, col:8> '<dependent type>' lvalue
                (DeclRefExpr 0xa8befc0 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
          (CallExpr 0xa8bf0b8 <col:31, col:42> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8bf080 <col:31, col:35> '<dependent type>' lvalue
              (DeclRefExpr 0xa8bf064 <col:31> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))))))
  (CallExpr 0xa8bf2c8 <line:1248:7, col:71> '<dependent type>'
    (UnresolvedLookupExpr 0xa8bf178 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0 0xa805240 0xa8aed90)
    (CXXDependentScopeMemberExpr 0xa8bf208 <col:17, col:31> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8bf1d0 <col:17, col:23> '<dependent type>' lvalue
        (CXXThisExpr 0xa8bf1c0 <col:17> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa8bf290 <col:46, col:58> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8bf258 <col:46, col:50> '<dependent type>' lvalue
        (DeclRefExpr 0xa8bf23c <col:46> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
  (CallExpr 0xa8bf460 <line:1249:7, col:73> '<dependent type>'
    (UnresolvedLookupExpr 0xa8bf310 <col:7, col:12> '<overloaded function type>' lvalue (no ADL) = '1' 0xa606d80 0xa60ba70 0xa6b64d0 0xa805240 0xa8aed90)
    (CXXDependentScopeMemberExpr 0xa8bf3a0 <col:17, col:31> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8bf368 <col:17, col:23> '<dependent type>' lvalue
        (CXXThisExpr 0xa8bf358 <col:17> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa8bf428 <col:47, col:59> '<dependent type>' lvalue
      (CXXDependentScopeMemberExpr 0xa8bf3f0 <col:47, col:51> '<dependent type>' lvalue
        (DeclRefExpr 0xa8bf3d4 <col:47> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &'))))
  (CallExpr 0xa8bf730 <line:1253:7, line:1254:63> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8bf618 <line:1253:7, line:1254:2> '<dependent type>' lvalue)
    (CallExpr 0xa8bf6a0 <col:11, col:33> '<dependent type>'
      (UnresolvedMemberExpr 0xa8bf660 <col:11> '<bound member function type>' lvalue))
    (CallExpr 0xa8bf710 <col:36, col:62> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8bf6d8 <col:36, col:40> '<dependent type>' lvalue
        (DeclRefExpr 0xa8bf6bc <col:36> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>':'_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>' lvalue ParmVar 0xa8bd7e0 '__t' '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &')))))


    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator, bool> _M_insert_unique(const _Val &__v) (CompoundStmt 0xa8c1370 </usr/include/c++/4.6/bits/stl_tree.h:1270:5, line:1293:5>
  (DeclStmt 0xa8c04a8 <line:1271:7, col:34>
    0xa8c0400 "_Link_type __x =
      (CallExpr 0xa8c0488 <col:24, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c0448 <col:24> '<bound member function type>' lvalue))")
  (DeclStmt 0xa8c0568 <line:1272:7, col:32>
    0xa8c04c0 "_Link_type __y =
      (CallExpr 0xa8c0548 <col:24, col:31> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c0508 <col:24> '<bound member function type>' lvalue))")
  (DeclStmt 0xa8c05c8 <line:1273:7, col:25>
    0xa8c0580 "bool __comp =
      (CXXBoolLiteralExpr 0xa8c05b8 <col:21> '_Bool' true)")
  (WhileStmt 0xa8c09d8 <line:1274:7, line:1279:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8c0668 <line:1274:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8c0608 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8c05d8 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8c05f0 <col:21> 'int' 0))
    (CompoundStmt 0xa8c09b8 <line:1275:2, line:1279:2>
      (BinaryOperator 0xa8c06c0 <line:1276:4, col:10> '<dependent type>' '='
        (DeclRefExpr 0xa8c068c <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c04c0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
        (DeclRefExpr 0xa8c06a4 <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
      (BinaryOperator 0xa8c0848 <line:1277:4, col:67> '<dependent type>' '='
        (DeclRefExpr 0xa8c06d8 <col:4> '_Bool' lvalue Var 0xa8c0580 '__comp' '_Bool')
        (CallExpr 0xa8c0820 <col:13, col:67> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8c0720 <col:13, col:21> '<dependent type>' lvalue
            (MemberExpr 0xa8c0700 <col:13> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8c06f0 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8c0790 <col:36, col:53> '<dependent type>'
            (CXXUnresolvedConstructExpr 0xa8c0760 <col:36, col:48> '_KeyOfValue')
            (DeclRefExpr 0xa8c0778 <col:50> 'const _Val' lvalue ParmVar 0xa8c0000 '__v' 'const _Val &'))
          (CallExpr 0xa8c0800 <col:56, col:66> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c07b0 <col:56> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (DeclRefExpr 0xa8c07e8 <col:63> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))
      (BinaryOperator 0xa8c09a0 <line:1278:4, col:46> '<dependent type>' '='
        (DeclRefExpr 0xa8c0860 <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
        (ConditionalOperator 0xa8c0980 <col:10, col:46> '<dependent type>'
          (ImplicitCastExpr 0xa8c0970 <col:10> '_Bool' <LValueToRValue>
            (DeclRefExpr 0xa8c0878 <col:10> '_Bool' lvalue Var 0xa8c0580 '__comp' '_Bool'))
          (CallExpr 0xa8c08e0 <col:19, col:30> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c0890 <col:19> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8c08c8 <col:27> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
          (CallExpr 0xa8c0950 <col:34, col:46> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c0900 <col:34> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
            (DeclRefExpr 0xa8c0938 <col:43> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))))
  (DeclStmt 0xa8c0a78 <line:1280:7, col:35>
    0xa8c0a00 "iterator __j =
      (CXXUnresolvedConstructExpr 0xa8c0a58 <col:22, col:34> 'iterator':'_Rb_tree_iterator<value_type>'
        (DeclRefExpr 0xa8c0a40 <col:31> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c04c0 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))")
  (IfStmt 0xa8c0e38 <line:1281:7, line:1288:2>
    <<<NULL>>>
    (ImplicitCastExpr 0xa8c0aa0 <line:1281:11> '_Bool' <LValueToRValue>
      (DeclRefExpr 0xa8c0a88 <col:11> '_Bool' lvalue Var 0xa8c0580 '__comp' '_Bool'))
    (CompoundStmt 0xa8c0e20 <line:1282:2, line:1288:2>
      (IfStmt 0xa8c0e00 <line:1283:4, line:1287:8>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8c0ba0 <line:1283:8, col:21> '<dependent type>'
          (UnresolvedLookupExpr 0xa8c0b38 <col:12, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
          (DeclRefExpr 0xa8c0aac <col:8> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8c0a00 '__j' 'iterator':'_Rb_tree_iterator<value_type>')
          (CallExpr 0xa8c0b18 <col:15, col:21> '<dependent type>'
            (UnresolvedMemberExpr 0xa8c0ad8 <col:15> '<bound member function type>' lvalue)))
        (ReturnStmt 0xa8c0dc0 <line:1284:6, line:1285:64>
          (CXXUnresolvedConstructExpr 0xa8c0da0 <line:1284:13, line:1285:64> 'pair<iterator, _Bool>'
            (CallExpr 0xa8c0d68 <col:9, col:57> '<dependent type>'
              (MemberExpr 0xa8c0ce8 <col:9> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                (CXXThisExpr 0xa8c0cd8 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
              (DeclRefExpr 0xa8c0d08 <col:20> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
              (DeclRefExpr 0xa8c0d20 <col:25> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c04c0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
              (ParenExpr 0xa8c0d50 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                (DeclRefExpr 0xa8c0d38 </usr/include/c++/4.6/bits/stl_tree.h:1285:53> 'const _Val' lvalue ParmVar 0xa8c0000 '__v' 'const _Val &')))
            (CXXBoolLiteralExpr 0xa8c0d90 <col:60> '_Bool' true)))
        (UnaryOperator 0xa8c0de8 <line:1287:6, col:8> '<dependent type>' prefix '--'
          (DeclRefExpr 0xa8c0dd0 <col:8> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8c0a00 '__j' 'iterator':'_Rb_tree_iterator<value_type>'))))
    <<<NULL>>>)
  (IfStmt 0xa8c11f0 <line:1289:7, line:1291:60>
    <<<NULL>>>
    (CallExpr 0xa8c0fc0 <line:1289:11, col:73> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8c0e88 <col:11, col:19> '<dependent type>' lvalue
        (MemberExpr 0xa8c0e68 <col:11> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
          (CXXThisExpr 0xa8c0e58 <col:11> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
      (CallExpr 0xa8c0f48 <col:34, col:52> '<dependent type>'
        (UnresolvedLookupExpr 0xa8c0ec0 <col:34> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
        (CXXDependentScopeMemberExpr 0xa8c0f10 <col:41, col:45> '<dependent type>' lvalue
          (DeclRefExpr 0xa8c0ef8 <col:41> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8c0a00 '__j' 'iterator':'_Rb_tree_iterator<value_type>')))
      (CallExpr 0xa8c0fa0 <col:55, col:72> '<dependent type>'
        (CXXUnresolvedConstructExpr 0xa8c0f70 <col:55, col:67> '_KeyOfValue')
        (DeclRefExpr 0xa8c0f88 <col:69> 'const _Val' lvalue ParmVar 0xa8c0000 '__v' 'const _Val &')))
    (ReturnStmt 0xa8c11e0 <line:1290:2, line:1291:60>
      (CXXUnresolvedConstructExpr 0xa8c11c0 <line:1290:9, line:1291:60> 'pair<iterator, _Bool>'
        (CallExpr 0xa8c1188 <col:5, col:53> '<dependent type>'
          (MemberExpr 0xa8c1108 <col:5> '<bound member function type>' ->_M_insert_ 0xa8b0e80
            (CXXThisExpr 0xa8c10f8 <col:5> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
          (DeclRefExpr 0xa8c1128 <col:16> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c0400 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
          (DeclRefExpr 0xa8c1140 <col:21> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c04c0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
          (ParenExpr 0xa8c1170 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
            (DeclRefExpr 0xa8c1158 </usr/include/c++/4.6/bits/stl_tree.h:1291:49> 'const _Val' lvalue ParmVar 0xa8c0000 '__v' 'const _Val &')))
        (CXXBoolLiteralExpr 0xa8c11b0 <col:56> '_Bool' true)))
    <<<NULL>>>)
  (ReturnStmt 0xa8c1360 <line:1292:7, col:45>
    (CXXUnresolvedConstructExpr 0xa8c1340 <col:14, col:45> 'pair<iterator, _Bool>'
      (DeclRefExpr 0xa8c1318 <col:35> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8c0a00 '__j' 'iterator':'_Rb_tree_iterator<value_type>')
      (CXXBoolLiteralExpr 0xa8c1330 <col:40> '_Bool' false))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_insert_equal(const _Val &__v) (CompoundStmt 0xa8c23f8 </usr/include/c++/4.6/bits/stl_tree.h:1307:5, line:1317:5>
  (DeclStmt 0xa8c1ea8 <line:1308:7, col:34>
    0xa8c1e00 "_Link_type __x =
      (CallExpr 0xa8c1e88 <col:24, col:33> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c1e48 <col:24> '<bound member function type>' lvalue))")
  (DeclStmt 0xa8c1f68 <line:1309:7, col:32>
    0xa8c1ec0 "_Link_type __y =
      (CallExpr 0xa8c1f48 <col:24, col:31> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c1f08 <col:24> '<bound member function type>' lvalue))")
  (WhileStmt 0xa8c2318 <line:1310:7, line:1315:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8c2008 <line:1310:14, col:21> '<dependent type>'
      (UnresolvedLookupExpr 0xa8c1fa8 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8c1f78 <col:14> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (IntegerLiteral 0xa8c1f90 <col:21> 'int' 0))
    (CompoundStmt 0xa8c2300 <line:1311:2, line:1315:2>
      (BinaryOperator 0xa8c2060 <line:1312:4, col:10> '<dependent type>' '='
        (DeclRefExpr 0xa8c202c <col:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1ec0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
        (DeclRefExpr 0xa8c2044 <col:10> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
      (BinaryOperator 0xa8c22e8 <line:1313:4, line:1314:37> '<dependent type>' '='
        (DeclRefExpr 0xa8c2078 <line:1313:4> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
        (ConditionalOperator 0xa8c22c8 <col:10, line:1314:37> '<dependent type>'
          (CallExpr 0xa8c21c0 <line:1313:10, col:64> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8c20c0 <col:10, col:18> '<dependent type>' lvalue
              (MemberExpr 0xa8c20a0 <col:10> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8c2090 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (CallExpr 0xa8c2130 <col:33, col:50> '<dependent type>'
              (CXXUnresolvedConstructExpr 0xa8c2100 <col:33, col:45> '_KeyOfValue')
              (DeclRefExpr 0xa8c2118 <col:47> 'const _Val' lvalue ParmVar 0xa8c1af0 '__v' 'const _Val &'))
            (CallExpr 0xa8c21a0 <col:53, col:63> '<dependent type>'
              (UnresolvedLookupExpr 0xa8c2150 <col:53> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8c2188 <col:60> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *')))
          (CallExpr 0xa8c2238 <line:1314:10, col:21> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c21e8 <col:10> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8c2220 <col:18> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))
          (CallExpr 0xa8c22a8 <col:25, col:37> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c2258 <col:25> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
            (DeclRefExpr 0xa8c2290 <col:34> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *'))))))
  (ReturnStmt 0xa8c23e8 <line:1316:7, col:62>
    (CallExpr 0xa8c23c0 <col:14, col:62> '<dependent type>'
      (MemberExpr 0xa8c2340 <col:14> '<bound member function type>' ->_M_insert_ 0xa8b0e80
        (CXXThisExpr 0xa8c2330 <col:14> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
      (DeclRefExpr 0xa8c2360 <col:25> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1e00 '__x' '_Link_type':'_Rb_tree_node<_Val> *')
      (DeclRefExpr 0xa8c2378 <col:30> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c1ec0 '__y' '_Link_type':'_Rb_tree_node<_Val> *')
      (ParenExpr 0xa8c23a8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
        (DeclRefExpr 0xa8c2390 </usr/include/c++/4.6/bits/stl_tree.h:1316:58> 'const _Val' lvalue ParmVar 0xa8c1af0 '__v' 'const _Val &')))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_insert_unique_(const_iterator __position, const _Val &__v) (CompoundStmt 0xa8c4cb0 </usr/include/c++/4.6/bits/stl_tree.h:1331:5, line:1388:5>
  (IfStmt 0xa8c4c90 <line:1333:7, line:1387:34>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8c3010 <line:1333:11, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa8c2fa8 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CXXDependentScopeMemberExpr 0xa8c2f00 <col:11, col:22> '<dependent type>' lvalue
        (DeclRefExpr 0xa8c2ee8 <col:11> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
      (CallExpr 0xa8c2f88 <col:33, col:40> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c2f48 <col:33> '<bound member function type>' lvalue)))
    (CompoundStmt 0xa8c3508 <line:1334:2, line:1341:2>
      (IfStmt 0xa8c34e8 <line:1335:4, line:1340:59>
        <<<NULL>>>
        (BinaryOperator 0xa8c32c8 <line:1335:8, line:1337:24> '<dependent type>' '&&'
          (CXXOperatorCallExpr 0xa8c30f0 <line:1335:8, col:17> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c30a0 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ad430 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
            (CallExpr 0xa8c3068 <col:8, col:13> '<dependent type>'
              (MemberExpr 0xa8c3048 <col:8> '<bound member function type>' ->size 0xa89f020
                (CXXThisExpr 0xa8c3038 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (IntegerLiteral 0xa8c3088 <col:17> 'int' 0))
          (CallExpr 0xa8c32a0 <line:1336:11, line:1337:24> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8c3148 <line:1336:11, col:19> '<dependent type>' lvalue
              (MemberExpr 0xa8c3128 <col:11> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8c3118 <col:11> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (CallExpr 0xa8c3228 <col:34, col:55> '<dependent type>'
              (UnresolvedLookupExpr 0xa8c3180 <col:34> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (CallExpr 0xa8c3208 <col:41, col:54> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c31c8 <col:41> '<bound member function type>' lvalue)))
            (CallExpr 0xa8c3280 <line:1337:6, col:23> '<dependent type>'
              (CXXUnresolvedConstructExpr 0xa8c3250 <col:6, col:18> '_KeyOfValue')
              (DeclRefExpr 0xa8c3268 <col:20> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))
        (ReturnStmt 0xa8c33f0 <line:1338:6, col:70>
          (CallExpr 0xa8c33c8 <col:13, col:70> '<dependent type>'
            (MemberExpr 0xa8c32f0 <col:13> '<bound member function type>' ->_M_insert_ 0xa8b0e80
              (CXXThisExpr 0xa8c32e0 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
            (IntegerLiteral 0xa8c3310 <col:24> 'int' 0)
            (CallExpr 0xa8c3378 <col:27, col:40> '<dependent type>'
              (UnresolvedMemberExpr 0xa8c3338 <col:27> '<bound member function type>' lvalue))
            (ParenExpr 0xa8c33b0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
              (DeclRefExpr 0xa8c3394 </usr/include/c++/4.6/bits/stl_tree.h:1338:66> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))
        (ReturnStmt 0xa8c34d8 <line:1340:6, col:59>
          (CXXDependentScopeMemberExpr 0xa8c34a0 <col:13, col:59> '<dependent type>' lvalue
            (CallExpr 0xa8c3480 <col:13, col:57> '<dependent type>'
              (UnresolvedMemberExpr 0xa8c3410 <col:13> '<bound member function type>' lvalue)
              (ParenExpr 0xa8c3468 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                (DeclRefExpr 0xa8c3450 </usr/include/c++/4.6/bits/stl_tree.h:1340:53> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &')))))))
    (IfStmt 0xa8c4c70 <line:1342:12, line:1387:34>
      <<<NULL>>>
      (CallExpr 0xa8c3688 <line:1342:16, line:1343:37> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8c3550 <line:1342:16, col:24> '<dependent type>' lvalue
          (MemberExpr 0xa8c3530 <col:16> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
            (CXXThisExpr 0xa8c3520 <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
        (CallExpr 0xa8c35c0 <col:39, col:56> '<dependent type>'
          (CXXUnresolvedConstructExpr 0xa8c3590 <col:39, col:51> '_KeyOfValue')
          (DeclRefExpr 0xa8c35a8 <col:53> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))
        (CallExpr 0xa8c3668 <line:1343:11, col:36> '<dependent type>'
          (UnresolvedLookupExpr 0xa8c35e0 <col:11> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
          (CXXDependentScopeMemberExpr 0xa8c3630 <col:18, col:29> '<dependent type>' lvalue
            (DeclRefExpr 0xa8c3618 <col:18> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))))
      (CompoundStmt 0xa8c4090 <line:1344:2, line:1363:2>
        (DeclStmt 0xa8c3710 <line:1346:4, col:40>
          0xa8c36c0 "const_iterator __before =
            (DeclRefExpr 0xa8c36f4 <col:30> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')")
        (IfStmt 0xa8c4070 <line:1347:4, line:1362:59>
          <<<NULL>>>
          (CXXOperatorCallExpr 0xa8c3848 <line:1347:8, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c37e0 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
            (CXXDependentScopeMemberExpr 0xa8c3738 <col:8, col:19> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c3720 <col:8> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
            (CallExpr 0xa8c37c0 <col:30, col:42> '<dependent type>'
              (UnresolvedMemberExpr 0xa8c3780 <col:30> '<bound member function type>' lvalue)))
          (ReturnStmt 0xa8c39d8 <line:1348:6, line:1349:37>
            (CallExpr 0xa8c39b0 <line:1348:13, line:1349:37> '<dependent type>'
              (MemberExpr 0xa8c3880 <line:1348:13> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                (CXXThisExpr 0xa8c3870 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
              (CallExpr 0xa8c38f0 <col:24, col:36> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c38b0 <col:24> '<bound member function type>' lvalue))
              (CallExpr 0xa8c3960 <col:39, col:51> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c3920 <col:39> '<bound member function type>' lvalue))
              (ParenExpr 0xa8c3998 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                (DeclRefExpr 0xa8c397c </usr/include/c++/4.6/bits/stl_tree.h:1349:33> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))
          (IfStmt 0xa8c4050 <line:1350:9, line:1362:59>
            <<<NULL>>>
            (CallExpr 0xa8c3b80 <line:1350:13, line:1351:26> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8c3a18 <line:1350:13, col:21> '<dependent type>' lvalue
                (MemberExpr 0xa8c39f8 <col:13> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                  (CXXThisExpr 0xa8c39e8 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
              (CallExpr 0xa8c3b08 <col:36, col:63> '<dependent type>'
                (UnresolvedLookupExpr 0xa8c3a50 <col:36> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                (CXXDependentScopeMemberExpr 0xa8c3ad0 <col:43, col:56> '<dependent type>' lvalue
                  (ParenExpr 0xa8c3ab8 <col:43, col:54> '<dependent type>'
                    (UnaryOperator 0xa8c3aa0 <col:44, col:46> '<dependent type>' prefix '--'
                      (DeclRefExpr 0xa8c3a88 <col:46> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c36c0 '__before' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))))
              (CallExpr 0xa8c3b60 <line:1351:8, col:25> '<dependent type>'
                (CXXUnresolvedConstructExpr 0xa8c3b30 <col:8, col:20> '_KeyOfValue')
                (DeclRefExpr 0xa8c3b48 <col:22> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &')))
            (CompoundStmt 0xa8c3f50 <line:1352:6, line:1360:6>
              (IfStmt 0xa8c3f30 <line:1353:8, line:1359:34>
                <<<NULL>>>
                (CXXOperatorCallExpr 0xa8c3cd0 <line:1353:12, col:42> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8c3c68 <col:39, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                  (CallExpr 0xa8c3c30 <col:12, col:37> '<dependent type>'
                    (UnresolvedLookupExpr 0xa8c3ba8 <col:12> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                    (CXXDependentScopeMemberExpr 0xa8c3bf8 <col:21, col:30> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c3be0 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c36c0 '__before' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
                  (IntegerLiteral 0xa8c3c50 <col:42> 'int' 0))
                (ReturnStmt 0xa8c3de8 <line:1354:3, line:1355:34>
                  (CallExpr 0xa8c3dc0 <line:1354:10, line:1355:34> '<dependent type>'
                    (MemberExpr 0xa8c3d08 <line:1354:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                      (CXXThisExpr 0xa8c3cf8 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                    (IntegerLiteral 0xa8c3d28 <col:21> 'int' 0)
                    (CXXDependentScopeMemberExpr 0xa8c3d58 <col:24, col:33> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c3d40 <col:24> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c36c0 '__before' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (ParenExpr 0xa8c3da8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c3d8c </usr/include/c++/4.6/bits/stl_tree.h:1355:30> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))
                (ReturnStmt 0xa8c3f20 <line:1357:3, line:1359:34>
                  (CallExpr 0xa8c3ef8 <line:1357:10, line:1359:34> '<dependent type>'
                    (MemberExpr 0xa8c3e08 <line:1357:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                      (CXXThisExpr 0xa8c3df8 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                    (CXXDependentScopeMemberExpr 0xa8c3e40 <col:21, col:32> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c3e28 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (CXXDependentScopeMemberExpr 0xa8c3e90 <line:1358:7, col:18> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c3e74 <col:7> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (ParenExpr 0xa8c3ee0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c3ec4 </usr/include/c++/4.6/bits/stl_tree.h:1359:30> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))))
            (ReturnStmt 0xa8c4040 <line:1362:6, col:59>
              (CXXDependentScopeMemberExpr 0xa8c4008 <col:13, col:59> '<dependent type>' lvalue
                (CallExpr 0xa8c3fe8 <col:13, col:57> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8c3f78 <col:13> '<bound member function type>' lvalue)
                  (ParenExpr 0xa8c3fd0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                    (DeclRefExpr 0xa8c3fb8 </usr/include/c++/4.6/bits/stl_tree.h:1362:53> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))))))
      (IfStmt 0xa8c4c50 <line:1364:12, line:1387:34>
        <<<NULL>>>
        (CallExpr 0xa8c4210 <line:1364:16, line:1365:29> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8c40d8 <line:1364:16, col:24> '<dependent type>' lvalue
            (MemberExpr 0xa8c40b8 <col:16> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8c40a8 <col:16> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8c4198 <col:39, col:64> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c4110 <col:39> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (CXXDependentScopeMemberExpr 0xa8c4160 <col:46, col:57> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c4148 <col:46> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
          (CallExpr 0xa8c41f0 <line:1365:11, col:28> '<dependent type>'
            (CXXUnresolvedConstructExpr 0xa8c41c0 <col:11, col:23> '_KeyOfValue')
            (DeclRefExpr 0xa8c41d8 <col:25> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &')))
        (CompoundStmt 0xa8c4bb8 <line:1366:2, line:1384:2>
          (DeclStmt 0xa8c4290 <line:1368:4, col:39>
            0xa8c4240 "const_iterator __after =
              (DeclRefExpr 0xa8c4274 <col:29> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')")
          (IfStmt 0xa8c4b98 <line:1369:4, line:1383:59>
            <<<NULL>>>
            (CXXOperatorCallExpr 0xa8c43c8 <line:1369:8, col:43> '<dependent type>'
              (UnresolvedLookupExpr 0xa8c4360 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (CXXDependentScopeMemberExpr 0xa8c42b8 <col:8, col:19> '<dependent type>' lvalue
                (DeclRefExpr 0xa8c42a0 <col:8> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
              (CallExpr 0xa8c4340 <col:30, col:43> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c4300 <col:30> '<bound member function type>' lvalue)))
            (ReturnStmt 0xa8c4500 <line:1370:6, line:1371:37>
              (CallExpr 0xa8c44d8 <line:1370:13, line:1371:37> '<dependent type>'
                (MemberExpr 0xa8c4400 <line:1370:13> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                  (CXXThisExpr 0xa8c43f0 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                (IntegerLiteral 0xa8c4420 <col:24> 'int' 0)
                (CallExpr 0xa8c4488 <col:27, col:40> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8c4448 <col:27> '<bound member function type>' lvalue))
                (ParenExpr 0xa8c44c0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                  (DeclRefExpr 0xa8c44a4 </usr/include/c++/4.6/bits/stl_tree.h:1371:33> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))
            (IfStmt 0xa8c4b78 <line:1372:9, line:1383:59>
              <<<NULL>>>
              (CallExpr 0xa8c46a8 <line:1372:13, line:1373:35> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa8c4540 <line:1372:13, col:21> '<dependent type>' lvalue
                  (MemberExpr 0xa8c4520 <col:13> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                    (CXXThisExpr 0xa8c4510 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
                (CallExpr 0xa8c45b0 <col:36, col:53> '<dependent type>'
                  (CXXUnresolvedConstructExpr 0xa8c4580 <col:36, col:48> '_KeyOfValue')
                  (DeclRefExpr 0xa8c4598 <col:50> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))
                (CallExpr 0xa8c4688 <line:1373:8, col:34> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8c45d0 <col:8> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                  (CXXDependentScopeMemberExpr 0xa8c4650 <col:15, col:27> '<dependent type>' lvalue
                    (ParenExpr 0xa8c4638 <col:15, col:25> '<dependent type>'
                      (UnaryOperator 0xa8c4620 <col:16, col:18> '<dependent type>' prefix '++'
                        (DeclRefExpr 0xa8c4608 <col:18> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c4240 '__after' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))))))
              (CompoundStmt 0xa8c4a78 <line:1374:6, line:1381:6>
                (IfStmt 0xa8c4a58 <line:1375:8, line:1380:34>
                  <<<NULL>>>
                  (CXXOperatorCallExpr 0xa8c47f8 <line:1375:12, col:44> '<dependent type>'
                    (UnresolvedLookupExpr 0xa8c4790 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                    (CallExpr 0xa8c4758 <col:12, col:39> '<dependent type>'
                      (UnresolvedLookupExpr 0xa8c46d0 <col:12> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                      (CXXDependentScopeMemberExpr 0xa8c4720 <col:21, col:32> '<dependent type>' lvalue
                        (DeclRefExpr 0xa8c4708 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
                    (IntegerLiteral 0xa8c4778 <col:44> 'int' 0))
                  (ReturnStmt 0xa8c4910 <line:1376:3, line:1377:34>
                    (CallExpr 0xa8c48e8 <line:1376:10, line:1377:34> '<dependent type>'
                      (MemberExpr 0xa8c4830 <line:1376:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                        (CXXThisExpr 0xa8c4820 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                      (IntegerLiteral 0xa8c4850 <col:21> 'int' 0)
                      (CXXDependentScopeMemberExpr 0xa8c4880 <col:24, col:35> '<dependent type>' lvalue
                        (DeclRefExpr 0xa8c4868 <col:24> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                      (ParenExpr 0xa8c48d0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                        (DeclRefExpr 0xa8c48b4 </usr/include/c++/4.6/bits/stl_tree.h:1377:30> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))
                  (ReturnStmt 0xa8c4a48 <line:1379:3, line:1380:34>
                    (CallExpr 0xa8c4a20 <line:1379:10, line:1380:34> '<dependent type>'
                      (MemberExpr 0xa8c4930 <line:1379:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                        (CXXThisExpr 0xa8c4920 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                      (CXXDependentScopeMemberExpr 0xa8c4968 <col:21, col:29> '<dependent type>' lvalue
                        (DeclRefExpr 0xa8c4950 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c4240 '__after' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                      (CXXDependentScopeMemberExpr 0xa8c49b8 <col:38, col:46> '<dependent type>' lvalue
                        (DeclRefExpr 0xa8c499c <col:38> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c4240 '__after' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                      (ParenExpr 0xa8c4a08 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                        (DeclRefExpr 0xa8c49ec </usr/include/c++/4.6/bits/stl_tree.h:1380:30> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))))
              (ReturnStmt 0xa8c4b68 <line:1383:6, col:59>
                (CXXDependentScopeMemberExpr 0xa8c4b30 <col:13, col:59> '<dependent type>' lvalue
                  (CallExpr 0xa8c4b10 <col:13, col:57> '<dependent type>'
                    (UnresolvedMemberExpr 0xa8c4aa0 <col:13> '<bound member function type>' lvalue)
                    (ParenExpr 0xa8c4af8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c4ae0 </usr/include/c++/4.6/bits/stl_tree.h:1383:53> 'const _Val' lvalue ParmVar 0xa8c2bb0 '__v' 'const _Val &'))))))))
        (ReturnStmt 0xa8c4c40 <line:1387:2, col:34>
          (CallExpr 0xa8c4c20 <col:9, col:34> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8c4be8 <col:9, col:20> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c4bd0 <col:9> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c2b40 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))))))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator _M_insert_equal_(const_iterator __position, const _Val &__v) (CompoundStmt 0xa8c72c8 </usr/include/c++/4.6/bits/stl_tree.h:1402:5, line:1456:5>
  (IfStmt 0xa8c72a8 <line:1404:7, line:1455:2>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8c58a0 <line:1404:11, col:40> '<dependent type>'
      (UnresolvedLookupExpr 0xa8c5838 <col:30, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
      (CXXDependentScopeMemberExpr 0xa8c5790 <col:11, col:22> '<dependent type>' lvalue
        (DeclRefExpr 0xa8c5778 <col:11> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
      (CallExpr 0xa8c5818 <col:33, col:40> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c57d8 <col:33> '<bound member function type>' lvalue)))
    (CompoundStmt 0xa8c5d78 <line:1405:2, line:1413:2>
      (IfStmt 0xa8c5d58 <line:1406:4, line:1412:56>
        <<<NULL>>>
        (BinaryOperator 0xa8c5b70 <line:1406:8, line:1408:29> '<dependent type>' '&&'
          (CXXOperatorCallExpr 0xa8c5980 <line:1406:8, col:17> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c5930 <col:15, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ad430 0xa60ea80 0xa625ef0 0xa628670 0xa6b54b0 0xa801f20 0xa802460 0xa802990)
            (CallExpr 0xa8c58f8 <col:8, col:13> '<dependent type>'
              (MemberExpr 0xa8c58d8 <col:8> '<bound member function type>' ->size 0xa89f020
                (CXXThisExpr 0xa8c58c8 <col:8> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (IntegerLiteral 0xa8c5918 <col:17> 'int' 0))
          (UnaryOperator 0xa8c5b58 <line:1407:11, line:1408:29> '<dependent type>' prefix '!'
            (CallExpr 0xa8c5b30 <line:1407:12, line:1408:29> '<dependent type>'
              (CXXDependentScopeMemberExpr 0xa8c59d8 <line:1407:12, col:20> '<dependent type>' lvalue
                (MemberExpr 0xa8c59b8 <col:12> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                  (CXXThisExpr 0xa8c59a8 <col:12> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
              (CallExpr 0xa8c5a48 <col:35, col:52> '<dependent type>'
                (CXXUnresolvedConstructExpr 0xa8c5a18 <col:35, col:47> '_KeyOfValue')
                (DeclRefExpr 0xa8c5a30 <col:49> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))
              (CallExpr 0xa8c5b10 <line:1408:7, col:28> '<dependent type>'
                (UnresolvedLookupExpr 0xa8c5a68 <col:7> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                (CallExpr 0xa8c5af0 <col:14, col:27> '<dependent type>'
                  (UnresolvedMemberExpr 0xa8c5ab0 <col:14> '<bound member function type>' lvalue))))))
        (ReturnStmt 0xa8c5c98 <line:1409:6, line:1410:37>
          (CallExpr 0xa8c5c70 <line:1409:13, line:1410:37> '<dependent type>'
            (MemberExpr 0xa8c5b98 <line:1409:13> '<bound member function type>' ->_M_insert_ 0xa8b0e80
              (CXXThisExpr 0xa8c5b88 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
            (IntegerLiteral 0xa8c5bb8 <col:24> 'int' 0)
            (CallExpr 0xa8c5c20 <col:27, col:40> '<dependent type>'
              (UnresolvedMemberExpr 0xa8c5be0 <col:27> '<bound member function type>' lvalue))
            (ParenExpr 0xa8c5c58 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
              (DeclRefExpr 0xa8c5c3c </usr/include/c++/4.6/bits/stl_tree.h:1410:33> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
        (ReturnStmt 0xa8c5d48 <line:1412:6, col:56>
          (CallExpr 0xa8c5d28 <col:13, col:56> '<dependent type>'
            (UnresolvedMemberExpr 0xa8c5cb8 <col:13> '<bound member function type>' lvalue)
            (ParenExpr 0xa8c5d10 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
              (DeclRefExpr 0xa8c5cf8 </usr/include/c++/4.6/bits/stl_tree.h:1412:52> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))))
    (IfStmt 0xa8c7288 <line:1414:12, line:1455:2>
      <<<NULL>>>
      (UnaryOperator 0xa8c5f20 <line:1414:16, line:1415:30> '<dependent type>' prefix '!'
        (CallExpr 0xa8c5ef8 <line:1414:17, line:1415:30> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8c5dc0 <line:1414:17, col:25> '<dependent type>' lvalue
            (MemberExpr 0xa8c5da0 <col:17> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
              (CXXThisExpr 0xa8c5d90 <col:17> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
          (CallExpr 0xa8c5e80 <col:40, col:65> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c5df8 <col:40> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
            (CXXDependentScopeMemberExpr 0xa8c5e48 <col:47, col:58> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c5e30 <col:47> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
          (CallExpr 0xa8c5ed8 <line:1415:12, col:29> '<dependent type>'
            (CXXUnresolvedConstructExpr 0xa8c5ea8 <col:12, col:24> '_KeyOfValue')
            (DeclRefExpr 0xa8c5ec0 <col:26> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
      (CompoundStmt 0xa8c68f0 <line:1416:2, line:1435:2>
        (DeclStmt 0xa8c5f90 <line:1418:4, col:40>
          0xa8c5f40 "const_iterator __before =
            (DeclRefExpr 0xa8c5f74 <col:30> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')")
        (IfStmt 0xa8c68d0 <line:1419:4, line:1434:56>
          <<<NULL>>>
          (CXXOperatorCallExpr 0xa8c60c8 <line:1419:8, col:42> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c6060 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
            (CXXDependentScopeMemberExpr 0xa8c5fb8 <col:8, col:19> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c5fa0 <col:8> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
            (CallExpr 0xa8c6040 <col:30, col:42> '<dependent type>'
              (UnresolvedMemberExpr 0xa8c6000 <col:30> '<bound member function type>' lvalue)))
          (ReturnStmt 0xa8c6258 <line:1420:6, line:1421:37>
            (CallExpr 0xa8c6230 <line:1420:13, line:1421:37> '<dependent type>'
              (MemberExpr 0xa8c6100 <line:1420:13> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                (CXXThisExpr 0xa8c60f0 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
              (CallExpr 0xa8c6170 <col:24, col:36> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c6130 <col:24> '<bound member function type>' lvalue))
              (CallExpr 0xa8c61e0 <col:39, col:51> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c61a0 <col:39> '<bound member function type>' lvalue))
              (ParenExpr 0xa8c6218 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                (DeclRefExpr 0xa8c61fc </usr/include/c++/4.6/bits/stl_tree.h:1421:33> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
          (IfStmt 0xa8c68b0 <line:1422:9, line:1434:56>
            <<<NULL>>>
            (UnaryOperator 0xa8c6428 <line:1422:13, line:1423:37> '<dependent type>' prefix '!'
              (CallExpr 0xa8c6400 <line:1422:14, line:1423:37> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa8c6298 <line:1422:14, col:22> '<dependent type>' lvalue
                  (MemberExpr 0xa8c6278 <col:14> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                    (CXXThisExpr 0xa8c6268 <col:14> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
                (CallExpr 0xa8c6308 <col:37, col:54> '<dependent type>'
                  (CXXUnresolvedConstructExpr 0xa8c62d8 <col:37, col:49> '_KeyOfValue')
                  (DeclRefExpr 0xa8c62f0 <col:51> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))
                (CallExpr 0xa8c63e0 <line:1423:9, col:36> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8c6328 <col:9> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                  (CXXDependentScopeMemberExpr 0xa8c63a8 <col:16, col:29> '<dependent type>' lvalue
                    (ParenExpr 0xa8c6390 <col:16, col:27> '<dependent type>'
                      (UnaryOperator 0xa8c6378 <col:17, col:19> '<dependent type>' prefix '--'
                        (DeclRefExpr 0xa8c6360 <col:19> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c5f40 '__before' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))))))
            (CompoundStmt 0xa8c67e8 <line:1424:6, line:1432:6>
              (IfStmt 0xa8c67c8 <line:1425:8, line:1431:34>
                <<<NULL>>>
                (CXXOperatorCallExpr 0xa8c6568 <line:1425:12, col:42> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8c6500 <col:39, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                  (CallExpr 0xa8c64c8 <col:12, col:37> '<dependent type>'
                    (UnresolvedLookupExpr 0xa8c6440 <col:12> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                    (CXXDependentScopeMemberExpr 0xa8c6490 <col:21, col:30> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c6478 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c5f40 '__before' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
                  (IntegerLiteral 0xa8c64e8 <col:42> 'int' 0))
                (ReturnStmt 0xa8c6680 <line:1426:3, line:1427:34>
                  (CallExpr 0xa8c6658 <line:1426:10, line:1427:34> '<dependent type>'
                    (MemberExpr 0xa8c65a0 <line:1426:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                      (CXXThisExpr 0xa8c6590 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                    (IntegerLiteral 0xa8c65c0 <col:21> 'int' 0)
                    (CXXDependentScopeMemberExpr 0xa8c65f0 <col:24, col:33> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c65d8 <col:24> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c5f40 '__before' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (ParenExpr 0xa8c6640 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c6624 </usr/include/c++/4.6/bits/stl_tree.h:1427:30> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
                (ReturnStmt 0xa8c67b8 <line:1429:3, line:1431:34>
                  (CallExpr 0xa8c6790 <line:1429:10, line:1431:34> '<dependent type>'
                    (MemberExpr 0xa8c66a0 <line:1429:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                      (CXXThisExpr 0xa8c6690 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                    (CXXDependentScopeMemberExpr 0xa8c66d8 <col:21, col:32> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c66c0 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (CXXDependentScopeMemberExpr 0xa8c6728 <line:1430:7, col:18> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c670c <col:7> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (ParenExpr 0xa8c6778 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c675c </usr/include/c++/4.6/bits/stl_tree.h:1431:30> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))))
            (ReturnStmt 0xa8c68a0 <line:1434:6, col:56>
              (CallExpr 0xa8c6880 <col:13, col:56> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c6810 <col:13> '<bound member function type>' lvalue)
                (ParenExpr 0xa8c6868 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                  (DeclRefExpr 0xa8c6850 </usr/include/c++/4.6/bits/stl_tree.h:1434:52> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &')))))))
      (CompoundStmt 0xa8c7270 <line:1437:2, line:1455:2>
        (DeclStmt 0xa8c6960 <line:1439:4, col:39>
          0xa8c6910 "const_iterator __after =
            (DeclRefExpr 0xa8c6944 <col:29> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')")
        (IfStmt 0xa8c7250 <line:1440:4, line:1454:62>
          <<<NULL>>>
          (CXXOperatorCallExpr 0xa8c6a98 <line:1440:8, col:43> '<dependent type>'
            (UnresolvedLookupExpr 0xa8c6a30 <col:27, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
            (CXXDependentScopeMemberExpr 0xa8c6988 <col:8, col:19> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c6970 <col:8> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
            (CallExpr 0xa8c6a10 <col:30, col:43> '<dependent type>'
              (UnresolvedMemberExpr 0xa8c69d0 <col:30> '<bound member function type>' lvalue)))
          (ReturnStmt 0xa8c6bd0 <line:1441:6, line:1442:37>
            (CallExpr 0xa8c6ba8 <line:1441:13, line:1442:37> '<dependent type>'
              (MemberExpr 0xa8c6ad0 <line:1441:13> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                (CXXThisExpr 0xa8c6ac0 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
              (IntegerLiteral 0xa8c6af0 <col:24> 'int' 0)
              (CallExpr 0xa8c6b58 <col:27, col:40> '<dependent type>'
                (UnresolvedMemberExpr 0xa8c6b18 <col:27> '<bound member function type>' lvalue))
              (ParenExpr 0xa8c6b90 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                (DeclRefExpr 0xa8c6b74 </usr/include/c++/4.6/bits/stl_tree.h:1442:33> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
          (IfStmt 0xa8c7230 <line:1443:9, line:1454:62>
            <<<NULL>>>
            (UnaryOperator 0xa8c6dc8 <line:1443:13, line:1444:27> '<dependent type>' prefix '!'
              (CallExpr 0xa8c6da0 <line:1443:14, line:1444:27> '<dependent type>'
                (CXXDependentScopeMemberExpr 0xa8c6c38 <line:1443:14, col:22> '<dependent type>' lvalue
                  (MemberExpr 0xa8c6bf0 <col:14> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                    (CXXThisExpr 0xa8c6be0 <col:14> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
                (CallExpr 0xa8c6d28 <col:37, col:63> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8c6c70 <col:37> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
                  (CXXDependentScopeMemberExpr 0xa8c6cf0 <col:44, col:56> '<dependent type>' lvalue
                    (ParenExpr 0xa8c6cd8 <col:44, col:54> '<dependent type>'
                      (UnaryOperator 0xa8c6cc0 <col:45, col:47> '<dependent type>' prefix '++'
                        (DeclRefExpr 0xa8c6ca8 <col:47> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c6910 '__after' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))))
                (CallExpr 0xa8c6d80 <line:1444:9, col:26> '<dependent type>'
                  (CXXUnresolvedConstructExpr 0xa8c6d50 <col:9, col:21> '_KeyOfValue')
                  (DeclRefExpr 0xa8c6d68 <col:23> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
            (CompoundStmt 0xa8c7188 <line:1445:6, line:1452:6>
              (IfStmt 0xa8c7168 <line:1446:8, line:1451:34>
                <<<NULL>>>
                (CXXOperatorCallExpr 0xa8c6f08 <line:1446:12, col:44> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8c6ea0 <col:41, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                  (CallExpr 0xa8c6e68 <col:12, col:39> '<dependent type>'
                    (UnresolvedLookupExpr 0xa8c6de0 <col:12> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
                    (CXXDependentScopeMemberExpr 0xa8c6e30 <col:21, col:32> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c6e18 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
                  (IntegerLiteral 0xa8c6e88 <col:44> 'int' 0))
                (ReturnStmt 0xa8c7020 <line:1447:3, line:1448:34>
                  (CallExpr 0xa8c6ff8 <line:1447:10, line:1448:34> '<dependent type>'
                    (MemberExpr 0xa8c6f40 <line:1447:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                      (CXXThisExpr 0xa8c6f30 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                    (IntegerLiteral 0xa8c6f60 <col:21> 'int' 0)
                    (CXXDependentScopeMemberExpr 0xa8c6f90 <col:24, col:35> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c6f78 <col:24> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c53f0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (ParenExpr 0xa8c6fe0 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c6fc4 </usr/include/c++/4.6/bits/stl_tree.h:1448:30> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))
                (ReturnStmt 0xa8c7158 <line:1450:3, line:1451:34>
                  (CallExpr 0xa8c7130 <line:1450:10, line:1451:34> '<dependent type>'
                    (MemberExpr 0xa8c7040 <line:1450:10> '<bound member function type>' ->_M_insert_ 0xa8b0e80
                      (CXXThisExpr 0xa8c7030 <col:10> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                    (CXXDependentScopeMemberExpr 0xa8c7078 <col:21, col:29> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c7060 <col:21> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c6910 '__after' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (CXXDependentScopeMemberExpr 0xa8c70c8 <col:38, col:46> '<dependent type>' lvalue
                      (DeclRefExpr 0xa8c70ac <col:38> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8c6910 '__after' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
                    (ParenExpr 0xa8c7118 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                      (DeclRefExpr 0xa8c70fc </usr/include/c++/4.6/bits/stl_tree.h:1451:30> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))))
            (ReturnStmt 0xa8c7220 <line:1454:6, col:62>
              (CallExpr 0xa8c7200 <col:13, col:62> '<dependent type>'
                (MemberExpr 0xa8c71b0 <col:13> '<bound member function type>' ->_M_insert_equal_lower 0xa8b3180
                  (CXXThisExpr 0xa8c71a0 <col:13> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
                (ParenExpr 0xa8c71e8 </usr/include/c++/4.6/bits/move.h:106:38, col:44> 'const _Val' lvalue
                  (DeclRefExpr 0xa8c71d0 </usr/include/c++/4.6/bits/stl_tree.h:1454:58> 'const _Val' lvalue ParmVar 0xa8c5460 '__v' 'const _Val &'))))))))))


    template <class _II> void _M_insert_unique(_II __first, _II __last) (CompoundStmt 0xa8c7c38 </usr/include/c++/4.6/bits/stl_tree.h:1464:7, line:1467:7>
  (ForStmt 0xa8c7c10 <line:1465:2, line:1466:37>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8c7ac0 <line:1465:9, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa8c7a60 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8c7a2c <col:9> '_II' lvalue ParmVar 0xa8c7870 '__first' '_II')
      (DeclRefExpr 0xa8c7a44 <col:20> '_II' lvalue ParmVar 0xa8c78b0 '__last' '_II'))
    (UnaryOperator 0xa8c7b00 <col:28, col:30> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa8c7ae4 <col:30> '_II' lvalue ParmVar 0xa8c7870 '__first' '_II'))
    (CallExpr 0xa8c7be8 <line:1466:4, col:37> '<dependent type>'
      (MemberExpr 0xa8c7b28 <col:4> '<bound member function type>' ->_M_insert_unique_ 0xa8c2e50
        (CXXThisExpr 0xa8c7b18 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
      (CallExpr 0xa8c7b98 <col:22, col:26> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c7b58 <col:22> '<bound member function type>' lvalue))
      (UnaryOperator 0xa8c7bd0 <col:29, col:30> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa8c7bb4 <col:30> '_II' lvalue ParmVar 0xa8c7870 '__first' '_II')))))

;
    template <class _II> void _M_insert_equal(_II __first, _II __last) (CompoundStmt 0xa8c85a8 </usr/include/c++/4.6/bits/stl_tree.h:1475:7, line:1478:7>
  (ForStmt 0xa8c8580 <line:1476:2, line:1477:36>
    <<<NULL>>>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8c8430 <line:1476:9, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa8c83d0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8c839c <col:9> '_II' lvalue ParmVar 0xa8c81e0 '__first' '_II')
      (DeclRefExpr 0xa8c83b4 <col:20> '_II' lvalue ParmVar 0xa8c8220 '__last' '_II'))
    (UnaryOperator 0xa8c8470 <col:28, col:30> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa8c8454 <col:30> '_II' lvalue ParmVar 0xa8c81e0 '__first' '_II'))
    (CallExpr 0xa8c8558 <line:1477:4, col:36> '<dependent type>'
      (MemberExpr 0xa8c8498 <col:4> '<bound member function type>' ->_M_insert_equal_ 0xa8c56e0
        (CXXThisExpr 0xa8c8488 <col:4> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
      (CallExpr 0xa8c8508 <col:21, col:25> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c84c8 <col:21> '<bound member function type>' lvalue))
      (UnaryOperator 0xa8c8540 <col:28, col:29> '<dependent type>' prefix '*'
        (DeclRefExpr 0xa8c8524 <col:29> '_II' lvalue ParmVar 0xa8c81e0 '__first' '_II')))))

;
    void _M_erase_aux(const_iterator __position) (CompoundStmt 0xa8c8e80 </usr/include/c++/4.6/bits/stl_tree.h:1485:5, line:1492:5>
  (DeclStmt 0xa8c8d88 <line:1486:7, line:1489:31>
    0xa8c8be0 "_Link_type __y =
      (CXXStaticCastExpr 0xa8c8d70 <line:1487:2, line:1489:30> '_Link_type':'_Rb_tree_node<_Val> *' static_cast<_Link_type> <Dependent>
        (CallExpr 0xa8c8d40 <line:1487:26, line:1489:29> '<dependent type>'
          (UnresolvedLookupExpr 0xa8c8c18 <line:1487:26> '<overloaded function type>' lvalue (ADL) = '1' 0xa895bd0)
          (CXXConstCastExpr 0xa8c8ca8 <line:1488:6, col:46> '_Base_ptr':'struct std::_Rb_tree_node_base *' const_cast<_Base_ptr> <NoOp>
            (CXXDependentScopeMemberExpr 0xa8c8c68 <col:28, col:39> '<dependent type>' lvalue
              (DeclRefExpr 0xa8c8c4c <col:28> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c8af0 '__position' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))
          (CXXDependentScopeMemberExpr 0xa8c8d08 <line:1489:6, col:20> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa8c8cd0 <col:6, col:12> '<dependent type>' lvalue
              (CXXThisExpr 0xa8c8cc0 <col:6> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))")
  (CallExpr 0xa8c8de0 <line:1490:7, col:26> '<dependent type>'
    (MemberExpr 0xa8c8da8 <col:7> '<bound member function type>' ->_M_destroy_node 0xa897030
      (CXXThisExpr 0xa8c8d98 <col:7> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))
    (DeclRefExpr 0xa8c8dc8 <col:23> '_Link_type':'_Rb_tree_node<_Val> *' lvalue Var 0xa8c8be0 '__y' '_Link_type':'_Rb_tree_node<_Val> *'))
  (UnaryOperator 0xa8c8e68 <line:1491:7, col:17> '<dependent type>' prefix '--'
    (CXXDependentScopeMemberExpr 0xa8c8e30 <col:9, col:17> '<dependent type>' lvalue
      (MemberExpr 0xa8c8e10 <col:9> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
        (CXXThisExpr 0xa8c8e00 <col:9> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))))


    void _M_erase_aux(const_iterator __first, const_iterator __last) (CompoundStmt 0xa8c9958 </usr/include/c++/4.6/bits/stl_tree.h:1499:5, line:1505:5>
  (IfStmt 0xa8c9938 <line:1500:7, line:1504:19>
    <<<NULL>>>
    (BinaryOperator 0xa8c9738 <line:1500:11, col:47> '<dependent type>' '&&'
      (CXXOperatorCallExpr 0xa8c95f8 <col:11, col:28> '<dependent type>'
        (UnresolvedLookupExpr 0xa8c9590 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa8c9508 <col:11> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c93d0 '__first' 'const_iterator':'_Rb_tree_const_iterator<value_type>')
        (CallExpr 0xa8c9570 <col:22, col:28> '<dependent type>'
          (UnresolvedMemberExpr 0xa8c9530 <col:22> '<bound member function type>' lvalue)))
      (CXXOperatorCallExpr 0xa8c9710 <col:33, col:47> '<dependent type>'
        (UnresolvedLookupExpr 0xa8c96a8 <col:40, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (DeclRefExpr 0xa8c961c <col:33> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c9410 '__last' 'const_iterator':'_Rb_tree_const_iterator<value_type>')
        (CallExpr 0xa8c9688 <col:43, col:47> '<dependent type>'
          (UnresolvedMemberExpr 0xa8c9648 <col:43> '<bound member function type>' lvalue))))
    (CallExpr 0xa8c9780 <line:1501:2, col:8> '<dependent type>'
      (MemberExpr 0xa8c9760 <col:2> '<bound member function type>' ->clear 0xa8a0540
        (CXXThisExpr 0xa8c9750 <col:2> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
    (WhileStmt 0xa8c9920 <line:1503:2, line:1504:19>
      <<<NULL>>>
      (CXXOperatorCallExpr 0xa8c9830 <line:1503:9, col:20> '<dependent type>'
        (UnresolvedLookupExpr 0xa8c97d0 <col:17, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
        (DeclRefExpr 0xa8c979c <col:9> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c93d0 '__first' 'const_iterator':'_Rb_tree_const_iterator<value_type>')
        (DeclRefExpr 0xa8c97b4 <col:20> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c9410 '__last' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
      (CallExpr 0xa8c9900 <line:1504:4, col:19> '<dependent type>'
        (UnresolvedMemberExpr 0xa8c9868 <col:4> '<bound member function type>' lvalue)
        (UnaryOperator 0xa8c98e8 <col:10, col:17> '<dependent type>' postfix '++'
          (DeclRefExpr 0xa8c98b8 <col:10> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue ParmVar 0xa8c93d0 '__first' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type erase(const _Key &__x) (CompoundStmt 0xa8ca880 </usr/include/c++/4.6/bits/stl_tree.h:1512:5, line:1517:5>
  (DeclStmt 0xa8ca5c0 <line:1513:7, col:54>
    0xa8ca500 "pair<iterator, iterator> __p =
      (CallExpr 0xa8ca5a0 <col:38, col:53> '<dependent type>'
        (UnresolvedMemberExpr 0xa8ca548 <col:38> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8ca588 <col:50> 'const _Key' lvalue ParmVar 0xa8ca0e0 '__x' 'const _Key &'))")
  (DeclStmt 0xa8ca668 <line:1514:7, col:42>
    0xa8ca5e0 "const size_type __old_size =
      (CallExpr 0xa8ca648 <col:36, col:41> '<dependent type>'
        (MemberExpr 0xa8ca628 <col:36> '<bound member function type>' ->size 0xa89f020
          (CXXThisExpr 0xa8ca618 <col:36> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))")
  (CallExpr 0xa8ca778 <line:1515:7, col:34> '<dependent type>'
    (UnresolvedMemberExpr 0xa8ca688 <col:7> '<bound member function type>' lvalue)
    (CXXDependentScopeMemberExpr 0xa8ca6f0 <col:13, col:17> '<dependent type>' lvalue
      (DeclRefExpr 0xa8ca6d8 <col:13> 'pair<iterator, iterator>' lvalue Var 0xa8ca500 '__p' 'pair<iterator, iterator>'))
    (CXXDependentScopeMemberExpr 0xa8ca740 <col:24, col:28> '<dependent type>' lvalue
      (DeclRefExpr 0xa8ca724 <col:24> 'pair<iterator, iterator>' lvalue Var 0xa8ca500 '__p' 'pair<iterator, iterator>')))
  (ReturnStmt 0xa8ca870 <line:1516:7, col:32>
    (CXXOperatorCallExpr 0xa8ca848 <col:14, col:32> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ca808 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa626c50 0xa629af0 0xa6ba460)
      (DeclRefExpr 0xa8ca79c <col:14> 'const size_type':'const unsigned int' lvalue Var 0xa8ca5e0 '__old_size' 'const size_type':'const unsigned int')
      (CallExpr 0xa8ca7e8 <col:27, col:32> '<dependent type>'
        (MemberExpr 0xa8ca7c8 <col:27> '<bound member function type>' ->size 0xa89f020
          (CXXThisExpr 0xa8ca7b8 <col:27> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))))


    void erase(const _Key *__first, const _Key *__last) (CompoundStmt 0xa8cc138 </usr/include/c++/4.6/bits/stl_tree.h:1524:5, line:1527:5>
  (WhileStmt 0xa8cc120 <line:1525:7, line:1526:18>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8cc018 <line:1525:14, col:25> '<dependent type>'
      (UnresolvedLookupExpr 0xa8cbfb8 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8cbf88 <col:14> 'const _Key *' lvalue ParmVar 0xa8cbe20 '__first' 'const _Key *')
      (DeclRefExpr 0xa8cbfa0 <col:25> 'const _Key *' lvalue ParmVar 0xa8cbe70 '__last' 'const _Key *'))
    (CallExpr 0xa8cc100 <line:1526:2, col:18> '<dependent type>'
      (UnresolvedMemberExpr 0xa8cc050 <col:2> '<bound member function type>' lvalue)
      (UnaryOperator 0xa8cc0e8 <col:8, col:16> '<dependent type>' prefix '*'
        (UnaryOperator 0xa8cc0d0 <col:9, col:16> '<dependent type>' postfix '++'
          (DeclRefExpr 0xa8cc0a0 <col:9> 'const _Key *' lvalue ParmVar 0xa8cbe20 '__first' 'const _Key *'))))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator find(const _Key &__k) (CompoundStmt 0xa8cd0b8 </usr/include/c++/4.6/bits/stl_tree.h:1535:5, line:1540:5>
  (DeclStmt 0xa8ccd58 <line:1536:7, col:63>
    0xa8ccbb0 "iterator __j =
      (CallExpr 0xa8ccd30 <col:22, col:62> '<dependent type>'
        (UnresolvedMemberExpr 0xa8ccbf8 <col:22> '<bound member function type>' lvalue)
        (CallExpr 0xa8ccc88 <col:37, col:46> '<dependent type>'
          (UnresolvedMemberExpr 0xa8ccc48 <col:37> '<bound member function type>' lvalue))
        (CallExpr 0xa8cccf8 <col:49, col:56> '<dependent type>'
          (UnresolvedMemberExpr 0xa8cccb8 <col:49> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa8ccd14 <col:59> 'const _Key' lvalue ParmVar 0xa8cc8a0 '__k' 'const _Key &'))")
  (ReturnStmt 0xa8cd0a8 <line:1537:7, line:1539:38>
    (ConditionalOperator 0xa8cd088 <line:1537:14, line:1539:38> '<dependent type>'
      (ParenExpr 0xa8ccfe8 <line:1537:14, line:1539:26> '<dependent type>'
        (BinaryOperator 0xa8ccfd0 <line:1537:15, line:1539:25> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa8cce58 <line:1537:15, col:26> '<dependent type>'
            (UnresolvedLookupExpr 0xa8ccdf0 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
            (DeclRefExpr 0xa8ccd68 <col:15> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8ccbb0 '__j' 'iterator':'_Rb_tree_iterator<value_type>')
            (CallExpr 0xa8ccdd0 <col:22, col:26> '<dependent type>'
              (UnresolvedMemberExpr 0xa8ccd90 <col:22> '<bound member function type>' lvalue)))
          (CallExpr 0xa8ccfa8 <line:1538:11, line:1539:25> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8cceb0 <line:1538:11, col:19> '<dependent type>' lvalue
              (MemberExpr 0xa8cce90 <col:11> '_Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8cce80 <col:11> '_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (DeclRefExpr 0xa8ccee4 <col:34> 'const _Key' lvalue ParmVar 0xa8cc8a0 '__k' 'const _Key &')
            (CallExpr 0xa8ccf88 <line:1539:6, col:24> '<dependent type>'
              (UnresolvedLookupExpr 0xa8ccf00 <col:6> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (CXXDependentScopeMemberExpr 0xa8ccf50 <col:13, col:17> '<dependent type>' lvalue
                (DeclRefExpr 0xa8ccf38 <col:13> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8ccbb0 '__j' 'iterator':'_Rb_tree_iterator<value_type>'))))))
      (CallExpr 0xa8cd050 <col:30, col:34> '<dependent type>'
        (UnresolvedMemberExpr 0xa8cd010 <col:30> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa8cd06c <col:38> 'iterator':'_Rb_tree_iterator<value_type>' lvalue Var 0xa8ccbb0 '__j' 'iterator':'_Rb_tree_iterator<value_type>'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator find(const _Key &__k) const (CompoundStmt 0xa8ce038 </usr/include/c++/4.6/bits/stl_tree.h:1548:5, line:1553:5>
  (DeclStmt 0xa8cdcd8 <line:1549:7, col:69>
    0xa8cdb30 "const_iterator __j =
      (CallExpr 0xa8cdcb0 <col:28, col:68> '<dependent type>'
        (UnresolvedMemberExpr 0xa8cdb78 <col:28> '<bound member function type>' lvalue)
        (CallExpr 0xa8cdc08 <col:43, col:52> '<dependent type>'
          (UnresolvedMemberExpr 0xa8cdbc8 <col:43> '<bound member function type>' lvalue))
        (CallExpr 0xa8cdc78 <col:55, col:62> '<dependent type>'
          (UnresolvedMemberExpr 0xa8cdc38 <col:55> '<bound member function type>' lvalue))
        (DeclRefExpr 0xa8cdc94 <col:65> 'const _Key' lvalue ParmVar 0xa8cd820 '__k' 'const _Key &'))")
  (ReturnStmt 0xa8ce028 <line:1550:7, line:1552:38>
    (ConditionalOperator 0xa8ce008 <line:1550:14, line:1552:38> '<dependent type>'
      (ParenExpr 0xa8cdf68 <line:1550:14, line:1552:26> '<dependent type>'
        (BinaryOperator 0xa8cdf50 <line:1550:15, line:1552:25> '<dependent type>' '||'
          (CXXOperatorCallExpr 0xa8cddd8 <line:1550:15, col:26> '<dependent type>'
            (UnresolvedLookupExpr 0xa8cdd70 <col:19, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
            (DeclRefExpr 0xa8cdce8 <col:15> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8cdb30 '__j' 'const_iterator':'_Rb_tree_const_iterator<value_type>')
            (CallExpr 0xa8cdd50 <col:22, col:26> '<dependent type>'
              (UnresolvedMemberExpr 0xa8cdd10 <col:22> '<bound member function type>' lvalue)))
          (CallExpr 0xa8cdf28 <line:1551:11, line:1552:25> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8cde30 <line:1551:11, col:19> '<dependent type>' lvalue
              (MemberExpr 0xa8cde10 <col:11> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8cde00 <col:11> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (DeclRefExpr 0xa8cde64 <col:34> 'const _Key' lvalue ParmVar 0xa8cd820 '__k' 'const _Key &')
            (CallExpr 0xa8cdf08 <line:1552:6, col:24> '<dependent type>'
              (UnresolvedLookupExpr 0xa8cde80 <col:6> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (CXXDependentScopeMemberExpr 0xa8cded0 <col:13, col:17> '<dependent type>' lvalue
                (DeclRefExpr 0xa8cdeb8 <col:13> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8cdb30 '__j' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))))))
      (CallExpr 0xa8cdfd0 <col:30, col:34> '<dependent type>'
        (UnresolvedMemberExpr 0xa8cdf90 <col:30> '<bound member function type>' lvalue))
      (DeclRefExpr 0xa8cdfec <col:38> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8cdb30 '__j' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))))


    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type count(const _Key &__k) const (CompoundStmt 0xa8cee38 </usr/include/c++/4.6/bits/stl_tree.h:1560:5, line:1564:5>
  (DeclStmt 0xa8cec80 <line:1561:7, col:66>
    0xa8cebc0 "pair<const_iterator, const_iterator> __p =
      (CallExpr 0xa8cec60 <col:50, col:65> '<dependent type>'
        (UnresolvedMemberExpr 0xa8cec08 <col:50> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8cec48 <col:62> 'const _Key' lvalue ParmVar 0xa8ce7a0 '__k' 'const _Key &'))")
  (DeclStmt 0xa8cedf0 <line:1562:7, col:65>
    0xa8ceca0 "const size_type __n =
      (CallExpr 0xa8cedc8 <col:29, col:64> '<dependent type>'
        (UnresolvedLookupExpr 0xa8cecf0 <col:29, col:34> '<overloaded function type>' lvalue (no ADL) = '1' 0xa61bbc0)
        (CXXDependentScopeMemberExpr 0xa8ced40 <col:43, col:47> '<dependent type>' lvalue
          (DeclRefExpr 0xa8ced24 <col:43> 'pair<const_iterator, const_iterator>' lvalue Var 0xa8cebc0 '__p' 'pair<const_iterator, const_iterator>'))
        (CXXDependentScopeMemberExpr 0xa8ced90 <col:54, col:58> '<dependent type>' lvalue
          (DeclRefExpr 0xa8ced74 <col:54> 'pair<const_iterator, const_iterator>' lvalue Var 0xa8cebc0 '__p' 'pair<const_iterator, const_iterator>')))")
  (ReturnStmt 0xa8cee28 <line:1563:7, col:14>
    (ImplicitCastExpr 0xa8cee18 <col:14> 'size_type':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0xa8cee00 <col:14> 'const size_type':'const unsigned int' lvalue Var 0xa8ceca0 '__n' 'const size_type':'const unsigned int'))))


    unsigned int _Rb_tree_black_count(const std::_Rb_tree_node_base *__node, const std::_Rb_tree_node_base *__root) throw();
    bool __rb_verify() const (CompoundStmt 0xa8d1398 </usr/include/c++/4.6/bits/stl_tree.h:1574:5, line:1606:5>
  (IfStmt 0xa8cfed8 <line:1575:7, line:1578:55>
    <<<NULL>>>
    (BinaryOperator 0xa8cf860 <line:1575:11, col:56> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa8cf6c8 <col:11, col:36> '<dependent type>'
        (UnresolvedLookupExpr 0xa8cf660 <col:33, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (CXXDependentScopeMemberExpr 0xa8cf610 <col:11, col:19> '<dependent type>' lvalue
          (MemberExpr 0xa8cf5f0 <col:11> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
            (CXXThisExpr 0xa8cf5e0 <col:11> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
        (IntegerLiteral 0xa8cf648 <col:36> 'int' 0))
      (CXXOperatorCallExpr 0xa8cf838 <col:41, col:56> '<dependent type>'
        (UnresolvedLookupExpr 0xa8cf7d0 <col:49, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
        (CallExpr 0xa8cf740 <col:41, col:47> '<dependent type>'
          (UnresolvedMemberExpr 0xa8cf700 <col:41> '<bound member function type>' lvalue))
        (CallExpr 0xa8cf7b0 <col:52, col:56> '<dependent type>'
          (UnresolvedMemberExpr 0xa8cf770 <col:52> '<bound member function type>' lvalue))))
    (ReturnStmt 0xa8cfec8 <line:1576:2, line:1578:55>
      (BinaryOperator 0xa8cfeb0 <line:1576:9, line:1578:55> '<dependent type>' '&&'
        (BinaryOperator 0xa8cfce0 <line:1576:9, line:1577:54> '<dependent type>' '&&'
          (BinaryOperator 0xa8cfaf8 <line:1576:9, col:54> '<dependent type>' '&&'
            (CXXOperatorCallExpr 0xa8cf960 <col:9, col:34> '<dependent type>'
              (UnresolvedLookupExpr 0xa8cf8f8 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (CXXDependentScopeMemberExpr 0xa8cf8a8 <col:9, col:17> '<dependent type>' lvalue
                (MemberExpr 0xa8cf888 <col:9> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                  (CXXThisExpr 0xa8cf878 <col:9> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
              (IntegerLiteral 0xa8cf8e0 <col:34> 'int' 0))
            (CXXOperatorCallExpr 0xa8cfad0 <col:39, col:54> '<dependent type>'
              (UnresolvedLookupExpr 0xa8cfa68 <col:47, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
              (CallExpr 0xa8cf9d8 <col:39, col:45> '<dependent type>'
                (UnresolvedMemberExpr 0xa8cf998 <col:39> '<bound member function type>' lvalue))
              (CallExpr 0xa8cfa48 <col:50, col:54> '<dependent type>'
                (UnresolvedMemberExpr 0xa8cfa08 <col:50> '<bound member function type>' lvalue))))
          (CXXOperatorCallExpr 0xa8cfcb8 <line:1577:12, col:54> '<dependent type>'
            (UnresolvedLookupExpr 0xa8cfc50 <col:44, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
            (CXXDependentScopeMemberExpr 0xa8cfb90 <col:12, col:36> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa8cfb58 <col:12, col:26> '<dependent type>' lvalue
                (CXXDependentScopeMemberExpr 0xa8cfb20 <col:12, col:18> '<dependent type>' lvalue
                  (CXXThisExpr 0xa8cfb10 <col:12> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
            (CallExpr 0xa8cfc18 <col:47, col:54> '<dependent type>'
              (UnresolvedMemberExpr 0xa8cfbd8 <col:47> '<bound member function type>' lvalue))))
        (CXXOperatorCallExpr 0xa8cfe88 <line:1578:12, col:55> '<dependent type>'
          (UnresolvedLookupExpr 0xa8cfe20 <col:45, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
          (CXXDependentScopeMemberExpr 0xa8cfd78 <col:12, col:36> '<dependent type>' lvalue
            (CXXDependentScopeMemberExpr 0xa8cfd40 <col:12, col:26> '<dependent type>' lvalue
              (CXXDependentScopeMemberExpr 0xa8cfd08 <col:12, col:18> '<dependent type>' lvalue
                (CXXThisExpr 0xa8cfcf8 <col:12> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this))))
          (CallExpr 0xa8cfe00 <col:48, col:55> '<dependent type>'
            (UnresolvedMemberExpr 0xa8cfdc0 <col:48> '<bound member function type>' lvalue)))))
    <<<NULL>>>)
  (DeclStmt 0xa8d0088 <line:1580:7, col:74>
    0xa8cff10 "unsigned int __len =
      (CallExpr 0xa8d0060 <col:28, col:73> '<dependent type>'
        (UnresolvedLookupExpr 0xa8cff48 <col:28> '<overloaded function type>' lvalue (ADL) = '1' 0xa8cef60)
        (CallExpr 0xa8cffd0 <col:49, col:61> '<dependent type>'
          (UnresolvedMemberExpr 0xa8cff90 <col:49> '<bound member function type>' lvalue))
        (CallExpr 0xa8d0040 <col:64, col:72> '<dependent type>'
          (UnresolvedMemberExpr 0xa8d0000 <col:64> '<bound member function type>' lvalue)))")
  (ForStmt 0xa8d0f10 <line:1581:7, line:1599:2>
    (DeclStmt 0xa8d0148 <line:1581:12, col:41>
      0xa8d00a0 "const_iterator __it =
        (CallExpr 0xa8d0128 <col:34, col:40> '<dependent type>'
          (UnresolvedMemberExpr 0xa8d00e8 <col:34> '<bound member function type>' lvalue))")
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8d0240 <col:43, col:55> '<dependent type>'
      (UnresolvedLookupExpr 0xa8d01e0 <col:48, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (DeclRefExpr 0xa8d0158 <col:43> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8d00a0 '__it' 'const_iterator':'_Rb_tree_const_iterator<value_type>')
      (CallExpr 0xa8d01c0 <col:51, col:55> '<dependent type>'
        (UnresolvedMemberExpr 0xa8d0180 <col:51> '<bound member function type>' lvalue)))
    (UnaryOperator 0xa8d0280 <col:58, col:60> '<dependent type>' prefix '++'
      (DeclRefExpr 0xa8d0264 <col:60> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8d00a0 '__it' 'const_iterator':'_Rb_tree_const_iterator<value_type>'))
    (CompoundStmt 0xa8d0ee0 <line:1582:2, line:1599:2>
      (DeclStmt 0xa8d0348 <line:1583:4, col:70>
        0xa8d02a0 "_Const_Link_type __x =
          (CXXStaticCastExpr 0xa8d0330 <col:27, col:69> '_Const_Link_type':'const _Rb_tree_node<_Val> *' static_cast<_Const_Link_type> <Dependent>
            (CXXDependentScopeMemberExpr 0xa8d02f0 <col:57, col:62> '<dependent type>' lvalue
              (DeclRefExpr 0xa8d02d4 <col:57> 'const_iterator':'_Rb_tree_const_iterator<value_type>' lvalue Var 0xa8d00a0 '__it' 'const_iterator':'_Rb_tree_const_iterator<value_type>')))")
      (DeclStmt 0xa8d0408 <line:1584:4, col:39>
        0xa8d0360 "_Const_Link_type __L =
          (CallExpr 0xa8d03e8 <col:27, col:38> '<dependent type>'
            (UnresolvedLookupExpr 0xa8d0398 <col:27> '<dependent type>' lvalue (no ADL) = '1' 0xa898410 0xa898520)
            (DeclRefExpr 0xa8d03d0 <col:35> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d02a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))")
      (DeclStmt 0xa8d04c8 <line:1585:4, col:40>
        0xa8d0420 "_Const_Link_type __R =
          (CallExpr 0xa8d04a8 <col:27, col:39> '<dependent type>'
            (UnresolvedLookupExpr 0xa8d0458 <col:27> '<dependent type>' lvalue (no ADL) = '1' 0xa8985e0 0xa8986a0)
            (DeclRefExpr 0xa8d0490 <col:36> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d02a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))")
      (IfStmt 0xa8d08a8 <line:1587:4, line:1590:15>
        <<<NULL>>>
        (CXXOperatorCallExpr 0xa8d05a8 <line:1587:8, col:25> '<dependent type>'
          (UnresolvedLookupExpr 0xa8d0540 <col:22, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
          (CXXDependentScopeMemberExpr 0xa8d04f0 <col:8, col:13> '<dependent type>' lvalue
            (DeclRefExpr 0xa8d04d8 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d02a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
          (DeclRefExpr 0xa8d0524 <col:25> 'enum std::_Rb_tree_color' EnumConstant 0xa88ff40 '_S_red' 'enum std::_Rb_tree_color'))
        (IfStmt 0xa8d0888 <line:1588:6, line:1590:15>
          <<<NULL>>>
          (BinaryOperator 0xa8d0850 <line:1588:10, line:1589:37> '<dependent type>' '||'
            (ParenExpr 0xa8d06f8 <line:1588:10, col:41> '<dependent type>'
              (BinaryOperator 0xa8d06e0 <col:11, col:35> '<dependent type>' '&&'
                (DeclRefExpr 0xa8d05cc <col:11> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0360 '__L' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                (CXXOperatorCallExpr 0xa8d06b8 <col:18, col:35> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8d0650 <col:32, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                  (CXXDependentScopeMemberExpr 0xa8d0600 <col:18, col:23> '<dependent type>' lvalue
                    (DeclRefExpr 0xa8d05e4 <col:18> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0360 '__L' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
                  (DeclRefExpr 0xa8d0634 <col:35> 'enum std::_Rb_tree_color' EnumConstant 0xa88ff40 '_S_red' 'enum std::_Rb_tree_color'))))
            (ParenExpr 0xa8d0838 <line:1589:6, col:37> '<dependent type>'
              (BinaryOperator 0xa8d0820 <col:7, col:31> '<dependent type>' '&&'
                (DeclRefExpr 0xa8d070c <col:7> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0420 '__R' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
                (CXXOperatorCallExpr 0xa8d07f8 <col:14, col:31> '<dependent type>'
                  (UnresolvedLookupExpr 0xa8d0790 <col:28, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ab760 0xa895280 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720)
                  (CXXDependentScopeMemberExpr 0xa8d0740 <col:14, col:19> '<dependent type>' lvalue
                    (DeclRefExpr 0xa8d0724 <col:14> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0420 '__R' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
                  (DeclRefExpr 0xa8d0774 <col:31> 'enum std::_Rb_tree_color' EnumConstant 0xa88ff40 '_S_red' 'enum std::_Rb_tree_color')))))
          (ReturnStmt 0xa8d0878 <line:1590:8, col:15>
            (CXXBoolLiteralExpr 0xa8d0868 <col:15> '_Bool' false))
          <<<NULL>>>)
        <<<NULL>>>)
      (IfStmt 0xa8d0a88 <line:1592:4, line:1593:13>
        <<<NULL>>>
        (BinaryOperator 0xa8d0a50 <line:1592:8, col:62> '<dependent type>' '&&'
          (DeclRefExpr 0xa8d08c4 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0360 '__L' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (CallExpr 0xa8d0a28 <col:15, col:62> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8d0910 <col:15, col:23> '<dependent type>' lvalue
              (MemberExpr 0xa8d08f0 <col:15> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8d08e0 <col:15> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (CallExpr 0xa8d0998 <col:38, col:48> '<dependent type>'
              (UnresolvedLookupExpr 0xa8d0948 <col:38> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8d0980 <col:45> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d02a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
            (CallExpr 0xa8d0a08 <col:51, col:61> '<dependent type>'
              (UnresolvedLookupExpr 0xa8d09b8 <col:51> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8d09f0 <col:58> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0360 '__L' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))
        (ReturnStmt 0xa8d0a78 <line:1593:6, col:13>
          (CXXBoolLiteralExpr 0xa8d0a68 <col:13> '_Bool' false))
        <<<NULL>>>)
      (IfStmt 0xa8d0c68 <line:1594:4, line:1595:13>
        <<<NULL>>>
        (BinaryOperator 0xa8d0c30 <line:1594:8, col:62> '<dependent type>' '&&'
          (DeclRefExpr 0xa8d0aa4 <col:8> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0420 '__R' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
          (CallExpr 0xa8d0c08 <col:15, col:62> '<dependent type>'
            (CXXDependentScopeMemberExpr 0xa8d0af0 <col:15, col:23> '<dependent type>' lvalue
              (MemberExpr 0xa8d0ad0 <col:15> 'const _Rb_tree_impl<_Compare>' lvalue ->_M_impl 0xa897ab0
                (CXXThisExpr 0xa8d0ac0 <col:15> 'const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> *' this)))
            (CallExpr 0xa8d0b78 <col:38, col:48> '<dependent type>'
              (UnresolvedLookupExpr 0xa8d0b28 <col:38> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8d0b60 <col:45> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0420 '__R' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
            (CallExpr 0xa8d0be8 <col:51, col:61> '<dependent type>'
              (UnresolvedLookupExpr 0xa8d0b98 <col:51> '<dependent type>' lvalue (no ADL) = '1' 0xa898300 0xa8988c0)
              (DeclRefExpr 0xa8d0bd0 <col:58> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d02a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))))
        (ReturnStmt 0xa8d0c58 <line:1595:6, col:13>
          (CXXBoolLiteralExpr 0xa8d0c48 <col:13> '_Bool' false))
        <<<NULL>>>)
      (IfStmt 0xa8d0ec0 <line:1597:4, line:1598:13>
        <<<NULL>>>
        (BinaryOperator 0xa8d0e88 <line:1597:8, col:64> '<dependent type>' '&&'
          (BinaryOperator 0xa8d0ce8 <col:8, col:17> '<dependent type>' '&&'
            (UnaryOperator 0xa8d0ca0 <col:8, col:9> '<dependent type>' prefix '!'
              (DeclRefExpr 0xa8d0c84 <col:9> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0360 '__L' '_Const_Link_type':'const _Rb_tree_node<_Val> *'))
            (UnaryOperator 0xa8d0cd0 <col:16, col:17> '<dependent type>' prefix '!'
              (DeclRefExpr 0xa8d0cb4 <col:17> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d0420 '__R' '_Const_Link_type':'const _Rb_tree_node<_Val> *')))
          (CXXOperatorCallExpr 0xa8d0e60 <col:24, col:64> '<dependent type>'
            (UnresolvedLookupExpr 0xa8d0e00 <col:61, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
            (CallExpr 0xa8d0dc0 <col:24, col:59> '<dependent type>'
              (UnresolvedLookupExpr 0xa8d0d00 <col:24> '<overloaded function type>' lvalue (ADL) = '1' 0xa8cef60)
              (DeclRefExpr 0xa8d0d34 <col:45> '_Const_Link_type':'const _Rb_tree_node<_Val> *' lvalue Var 0xa8d02a0 '__x' '_Const_Link_type':'const _Rb_tree_node<_Val> *')
              (CallExpr 0xa8d0da0 <col:50, col:58> '<dependent type>'
                (UnresolvedMemberExpr 0xa8d0d60 <col:50> '<bound member function type>' lvalue)))
            (DeclRefExpr 0xa8d0de4 <col:64> 'unsigned int' lvalue Var 0xa8cff10 '__len' 'unsigned int')))
        (ReturnStmt 0xa8d0eb0 <line:1598:6, col:13>
          (CXXBoolLiteralExpr 0xa8d0ea0 <col:13> '_Bool' false))
        <<<NULL>>>)))
  (IfStmt 0xa8d1138 <line:1601:7, line:1602:9>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8d10f0 <line:1601:11, col:68> '<dependent type>'
      (UnresolvedLookupExpr 0xa8d1090 <col:25, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (CallExpr 0xa8d0f88 <col:11, col:23> '<dependent type>'
        (UnresolvedMemberExpr 0xa8d0f48 <col:11> '<bound member function type>' lvalue))
      (CallExpr 0xa8d1070 <col:28, col:68> '<dependent type>'
        (UnresolvedLookupExpr 0xa8d0fc8 <col:28, col:48> '<overloaded function type>' lvalue (no ADL) = '1' 0xa890390 0xa8904c0)
        (CallExpr 0xa8d1050 <col:59, col:67> '<dependent type>'
          (UnresolvedMemberExpr 0xa8d1010 <col:59> '<bound member function type>' lvalue))))
    (ReturnStmt 0xa8d1128 <line:1602:2, col:9>
      (CXXBoolLiteralExpr 0xa8d1118 <col:9> '_Bool' false))
    <<<NULL>>>)
  (IfStmt 0xa8d1358 <line:1603:7, line:1604:9>
    <<<NULL>>>
    (CXXOperatorCallExpr 0xa8d1310 <line:1603:11, col:69> '<dependent type>'
      (UnresolvedLookupExpr 0xa8d12b0 <col:26, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8acbd0 0xa895700 0xa60e530 0xa625ab0 0xa6281f0 0xa678e00 0xa679170 0xa6b4f50 0xa717670 0xa7ffdb0 0xa8002b0 0xa8007c0)
      (CallExpr 0xa8d11a8 <col:11, col:24> '<dependent type>'
        (UnresolvedMemberExpr 0xa8d1168 <col:11> '<bound member function type>' lvalue))
      (CallExpr 0xa8d1290 <col:29, col:69> '<dependent type>'
        (UnresolvedLookupExpr 0xa8d11e8 <col:29, col:49> '<overloaded function type>' lvalue (no ADL) = '1' 0xa890580 0xa890640)
        (CallExpr 0xa8d1270 <col:60, col:68> '<dependent type>'
          (UnresolvedMemberExpr 0xa8d1230 <col:60> '<bound member function type>' lvalue))))
    (ReturnStmt 0xa8d1348 <line:1604:2, col:9>
      (CXXBoolLiteralExpr 0xa8d1338 <col:9> '_Bool' false))
    <<<NULL>>>)
  (ReturnStmt 0xa8d1388 <line:1605:7, col:14>
    (CXXBoolLiteralExpr 0xa8d1378 <col:14> '_Bool' true)))


}
namespace std {
    template <typename _Key = std::basic_string<char>, typename _Tp = std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >, typename _Compare = std::less<std::basic_string<char> >, typename _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > >> class map {
        class map;
    public:
    public:
        typedef std::basic_string<char> key_type;
        typedef std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > mapped_type;
        typedef std::pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > value_type;
        typedef std::less<std::basic_string<char> > key_compare;
        typedef std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > allocator_type;
    private:
    private:
        typedef typename allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >::value_type _Alloc_value_type;
    public:
    public:
        class value_compare;
    private:
    private:
        typedef typename allocator<pair<const basic_string<char>, vector<basic_string<char>, allocator<basic_string<char> > > > >::rebind<value_type>::other _Pair_alloc_type;
        typedef _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type> _Rep_type;
        _Rep_type _M_t;
    public:
    public:
        typedef typename _Pair_alloc_type::pointer pointer;
        typedef typename _Pair_alloc_type::const_pointer const_pointer;
        typedef typename _Pair_alloc_type::reference reference;
        typedef typename _Pair_alloc_type::const_reference const_reference;
        typedef typename _Rep_type::iterator iterator;
        typedef typename _Rep_type::const_iterator const_iterator;
        typedef typename _Rep_type::size_type size_type;
        typedef typename _Rep_type::difference_type difference_type;
        typedef typename _Rep_type::reverse_iterator reverse_iterator;
        typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
        map() : _M_t() (CompoundStmt 0xa8d7560 </usr/include/c++/4.6/bits/stl_map.h:153:16, col:18>)


        map(const std::less<std::basic_string<char> > &__comp, const allocator_type &__a);
        map(const std::map<std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__x);
        template <typename _InputIterator> map(_InputIterator __first, _InputIterator __last);
        template <typename _InputIterator> map(_InputIterator __first, _InputIterator __last, const std::less<std::basic_string<char> > &__comp, const allocator_type &__a);
        std::map<std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &operator=(const std::map<std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__x);
        allocator_type get_allocator() const;
        iterator begin() (CompoundStmt 0xaa3fff0 </usr/include/c++/4.6/bits/stl_map.h:310:7, col:30>
  (ReturnStmt 0xaa3ffe0 <col:9, col:27>
    (CXXConstructExpr 0xaa3ffb8 <col:16, col:27> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa3ffa8 <col:16, col:27> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xaa3ff98 <col:16, col:27> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXMemberCallExpr 0xaa3ff78 <col:16, col:27> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
            (MemberExpr 0xaa3ff58 <col:16, col:21> '<bound member function type>' .begin 0xa984100
              (MemberExpr 0xaa3fef8 <col:16> '_Rep_type':'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue ->_M_t 0xa98c190
                (CXXThisExpr 0xaa3fd90 <col:16> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))))


        const_iterator begin() const;
        iterator end() (CompoundStmt 0xaa40270 </usr/include/c++/4.6/bits/stl_map.h:328:7, col:28>
  (ReturnStmt 0xaa40260 <col:9, col:25>
    (CXXConstructExpr 0xaa40238 <col:16, col:25> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xaa40228 <col:16, col:25> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xaa40218 <col:16, col:25> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXMemberCallExpr 0xaa401f8 <col:16, col:25> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
            (MemberExpr 0xaa401d8 <col:16, col:21> '<bound member function type>' .end 0xa984590
              (MemberExpr 0xaa40178 <col:16> '_Rep_type':'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue ->_M_t 0xa98c190
                (CXXThisExpr 0xaa40008 <col:16> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))))


        const_iterator end() const;
        reverse_iterator rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator rend();
        const_reverse_iterator rend() const;
        bool empty() const;
        size_type size() const;
        size_type max_size() const;
        mapped_type &operator[](const key_type &__k) (CompoundStmt 0xa9e1de8 </usr/include/c++/4.6/bits/stl_map.h:446:7, line:455:7>
  (DeclStmt 0xa9e0018 <line:450:2, col:33>
    0xa9df950 "iterator __i =
      (CXXConstructExpr 0xa9dfff0 <col:17, col:32> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
        (MaterializeTemporaryExpr 0xa9dffe0 <col:17, col:32> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xa9dffd0 <col:17, col:32> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
            (CXXMemberCallExpr 0xa9dffb0 <col:17, col:32> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
              (MemberExpr 0xa9dff90 <col:17> '<bound member function type>' ->lower_bound 0xa993fc0
                (CXXThisExpr 0xa9dff80 <col:17> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
              (DeclRefExpr 0xa9dff68 <col:29> 'const key_type':'const class std::basic_string<char>' lvalue ParmVar 0xa990510 '__k' 'const key_type &')))))")
  (IfStmt 0xa9e1d10 <line:452:2, line:453:59>
    <<<NULL>>>
    (BinaryOperator 0xa9e0ae8 <line:452:6, col:50> '_Bool' '||'
      (CXXOperatorCallExpr 0xa9e0730 <col:6, col:17> '_Bool'
        (ImplicitCastExpr 0xa9e0720 <col:10, <invalid sloc>> '_Bool (*)(const _Self &) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e0708 <col:10, <invalid sloc>> '_Bool (const _Self &) const' lvalue CXXMethod 0xaa295d0 'operator==' '_Bool (const _Self &) const'))
        (ImplicitCastExpr 0xa9e06f8 <col:6> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
          (DeclRefExpr 0xa9e008c <col:6> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xa9df950 '__i' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))
        (MaterializeTemporaryExpr 0xa9e06e8 <col:13, col:17> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xa9e06d8 <col:13, col:17> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
            (CXXMemberCallExpr 0xa9e06b8 <col:13, col:17> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
              (MemberExpr 0xa9e0698 <col:13> '<bound member function type>' ->end 0xa98f360
                (CXXThisExpr 0xa9e0688 <col:13> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))))))
      (CXXOperatorCallExpr 0xa9e0a98 <col:22, col:50> '_Bool'
        (ImplicitCastExpr 0xa9e0a88 <<invalid sloc>> '_Bool (*)(const class std::basic_string<char> &, const class std::basic_string<char> &) const' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e0a30 <<invalid sloc>> '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const' lvalue CXXMethod 0xa9b65c0 'operator()' '_Bool (const class std::basic_string<char> &, const class std::basic_string<char> &) const'))
        (ImplicitCastExpr 0xa9e0ad8 <col:22, col:31> 'const struct std::less<class std::basic_string<char> >' lvalue <NoOp>
          (CXXMemberCallExpr 0xa9e08e8 <col:22, col:31> 'key_compare':'struct std::less<class std::basic_string<char> >'
            (MemberExpr 0xa9e08c8 <col:22> '<bound member function type>' ->key_comp 0xa992ef0
              (ImplicitCastExpr 0xa9e0928 <col:22> 'const class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' <NoOp>
                (CXXThisExpr 0xa9e0758 <col:22> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))
        (DeclRefExpr 0xa9e0934 <col:33> 'const key_type':'const class std::basic_string<char>' lvalue ParmVar 0xa990510 '__k' 'const key_type &')
        (MemberExpr 0xa9e0a0c <col:38, col:45> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue .first 0xaa29e30
          (ParenExpr 0xa9e09f8 <col:38, col:43> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
            (CXXOperatorCallExpr 0xa9e09d8 <col:39, col:40> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
              (ImplicitCastExpr 0xa9e09c8 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9e0978 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xaa28d30 'operator*' 'reference (void) const'))
              (ImplicitCastExpr 0xa9e0968 <col:40> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                (DeclRefExpr 0xa9e094c <col:40> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xa9df950 '__i' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))))))
    (ExprWithCleanups 0xa9e1cf0 <line:453:11, col:59> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
      (CXXTemporary 0xa9e1590)
      (CXXTemporary 0xa9e1720)
      (CXXOperatorCallExpr 0xa9e1cc8 <col:11, col:59> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xa9e1cb8 <col:15, <invalid sloc>> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &(*)(const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9e1c60 <col:15, <invalid sloc>> 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &(const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' lvalue CXXMethod 0xa9e1ad0 'operator=' 'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &(const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'))
        (DeclRefExpr 0xa9e0b00 <col:11> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xa9df950 '__i' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')
        (MaterializeTemporaryExpr 0xa9e1c50 <col:17, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xa9e1c40 <col:17, col:59> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
            (CXXMemberCallExpr 0xa9e17a8 <col:17, col:59> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
              (MemberExpr 0xa9e1788 <col:17> '<bound member function type>' ->insert 0xa991750
                (CXXThisExpr 0xa9e1778 <col:17> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this))
              (CXXConstructExpr 0xa9e17e0 <col:24> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()'
                (ImplicitCastExpr 0xa9e17d0 <col:24> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                  (DeclRefExpr 0xa9e125c <col:24> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xa9df950 '__i' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))
              (MaterializeTemporaryExpr 0xa9e1a80 <col:29, col:58> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
                (ImplicitCastExpr 0xa9e1a70 <col:29, col:58> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' <NoOp>
                  (CXXBindTemporaryExpr 0xa9e1728 <col:29, col:58> 'value_type':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' (CXXTemporary 0xa9e1720)
                    (CXXTemporaryObjectExpr 0xa9e16f0 <col:29, col:58> 'value_type':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >''void (const const class std::basic_string<char> &, const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > &)'
                      (DeclRefExpr 0xa9e13e0 <col:40> 'const key_type':'const class std::basic_string<char>' lvalue ParmVar 0xa990510 '__k' 'const key_type &')
                      (MaterializeTemporaryExpr 0xa9e16e0 <col:45, col:57> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue
                        (ImplicitCastExpr 0xa9e16d0 <col:45, col:57> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' <NoOp>
                          (CXXBindTemporaryExpr 0xa9e15b0 <col:45, col:57> 'mapped_type':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' (CXXTemporary 0xa9e1590)
                            (CXXTemporaryObjectExpr 0xa9e1560 <col:45, col:57> 'mapped_type':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >''void (void)')))))))))))))
    <<<NULL>>>)
  (ReturnStmt 0xa9e1dd8 <line:454:2, col:16>
    (MemberExpr 0xa9e1db4 <col:9, col:16> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue .second 0xaa29e70
      (ParenExpr 0xa9e1da0 <col:9, col:14> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
        (CXXOperatorCallExpr 0xa9e1d80 <col:10, col:11> 'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue
          (ImplicitCastExpr 0xa9e1d70 <<invalid sloc>> 'reference (*)(void) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9e1d58 <<invalid sloc>> 'reference (void) const' lvalue CXXMethod 0xaa28d30 'operator*' 'reference (void) const'))
          (ImplicitCastExpr 0xa9e1d48 <col:11> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
            (DeclRefExpr 0xa9e1d2c <col:11> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xa9df950 '__i' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))))))


        mapped_type &at(const key_type &__k);
        const mapped_type &at(const key_type &__k) const;
        std::pair<iterator, bool> insert(const value_type &__x);
        iterator insert(iterator __position, const value_type &__x) (CompoundStmt 0xa9efad0 </usr/include/c++/4.6/bits/stl_map.h:571:7, col:57>
  (ReturnStmt 0xa9efac0 <col:9, col:54>
    (CXXConstructExpr 0xa9efa98 <col:16, col:54> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9efa88 <col:16, col:54> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xa9efa78 <col:16, col:54> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXMemberCallExpr 0xa9ee1a8 <col:16, col:54> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
            (MemberExpr 0xa9ee158 <col:16, col:21> '<bound member function type>' ._M_insert_unique_ 0xa9864f0
              (MemberExpr 0xa9ee138 <col:16> '_Rep_type':'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue ->_M_t 0xa98c190
                (CXXThisExpr 0xa9edfc8 <col:16> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))
            (CXXConstructExpr 0xa9efa50 <col:39> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
              (MaterializeTemporaryExpr 0xa9efa40 <col:39> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                (ImplicitCastExpr 0xa9efa30 <col:39> 'const struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                  (ImplicitCastExpr 0xa9ef9a8 <col:39> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <ConstructorConversion>
                    (CXXConstructExpr 0xa9ef980 <col:39> 'const_iterator':'struct std::_Rb_tree_const_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const iterator &)'
                      (ImplicitCastExpr 0xa9ef970 <col:39> 'const iterator':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                        (DeclRefExpr 0xa9ee178 <col:39> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue ParmVar 0xa991500 '__position' 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >')))))))
            (DeclRefExpr 0xa9ee190 <col:51> 'const value_type':'const struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >' lvalue ParmVar 0xa9916b0 '__x' 'const value_type &')))))))


        template <typename _InputIterator> void insert(_InputIterator __first, _InputIterator __last);
        void erase(iterator __position);
        size_type erase(const key_type &__x);
        void erase(iterator __first, iterator __last);
        void swap(std::map<std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > > &__x);
        void clear();
        key_compare key_comp() const (CompoundStmt 0xa9e6898 </usr/include/c++/4.6/bits/stl_map.h:718:7, col:33>
  (ReturnStmt 0xa9e6888 <col:9, col:30>
    (CXXConstructExpr 0xa9e6860 <col:16, col:30> 'key_compare':'struct std::less<class std::basic_string<char> >''void (const struct std::less<class std::basic_string<char> > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9e6768 <col:16, col:30> 'const struct std::less<class std::basic_string<char> >' lvalue
        (ImplicitCastExpr 0xa9e6758 <col:16, col:30> 'const struct std::less<class std::basic_string<char> >' <NoOp>
          (CXXMemberCallExpr 0xa9e6738 <col:16, col:30> 'struct std::less<class std::basic_string<char> >':'struct std::less<class std::basic_string<char> >'
            (MemberExpr 0xa9e6718 <col:16, col:21> '<bound member function type>' .key_comp 0xa983ea0
              (MemberExpr 0xa9e66f8 <col:16> 'const _Rep_type':'const class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue ->_M_t 0xa98c190
                (CXXThisExpr 0xa9e6588 <col:16> 'const class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))))))))


        std::map<std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > > > >::value_compare value_comp() const;
        iterator find(const key_type &__x);
        const_iterator find(const key_type &__x) const;
        size_type count(const key_type &__x) const;
        iterator lower_bound(const key_type &__x) (CompoundStmt 0xa9e2088 </usr/include/c++/4.6/bits/stl_map.h:784:7, col:39>
  (ReturnStmt 0xa9e2078 <col:9, col:36>
    (CXXConstructExpr 0xa9e2050 <col:16, col:36> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
      (MaterializeTemporaryExpr 0xa9e2040 <col:16, col:36> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
        (ImplicitCastExpr 0xa9e2030 <col:16, col:36> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
          (CXXMemberCallExpr 0xa9e2010 <col:16, col:36> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
            (MemberExpr 0xa9e1ff0 <col:16, col:21> '<bound member function type>' .lower_bound 0xa98a5e0
              (MemberExpr 0xa9e1f78 <col:16> '_Rep_type':'class std::_Rb_tree<class std::basic_string<char>, struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > >, struct std::_Select1st<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue ->_M_t 0xa98c190
                (CXXThisExpr 0xa9e1e08 <col:16> 'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > > *' this)))
            (DeclRefExpr 0xa9e1fd8 <col:33> 'const key_type':'const class std::basic_string<char>' lvalue ParmVar 0xa993f70 '__x' 'const key_type &')))))))


        const_iterator lower_bound(const key_type &__x) const;
        iterator upper_bound(const key_type &__x);
        const_iterator upper_bound(const key_type &__x) const;
        std::pair<iterator, iterator> equal_range(const key_type &__x);
        std::pair<const_iterator, const_iterator> equal_range(const key_type &__x) const;
        ;
        ;
        inline void ~map() (CompoundStmt 0xa996390 </usr/include/c++/4.6/bits/stl_map.h:88:11>)


    }
template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >> class map {
        class map;
    public:
    public:
        typedef _Key key_type;
        typedef _Tp mapped_type;
        typedef std::pair<const _Key, _Tp> value_type;
        typedef _Compare key_compare;
        typedef _Alloc allocator_type;
    private:
    private:
        typedef typename _Alloc::value_type _Alloc_value_type;
    public:
    public:
        class value_compare : public std::binary_function<value_type, value_type, bool> {
            class value_compare;
            ;
        protected:
        protected:
            _Compare comp;
            value_compare(_Compare __c) : comp((DeclRefExpr 0xa8d7360 </usr/include/c++/4.6/bits/stl_map.h:114:9> '_Compare' lvalue ParmVar 0xa8d2600 '__c' '_Compare')
) (CompoundStmt 0xa8d73c0 </usr/include/c++/4.6/bits/stl_map.h:114:14, col:16>)


        public:
        public:
            bool operator()(const value_type &__x, const value_type &__y) const (CompoundStmt 0xa8d7510 </usr/include/c++/4.6/bits/stl_map.h:118:2, col:39>
  (ReturnStmt 0xa8d7500 <col:4, col:36>
    (CallExpr 0xa8d74d8 <col:11, col:36> '<dependent type>'
      (MemberExpr 0xa8d7414 <col:11> 'const _Compare' lvalue ->comp 0xa8d25c0
        (CXXThisExpr 0xa8d73e8 <col:11> 'const class std::map::value_compare *' this))
      (CXXDependentScopeMemberExpr 0xa8d7450 <col:16, col:20> '<dependent type>' lvalue
        (DeclRefExpr 0xa8d7434 <col:16> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8d27b0 '__x' 'const value_type &'))
      (CXXDependentScopeMemberExpr 0xa8d74a0 <col:27, col:31> '<dependent type>' lvalue
        (DeclRefExpr 0xa8d7484 <col:27> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8d2800 '__y' 'const value_type &')))))


        };
    private:
    private:
        typedef typename _Alloc::_Alloc::rebind<value_type>::other _Pair_alloc_type;
        typedef _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type> _Rep_type;
        _Rep_type _M_t;
    public:
    public:
        typedef typename _Pair_alloc_type::pointer pointer;
        typedef typename _Pair_alloc_type::const_pointer const_pointer;
        typedef typename _Pair_alloc_type::reference reference;
        typedef typename _Pair_alloc_type::const_reference const_reference;
        typedef typename _Rep_type::iterator iterator;
        typedef typename _Rep_type::const_iterator const_iterator;
        typedef typename _Rep_type::size_type size_type;
        typedef typename _Rep_type::difference_type difference_type;
        typedef typename _Rep_type::reverse_iterator reverse_iterator;
        typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
        map<_Key, _Tp, _Compare, _Alloc>() : _M_t() (CompoundStmt 0xa8d7560 </usr/include/c++/4.6/bits/stl_map.h:153:16, col:18>)


        map<_Key, _Tp, _Compare, _Alloc>(const _Compare &__comp, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa8d7328 </usr/include/c++/4.6/bits/stl_map.h:162:32, col:47> 'allocator_type':'_Alloc')
) : _M_t((DeclRefExpr 0xa8d7570 </usr/include/c++/4.6/bits/stl_map.h:163:14> 'const _Compare' lvalue ParmVar 0xa8d3760 '__comp' 'const _Compare &')
, (DeclRefExpr 0xa8d7588 </usr/include/c++/4.6/bits/stl_map.h:163:22> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa8d37e0 '__a' 'const allocator_type &')
) (CompoundStmt 0xa8d75e0 </usr/include/c++/4.6/bits/stl_map.h:163:27, col:29>)


        map<_Key, _Tp, _Compare, _Alloc>(const map<_Key, _Tp, _Compare, _Alloc> &__x) : _M_t((CXXDependentScopeMemberExpr 0xa8d7608 </usr/include/c++/4.6/bits/stl_map.h:173:14, col:18> '<dependent type>' lvalue
  (DeclRefExpr 0xa8d75f0 <col:14> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8d3920 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &'))
) (CompoundStmt 0xa8d7680 </usr/include/c++/4.6/bits/stl_map.h:173:24, col:26>)


        template <typename _InputIterator> map<_Key, _Tp, _Compare, _Alloc>(_InputIterator __first, _InputIterator __last) : _M_t() (CompoundStmt 0xa8d77a8 </usr/include/c++/4.6/bits/stl_map.h:216:9, col:51>
  (CallExpr 0xa8d7780 <col:11, col:48> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8d7718 <col:11, col:16> '<dependent type>' lvalue
      (MemberExpr 0xa8d76f8 <col:11> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8d76e8 <col:11> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8d774c <col:33> '_InputIterator' lvalue ParmVar 0xa8d3a70 '__first' '_InputIterator')
    (DeclRefExpr 0xa8d7764 <col:42> '_InputIterator' lvalue ParmVar 0xa8d3ab0 '__last' '_InputIterator')))

;
        template <typename _InputIterator> map<_Key, _Tp, _Compare, _Alloc>(_InputIterator __first, _InputIterator __last, const _Compare &__comp, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa8d7348 </usr/include/c++/4.6/bits/stl_map.h:232:34, col:49> 'allocator_type':'_Alloc')
) : _M_t((DeclRefExpr 0xa8d77bc </usr/include/c++/4.6/bits/stl_map.h:233:9> 'const _Compare' lvalue ParmVar 0xa8d3ef0 '__comp' 'const _Compare &')
, (DeclRefExpr 0xa8d77d4 </usr/include/c++/4.6/bits/stl_map.h:233:17> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa8d3f40 '__a' 'const allocator_type &')
) (CompoundStmt 0xa8d78f0 </usr/include/c++/4.6/bits/stl_map.h:234:9, col:51>
  (CallExpr 0xa8d78c8 <col:11, col:48> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8d7860 <col:11, col:16> '<dependent type>' lvalue
      (MemberExpr 0xa8d7840 <col:11> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8d7830 <col:11> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8d7894 <col:33> '_InputIterator' lvalue ParmVar 0xa8d3e60 '__first' '_InputIterator')
    (DeclRefExpr 0xa8d78ac <col:42> '_InputIterator' lvalue ParmVar 0xa8d3ea0 '__last' '_InputIterator')))

;
        map<_Key, _Tp, _Compare, _Alloc> &operator=(const map<_Key, _Tp, _Compare, _Alloc> &__x) (CompoundStmt 0xa8d79d8 </usr/include/c++/4.6/bits/stl_map.h:254:7, line:257:7>
  (BinaryOperator 0xa8d7988 <line:255:2, col:13> '<dependent type>' '='
    (MemberExpr 0xa8d7918 <col:2> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
      (CXXThisExpr 0xa8d7908 <col:2> 'map<_Key, _Tp, _Compare, _Alloc> *' this))
    (CXXDependentScopeMemberExpr 0xa8d7950 <col:9, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa8d7938 <col:9> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8d40c0 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &')))
  (ReturnStmt 0xa8d79c8 <line:256:2, col:10>
    (UnaryOperator 0xa8d79b0 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa8d79a0 <col:10> 'map<_Key, _Tp, _Compare, _Alloc> *' this))))


        allocator_type get_allocator() const (CompoundStmt 0xa8d7aa0 </usr/include/c++/4.6/bits/stl_map.h:300:7, col:38>
  (ReturnStmt 0xa8d7a90 <col:9, col:35>
    (CallExpr 0xa8d7a70 <col:16, col:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8d7a38 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7a18 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7a08 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        iterator begin() (CompoundStmt 0xa8d7b50 </usr/include/c++/4.6/bits/stl_map.h:310:7, col:30>
  (ReturnStmt 0xa8d7b40 <col:9, col:27>
    (CallExpr 0xa8d7b20 <col:16, col:27> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8d7ae8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7ac8 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7ab8 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_iterator begin() const (CompoundStmt 0xa8d7c00 </usr/include/c++/4.6/bits/stl_map.h:319:7, col:30>
  (ReturnStmt 0xa8d7bf0 <col:9, col:27>
    (CallExpr 0xa8d7bd0 <col:16, col:27> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8d7b98 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7b78 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7b68 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        iterator end() (CompoundStmt 0xa8d7cb0 </usr/include/c++/4.6/bits/stl_map.h:328:7, col:28>
  (ReturnStmt 0xa8d7ca0 <col:9, col:25>
    (CallExpr 0xa8d7c80 <col:16, col:25> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8d7c48 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7c28 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7c18 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_iterator end() const (CompoundStmt 0xa8d7d60 </usr/include/c++/4.6/bits/stl_map.h:337:7, col:28>
  (ReturnStmt 0xa8d7d50 <col:9, col:25>
    (CallExpr 0xa8d7d30 <col:16, col:25> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8d7cf8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7cd8 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7cc8 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        reverse_iterator rbegin() (CompoundStmt 0xa8d7e10 </usr/include/c++/4.6/bits/stl_map.h:346:7, col:31>
  (ReturnStmt 0xa8d7e00 <col:9, col:28>
    (CallExpr 0xa8d7de0 <col:16, col:28> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8d7da8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7d88 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7d78 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_reverse_iterator rbegin() const (CompoundStmt 0xa8dc698 </usr/include/c++/4.6/bits/stl_map.h:355:7, col:31>
  (ReturnStmt 0xa8dc688 <col:9, col:28>
    (CallExpr 0xa8dc668 <col:16, col:28> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dc630 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8d7e38 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8d7e28 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        reverse_iterator rend() (CompoundStmt 0xa8dc748 </usr/include/c++/4.6/bits/stl_map.h:364:7, col:29>
  (ReturnStmt 0xa8dc738 <col:9, col:26>
    (CallExpr 0xa8dc718 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dc6e0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dc6c0 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dc6b0 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_reverse_iterator rend() const (CompoundStmt 0xa8dc7f8 </usr/include/c++/4.6/bits/stl_map.h:373:7, col:29>
  (ReturnStmt 0xa8dc7e8 <col:9, col:26>
    (CallExpr 0xa8dc7c8 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dc790 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dc770 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dc760 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        bool empty() const (CompoundStmt 0xa8dc8a8 </usr/include/c++/4.6/bits/stl_map.h:419:7, col:30>
  (ReturnStmt 0xa8dc898 <col:9, col:27>
    (CallExpr 0xa8dc878 <col:16, col:27> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dc840 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dc820 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dc810 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        size_type size() const (CompoundStmt 0xa8dc958 </usr/include/c++/4.6/bits/stl_map.h:424:7, col:29>
  (ReturnStmt 0xa8dc948 <col:9, col:26>
    (CallExpr 0xa8dc928 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dc8f0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dc8d0 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dc8c0 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        size_type max_size() const (CompoundStmt 0xa8dca08 </usr/include/c++/4.6/bits/stl_map.h:429:7, col:33>
  (ReturnStmt 0xa8dc9f8 <col:9, col:30>
    (CallExpr 0xa8dc9d8 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dc9a0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dc980 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dc970 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        mapped_type &operator[](const key_type &__k) (CompoundStmt 0xa8dcf18 </usr/include/c++/4.6/bits/stl_map.h:446:7, line:455:7>
  (DeclStmt 0xa8dcaf0 <line:450:2, col:33>
    0xa8dca30 "iterator __i =
      (CallExpr 0xa8dcad0 <col:17, col:32> '<dependent type>'
        (UnresolvedMemberExpr 0xa8dca78 <col:17> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8dcab8 <col:29> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4960 '__k' 'const key_type &'))")
  (IfStmt 0xa8dce68 <line:452:2, line:453:59>
    <<<NULL>>>
    (BinaryOperator 0xa8dcd28 <line:452:6, col:50> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa8dcbf0 <col:6, col:17> '<dependent type>'
        (UnresolvedLookupExpr 0xa8dcb88 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760)
        (DeclRefExpr 0xa8dcb00 <col:6> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dca30 '__i' 'iterator':'typename _Rep_type::iterator')
        (CallExpr 0xa8dcb68 <col:13, col:17> '<dependent type>'
          (UnresolvedMemberExpr 0xa8dcb28 <col:13> '<bound member function type>' lvalue)))
      (CallExpr 0xa8dcd00 <col:22, col:50> '<dependent type>'
        (CallExpr 0xa8dcc48 <col:22, col:31> '<dependent type>'
          (MemberExpr 0xa8dcc28 <col:22> '<bound member function type>' ->key_comp 0xa8d57b0
            (CXXThisExpr 0xa8dcc18 <col:22> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
        (DeclRefExpr 0xa8dcc64 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4960 '__k' 'const key_type &')
        (CXXDependentScopeMemberExpr 0xa8dccc8 <col:38, col:45> '<dependent type>' lvalue
          (ParenExpr 0xa8dccb0 <col:38, col:43> '<dependent type>'
            (UnaryOperator 0xa8dcc98 <col:39, col:40> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa8dcc7c <col:40> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dca30 '__i' 'iterator':'typename _Rep_type::iterator'))))))
    (BinaryOperator 0xa8dce50 <line:453:11, col:59> '<dependent type>' '='
      (DeclRefExpr 0xa8dcd40 <col:11> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dca30 '__i' 'iterator':'typename _Rep_type::iterator')
      (CallExpr 0xa8dce28 <col:17, col:59> '<dependent type>'
        (UnresolvedMemberExpr 0xa8dcd68 <col:17> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8dcdac <col:24> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dca30 '__i' 'iterator':'typename _Rep_type::iterator')
        (CXXUnresolvedConstructExpr 0xa8dce08 <col:29, col:58> 'value_type':'pair<const _Key, _Tp>'
          (DeclRefExpr 0xa8dcdd0 <col:40> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4960 '__k' 'const key_type &')
          (CXXUnresolvedConstructExpr 0xa8dcdf0 <col:45, col:57> 'mapped_type':'_Tp'))))
    <<<NULL>>>)
  (ReturnStmt 0xa8dcf08 <line:454:2, col:16>
    (CXXDependentScopeMemberExpr 0xa8dced0 <col:9, col:16> '<dependent type>' lvalue
      (ParenExpr 0xa8dceb8 <col:9, col:14> '<dependent type>'
        (UnaryOperator 0xa8dcea0 <col:10, col:11> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa8dce84 <col:11> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dca30 '__i' 'iterator':'typename _Rep_type::iterator'))))))


        mapped_type &at(const key_type &__k) (CompoundStmt 0xa8dd3c8 </usr/include/c++/4.6/bits/stl_map.h:483:7, line:488:7>
  (DeclStmt 0xa8dd000 <line:484:2, col:33>
    0xa8dcf40 "iterator __i =
      (CallExpr 0xa8dcfe0 <col:17, col:32> '<dependent type>'
        (UnresolvedMemberExpr 0xa8dcf88 <col:17> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8dcfc8 <col:29> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4aa0 '__k' 'const key_type &'))")
  (IfStmt 0xa8dd318 <line:485:2, line:486:39>
    <<<NULL>>>
    (BinaryOperator 0xa8dd238 <line:485:6, col:50> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa8dd100 <col:6, col:17> '<dependent type>'
        (UnresolvedLookupExpr 0xa8dd098 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760)
        (DeclRefExpr 0xa8dd010 <col:6> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dcf40 '__i' 'iterator':'typename _Rep_type::iterator')
        (CallExpr 0xa8dd078 <col:13, col:17> '<dependent type>'
          (UnresolvedMemberExpr 0xa8dd038 <col:13> '<bound member function type>' lvalue)))
      (CallExpr 0xa8dd210 <col:22, col:50> '<dependent type>'
        (CallExpr 0xa8dd158 <col:22, col:31> '<dependent type>'
          (MemberExpr 0xa8dd138 <col:22> '<bound member function type>' ->key_comp 0xa8d57b0
            (CXXThisExpr 0xa8dd128 <col:22> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
        (DeclRefExpr 0xa8dd174 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4aa0 '__k' 'const key_type &')
        (CXXDependentScopeMemberExpr 0xa8dd1d8 <col:38, col:45> '<dependent type>' lvalue
          (ParenExpr 0xa8dd1c0 <col:38, col:43> '<dependent type>'
            (UnaryOperator 0xa8dd1a8 <col:39, col:40> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa8dd18c <col:40> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dcf40 '__i' 'iterator':'typename _Rep_type::iterator'))))))
    (CallExpr 0xa8dd2e8 <line:486:4, col:39> 'void'
      (ImplicitCastExpr 0xa8dd2d8 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa8dd2bc <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa8dd308 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa8dd2a8 <col:24, col:30> 'const char [8]' lvalue
          (StringLiteral 0xa8dd284 </usr/include/c++/4.6/bits/stl_map.h:486:29> 'const char [8]' lvalue "map::at"))))
    <<<NULL>>>)
  (ReturnStmt 0xa8dd3b8 <line:487:2, col:16>
    (CXXDependentScopeMemberExpr 0xa8dd380 <col:9, col:16> '<dependent type>' lvalue
      (ParenExpr 0xa8dd368 <col:9, col:14> '<dependent type>'
        (UnaryOperator 0xa8dd350 <col:10, col:11> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa8dd334 <col:11> 'iterator':'typename _Rep_type::iterator' lvalue Var 0xa8dcf40 '__i' 'iterator':'typename _Rep_type::iterator'))))))


        const mapped_type &at(const key_type &__k) const (CompoundStmt 0xa8dd878 </usr/include/c++/4.6/bits/stl_map.h:492:7, line:497:7>
  (DeclStmt 0xa8dd4b0 <line:493:2, col:39>
    0xa8dd3f0 "const_iterator __i =
      (CallExpr 0xa8dd490 <col:23, col:38> '<dependent type>'
        (UnresolvedMemberExpr 0xa8dd438 <col:23> '<bound member function type>' lvalue)
        (DeclRefExpr 0xa8dd478 <col:35> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4b80 '__k' 'const key_type &'))")
  (IfStmt 0xa8dd7c8 <line:494:2, line:495:39>
    <<<NULL>>>
    (BinaryOperator 0xa8dd6e8 <line:494:6, col:50> '<dependent type>' '||'
      (CXXOperatorCallExpr 0xa8dd5b0 <col:6, col:17> '<dependent type>'
        (UnresolvedLookupExpr 0xa8dd548 <col:10, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760)
        (DeclRefExpr 0xa8dd4c0 <col:6> 'const_iterator':'typename _Rep_type::const_iterator' lvalue Var 0xa8dd3f0 '__i' 'const_iterator':'typename _Rep_type::const_iterator')
        (CallExpr 0xa8dd528 <col:13, col:17> '<dependent type>'
          (UnresolvedMemberExpr 0xa8dd4e8 <col:13> '<bound member function type>' lvalue)))
      (CallExpr 0xa8dd6c0 <col:22, col:50> '<dependent type>'
        (CallExpr 0xa8dd608 <col:22, col:31> '<dependent type>'
          (MemberExpr 0xa8dd5e8 <col:22> '<bound member function type>' ->key_comp 0xa8d57b0
            (CXXThisExpr 0xa8dd5d8 <col:22> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))
        (DeclRefExpr 0xa8dd624 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d4b80 '__k' 'const key_type &')
        (CXXDependentScopeMemberExpr 0xa8dd688 <col:38, col:45> '<dependent type>' lvalue
          (ParenExpr 0xa8dd670 <col:38, col:43> '<dependent type>'
            (UnaryOperator 0xa8dd658 <col:39, col:40> '<dependent type>' prefix '*'
              (DeclRefExpr 0xa8dd63c <col:40> 'const_iterator':'typename _Rep_type::const_iterator' lvalue Var 0xa8dd3f0 '__i' 'const_iterator':'typename _Rep_type::const_iterator'))))))
    (CallExpr 0xa8dd798 <line:495:4, col:39> 'void'
      (ImplicitCastExpr 0xa8dd788 <col:4> 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
        (DeclRefExpr 0xa8dd76c <col:4> 'void (const char *) __attribute__((noreturn))' lvalue Function 0xa5c5a50 '__throw_out_of_range' 'void (const char *) __attribute__((noreturn))'))
      (ImplicitCastExpr 0xa8dd7b8 </usr/include/c++/4.6//i686-linux-gnu/bits/c++config.h:426:24, col:30> 'const char *' <ArrayToPointerDecay>
        (ParenExpr 0xa8dd758 <col:24, col:30> 'const char [8]' lvalue
          (StringLiteral 0xa8dd734 </usr/include/c++/4.6/bits/stl_map.h:495:29> 'const char [8]' lvalue "map::at"))))
    <<<NULL>>>)
  (ReturnStmt 0xa8dd868 <line:496:2, col:16>
    (CXXDependentScopeMemberExpr 0xa8dd830 <col:9, col:16> '<dependent type>' lvalue
      (ParenExpr 0xa8dd818 <col:9, col:14> '<dependent type>'
        (UnaryOperator 0xa8dd800 <col:10, col:11> '<dependent type>' prefix '*'
          (DeclRefExpr 0xa8dd7e4 <col:11> 'const_iterator':'typename _Rep_type::const_iterator' lvalue Var 0xa8dd3f0 '__i' 'const_iterator':'typename _Rep_type::const_iterator'))))))


        std::pair<iterator, bool> insert(const value_type &__x) (CompoundStmt 0xa8dd948 </usr/include/c++/4.6/bits/stl_map.h:518:7, col:44>
  (ReturnStmt 0xa8dd938 <col:9, col:41>
    (CallExpr 0xa8dd918 <col:16, col:41> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dd8c8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dd8a8 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dd898 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8dd8fc <col:38> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8d4e30 '__x' 'const value_type &'))))


        iterator insert(iterator __position, const value_type &__x) (CompoundStmt 0xa8dda30 </usr/include/c++/4.6/bits/stl_map.h:571:7, col:57>
  (ReturnStmt 0xa8dda20 <col:9, col:54>
    (CallExpr 0xa8dd9f8 <col:16, col:54> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8dd990 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8dd970 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8dd960 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8dd9c4 <col:39> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8d4f70 '__position' 'iterator':'typename _Rep_type::iterator')
      (DeclRefExpr 0xa8dd9dc <col:51> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8d4fc0 '__x' 'const value_type &'))))


        template <typename _InputIterator> void insert(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa8ddb08 </usr/include/c++/4.6/bits/stl_map.h:594:9, col:51>
  (CallExpr 0xa8ddae0 <col:11, col:48> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8dda78 <col:11, col:16> '<dependent type>' lvalue
      (MemberExpr 0xa8dda58 <col:11> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8dda48 <col:11> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8ddaac <col:33> '_InputIterator' lvalue ParmVar 0xa8d5130 '__first' '_InputIterator')
    (DeclRefExpr 0xa8ddac4 <col:42> '_InputIterator' lvalue ParmVar 0xa8d5170 '__last' '_InputIterator')))

;
        void erase(iterator __position) (CompoundStmt 0xa8ddbc0 </usr/include/c++/4.6/bits/stl_map.h:633:7, col:33>
  (CallExpr 0xa8ddba0 <col:9, col:30> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8ddb50 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8ddb30 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8ddb20 <col:9> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8ddb84 <col:20> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8d5290 '__position' 'iterator':'typename _Rep_type::iterator')))


        size_type erase(const key_type &__x) (CompoundStmt 0xa8ddc88 </usr/include/c++/4.6/bits/stl_map.h:649:7, col:33>
  (ReturnStmt 0xa8ddc78 <col:9, col:30>
    (CallExpr 0xa8ddc58 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8ddc08 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8ddbe8 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8ddbd8 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8ddc3c <col:27> 'const key_type':'const _Key' lvalue ParmVar 0xa8d53b0 '__x' 'const key_type &'))))


        void erase(iterator __first, iterator __last) (CompoundStmt 0xa8ddd60 </usr/include/c++/4.6/bits/stl_map.h:683:7, col:38>
  (CallExpr 0xa8ddd38 <col:9, col:35> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8ddcd0 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8ddcb0 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8ddca0 <col:9> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8ddd04 <col:20> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8d54c0 '__first' 'iterator':'typename _Rep_type::iterator')
    (DeclRefExpr 0xa8ddd1c <col:29> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8d5500 '__last' 'iterator':'typename _Rep_type::iterator')))


        void swap(map<_Key, _Tp, _Compare, _Alloc> &__x) (CompoundStmt 0xa8dde50 </usr/include/c++/4.6/bits/stl_map.h:699:7, col:30>
  (CallExpr 0xa8dde30 <col:9, col:27> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8ddda8 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8ddd88 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8ddd78 <col:9> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa8dddf8 <col:19, col:23> '<dependent type>' lvalue
      (DeclRefExpr 0xa8ddddc <col:19> 'map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8d5620 '__x' 'map<_Key, _Tp, _Compare, _Alloc> &'))))


        void clear() (CompoundStmt 0xa8ddef0 </usr/include/c++/4.6/bits/stl_map.h:709:7, col:23>
  (CallExpr 0xa8dded0 <col:9, col:20> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8dde98 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8dde78 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
        (CXXThisExpr 0xa8dde68 <col:9> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))))


        key_compare key_comp() const (CompoundStmt 0xa8ddfa0 </usr/include/c++/4.6/bits/stl_map.h:718:7, col:33>
  (ReturnStmt 0xa8ddf90 <col:9, col:30>
    (CallExpr 0xa8ddf70 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8ddf38 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8ddf18 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8ddf08 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this))))))


        std::map::value_compare value_comp() const (CompoundStmt 0xa8de078 </usr/include/c++/4.6/bits/stl_map.h:726:7, col:48>
  (ReturnStmt 0xa8de068 <col:9, col:45>
    (CXXUnresolvedConstructExpr 0xa8de048 <col:16, col:45> 'class std::map::value_compare'
      (CallExpr 0xa8de028 <col:30, col:44> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8ddff0 <col:30, col:35> '<dependent type>' lvalue
          (MemberExpr 0xa8ddfd0 <col:30> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
            (CXXThisExpr 0xa8ddfc0 <col:30> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))))))


        iterator find(const key_type &__x) (CompoundStmt 0xa8de140 </usr/include/c++/4.6/bits/stl_map.h:742:7, col:32>
  (ReturnStmt 0xa8de130 <col:9, col:29>
    (CallExpr 0xa8de110 <col:16, col:29> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de0c0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de0a0 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de090 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de0f4 <col:26> 'const key_type':'const _Key' lvalue ParmVar 0xa8d58b0 '__x' 'const key_type &'))))


        const_iterator find(const key_type &__x) const (CompoundStmt 0xa8de208 </usr/include/c++/4.6/bits/stl_map.h:757:7, col:32>
  (ReturnStmt 0xa8de1f8 <col:9, col:29>
    (CallExpr 0xa8de1d8 <col:16, col:29> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de188 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de168 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de158 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de1bc <col:26> 'const key_type':'const _Key' lvalue ParmVar 0xa8d59d0 '__x' 'const key_type &'))))


        size_type count(const key_type &__x) const (CompoundStmt 0xa8de438 </usr/include/c++/4.6/bits/stl_map.h:769:7, col:54>
  (ReturnStmt 0xa8de428 <col:9, col:51>
    (ConditionalOperator 0xa8de408 <col:16, col:51> 'int'
      (CXXOperatorCallExpr 0xa8de3b0 <col:16, col:43> '<dependent type>'
        (UnresolvedLookupExpr 0xa8de348 <col:31, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760)
        (CallExpr 0xa8de2a0 <col:16, col:29> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8de250 <col:16, col:21> '<dependent type>' lvalue
            (MemberExpr 0xa8de230 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
              (CXXThisExpr 0xa8de220 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))
          (DeclRefExpr 0xa8de284 <col:26> 'const key_type':'const _Key' lvalue ParmVar 0xa8d5af0 '__x' 'const key_type &'))
        (CallExpr 0xa8de328 <col:34, col:43> '<dependent type>'
          (CXXDependentScopeMemberExpr 0xa8de2f0 <col:34, col:39> '<dependent type>' lvalue
            (MemberExpr 0xa8de2d0 <col:34> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
              (CXXThisExpr 0xa8de2c0 <col:34> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))))
      (IntegerLiteral 0xa8de3d8 <col:47> 'int' 0)
      (IntegerLiteral 0xa8de3f0 <col:51> 'int' 1))))


        iterator lower_bound(const key_type &__x) (CompoundStmt 0xa8de500 </usr/include/c++/4.6/bits/stl_map.h:784:7, col:39>
  (ReturnStmt 0xa8de4f0 <col:9, col:36>
    (CallExpr 0xa8de4d0 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de480 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de460 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de450 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de4b4 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d5c10 '__x' 'const key_type &'))))


        const_iterator lower_bound(const key_type &__x) const (CompoundStmt 0xa8de5c8 </usr/include/c++/4.6/bits/stl_map.h:799:7, col:39>
  (ReturnStmt 0xa8de5b8 <col:9, col:36>
    (CallExpr 0xa8de598 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de548 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de528 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de518 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de57c <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d5ce0 '__x' 'const key_type &'))))


        iterator upper_bound(const key_type &__x) (CompoundStmt 0xa8de690 </usr/include/c++/4.6/bits/stl_map.h:809:7, col:39>
  (ReturnStmt 0xa8de680 <col:9, col:36>
    (CallExpr 0xa8de660 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de610 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de5f0 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de5e0 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de644 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d5db0 '__x' 'const key_type &'))))


        const_iterator upper_bound(const key_type &__x) const (CompoundStmt 0xa8de758 </usr/include/c++/4.6/bits/stl_map.h:819:7, col:39>
  (ReturnStmt 0xa8de748 <col:9, col:36>
    (CallExpr 0xa8de728 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de6d8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de6b8 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de6a8 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de70c <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d5e80 '__x' 'const key_type &'))))


        std::pair<iterator, iterator> equal_range(const key_type &__x) (CompoundStmt 0xa8de820 </usr/include/c++/4.6/bits/stl_map.h:838:7, col:39>
  (ReturnStmt 0xa8de810 <col:9, col:36>
    (CallExpr 0xa8de7f0 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de7a0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de780 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de770 <col:16> 'map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de7d4 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d60c0 '__x' 'const key_type &'))))


        std::pair<const_iterator, const_iterator> equal_range(const key_type &__x) const (CompoundStmt 0xa8de8e8 </usr/include/c++/4.6/bits/stl_map.h:857:7, col:39>
  (ReturnStmt 0xa8de8d8 <col:9, col:36>
    (CallExpr 0xa8de8b8 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8de868 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8de848 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8d2f00
          (CXXThisExpr 0xa8de838 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8de89c <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8d6380 '__x' 'const key_type &'))))


        ;
        ;
    };
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator==(const map<_Key, _Tp, _Compare, _Alloc> &__x, const map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8df0f0 </usr/include/c++/4.6/bits/stl_map.h:884:5, col:36>
  (ReturnStmt 0xa8df0e0 <col:7, col:30>
    (CXXOperatorCallExpr 0xa8df0b8 <col:14, col:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa8df050 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8def80 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760)
      (CXXDependentScopeMemberExpr 0xa8defc8 <col:14, col:18> '<dependent type>' lvalue
        (DeclRefExpr 0xa8defb0 <col:14> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8dec60 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &'))
      (CXXDependentScopeMemberExpr 0xa8df018 <col:26, col:30> '<dependent type>' lvalue
        (DeclRefExpr 0xa8deffc <col:26> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8dee80 '__y' 'const map<_Key, _Tp, _Compare, _Alloc> &')))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator<(const map<_Key, _Tp, _Compare, _Alloc> &__x, const map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8df8b0 </usr/include/c++/4.6/bits/stl_map.h:901:5, col:35>
  (ReturnStmt 0xa8df8a0 <col:7, col:29>
    (CXXOperatorCallExpr 0xa8df878 <col:14, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa8df820 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8df750 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220)
      (CXXDependentScopeMemberExpr 0xa8df798 <col:14, col:18> '<dependent type>' lvalue
        (DeclRefExpr 0xa8df780 <col:14> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8df450 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &'))
      (CXXDependentScopeMemberExpr 0xa8df7e8 <col:25, col:29> '<dependent type>' lvalue
        (DeclRefExpr 0xa8df7cc <col:25> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8df670 '__y' 'const map<_Key, _Tp, _Compare, _Alloc> &')))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator!=(const map<_Key, _Tp, _Compare, _Alloc> &__x, const map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8e0040 </usr/include/c++/4.6/bits/stl_map.h:908:5, col:29>
  (ReturnStmt 0xa8e0030 <col:7, col:26>
    (UnaryOperator 0xa8e0018 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa8e0000 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa8dffd8 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa8dff70 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8def80 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760)
          (DeclRefExpr 0xa8dff40 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8dfc10 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8dff58 <col:23> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8dfe30 '__y' 'const map<_Key, _Tp, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator>(const map<_Key, _Tp, _Compare, _Alloc> &__x, const map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8e0790 </usr/include/c++/4.6/bits/stl_map.h:915:5, col:25>
  (ReturnStmt 0xa8e0780 <col:7, col:20>
    (CXXOperatorCallExpr 0xa8e0758 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa8e0700 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8df750 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220)
      (DeclRefExpr 0xa8e06d0 <col:14> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e05c0 '__y' 'const map<_Key, _Tp, _Compare, _Alloc> &')
      (DeclRefExpr 0xa8e06e8 <col:20> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e03a0 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &'))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator<=(const map<_Key, _Tp, _Compare, _Alloc> &__x, const map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8e0f10 </usr/include/c++/4.6/bits/stl_map.h:922:5, col:28>
  (ReturnStmt 0xa8e0f00 <col:7, col:25>
    (UnaryOperator 0xa8e0ee8 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa8e0ed0 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa8e0ea8 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8e0e50 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8df750 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220)
          (DeclRefExpr 0xa8e0e20 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e0d10 '__y' 'const map<_Key, _Tp, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8e0e38 <col:22> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e0af0 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator>=(const map<_Key, _Tp, _Compare, _Alloc> &__x, const map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8e1690 </usr/include/c++/4.6/bits/stl_map.h:929:5, col:28>
  (ReturnStmt 0xa8e1680 <col:7, col:25>
    (UnaryOperator 0xa8e1668 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa8e1650 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa8e1628 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8e15d0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8df750 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220)
          (DeclRefExpr 0xa8e15a0 <col:16> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e1270 '__x' 'const map<_Key, _Tp, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8e15b8 <col:22> 'const map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e1490 '__y' 'const map<_Key, _Tp, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline void swap(map<_Key, _Tp, _Compare, _Alloc> &__x, map<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8e1de8 </usr/include/c++/4.6/bits/stl_map.h:936:5, col:22>
  (CallExpr 0xa8e1dc8 <col:7, col:19> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e1d78 <col:7, col:11> '<dependent type>' lvalue
      (DeclRefExpr 0xa8e1d60 <col:7> 'map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e1a10 '__x' 'map<_Key, _Tp, _Compare, _Alloc> &'))
    (DeclRefExpr 0xa8e1dac <col:16> 'map<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e1c30 '__y' 'map<_Key, _Tp, _Compare, _Alloc> &')))

;
}
namespace std {
    template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >> class multimap {
        class multimap;
    public:
    public:
        typedef _Key key_type;
        typedef _Tp mapped_type;
        typedef std::pair<const _Key, _Tp> value_type;
        typedef _Compare key_compare;
        typedef _Alloc allocator_type;
    private:
    private:
        typedef typename _Alloc::value_type _Alloc_value_type;
    public:
    public:
        class value_compare : public std::binary_function<value_type, value_type, bool> {
            class value_compare;
            ;
        protected:
        protected:
            _Compare comp;
            value_compare(_Compare __c) : comp((DeclRefExpr 0xa8e8030 </usr/include/c++/4.6/bits/stl_multimap.h:114:9> '_Compare' lvalue ParmVar 0xa8e2f20 '__c' '_Compare')
) (CompoundStmt 0xa8e8090 </usr/include/c++/4.6/bits/stl_multimap.h:114:14, col:16>)


        public:
        public:
            bool operator()(const value_type &__x, const value_type &__y) const (CompoundStmt 0xa8e81e0 </usr/include/c++/4.6/bits/stl_multimap.h:118:2, col:39>
  (ReturnStmt 0xa8e81d0 <col:4, col:36>
    (CallExpr 0xa8e81a8 <col:11, col:36> '<dependent type>'
      (MemberExpr 0xa8e80e4 <col:11> 'const _Compare' lvalue ->comp 0xa8e2ee0
        (CXXThisExpr 0xa8e80b8 <col:11> 'const class std::multimap::value_compare *' this))
      (CXXDependentScopeMemberExpr 0xa8e8120 <col:16, col:20> '<dependent type>' lvalue
        (DeclRefExpr 0xa8e8104 <col:16> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8e3090 '__x' 'const value_type &'))
      (CXXDependentScopeMemberExpr 0xa8e8170 <col:27, col:31> '<dependent type>' lvalue
        (DeclRefExpr 0xa8e8154 <col:27> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8e30e0 '__y' 'const value_type &')))))


        };
    private:
    private:
        typedef typename _Alloc::_Alloc::rebind<value_type>::other _Pair_alloc_type;
        typedef _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type> _Rep_type;
        _Rep_type _M_t;
    public:
    public:
        typedef typename _Pair_alloc_type::pointer pointer;
        typedef typename _Pair_alloc_type::const_pointer const_pointer;
        typedef typename _Pair_alloc_type::reference reference;
        typedef typename _Pair_alloc_type::const_reference const_reference;
        typedef typename _Rep_type::iterator iterator;
        typedef typename _Rep_type::const_iterator const_iterator;
        typedef typename _Rep_type::size_type size_type;
        typedef typename _Rep_type::difference_type difference_type;
        typedef typename _Rep_type::reverse_iterator reverse_iterator;
        typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
        multimap<_Key, _Tp, _Compare, _Alloc>() : _M_t() (CompoundStmt 0xa8e8230 </usr/include/c++/4.6/bits/stl_multimap.h:151:16, col:18>)


        multimap<_Key, _Tp, _Compare, _Alloc>(const _Compare &__comp, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa8e7ff8 </usr/include/c++/4.6/bits/stl_multimap.h:160:37, col:52> 'allocator_type':'_Alloc')
) : _M_t((DeclRefExpr 0xa8e8240 </usr/include/c++/4.6/bits/stl_multimap.h:161:14> 'const _Compare' lvalue ParmVar 0xa8e3d80 '__comp' 'const _Compare &')
, (DeclRefExpr 0xa8e8258 </usr/include/c++/4.6/bits/stl_multimap.h:161:22> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa8e3e00 '__a' 'const allocator_type &')
) (CompoundStmt 0xa8e82b0 </usr/include/c++/4.6/bits/stl_multimap.h:161:27, col:29>)


        multimap<_Key, _Tp, _Compare, _Alloc>(const multimap<_Key, _Tp, _Compare, _Alloc> &__x) : _M_t((CXXDependentScopeMemberExpr 0xa8e82d8 </usr/include/c++/4.6/bits/stl_multimap.h:171:14, col:18> '<dependent type>' lvalue
  (DeclRefExpr 0xa8e82c0 <col:14> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e3f20 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))
) (CompoundStmt 0xa8e8350 </usr/include/c++/4.6/bits/stl_multimap.h:171:24, col:26>)


        template <typename _InputIterator> multimap<_Key, _Tp, _Compare, _Alloc>(_InputIterator __first, _InputIterator __last) : _M_t() (CompoundStmt 0xa8e8478 </usr/include/c++/4.6/bits/stl_multimap.h:213:9, col:50>
  (CallExpr 0xa8e8450 <col:11, col:47> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e83e8 <col:11, col:16> '<dependent type>' lvalue
      (MemberExpr 0xa8e83c8 <col:11> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e83b8 <col:11> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8e841c <col:32> '_InputIterator' lvalue ParmVar 0xa8e4070 '__first' '_InputIterator')
    (DeclRefExpr 0xa8e8434 <col:41> '_InputIterator' lvalue ParmVar 0xa8e40b0 '__last' '_InputIterator')))

;
        template <typename _InputIterator> multimap<_Key, _Tp, _Compare, _Alloc>(_InputIterator __first, _InputIterator __last, const _Compare &__comp, const allocator_type &__a = (CXXUnresolvedConstructExpr 0xa8e8018 </usr/include/c++/4.6/bits/stl_multimap.h:229:32, col:47> 'allocator_type':'_Alloc')
) : _M_t((DeclRefExpr 0xa8e848c </usr/include/c++/4.6/bits/stl_multimap.h:230:16> 'const _Compare' lvalue ParmVar 0xa8e42c0 '__comp' 'const _Compare &')
, (DeclRefExpr 0xa8e84a4 </usr/include/c++/4.6/bits/stl_multimap.h:230:24> 'const allocator_type':'const _Alloc' lvalue ParmVar 0xa8e4310 '__a' 'const allocator_type &')
) (CompoundStmt 0xa8e85c0 </usr/include/c++/4.6/bits/stl_multimap.h:231:9, col:50>
  (CallExpr 0xa8e8598 <col:11, col:47> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e8530 <col:11, col:16> '<dependent type>' lvalue
      (MemberExpr 0xa8e8510 <col:11> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e8500 <col:11> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8e8564 <col:32> '_InputIterator' lvalue ParmVar 0xa8e4230 '__first' '_InputIterator')
    (DeclRefExpr 0xa8e857c <col:41> '_InputIterator' lvalue ParmVar 0xa8e4270 '__last' '_InputIterator')))

;
        multimap<_Key, _Tp, _Compare, _Alloc> &operator=(const multimap<_Key, _Tp, _Compare, _Alloc> &__x) (CompoundStmt 0xa8e86a8 </usr/include/c++/4.6/bits/stl_multimap.h:251:7, line:254:7>
  (BinaryOperator 0xa8e8658 <line:252:2, col:13> '<dependent type>' '='
    (MemberExpr 0xa8e85e8 <col:2> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
      (CXXThisExpr 0xa8e85d8 <col:2> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this))
    (CXXDependentScopeMemberExpr 0xa8e8620 <col:9, col:13> '<dependent type>' lvalue
      (DeclRefExpr 0xa8e8608 <col:9> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e4460 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')))
  (ReturnStmt 0xa8e8698 <line:253:2, col:10>
    (UnaryOperator 0xa8e8680 <col:9, col:10> '<dependent type>' prefix '*'
      (CXXThisExpr 0xa8e8670 <col:10> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this))))


        allocator_type get_allocator() const (CompoundStmt 0xa8e8770 </usr/include/c++/4.6/bits/stl_multimap.h:297:7, col:38>
  (ReturnStmt 0xa8e8760 <col:9, col:35>
    (CallExpr 0xa8e8740 <col:16, col:35> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8708 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e86e8 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e86d8 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        iterator begin() (CompoundStmt 0xa8e8820 </usr/include/c++/4.6/bits/stl_multimap.h:307:7, col:30>
  (ReturnStmt 0xa8e8810 <col:9, col:27>
    (CallExpr 0xa8e87f0 <col:16, col:27> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e87b8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8798 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8788 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_iterator begin() const (CompoundStmt 0xa8e88d0 </usr/include/c++/4.6/bits/stl_multimap.h:316:7, col:30>
  (ReturnStmt 0xa8e88c0 <col:9, col:27>
    (CallExpr 0xa8e88a0 <col:16, col:27> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8868 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8848 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8838 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        iterator end() (CompoundStmt 0xa8e8980 </usr/include/c++/4.6/bits/stl_multimap.h:325:7, col:28>
  (ReturnStmt 0xa8e8970 <col:9, col:25>
    (CallExpr 0xa8e8950 <col:16, col:25> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8918 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e88f8 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e88e8 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_iterator end() const (CompoundStmt 0xa8e8a30 </usr/include/c++/4.6/bits/stl_multimap.h:334:7, col:28>
  (ReturnStmt 0xa8e8a20 <col:9, col:25>
    (CallExpr 0xa8e8a00 <col:16, col:25> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e89c8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e89a8 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8998 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        reverse_iterator rbegin() (CompoundStmt 0xa8e8ae0 </usr/include/c++/4.6/bits/stl_multimap.h:343:7, col:31>
  (ReturnStmt 0xa8e8ad0 <col:9, col:28>
    (CallExpr 0xa8e8ab0 <col:16, col:28> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8a78 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8a58 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8a48 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_reverse_iterator rbegin() const (CompoundStmt 0xa8e8b90 </usr/include/c++/4.6/bits/stl_multimap.h:352:7, col:31>
  (ReturnStmt 0xa8e8b80 <col:9, col:28>
    (CallExpr 0xa8e8b60 <col:16, col:28> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8b28 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8b08 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8af8 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        reverse_iterator rend() (CompoundStmt 0xa8e8c40 </usr/include/c++/4.6/bits/stl_multimap.h:361:7, col:29>
  (ReturnStmt 0xa8e8c30 <col:9, col:26>
    (CallExpr 0xa8e8c10 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8bd8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8bb8 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8ba8 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        const_reverse_iterator rend() const (CompoundStmt 0xa8e8cf0 </usr/include/c++/4.6/bits/stl_multimap.h:370:7, col:29>
  (ReturnStmt 0xa8e8ce0 <col:9, col:26>
    (CallExpr 0xa8e8cc0 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8c88 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8c68 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8c58 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        bool empty() const (CompoundStmt 0xa8e8da0 </usr/include/c++/4.6/bits/stl_multimap.h:414:7, col:30>
  (ReturnStmt 0xa8e8d90 <col:9, col:27>
    (CallExpr 0xa8e8d70 <col:16, col:27> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8d38 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8d18 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8d08 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        size_type size() const (CompoundStmt 0xa8e8e50 </usr/include/c++/4.6/bits/stl_multimap.h:419:7, col:29>
  (ReturnStmt 0xa8e8e40 <col:9, col:26>
    (CallExpr 0xa8e8e20 <col:16, col:26> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8de8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8dc8 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8db8 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        size_type max_size() const (CompoundStmt 0xa8e8f00 </usr/include/c++/4.6/bits/stl_multimap.h:424:7, col:33>
  (ReturnStmt 0xa8e8ef0 <col:9, col:30>
    (CallExpr 0xa8e8ed0 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8e98 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8e78 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8e68 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        iterator insert(const value_type &__x) (CompoundStmt 0xa8e8fc8 </usr/include/c++/4.6/bits/stl_multimap.h:441:7, col:43>
  (ReturnStmt 0xa8e8fb8 <col:9, col:40>
    (CallExpr 0xa8e8f98 <col:16, col:40> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e8f48 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8f28 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8f18 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e8f7c <col:37> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8e5cf0 '__x' 'const value_type &'))))


        iterator insert(iterator __position, const value_type &__x) (CompoundStmt 0xa8e90b0 </usr/include/c++/4.6/bits/stl_multimap.h:478:7, col:56>
  (ReturnStmt 0xa8e90a0 <col:9, col:53>
    (CallExpr 0xa8e9078 <col:16, col:53> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9010 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e8ff0 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e8fe0 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9044 <col:38> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8e5e00 '__position' 'iterator':'typename _Rep_type::iterator')
      (DeclRefExpr 0xa8e905c <col:50> 'const value_type':'const pair<const _Key, _Tp>' lvalue ParmVar 0xa8e5e50 '__x' 'const value_type &'))))


        template <typename _InputIterator> void insert(_InputIterator __first, _InputIterator __last) (CompoundStmt 0xa8e9188 </usr/include/c++/4.6/bits/stl_multimap.h:502:9, col:50>
  (CallExpr 0xa8e9160 <col:11, col:47> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e90f8 <col:11, col:16> '<dependent type>' lvalue
      (MemberExpr 0xa8e90d8 <col:11> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e90c8 <col:11> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8e912c <col:32> '_InputIterator' lvalue ParmVar 0xa8e5fa0 '__first' '_InputIterator')
    (DeclRefExpr 0xa8e9144 <col:41> '_InputIterator' lvalue ParmVar 0xa8e5fe0 '__last' '_InputIterator')))

;
        void erase(iterator __position) (CompoundStmt 0xa8e9240 </usr/include/c++/4.6/bits/stl_multimap.h:554:7, col:33>
  (CallExpr 0xa8e9220 <col:9, col:30> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e91d0 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8e91b0 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e91a0 <col:9> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8e9204 <col:20> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8e6100 '__position' 'iterator':'typename _Rep_type::iterator')))


        size_type erase(const key_type &__x) (CompoundStmt 0xa8e9308 </usr/include/c++/4.6/bits/stl_multimap.h:570:7, col:33>
  (ReturnStmt 0xa8e92f8 <col:9, col:30>
    (CallExpr 0xa8e92d8 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9288 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9268 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9258 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e92bc <col:27> 'const key_type':'const _Key' lvalue ParmVar 0xa8e6220 '__x' 'const key_type &'))))


        void erase(iterator __first, iterator __last) (CompoundStmt 0xa8e93e0 </usr/include/c++/4.6/bits/stl_multimap.h:608:7, col:38>
  (CallExpr 0xa8e93b8 <col:9, col:35> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e9350 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8e9330 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e9320 <col:9> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
    (DeclRefExpr 0xa8e9384 <col:20> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8e6310 '__first' 'iterator':'typename _Rep_type::iterator')
    (DeclRefExpr 0xa8e939c <col:29> 'iterator':'typename _Rep_type::iterator' lvalue ParmVar 0xa8e6350 '__last' 'iterator':'typename _Rep_type::iterator')))


        void swap(multimap<_Key, _Tp, _Compare, _Alloc> &__x) (CompoundStmt 0xa8e94d0 </usr/include/c++/4.6/bits/stl_multimap.h:624:7, col:30>
  (CallExpr 0xa8e94b0 <col:9, col:27> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e9428 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8e9408 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e93f8 <col:9> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
    (CXXDependentScopeMemberExpr 0xa8e9478 <col:19, col:23> '<dependent type>' lvalue
      (DeclRefExpr 0xa8e945c <col:19> 'multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8e6450 '__x' 'multimap<_Key, _Tp, _Compare, _Alloc> &'))))


        void clear() (CompoundStmt 0xa8e9570 </usr/include/c++/4.6/bits/stl_multimap.h:634:7, col:23>
  (CallExpr 0xa8e9550 <col:9, col:20> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8e9518 <col:9, col:14> '<dependent type>' lvalue
      (MemberExpr 0xa8e94f8 <col:9> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
        (CXXThisExpr 0xa8e94e8 <col:9> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))))


        key_compare key_comp() const (CompoundStmt 0xa8e9620 </usr/include/c++/4.6/bits/stl_multimap.h:643:7, col:33>
  (ReturnStmt 0xa8e9610 <col:9, col:30>
    (CallExpr 0xa8e95f0 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e95b8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9598 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9588 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this))))))


        std::multimap::value_compare value_comp() const (CompoundStmt 0xa8e96f8 </usr/include/c++/4.6/bits/stl_multimap.h:651:7, col:48>
  (ReturnStmt 0xa8e96e8 <col:9, col:45>
    (CXXUnresolvedConstructExpr 0xa8e96c8 <col:16, col:45> 'class std::multimap::value_compare'
      (CallExpr 0xa8e96a8 <col:30, col:44> '<dependent type>'
        (CXXDependentScopeMemberExpr 0xa8e9670 <col:30, col:35> '<dependent type>' lvalue
          (MemberExpr 0xa8e9650 <col:30> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
            (CXXThisExpr 0xa8e9640 <col:30> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this)))))))


        iterator find(const key_type &__x) (CompoundStmt 0xa8e97c0 </usr/include/c++/4.6/bits/stl_multimap.h:667:7, col:32>
  (ReturnStmt 0xa8e97b0 <col:9, col:29>
    (CallExpr 0xa8e9790 <col:16, col:29> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9740 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9720 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9710 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9774 <col:26> 'const key_type':'const _Key' lvalue ParmVar 0xa8e66e0 '__x' 'const key_type &'))))


        const_iterator find(const key_type &__x) const (CompoundStmt 0xa8e9888 </usr/include/c++/4.6/bits/stl_multimap.h:682:7, col:32>
  (ReturnStmt 0xa8e9878 <col:9, col:29>
    (CallExpr 0xa8e9858 <col:16, col:29> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9808 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e97e8 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e97d8 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e983c <col:26> 'const key_type':'const _Key' lvalue ParmVar 0xa8e67e0 '__x' 'const key_type &'))))


        size_type count(const key_type &__x) const (CompoundStmt 0xa8e9950 </usr/include/c++/4.6/bits/stl_multimap.h:691:7, col:33>
  (ReturnStmt 0xa8e9940 <col:9, col:30>
    (CallExpr 0xa8e9920 <col:16, col:30> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e98d0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e98b0 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e98a0 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9904 <col:27> 'const key_type':'const _Key' lvalue ParmVar 0xa8e68e0 '__x' 'const key_type &'))))


        iterator lower_bound(const key_type &__x) (CompoundStmt 0xa8e9a18 </usr/include/c++/4.6/bits/stl_multimap.h:706:7, col:39>
  (ReturnStmt 0xa8e9a08 <col:9, col:36>
    (CallExpr 0xa8e99e8 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9998 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9978 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9968 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e99cc <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8e69e0 '__x' 'const key_type &'))))


        const_iterator lower_bound(const key_type &__x) const (CompoundStmt 0xa8e9ae0 </usr/include/c++/4.6/bits/stl_multimap.h:721:7, col:39>
  (ReturnStmt 0xa8e9ad0 <col:9, col:36>
    (CallExpr 0xa8e9ab0 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9a60 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9a40 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9a30 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9a94 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8e6ab0 '__x' 'const key_type &'))))


        iterator upper_bound(const key_type &__x) (CompoundStmt 0xa8e9ba8 </usr/include/c++/4.6/bits/stl_multimap.h:731:7, col:39>
  (ReturnStmt 0xa8e9b98 <col:9, col:36>
    (CallExpr 0xa8e9b78 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9b28 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9b08 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9af8 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9b5c <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8e6b80 '__x' 'const key_type &'))))


        const_iterator upper_bound(const key_type &__x) const (CompoundStmt 0xa8e9c70 </usr/include/c++/4.6/bits/stl_multimap.h:741:7, col:39>
  (ReturnStmt 0xa8e9c60 <col:9, col:36>
    (CallExpr 0xa8e9c40 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9bf0 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9bd0 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9bc0 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9c24 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8e6c50 '__x' 'const key_type &'))))


        std::pair<iterator, iterator> equal_range(const key_type &__x) (CompoundStmt 0xa8e9d38 </usr/include/c++/4.6/bits/stl_multimap.h:758:7, col:39>
  (ReturnStmt 0xa8e9d28 <col:9, col:36>
    (CallExpr 0xa8e9d08 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9cb8 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9c98 <col:16> '_Rep_type':'_Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9c88 <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9cec <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8e6e40 '__x' 'const key_type &'))))


        std::pair<const_iterator, const_iterator> equal_range(const key_type &__x) const (CompoundStmt 0xa8e9e00 </usr/include/c++/4.6/bits/stl_multimap.h:775:7, col:39>
  (ReturnStmt 0xa8e9df0 <col:9, col:36>
    (CallExpr 0xa8e9dd0 <col:16, col:36> '<dependent type>'
      (CXXDependentScopeMemberExpr 0xa8e9d80 <col:16, col:21> '<dependent type>' lvalue
        (MemberExpr 0xa8e9d60 <col:16> 'const _Rep_type':'const _Rb_tree<key_type, value_type, _Select1st<value_type>, key_compare, _Pair_alloc_type>' lvalue ->_M_t 0xa8e3680
          (CXXThisExpr 0xa8e9d50 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc> *' this)))
      (DeclRefExpr 0xa8e9db4 <col:33> 'const key_type':'const _Key' lvalue ParmVar 0xa8e7090 '__x' 'const key_type &'))))


        ;
        ;
    };
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator==(const multimap<_Key, _Tp, _Compare, _Alloc> &__x, const multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ea618 </usr/include/c++/4.6/bits/stl_multimap.h:802:5, col:36>
  (ReturnStmt 0xa8ea608 <col:7, col:30>
    (CXXOperatorCallExpr 0xa8ea5e0 <col:14, col:30> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ea570 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ea4a0 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760 0xa8def80)
      (CXXDependentScopeMemberExpr 0xa8ea4e8 <col:14, col:18> '<dependent type>' lvalue
        (DeclRefExpr 0xa8ea4d0 <col:14> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ea180 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))
      (CXXDependentScopeMemberExpr 0xa8ea538 <col:26, col:30> '<dependent type>' lvalue
        (DeclRefExpr 0xa8ea51c <col:26> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ea3a0 '__y' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator<(const multimap<_Key, _Tp, _Compare, _Alloc> &__x, const multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8eadd0 </usr/include/c++/4.6/bits/stl_multimap.h:819:5, col:35>
  (ReturnStmt 0xa8eadc0 <col:7, col:29>
    (CXXOperatorCallExpr 0xa8ead98 <col:14, col:29> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ead40 <col:23, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8eac70 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220 0xa8df750)
      (CXXDependentScopeMemberExpr 0xa8eacb8 <col:14, col:18> '<dependent type>' lvalue
        (DeclRefExpr 0xa8eaca0 <col:14> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ea970 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))
      (CXXDependentScopeMemberExpr 0xa8ead08 <col:25, col:29> '<dependent type>' lvalue
        (DeclRefExpr 0xa8eacec <col:25> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8eab90 '__y' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator!=(const multimap<_Key, _Tp, _Compare, _Alloc> &__x, const multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8eb568 </usr/include/c++/4.6/bits/stl_multimap.h:826:5, col:29>
  (ReturnStmt 0xa8eb558 <col:7, col:26>
    (UnaryOperator 0xa8eb540 <col:14, col:26> '<dependent type>' prefix '!'
      (ParenExpr 0xa8eb528 <col:15, col:26> '<dependent type>'
        (CXXOperatorCallExpr 0xa8eb500 <col:16, col:23> '<dependent type>'
          (UnresolvedLookupExpr 0xa8eb490 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8ea4a0 0xa60d470 0xa625170 0xa6277d0 0xa6786a0 0xa678a30 0xa6b3050 0xa717280 0xa7fdf00 0xa7fe970 0xa7ff1b0 0xa7ff720 0xa895280 0xa8ab760 0xa8def80)
          (DeclRefExpr 0xa8eb460 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8eb130 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8eb478 <col:23> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8eb350 '__y' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator>(const multimap<_Key, _Tp, _Compare, _Alloc> &__x, const multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ebcb0 </usr/include/c++/4.6/bits/stl_multimap.h:833:5, col:25>
  (ReturnStmt 0xa8ebca0 <col:7, col:20>
    (CXXOperatorCallExpr 0xa8ebc78 <col:14, col:20> '<dependent type>'
      (UnresolvedLookupExpr 0xa8ebc20 <col:18, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8eac70 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220 0xa8df750)
      (DeclRefExpr 0xa8ebbf0 <col:14> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ebae0 '__y' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')
      (DeclRefExpr 0xa8ebc08 <col:20> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8eb8c0 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator<=(const multimap<_Key, _Tp, _Compare, _Alloc> &__x, const multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ec430 </usr/include/c++/4.6/bits/stl_multimap.h:840:5, col:28>
  (ReturnStmt 0xa8ec420 <col:7, col:25>
    (UnaryOperator 0xa8ec408 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa8ec3f0 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa8ec3c8 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8ec370 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8eac70 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220 0xa8df750)
          (DeclRefExpr 0xa8ec340 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ec230 '__y' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8ec358 <col:22> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ec010 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline bool operator>=(const multimap<_Key, _Tp, _Compare, _Alloc> &__x, const multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ecbb0 </usr/include/c++/4.6/bits/stl_multimap.h:847:5, col:28>
  (ReturnStmt 0xa8ecba0 <col:7, col:25>
    (UnaryOperator 0xa8ecb88 <col:14, col:25> '<dependent type>' prefix '!'
      (ParenExpr 0xa8ecb70 <col:15, col:25> '<dependent type>'
        (CXXOperatorCallExpr 0xa8ecb48 <col:16, col:22> '<dependent type>'
          (UnresolvedLookupExpr 0xa8ecaf0 <col:20, <invalid sloc>> '<overloaded function type>' lvalue (ADL) = '1' 0xa8eac70 0xa60db10 0xa625610 0xa627cd0 0xa6b4880 0xa800e10 0xa801380 0xa8018b0 0xa8ac220 0xa8df750)
          (DeclRefExpr 0xa8ecac0 <col:16> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ec790 '__x' 'const multimap<_Key, _Tp, _Compare, _Alloc> &')
          (DeclRefExpr 0xa8ecad8 <col:22> 'const multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ec9b0 '__y' 'const multimap<_Key, _Tp, _Compare, _Alloc> &'))))))

;
    template <typename _Key, typename _Tp, typename _Compare, typename _Alloc> inline void swap(multimap<_Key, _Tp, _Compare, _Alloc> &__x, multimap<_Key, _Tp, _Compare, _Alloc> &__y) (CompoundStmt 0xa8ed308 </usr/include/c++/4.6/bits/stl_multimap.h:854:5, col:22>
  (CallExpr 0xa8ed2e8 <col:7, col:19> '<dependent type>'
    (CXXDependentScopeMemberExpr 0xa8ed298 <col:7, col:11> '<dependent type>' lvalue
      (DeclRefExpr 0xa8ed280 <col:7> 'multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ecf30 '__x' 'multimap<_Key, _Tp, _Compare, _Alloc> &'))
    (DeclRefExpr 0xa8ed2cc <col:16> 'multimap<_Key, _Tp, _Compare, _Alloc>' lvalue ParmVar 0xa8ed150 '__y' 'multimap<_Key, _Tp, _Compare, _Alloc> &')))

;
}
extern "C" {
    extern char *optarg;
    extern int optind;
    extern int opterr;
    extern int optopt;
    struct option {
        struct option;
        const char *name;
        int has_arg;
        int *flag;
        int val;
    };
    extern int getopt(int ___argc, char *const *___argv, const char *__shortopts) throw();
    extern int getopt_long(int ___argc, char *const *___argv, const char *__shortopts, const struct option *__longopts, int *__longind) throw();
    extern int getopt_long_only(int ___argc, char *const *___argv, const char *__shortopts, const struct option *__longopts, int *__longind) throw();
}
extern "C" {
    typedef void (*XdgMimeCallback)(void *);
    typedef void (*XdgMimeDestroy)(void *);
    extern const char *xdg_mime_type_unknown;
    const char *xdg_mime_get_mime_type_for_data(const void *data, size_t len);
    const char *xdg_mime_get_mime_type_for_file(const char *file_name);
    const char *xdg_mime_get_mime_type_from_file_name(const char *file_name);
    int xdg_mime_is_valid_mime_type(const char *mime_type);
    int xdg_mime_mime_type_equal(const char *mime_a, const char *mime_b);
    int xdg_mime_media_type_equal(const char *mime_a, const char *mime_b);
    int xdg_mime_mime_type_subclass(const char *mime_a, const char *mime_b);
    const char **xdg_mime_get_mime_parents(const char *mime);
    const char *xdg_mime_unalias_mime_type(const char *mime);
    int xdg_mime_get_max_buffer_extents();
    void xdg_mime_shutdown();
    void xdg_mime_dump();
    int xdg_mime_register_reload_callback(XdgMimeCallback callback, void *data, XdgMimeDestroy destroy);
    void xdg_mime_remove_callback(int callback_id);
}
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;
typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;
typedef unsigned int uintptr_t;
typedef long long intmax_t;
typedef unsigned long long uintmax_t;
typedef unsigned long wctype_t;
enum  {
    __ISwupper = (IntegerLiteral 0xa8efc60 </usr/include/wctype.h:74:16> 'int' 0)
,
    __ISwlower = (IntegerLiteral 0xa8efcb8 </usr/include/wctype.h:75:16> 'int' 1)
,
    __ISwalpha = (IntegerLiteral 0xa8efd08 </usr/include/wctype.h:76:16> 'int' 2)
,
    __ISwdigit = (IntegerLiteral 0xa8efd58 </usr/include/wctype.h:77:16> 'int' 3)
,
    __ISwxdigit = (IntegerLiteral 0xa8efda8 </usr/include/wctype.h:78:17> 'int' 4)
,
    __ISwspace = (IntegerLiteral 0xa8efdf8 </usr/include/wctype.h:79:16> 'int' 5)
,
    __ISwprint = (IntegerLiteral 0xa8efe48 </usr/include/wctype.h:80:16> 'int' 6)
,
    __ISwgraph = (IntegerLiteral 0xa8efe98 </usr/include/wctype.h:81:16> 'int' 7)
,
    __ISwblank = (IntegerLiteral 0xa8efee8 </usr/include/wctype.h:82:16> 'int' 8)
,
    __ISwcntrl = (IntegerLiteral 0xa8eff38 </usr/include/wctype.h:83:16> 'int' 9)
,
    __ISwpunct = (IntegerLiteral 0xa8eff88 </usr/include/wctype.h:84:16> 'int' 10)
,
    __ISwalnum = (IntegerLiteral 0xa8effd8 </usr/include/wctype.h:85:16> 'int' 11)
,
    _ISwupper = (ParenExpr 0xa8f05b8 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f0598 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f0070 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f0040 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f0024 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f0058 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f0168 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f0158 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f0130 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f0118 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f00e8 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f00d0 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f0088 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f00b8 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f00a0 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f0100 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f0580 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f0560 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f01c8 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f0198 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f0180 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f01b0 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f02c0 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f02b0 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f0288 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f0270 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f0240 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f0228 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f01e0 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f0210 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f01f8 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f0258 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f0548 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f0528 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f0320 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f02f0 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f02d8 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f0308 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f0418 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f0408 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f03e0 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f03c8 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f0398 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f0380 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f0338 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f0368 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f0350 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f03b0 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f0510 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f0500 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f04d8 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f04c0 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f0490 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f0478 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f0430 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f0460 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f0448 <line:87:24> 'int' EnumConstant 0xa8efc80 '__ISwupper' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f04a8 <line:69:36> 'int' 24)))))))))))
,
    _ISwlower = (ParenExpr 0xa8f0b98 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f0b78 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f0650 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f0620 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f0604 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f0638 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f0748 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f0738 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f0710 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f06f8 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f06c8 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f06b0 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f0668 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f0698 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f0680 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f06e0 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f0b60 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f0b40 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f07a8 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f0778 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f0760 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f0790 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f08a0 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f0890 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f0868 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f0850 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f0820 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f0808 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f07c0 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f07f0 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f07d8 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f0838 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f0b28 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f0b08 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f0900 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f08d0 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f08b8 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f08e8 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f09f8 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f09e8 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f09c0 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f09a8 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f0978 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f0960 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f0918 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f0948 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f0930 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f0990 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f0af0 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f0ae0 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f0ab8 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f0aa0 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f0a70 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f0a58 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f0a10 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f0a40 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f0a28 <line:88:24> 'int' EnumConstant 0xa8efcd0 '__ISwlower' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f0a88 <line:69:36> 'int' 24)))))))))))
,
    _ISwalpha = (ParenExpr 0xa8f1178 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f1158 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f0c30 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f0c00 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f0be4 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f0c18 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f0d28 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f0d18 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f0cf0 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f0cd8 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f0ca8 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f0c90 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f0c48 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f0c78 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f0c60 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f0cc0 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f1140 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f1120 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f0d88 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f0d58 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f0d40 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f0d70 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f0e80 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f0e70 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f0e48 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f0e30 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f0e00 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f0de8 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f0da0 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f0dd0 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f0db8 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f0e18 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f1108 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f10e8 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f0ee0 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f0eb0 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f0e98 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f0ec8 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f0fd8 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f0fc8 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f0fa0 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f0f88 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f0f58 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f0f40 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f0ef8 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f0f28 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f0f10 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f0f70 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f10d0 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f10c0 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f1098 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f1080 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f1050 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f1038 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f0ff0 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f1020 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f1008 <line:89:24> 'int' EnumConstant 0xa8efd20 '__ISwalpha' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f1068 <line:69:36> 'int' 24)))))))))))
,
    _ISwdigit = (ParenExpr 0xa8f1758 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f1738 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f1210 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f11e0 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f11c4 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f11f8 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f1308 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f12f8 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f12d0 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f12b8 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f1288 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f1270 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f1228 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f1258 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f1240 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f12a0 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f1720 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f1700 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f1368 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f1338 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f1320 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f1350 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f1460 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f1450 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f1428 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f1410 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f13e0 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f13c8 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f1380 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f13b0 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f1398 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f13f8 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f16e8 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f16c8 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f14c0 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f1490 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f1478 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f14a8 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f15b8 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f15a8 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f1580 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f1568 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f1538 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f1520 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f14d8 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f1508 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f14f0 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f1550 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f16b0 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f16a0 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f1678 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f1660 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f1630 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f1618 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f15d0 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f1600 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f15e8 <line:90:24> 'int' EnumConstant 0xa8efd70 '__ISwdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f1648 <line:69:36> 'int' 24)))))))))))
,
    _ISwxdigit = (ParenExpr 0xa8f1d38 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f1d18 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f17f0 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f17c0 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f17a4 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f17d8 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f18e8 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f18d8 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f18b0 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f1898 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f1868 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f1850 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f1808 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f1838 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f1820 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f1880 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f1d00 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f1ce0 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f1948 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f1918 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f1900 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f1930 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f1a40 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f1a30 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f1a08 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f19f0 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f19c0 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f19a8 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f1960 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f1990 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f1978 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f19d8 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f1cc8 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f1ca8 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f1aa0 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f1a70 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f1a58 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f1a88 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f1b98 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f1b88 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f1b60 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f1b48 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f1b18 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f1b00 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f1ab8 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f1ae8 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f1ad0 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f1b30 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f1c90 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f1c80 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f1c58 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f1c40 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f1c10 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f1bf8 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f1bb0 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f1be0 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f1bc8 <line:91:25> 'int' EnumConstant 0xa8efdc0 '__ISwxdigit' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f1c28 <line:69:36> 'int' 24)))))))))))
,
    _ISwspace = (ParenExpr 0xa8f2318 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f22f8 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f1dd0 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f1da0 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f1d84 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f1db8 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f1ec8 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f1eb8 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f1e90 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f1e78 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f1e48 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f1e30 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f1de8 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f1e18 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f1e00 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f1e60 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f22e0 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f22c0 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f1f28 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f1ef8 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f1ee0 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f1f10 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f2020 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f2010 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f1fe8 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f1fd0 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f1fa0 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f1f88 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f1f40 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f1f70 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f1f58 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f1fb8 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f22a8 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f2288 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f2080 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f2050 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f2038 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f2068 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f2178 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f2168 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f2140 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f2128 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f20f8 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f20e0 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f2098 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f20c8 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f20b0 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f2110 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f2270 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f2260 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f2238 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f2220 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f21f0 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f21d8 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f2190 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f21c0 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f21a8 <line:92:24> 'int' EnumConstant 0xa8efe10 '__ISwspace' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f2208 <line:69:36> 'int' 24)))))))))))
,
    _ISwprint = (ParenExpr 0xa8f28f8 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f28d8 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f23b0 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f2380 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f2364 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f2398 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f24a8 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f2498 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f2470 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f2458 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f2428 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f2410 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f23c8 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f23f8 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f23e0 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f2440 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f28c0 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f28a0 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f2508 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f24d8 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f24c0 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f24f0 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f2600 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f25f0 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f25c8 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f25b0 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f2580 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f2568 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f2520 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f2550 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f2538 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f2598 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f2888 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f2868 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f2660 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f2630 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f2618 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f2648 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f2758 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f2748 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f2720 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f2708 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f26d8 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f26c0 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f2678 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f26a8 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f2690 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f26f0 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f2850 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f2840 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f2818 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f2800 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f27d0 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f27b8 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f2770 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f27a0 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f2788 <line:93:24> 'int' EnumConstant 0xa8efe60 '__ISwprint' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f27e8 <line:69:36> 'int' 24)))))))))))
,
    _ISwgraph = (ParenExpr 0xa8f2ed8 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f2eb8 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f2990 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f2960 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f2944 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f2978 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f2a88 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f2a78 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f2a50 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f2a38 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f2a08 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f29f0 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f29a8 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f29d8 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f29c0 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f2a20 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f2ea0 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f2e80 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f2ae8 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f2ab8 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f2aa0 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f2ad0 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f2be0 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f2bd0 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f2ba8 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f2b90 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f2b60 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f2b48 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f2b00 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f2b30 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f2b18 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f2b78 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f2e68 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f2e48 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f2c40 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f2c10 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f2bf8 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f2c28 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f2d38 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f2d28 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f2d00 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f2ce8 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f2cb8 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f2ca0 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f2c58 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f2c88 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f2c70 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f2cd0 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f2e30 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f2e20 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f2df8 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f2de0 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f2db0 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f2d98 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f2d50 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f2d80 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f2d68 <line:94:24> 'int' EnumConstant 0xa8efeb0 '__ISwgraph' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f2dc8 <line:69:36> 'int' 24)))))))))))
,
    _ISwblank = (ParenExpr 0xa8f34b8 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f3498 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f2f70 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f2f40 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f2f24 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f2f58 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f3068 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f3058 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f3030 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f3018 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f2fe8 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f2fd0 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f2f88 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f2fb8 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f2fa0 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f3000 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f3480 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f3460 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f30c8 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f3098 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f3080 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f30b0 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f31c0 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f31b0 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f3188 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f3170 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f3140 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f3128 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f30e0 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f3110 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f30f8 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f3158 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f3448 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f3428 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f3220 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f31f0 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f31d8 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f3208 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f3318 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f3308 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f32e0 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f32c8 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f3298 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f3280 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f3238 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f3268 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f3250 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f32b0 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f3410 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f3400 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f33d8 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f33c0 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f3390 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f3378 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f3330 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f3360 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f3348 <line:95:24> 'int' EnumConstant 0xa8eff00 '__ISwblank' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f33a8 <line:69:36> 'int' 24)))))))))))
,
    _ISwcntrl = (ParenExpr 0xa8f3a98 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f3a78 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f3550 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f3520 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f3504 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f3538 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f3648 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f3638 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f3610 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f35f8 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f35c8 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f35b0 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f3568 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f3598 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f3580 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f35e0 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f3a60 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f3a40 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f36a8 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f3678 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f3660 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f3690 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f37a0 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f3790 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f3768 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f3750 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f3720 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f3708 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f36c0 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f36f0 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f36d8 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f3738 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f3a28 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f3a08 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f3800 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f37d0 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f37b8 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f37e8 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f38f8 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f38e8 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f38c0 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f38a8 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f3878 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f3860 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f3818 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f3848 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f3830 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f3890 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f39f0 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f39e0 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f39b8 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f39a0 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f3970 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f3958 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f3910 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f3940 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f3928 <line:96:24> 'int' EnumConstant 0xa8eff50 '__ISwcntrl' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f3988 <line:69:36> 'int' 24)))))))))))
,
    _ISwpunct = (ParenExpr 0xa8f4078 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f4058 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f3b30 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f3b00 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f3ae4 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f3b18 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f3c28 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f3c18 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f3bf0 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f3bd8 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f3ba8 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f3b90 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f3b48 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f3b78 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f3b60 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f3bc0 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f4040 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f4020 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f3c88 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f3c58 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f3c40 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f3c70 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f3d80 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f3d70 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f3d48 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f3d30 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f3d00 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f3ce8 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f3ca0 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f3cd0 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f3cb8 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f3d18 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f4008 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f3fe8 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f3de0 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f3db0 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f3d98 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f3dc8 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f3ed8 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f3ec8 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f3ea0 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f3e88 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f3e58 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f3e40 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f3df8 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f3e28 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f3e10 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f3e70 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f3fd0 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f3fc0 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f3f98 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f3f80 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f3f50 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f3f38 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f3ef0 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f3f20 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f3f08 <line:97:24> 'int' EnumConstant 0xa8effa0 '__ISwpunct' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f3f68 <line:69:36> 'int' 24)))))))))))
,
    _ISwalnum = (ParenExpr 0xa8f4658 </usr/include/wctype.h:66:2, line:69:41> 'int'
  (ConditionalOperator 0xa8f4638 <line:66:3, line:69:40> 'int'
    (BinaryOperator 0xa8f4110 <line:66:3, col:11> '_Bool' '<'
      (ParenExpr 0xa8f40e0 <col:3, col:7> 'int'
        (DeclRefExpr 0xa8f40c4 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
      (IntegerLiteral 0xa8f40f8 <line:66:11> 'int' 8))
    (CStyleCastExpr 0xa8f4208 <col:15, col:42> 'int' <NoOp>
      (ImplicitCastExpr 0xa8f41f8 <col:21, col:42> 'int' <IntegralCast>
        (ParenExpr 0xa8f41d0 <col:21, col:42> 'unsigned long'
          (BinaryOperator 0xa8f41b8 <col:22, col:40> 'unsigned long' '<<'
            (ParenExpr 0xa8f4188 <col:22, col:35> 'unsigned long'
              (BinaryOperator 0xa8f4170 <col:23, col:34> 'unsigned long' '<<'
                (IntegerLiteral 0xa8f4128 <col:23> 'unsigned long' 1)
                (ParenExpr 0xa8f4158 <col:30, col:34> 'int'
                  (DeclRefExpr 0xa8f4140 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
            (IntegerLiteral 0xa8f41a0 <line:66:40> 'int' 24)))))
    (ParenExpr 0xa8f4620 <line:67:5, line:69:40> 'int'
      (ConditionalOperator 0xa8f4600 <line:67:6, line:69:39> 'int'
        (BinaryOperator 0xa8f4268 <line:67:6, col:14> '_Bool' '<'
          (ParenExpr 0xa8f4238 <col:6, col:10> 'int'
            (DeclRefExpr 0xa8f4220 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
          (IntegerLiteral 0xa8f4250 <line:67:14> 'int' 16))
        (CStyleCastExpr 0xa8f4360 <col:19, col:45> 'int' <NoOp>
          (ImplicitCastExpr 0xa8f4350 <col:25, col:45> 'int' <IntegralCast>
            (ParenExpr 0xa8f4328 <col:25, col:45> 'unsigned long'
              (BinaryOperator 0xa8f4310 <col:26, col:44> 'unsigned long' '<<'
                (ParenExpr 0xa8f42e0 <col:26, col:39> 'unsigned long'
                  (BinaryOperator 0xa8f42c8 <col:27, col:38> 'unsigned long' '<<'
                    (IntegerLiteral 0xa8f4280 <col:27> 'unsigned long' 1)
                    (ParenExpr 0xa8f42b0 <col:34, col:38> 'int'
                      (DeclRefExpr 0xa8f4298 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                (IntegerLiteral 0xa8f42f8 <line:67:44> 'int' 8)))))
        (ParenExpr 0xa8f45e8 <line:68:8, line:69:39> 'int'
          (ConditionalOperator 0xa8f45c8 <line:68:9, line:69:38> 'int'
            (BinaryOperator 0xa8f43c0 <line:68:9, col:17> '_Bool' '<'
              (ParenExpr 0xa8f4390 <col:9, col:13> 'int'
                (DeclRefExpr 0xa8f4378 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))
              (IntegerLiteral 0xa8f43a8 <line:68:17> 'int' 24))
            (CStyleCastExpr 0xa8f44b8 <col:22, col:48> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f44a8 <col:28, col:48> 'int' <IntegralCast>
                (ParenExpr 0xa8f4480 <col:28, col:48> 'unsigned long'
                  (BinaryOperator 0xa8f4468 <col:29, col:47> 'unsigned long' '>>'
                    (ParenExpr 0xa8f4438 <col:29, col:42> 'unsigned long'
                      (BinaryOperator 0xa8f4420 <col:30, col:41> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f43d8 <col:30> 'unsigned long' 1)
                        (ParenExpr 0xa8f4408 <col:37, col:41> 'int'
                          (DeclRefExpr 0xa8f43f0 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f4450 <line:68:47> 'int' 8)))))
            (CStyleCastExpr 0xa8f45b0 <line:69:11, col:38> 'int' <NoOp>
              (ImplicitCastExpr 0xa8f45a0 <col:17, col:38> 'int' <IntegralCast>
                (ParenExpr 0xa8f4578 <col:17, col:38> 'unsigned long'
                  (BinaryOperator 0xa8f4560 <col:18, col:36> 'unsigned long' '>>'
                    (ParenExpr 0xa8f4530 <col:18, col:31> 'unsigned long'
                      (BinaryOperator 0xa8f4518 <col:19, col:30> 'unsigned long' '<<'
                        (IntegerLiteral 0xa8f44d0 <col:19> 'unsigned long' 1)
                        (ParenExpr 0xa8f4500 <col:26, col:30> 'int'
                          (DeclRefExpr 0xa8f44e8 <line:98:24> 'int' EnumConstant 0xa8efff0 '__ISwalnum' 'enum <anonymous at /usr/include/wctype.h:72:1>'))))
                    (IntegerLiteral 0xa8f4548 <line:69:36> 'int' 24)))))))))))

};
extern "C" {
    extern int iswalnum(wint_t __wc) throw();
    extern int iswalpha(wint_t __wc) throw();
    extern int iswcntrl(wint_t __wc) throw();
    extern int iswdigit(wint_t __wc) throw();
    extern int iswgraph(wint_t __wc) throw();
    extern int iswlower(wint_t __wc) throw();
    extern int iswprint(wint_t __wc) throw();
    extern int iswpunct(wint_t __wc) throw();
    extern int iswspace(wint_t __wc) throw();
    extern int iswupper(wint_t __wc) throw();
    extern int iswxdigit(wint_t __wc) throw();
    extern int iswblank(wint_t __wc) throw();
    extern wctype_t wctype(const char *__property) throw();
    extern int iswctype(wint_t __wc, wctype_t __desc) throw();
    typedef const __int32_t *wctrans_t;
    extern wint_t towlower(wint_t __wc) throw();
    extern wint_t towupper(wint_t __wc) throw();
}
extern "C" {
    extern wctrans_t wctrans(const char *__property) throw();
    extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw();
    extern int iswalnum_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswalpha_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswcntrl_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswdigit_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswgraph_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswlower_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswprint_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswpunct_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswspace_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswupper_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswxdigit_l(wint_t __wc, __locale_t __locale) throw();
    extern int iswblank_l(wint_t __wc, __locale_t __locale) throw();
    extern wctype_t wctype_l(const char *__property, __locale_t __locale) throw();
    extern int iswctype_l(wint_t __wc, wctype_t __desc, __locale_t __locale) throw();
    extern wint_t towlower_l(wint_t __wc, __locale_t __locale) throw();
    extern wint_t towupper_l(wint_t __wc, __locale_t __locale) throw();
    extern wctrans_t wctrans_l(const char *__property, __locale_t __locale) throw();
    extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, __locale_t __locale) throw();
}
extern "C" {
    struct timezone {
        struct timezone;
        int tz_minuteswest;
        int tz_dsttime;
    };
    typedef struct timezone *restrict __timezone_ptr_t;
    extern int gettimeofday(struct timeval *restrict __tv, __timezone_ptr_t __tz) throw();
    extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz) throw();
    extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta) throw();
    enum __itimer_which {
        ITIMER_REAL = (ImplicitCastExpr 0xa90a068 </usr/include/i386-linux-gnu/sys/time.h:96:19> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa909f70 <col:19> 'int' 0))
,
        ITIMER_VIRTUAL = (ImplicitCastExpr 0xa90a078 </usr/include/i386-linux-gnu/sys/time.h:99:22> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa909fc8 <col:22> 'int' 1))
,
        ITIMER_PROF = (ImplicitCastExpr 0xa90a088 </usr/include/i386-linux-gnu/sys/time.h:103:19> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90a018 <col:19> 'int' 2))

    };
    struct itimerval {
        struct itimerval;
        struct timeval it_interval;
        struct timeval it_value;
    };
    typedef int __itimer_which_t;
    extern int getitimer(__itimer_which_t __which, struct itimerval *__value) throw();
    extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old) throw();
    extern int utimes(const char *__file, const struct timeval __tvp[2]) throw();
    extern int lutimes(const char *__file, const struct timeval __tvp[2]) throw();
    extern int futimes(int __fd, const struct timeval __tvp[2]) throw();
    extern int futimesat(int __fd, const char *__file, const struct timeval __tvp[2]) throw();
}
extern "C" {
    extern int __sigismember(const __sigset_t *, int);
    extern int __sigaddset(__sigset_t *, int);
    extern int __sigdelset(__sigset_t *, int);
    typedef __sig_atomic_t sig_atomic_t;
    union sigval {
        union sigval;
        int sival_int;
        void *sival_ptr;
    };
    typedef union sigval sigval_t;
    struct siginfo {
        struct siginfo;
        int si_signo;
        int si_errno;
        int si_code;
        union {
            int _pad[29];
            struct {
                __pid_t si_pid;
                __uid_t si_uid;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:63:2> _kill;
            struct {
                int si_tid;
                int si_overrun;
                sigval_t si_sigval;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:70:2> _timer;
            struct {
                __pid_t si_pid;
                __uid_t si_uid;
                sigval_t si_sigval;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:78:2> _rt;
            struct {
                __pid_t si_pid;
                __uid_t si_uid;
                int si_status;
                __clock_t si_utime;
                __clock_t si_stime;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:86:2> _sigchld;
            struct {
                void *si_addr;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:96:2> _sigfault;
            struct {
                long si_band;
                int si_fd;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:102:2> _sigpoll;
        };
        union <anonymous union at /usr/include/i386-linux-gnu/bits/siginfo.h:58:5> _sifields;
    };
    typedef struct siginfo siginfo_t;
    enum  {
        SI_ASYNCNL = (UnaryOperator 0xa90c678 </usr/include/i386-linux-gnu/bits/siginfo.h:131:16, col:17> 'int' prefix '-'
  (IntegerLiteral 0xa90c660 <col:17> 'int' 60))
,
        SI_TKILL = (UnaryOperator 0xa90c6e0 </usr/include/i386-linux-gnu/bits/siginfo.h:133:14, col:15> 'int' prefix '-'
  (IntegerLiteral 0xa90c6c8 <col:15> 'int' 6))
,
        SI_SIGIO,
        SI_ASYNCIO,
        SI_MESGQ,
        SI_TIMER,
        SI_QUEUE,
        SI_USER,
        SI_KERNEL = (IntegerLiteral 0xa90c8b8 </usr/include/i386-linux-gnu/bits/siginfo.h:147:15> 'int' 128)

    };
    enum  {
        ILL_ILLOPC = (ImplicitCastExpr 0xa90cb88 </usr/include/i386-linux-gnu/bits/siginfo.h:155:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90c970 <col:16> 'int' 1))
,
        ILL_ILLOPN,
        ILL_ILLADR,
        ILL_ILLTRP,
        ILL_PRVOPC,
        ILL_PRVREG,
        ILL_COPROC,
        ILL_BADSTK
    };
    enum  {
        FPE_INTDIV = (ImplicitCastExpr 0xa90ce18 </usr/include/i386-linux-gnu/bits/siginfo.h:176:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90cc00 <col:16> 'int' 1))
,
        FPE_INTOVF,
        FPE_FLTDIV,
        FPE_FLTOVF,
        FPE_FLTUND,
        FPE_FLTRES,
        FPE_FLTINV,
        FPE_FLTSUB
    };
    enum  {
        SEGV_MAPERR = (ImplicitCastExpr 0xa90cf28 </usr/include/i386-linux-gnu/bits/siginfo.h:197:17> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90ce90 <col:17> 'int' 1))
,
        SEGV_ACCERR
    };
    enum  {
        BUS_ADRALN = (ImplicitCastExpr 0xa90d078 </usr/include/i386-linux-gnu/bits/siginfo.h:206:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90cfa0 <col:16> 'int' 1))
,
        BUS_ADRERR,
        BUS_OBJERR
    };
    enum  {
        TRAP_BRKPT = (ImplicitCastExpr 0xa90d188 </usr/include/i386-linux-gnu/bits/siginfo.h:217:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90d0f0 <col:16> 'int' 1))
,
        TRAP_TRACE
    };
    enum  {
        CLD_EXITED = (ImplicitCastExpr 0xa90d398 </usr/include/i386-linux-gnu/bits/siginfo.h:226:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90d200 <col:16> 'int' 1))
,
        CLD_KILLED,
        CLD_DUMPED,
        CLD_TRAPPED,
        CLD_STOPPED,
        CLD_CONTINUED
    };
    enum  {
        POLL_IN = (ImplicitCastExpr 0xa90d5a8 </usr/include/i386-linux-gnu/bits/siginfo.h:243:13> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90d410 <col:13> 'int' 1))
,
        POLL_OUT,
        POLL_MSG,
        POLL_ERR,
        POLL_PRI,
        POLL_HUP
    };
    struct sigevent {
        struct sigevent;
        sigval_t sigev_value;
        int sigev_signo;
        int sigev_notify;
        union {
            int _pad[13];
            __pid_t _tid;
            struct {
                void (*_function)(sigval_t);
                void *_attribute;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/siginfo.h:287:2> _sigev_thread;
        };
        union <anonymous union at /usr/include/i386-linux-gnu/bits/siginfo.h:279:5> _sigev_un;
    };
    typedef struct sigevent sigevent_t;
    enum  {
        SIGEV_SIGNAL = (ImplicitCastExpr 0xa90df08 </usr/include/i386-linux-gnu/bits/siginfo.h:302:18> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90dde0 <col:18> 'int' 0))
,
        SIGEV_NONE,
        SIGEV_THREAD,
        SIGEV_THREAD_ID = (ImplicitCastExpr 0xa90df18 </usr/include/i386-linux-gnu/bits/siginfo.h:309:21> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa90deb8 <col:21> 'int' 4))

    };
    typedef void (*__sighandler_t)(int);
    extern __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler) throw();
    extern __sighandler_t sysv_signal(int __sig, __sighandler_t __handler) throw();
    extern __sighandler_t signal(int __sig, __sighandler_t __handler) throw();
    extern __sighandler_t bsd_signal(int __sig, __sighandler_t __handler) throw();
    extern int kill(__pid_t __pid, int __sig) throw();
    extern int killpg(__pid_t __pgrp, int __sig) throw();
    extern int raise(int __sig) throw();
    extern __sighandler_t ssignal(int __sig, __sighandler_t __handler) throw();
    extern int gsignal(int __sig) throw();
    extern void psignal(int __sig, const char *__s);
    extern void psiginfo(const siginfo_t *__pinfo, const char *__s);
    extern int __sigpause(int __sig_or_mask, int __is_sig);
    extern int sigpause(int __sig);
    extern int sigblock(int __mask) throw();
    extern int sigsetmask(int __mask) throw();
    extern int siggetmask() throw();
    typedef __sighandler_t sighandler_t;
    typedef __sighandler_t sig_t;
    extern int sigemptyset(sigset_t *__set) throw();
    extern int sigfillset(sigset_t *__set) throw();
    extern int sigaddset(sigset_t *__set, int __signo) throw();
    extern int sigdelset(sigset_t *__set, int __signo) throw();
    extern int sigismember(const sigset_t *__set, int __signo) throw();
    extern int sigisemptyset(const sigset_t *__set) throw();
    extern int sigandset(sigset_t *__set, const sigset_t *__left, const sigset_t *__right) throw();
    extern int sigorset(sigset_t *__set, const sigset_t *__left, const sigset_t *__right) throw();
    struct sigaction {
        struct sigaction;
        union {
            __sighandler_t sa_handler;
            void (*sa_sigaction)(int, siginfo_t *, void *);
        };
        union <anonymous union at /usr/include/i386-linux-gnu/bits/sigaction.h:29:5> __sigaction_handler;
        __sigset_t sa_mask;
        int sa_flags;
        void (*sa_restorer)();
    };
    extern int sigprocmask(int __how, const sigset_t *restrict __set, sigset_t *restrict __oset) throw();
    extern int sigsuspend(const sigset_t *__set);
    extern int sigaction(int __sig, const struct sigaction *restrict __act, struct sigaction *restrict __oact) throw();
    extern int sigpending(sigset_t *__set) throw();
    extern int sigwait(const sigset_t *restrict __set, int *restrict __sig);
    extern int sigwaitinfo(const sigset_t *restrict __set, siginfo_t *restrict __info);
    extern int sigtimedwait(const sigset_t *restrict __set, siginfo_t *restrict __info, const struct timespec *restrict __timeout);
    extern int sigqueue(__pid_t __pid, int __sig, const union sigval __val) throw();
    extern const char *const _sys_siglist[65];
    extern const char *const sys_siglist[65];
    struct sigvec {
        struct sigvec;
        __sighandler_t sv_handler;
        int sv_mask;
        int sv_flags;
    };
    extern int sigvec(int __sig, const struct sigvec *__vec, struct sigvec *__ovec) throw();
    typedef signed char __s8;
    typedef unsigned char __u8;
    typedef short __s16;
    typedef unsigned short __u16;
    typedef int __s32;
    typedef unsigned int __u32;
    typedef long long __s64;
    typedef unsigned long long __u64;
    typedef unsigned short umode_t;
    struct {
        unsigned long fds_bits[32];
    };
    typedef struct __kernel_fd_set __kernel_fd_set;
    typedef void (*__kernel_sighandler_t)(int);
    typedef int __kernel_key_t;
    typedef int __kernel_mqd_t;
    typedef unsigned long __kernel_ino_t;
    typedef unsigned short __kernel_mode_t;
    typedef unsigned short __kernel_nlink_t;
    typedef long __kernel_off_t;
    typedef int __kernel_pid_t;
    typedef unsigned short __kernel_ipc_pid_t;
    typedef unsigned short __kernel_uid_t;
    typedef unsigned short __kernel_gid_t;
    typedef unsigned int __kernel_size_t;
    typedef int __kernel_ssize_t;
    typedef int __kernel_ptrdiff_t;
    typedef long __kernel_time_t;
    typedef long __kernel_suseconds_t;
    typedef long __kernel_clock_t;
    typedef int __kernel_timer_t;
    typedef int __kernel_clockid_t;
    typedef int __kernel_daddr_t;
    typedef char *__kernel_caddr_t;
    typedef unsigned short __kernel_uid16_t;
    typedef unsigned short __kernel_gid16_t;
    typedef unsigned int __kernel_uid32_t;
    typedef unsigned int __kernel_gid32_t;
    typedef unsigned short __kernel_old_uid_t;
    typedef unsigned short __kernel_old_gid_t;
    typedef unsigned short __kernel_old_dev_t;
    typedef long long __kernel_loff_t;
    struct {
        int val[2];
    };
    typedef struct __kernel_fsid_t __kernel_fsid_t;
    typedef __u16 __le16;
    typedef __u16 __be16;
    typedef __u32 __le32;
    typedef __u32 __be32;
    typedef __u64 __le64;
    typedef __u64 __be64;
    typedef __u16 __sum16;
    typedef __u32 __wsum;
    struct _fpx_sw_bytes {
        struct _fpx_sw_bytes;
        __u32 magic1;
        __u32 extended_size;
        __u64 xstate_bv;
        __u32 xstate_size;
        __u32 padding[7];
    };
    struct _fpreg {
        struct _fpreg;
        unsigned short significand[4];
        unsigned short exponent;
    };
    struct _fpxreg {
        struct _fpxreg;
        unsigned short significand[4];
        unsigned short exponent;
        unsigned short padding[3];
    };
    struct _xmmreg {
        struct _xmmreg;
        unsigned long element[4];
    };
    struct _fpstate {
        struct _fpstate;
        unsigned long cw;
        unsigned long sw;
        unsigned long tag;
        unsigned long ipoff;
        unsigned long cssel;
        unsigned long dataoff;
        unsigned long datasel;
        struct _fpreg _st[8];
        unsigned short status;
        unsigned short magic;
        unsigned long _fxsr_env[6];
        unsigned long mxcsr;
        unsigned long reserved;
        struct _fpxreg _fxsr_st[8];
        struct _xmmreg _xmm[8];
        unsigned long padding1[44];
        union {
            unsigned long padding2[12];
            struct _fpx_sw_bytes sw_reserved;
        } ;
        ;
        ;
    };
    struct sigcontext {
        struct sigcontext;
        unsigned short gs;
        unsigned short __gsh;
        unsigned short fs;
        unsigned short __fsh;
        unsigned short es;
        unsigned short __esh;
        unsigned short ds;
        unsigned short __dsh;
        unsigned long edi;
        unsigned long esi;
        unsigned long ebp;
        unsigned long esp;
        unsigned long ebx;
        unsigned long edx;
        unsigned long ecx;
        unsigned long eax;
        unsigned long trapno;
        unsigned long err;
        unsigned long eip;
        unsigned short cs;
        unsigned short __csh;
        unsigned long eflags;
        unsigned long esp_at_signal;
        unsigned short ss;
        unsigned short __ssh;
        struct _fpstate *fpstate;
        unsigned long oldmask;
        unsigned long cr2;
    };
    struct _xsave_hdr {
        struct _xsave_hdr;
        __u64 xstate_bv;
        __u64 reserved1[2];
        __u64 reserved2[5];
    };
    struct _ymmh_state {
        struct _ymmh_state;
        __u32 ymmh_space[64];
    };
    struct _xstate {
        struct _xstate;
        struct _fpstate fpstate;
        struct _xsave_hdr xstate_hdr;
        struct _ymmh_state ymmh;
    };
    extern int sigreturn(struct sigcontext *__scp) throw();
    extern int siginterrupt(int __sig, int __interrupt) throw();
    struct sigstack {
        struct sigstack;
        void *ss_sp;
        int ss_onstack;
    };
    enum  {
        SS_ONSTACK = (ImplicitCastExpr 0xa943328 </usr/include/i386-linux-gnu/bits/sigstack.h:36:16> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa943290 <col:16> 'int' 1))
,
        SS_DISABLE
    };
    struct sigaltstack {
        struct sigaltstack;
        void *ss_sp;
        int ss_flags;
        size_t ss_size;
    };
    typedef struct sigaltstack stack_t;
    typedef int greg_t;
    typedef greg_t gregset_t[19];
    enum  {
        REG_GS = (ImplicitCastExpr 0xa943bd8 </usr/include/i386-linux-gnu/sys/ucontext.h:43:12> 'unsigned int' <IntegralCast>
  (IntegerLiteral 0xa943700 <col:12> 'int' 0))
,
        REG_FS,
        REG_ES,
        REG_DS,
        REG_EDI,
        REG_ESI,
        REG_EBP,
        REG_ESP,
        REG_EBX,
        REG_EDX,
        REG_ECX,
        REG_EAX,
        REG_TRAPNO,
        REG_ERR,
        REG_EIP,
        REG_CS,
        REG_EFL,
        REG_UESP,
        REG_SS
    };
    struct _libc_fpreg {
        struct _libc_fpreg;
        unsigned short significand[4];
        unsigned short exponent;
    };
    struct _libc_fpstate {
        struct _libc_fpstate;
        unsigned long cw;
        unsigned long sw;
        unsigned long tag;
        unsigned long ipoff;
        unsigned long cssel;
        unsigned long dataoff;
        unsigned long datasel;
        struct _libc_fpreg _st[8];
        unsigned long status;
    };
    typedef struct _libc_fpstate *fpregset_t;
    struct {
        gregset_t gregs;
        fpregset_t fpregs;
        unsigned long oldmask;
        unsigned long cr2;
    };
    typedef struct mcontext_t mcontext_t;
    struct ucontext {
        struct ucontext;
        unsigned long uc_flags;
        struct ucontext *uc_link;
        stack_t uc_stack;
        mcontext_t uc_mcontext;
        __sigset_t uc_sigmask;
        struct _libc_fpstate __fpregs_mem;
    };
    typedef struct ucontext ucontext_t;
    extern int sigstack(struct sigstack *__ss, struct sigstack *__oss) throw();
    extern int sigaltstack(const struct sigaltstack *restrict __ss, struct sigaltstack *restrict __oss) throw();
    extern int sighold(int __sig) throw();
    extern int sigrelse(int __sig) throw();
    extern int sigignore(int __sig) throw();
    extern __sighandler_t sigset(int __sig, __sighandler_t __disp) throw();
    extern int pthread_sigmask(int __how, const __sigset_t *restrict __newmask, __sigset_t *restrict __oldmask) throw();
    extern int pthread_kill(pthread_t __threadid, int __signo) throw();
    extern int pthread_sigqueue(pthread_t __threadid, int __signo, const union sigval __value) throw();
    extern int __libc_current_sigrtmin() throw();
    extern int __libc_current_sigrtmax() throw();
}
int fish_wcwidth(wchar_t wc);
int fish_wcswidth(const wchar_t *str, size_t n);
typedef char tputs_arg_t;
wchar_t *wcsndup(const wchar_t *in, size_t c);
long convert_digit(wchar_t d, int base);
size_t wcslcat(wchar_t *dst, const wchar_t *src, size_t siz);
size_t wcslcpy(wchar_t *dst, const wchar_t *src, size_t siz);
char *fish_gettext(const char *msgid);
char *fish_bindtextdomain(const char *domainname, const char *dirname);
char *fish_textdomain(const char *domainname);
char *fish_dcgettext(const char *domainname, const char *msgid, int category);
extern int _nl_msg_cat_cntr;
template <typename T> static inline T maxi(T a, T b) (CompoundStmt 0xa951568 <../codeBase/fish-shell-master/util.h:17:1, line:19:1>
  (ReturnStmt 0xa951558 <line:18:5, col:18>
    (ConditionalOperator 0xa951538 <col:12, col:18> '<dependent type>'
      (BinaryOperator 0xa9514f0 <col:12, col:14> '<dependent type>' '>'
        (DeclRefExpr 0xa9514c0 <col:12> 'T' lvalue ParmVar 0xa946420 'a' 'T')
        (DeclRefExpr 0xa9514d8 <col:14> 'T' lvalue ParmVar 0xa946460 'b' 'T'))
      (DeclRefExpr 0xa951508 <col:16> 'T' lvalue ParmVar 0xa946420 'a' 'T')
      (DeclRefExpr 0xa951520 <col:18> 'T' lvalue ParmVar 0xa946460 'b' 'T'))))

;
template <typename T> static inline T mini(T a, T b) (CompoundStmt 0xa9517d8 <../codeBase/fish-shell-master/util.h:26:1, line:28:1>
  (ReturnStmt 0xa9517c8 <line:27:5, col:18>
    (ConditionalOperator 0xa9517a8 <col:12, col:18> '<dependent type>'
      (BinaryOperator 0xa951760 <col:12, col:14> '<dependent type>' '<'
        (DeclRefExpr 0xa951730 <col:12> 'T' lvalue ParmVar 0xa9515e0 'a' 'T')
        (DeclRefExpr 0xa951748 <col:14> 'T' lvalue ParmVar 0xa951620 'b' 'T'))
      (DeclRefExpr 0xa951778 <col:16> 'T' lvalue ParmVar 0xa9515e0 'a' 'T')
      (DeclRefExpr 0xa951790 <col:18> 'T' lvalue ParmVar 0xa951620 'b' 'T'))))

;
int wcsfilecmp(const wchar_t *a, const wchar_t *b);
long long get_time();
void print_help(const char *cmd, int fd);
typedef std::vector<std::string> string_list_t;
enum  {
    FILEDATA,
    FILENAME,
    MIMETYPE,
    DESCRIPTION,
    ACTION,
    LAUNCH
};
static regex_t *start_re = (ImplicitCastExpr 0xa952070 <../codeBase/fish-shell-master/mimedb.cpp:130:26> 'regex_t *' <NullToPointer>
  (IntegerLiteral 0xa952058 <col:26> 'int' 0))
;
static regex_t *stop_re = (ImplicitCastExpr 0xa9520e0 <../codeBase/fish-shell-master/mimedb.cpp:134:25> 'regex_t *' <NullToPointer>
  (IntegerLiteral 0xa9520c8 <col:25> 'int' 0))
;
static int error = (IntegerLiteral 0xa952138 <../codeBase/fish-shell-master/mimedb.cpp:139:20> 'int' 0)
;
static char *launch_buff = (ImplicitCastExpr 0xa9521b0 <../codeBase/fish-shell-master/mimedb.cpp:144:26> 'char *' <NullToPointer>
  (IntegerLiteral 0xa952198 <col:26> 'int' 0))
;
static int launch_len = (IntegerLiteral 0xa952208 <../codeBase/fish-shell-master/mimedb.cpp:149:23> 'int' 0)
;
static int launch_pos = (IntegerLiteral 0xa952268 <../codeBase/fish-shell-master/mimedb.cpp:153:23> 'int' 0)
;
void *my_malloc(size_t s) (CompoundStmt 0xa952760 <../codeBase/fish-shell-master/mimedb.cpp:168:1, line:176:1>
  (DeclStmt 0xa952488 <line:169:5, col:26>
    0xa952390 "void *res =
      (CallExpr 0xa952458 <col:17, col:25> 'void *'
        (ImplicitCastExpr 0xa952448 <col:17> 'void *(*)(size_t) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa952414 <col:17> 'void *(size_t) throw()' lvalue Function 0xa549920 'malloc' 'void *(size_t) throw()'))
        (ImplicitCastExpr 0xa952478 <col:24> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa9523fc <col:24> 'size_t':'unsigned int' lvalue ParmVar 0xa952290 's' 'size_t':'unsigned int')))")
  (IfStmt 0xa952708 <line:170:5, line:174:5>
    <<<NULL>>>
    (UnaryOperator 0xa9524d0 <line:170:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9524c0 <col:10> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa9524b0 <col:10> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa952498 <col:10> 'size_t':'unsigned int' lvalue ParmVar 0xa952290 's' 'size_t':'unsigned int'))))
    (CompoundStmt 0xa9526f0 <line:171:5, line:174:5>
      (BinaryOperator 0xa952518 <line:172:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa9524e4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa952500 <col:15> 'int' 1))
      (CallExpr 0xa952698 <line:173:9, col:57> 'int'
        (ImplicitCastExpr 0xa952688 <col:9> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa952634 <col:9> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
        (ImplicitCastExpr 0xa9526c0 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
          (DeclRefExpr 0xa952564 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
        (ImplicitCastExpr 0xa9526d0 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
          (ParenExpr 0xa9525b0 <col:19, col:26> 'const char [19]' lvalue
            (StringLiteral 0xa95257c <line:173:27> 'const char [19]' lvalue "%s: Out of memory\n")))
        (ImplicitCastExpr 0xa9526e0 <line:95:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa952610 <col:16> 'const char [7]' lvalue "mimedb"))))
    <<<NULL>>>)
  (ReturnStmt 0xa952750 <line:175:5, col:12>
    (ImplicitCastExpr 0xa952740 <col:12> 'void *' <LValueToRValue>
      (DeclRefExpr 0xa952724 <col:12> 'void *' lvalue Var 0xa952390 'res' 'void *'))))


char *my_strdup(const char *s) (CompoundStmt 0xa952bd8 <../codeBase/fish-shell-master/mimedb.cpp:182:1, line:190:1>
  (DeclStmt 0xa952988 <line:183:5, col:26>
    0xa952870 "char *res =
      (CallExpr 0xa952958 <col:17, col:25> 'char *'
        (ImplicitCastExpr 0xa952948 <col:17> 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9528f4 <col:17> 'char *(const char *) throw()' lvalue Function 0xa4e74e0 'strdup' 'char *(const char *) throw()'))
        (ImplicitCastExpr 0xa952978 <col:24> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa9528dc <col:24> 'const char *' lvalue ParmVar 0xa952790 's' 'const char *')))")
  (IfStmt 0xa952b80 <line:184:5, line:188:5>
    <<<NULL>>>
    (UnaryOperator 0xa9529d0 <line:184:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9529c0 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa9529b0 <col:10> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa952998 <col:10> 'const char *' lvalue ParmVar 0xa952790 's' 'const char *'))))
    (CompoundStmt 0xa952b68 <line:185:5, line:188:5>
      (BinaryOperator 0xa952a18 <line:186:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa9529e4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa952a00 <col:15> 'int' 1))
      (CallExpr 0xa952b10 <line:187:9, col:57> 'int'
        (ImplicitCastExpr 0xa952b00 <col:9> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa952ae8 <col:9> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
        (ImplicitCastExpr 0xa952b38 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
          (DeclRefExpr 0xa952a64 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
        (ImplicitCastExpr 0xa952b48 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
          (ParenExpr 0xa952ab0 <col:19, col:26> 'const char [19]' lvalue
            (StringLiteral 0xa952a7c <line:187:27> 'const char [19]' lvalue "%s: Out of memory\n")))
        (ImplicitCastExpr 0xa952b58 <line:95:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa952ac4 <col:16> 'const char [7]' lvalue "mimedb"))))
    <<<NULL>>>)
  (ReturnStmt 0xa952bc8 <line:189:5, col:12>
    (ImplicitCastExpr 0xa952bb8 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa952b9c <col:12> 'char *' lvalue Var 0xa952870 'res' 'char *'))))


static const char *search_ini(const char *filename, const char *match) (CompoundStmt 0xa954278 <../codeBase/fish-shell-master/mimedb.cpp:198:1, line:241:1>
  (DeclStmt 0xa952f00 <line:200:5, col:35>
    0xa952d60 "FILE *f =
      (CallExpr 0xa952eb8 <col:15, col:34> 'FILE *'
        (ImplicitCastExpr 0xa952ea8 <col:15> 'FILE *(*)(const char *restrict, const char *restrict)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa952e50 <col:15> 'FILE *(const char *restrict, const char *restrict)' lvalue Function 0xa50bcd0 'fopen' 'FILE *(const char *restrict, const char *restrict)'))
        (ImplicitCastExpr 0xa952ee0 <col:21> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa952dcc <col:21> 'const char *' lvalue ParmVar 0xa952c10 'filename' 'const char *'))
        (ImplicitCastExpr 0xa952ef0 <col:31> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa952e30 <col:31> 'const char [2]' lvalue "r")))")
  (DeclStmt 0xa952fa8 <line:201:5, col:19>
    0xa952f70 "char buf[4096]")
  (DeclStmt 0xa9530d8 <line:202:5, col:26>
    0xa952fd0 "int len =
      (ImplicitCastExpr 0xa9530c8 <col:13, col:25> 'int' <IntegralCast>
        (CallExpr 0xa953098 <col:13, col:25> 'size_t':'unsigned int'
          (ImplicitCastExpr 0xa953088 <col:13> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
            (DeclRefExpr 0xa953054 <col:13> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
          (ImplicitCastExpr 0xa9530b8 <col:20> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa95303c <col:20> 'const char *' lvalue ParmVar 0xa952c60 'match' 'const char *'))))")
  (DeclStmt 0xa953150 <line:203:5, col:17>
    0xa953100 "int done =
      (IntegerLiteral 0xa953138 <col:16> 'int' 0)")
  (IfStmt 0xa953368 <line:205:5, line:210:5>
    <<<NULL>>>
    (UnaryOperator 0xa953198 <line:205:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa953188 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa953178 <col:10> 'FILE *' <LValueToRValue>
          (DeclRefExpr 0xa953160 <col:10> 'FILE *' lvalue Var 0xa952d60 'f' 'FILE *'))))
    (CompoundStmt 0xa953348 <line:206:5, line:210:5>
      (CallExpr 0xa953298 <line:207:9, col:23> 'void'
        (ImplicitCastExpr 0xa953288 <col:9> 'void (*)(const char *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa953254 <col:9> 'void (const char *)' lvalue Function 0xa517e00 'perror' 'void (const char *)'))
        (ImplicitCastExpr 0xa9532b8 <col:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa953230 <col:16> 'const char [6]' lvalue "fopen")))
      (BinaryOperator 0xa9532f8 <line:208:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa9532c4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa9532e0 <col:15> 'int' 1))
      (ReturnStmt 0xa953338 <line:209:9, col:16>
        (ImplicitCastExpr 0xa953328 <col:16> 'const char *' <NullToPointer>
          (IntegerLiteral 0xa953310 <col:16> 'int' 0))))
    <<<NULL>>>)
  (WhileStmt 0xa953b88 <line:211:5, line:227:5>
    <<<NULL>>>
    (UnaryOperator 0xa9533c0 <line:211:12, col:13> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9533b0 <col:13> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa9533a0 <col:13> 'int' <LValueToRValue>
          (DeclRefExpr 0xa953384 <col:13> 'int' lvalue Var 0xa953100 'done' 'int'))))
    (CompoundStmt 0xa953b70 <line:212:5, line:227:5>
      (IfStmt 0xa953b50 <line:213:9, line:226:9>
        <<<NULL>>>
        (UnaryOperator 0xa953510 <line:213:13, col:32> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa953500 <col:14, col:32> '_Bool' <PointerToBoolean>
            (CallExpr 0xa9534b8 <col:14, col:32> 'char *'
              (ImplicitCastExpr 0xa9534a8 <col:14> 'char *(*)(char *restrict, int, FILE *restrict)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa953458 <col:14> 'char *(char *restrict, int, FILE *restrict)' lvalue Function 0xa514260 'fgets' 'char *(char *restrict, int, FILE *restrict)'))
              (ImplicitCastExpr 0xa9534e0 <col:20> 'char *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa95340c <col:20> 'char [4096]' lvalue Var 0xa952f70 'buf' 'char [4096]'))
              (IntegerLiteral 0xa953428 <col:25> 'int' 4096)
              (ImplicitCastExpr 0xa9534f0 <col:31> 'FILE *' <LValueToRValue>
                (DeclRefExpr 0xa953440 <col:31> 'FILE *' lvalue Var 0xa952d60 'f' 'FILE *')))))
        (CompoundStmt 0xa953840 <line:214:9, line:222:9>
          (IfStmt 0xa953740 <line:215:13, line:219:13>
            <<<NULL>>>
            (UnaryOperator 0xa953618 <line:215:17, col:24> '_Bool' prefix '!'
              (ImplicitCastExpr 0xa953608 <col:18, col:24> '_Bool' <IntegralToBoolean>
                (CallExpr 0xa9535d8 <col:18, col:24> 'int'
                  (ImplicitCastExpr 0xa9535c8 <col:18> 'int (*)(FILE *) throw()' <FunctionToPointerDecay>
                    (DeclRefExpr 0xa953574 <col:18> 'int (FILE *) throw()' lvalue Function 0xa516930 'feof' 'int (FILE *) throw()'))
                  (ImplicitCastExpr 0xa9535f8 <col:23> 'FILE *' <LValueToRValue>
                    (DeclRefExpr 0xa95355c <col:23> 'FILE *' lvalue Var 0xa952d60 'f' 'FILE *')))))
            (CompoundStmt 0xa953728 <line:216:13, line:219:13>
              (CallExpr 0xa9536b0 <line:217:17, col:31> 'void'
                (ImplicitCastExpr 0xa9536a0 <col:17> 'void (*)(const char *)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa953688 <col:17> 'void (const char *)' lvalue Function 0xa517e00 'perror' 'void (const char *)'))
                (ImplicitCastExpr 0xa9536d0 <col:24> 'const char *' <ArrayToPointerDecay>
                  (StringLiteral 0xa953664 <col:24> 'const char [6]' lvalue "fgets")))
              (BinaryOperator 0xa953710 <line:218:17, col:23> 'int' lvalue '='
                (DeclRefExpr 0xa9536dc <col:17> 'int' lvalue Var 0xa952100 'error' 'int')
                (IntegerLiteral 0xa9536f8 <col:23> 'int' 1)))
            <<<NULL>>>)
          (BinaryOperator 0xa9537e0 <line:220:13, col:20> 'char' lvalue '='
            (ArraySubscriptExpr 0xa9537a0 <col:13, col:18> 'char' lvalue
              (ImplicitCastExpr 0xa953790 <col:13> 'char *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa95375c <col:13> 'char [4096]' lvalue Var 0xa952f70 'buf' 'char [4096]'))
              (IntegerLiteral 0xa953778 <col:17> 'int' 0))
            (ImplicitCastExpr 0xa9537d0 <col:20> 'char' <IntegralCast>
              (IntegerLiteral 0xa9537b8 <col:20> 'int' 0)))
          (BinaryOperator 0xa953828 <line:221:13, col:20> 'int' lvalue '='
            (DeclRefExpr 0xa9537f8 <col:13> 'int' lvalue Var 0xa953100 'done' 'int')
            (IntegerLiteral 0xa953810 <col:20> 'int' 1)))
        (IfStmt 0xa953b30 <line:223:14, line:226:9>
          <<<NULL>>>
          (BinaryOperator 0xa953ab8 <line:223:18, col:63> '_Bool' '&&'
            (BinaryOperator 0xa9539d8 <col:18, col:46> '_Bool' '=='
              (CallExpr 0xa953948 <col:18, col:41> 'int'
                (ImplicitCastExpr 0xa953938 <col:18> 'int (*)(const char *, const char *, size_t) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa9538dc <col:18> 'int (const char *, const char *, size_t) throw()' lvalue Function 0xa4e11d0 'strncmp' 'int (const char *, const char *, size_t) throw()'))
                (ImplicitCastExpr 0xa953980 <col:26> 'const char *' <NoOp>
                  (ImplicitCastExpr 0xa953970 <col:26> 'char *' <ArrayToPointerDecay>
                    (DeclRefExpr 0xa953894 <col:26> 'char [4096]' lvalue Var 0xa952f70 'buf' 'char [4096]')))
                (ImplicitCastExpr 0xa953990 <col:31> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa9538ac <col:31> 'const char *' lvalue ParmVar 0xa952c60 'match' 'const char *'))
                (ImplicitCastExpr 0xa9539b0 <col:38> 'size_t':'unsigned int' <IntegralCast>
                  (ImplicitCastExpr 0xa9539a0 <col:38> 'int' <LValueToRValue>
                    (DeclRefExpr 0xa9538c4 <col:38> 'int' lvalue Var 0xa952fd0 'len' 'int'))))
              (IntegerLiteral 0xa9539c0 <col:46> 'int' 0))
            (BinaryOperator 0xa953aa0 <col:51, col:63> '_Bool' '=='
              (ImplicitCastExpr 0xa953a80 <col:51, col:58> 'int' <IntegralCast>
                (ImplicitCastExpr 0xa953a70 <col:51, col:58> 'char' <LValueToRValue>
                  (ArraySubscriptExpr 0xa953a40 <col:51, col:58> 'char' lvalue
                    (ImplicitCastExpr 0xa953a20 <col:51> 'char *' <ArrayToPointerDecay>
                      (DeclRefExpr 0xa9539f0 <col:51> 'char [4096]' lvalue Var 0xa952f70 'buf' 'char [4096]'))
                    (ImplicitCastExpr 0xa953a30 <col:55> 'int' <LValueToRValue>
                      (DeclRefExpr 0xa953a08 <col:55> 'int' lvalue Var 0xa952fd0 'len' 'int')))))
              (ImplicitCastExpr 0xa953a90 <col:63> 'int' <IntegralCast>
                (CharacterLiteral 0xa953a58 <col:63> 'char'61))))
          (CompoundStmt 0xa953b18 <line:224:9, line:226:9>
            (BinaryOperator 0xa953b00 <line:225:13, col:18> 'int' lvalue '='
              (DeclRefExpr 0xa953ad0 <col:13> 'int' lvalue Var 0xa953100 'done' 'int')
              (IntegerLiteral 0xa953ae8 <col:18> 'int' 1)))
          <<<NULL>>>))))
  (CallExpr 0xa953c38 <line:228:5, col:13> 'int'
    (ImplicitCastExpr 0xa953c28 <col:5> 'int (*)(FILE *)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa953bec <col:5> 'int (FILE *)' lvalue Function 0xa509290 'fclose' 'int (FILE *)'))
    (ImplicitCastExpr 0xa953c58 <col:12> 'FILE *' <LValueToRValue>
      (DeclRefExpr 0xa953bd4 <col:12> 'FILE *' lvalue Var 0xa952d60 'f' 'FILE *')))
  (IfStmt 0xa954258 <line:229:5, line:240:24>
    <<<NULL>>>
    (ImplicitCastExpr 0xa953cd0 <line:229:9, col:14> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa953cc0 <col:9, col:14> 'char' <LValueToRValue>
        (ArraySubscriptExpr 0xa953ca8 <col:9, col:14> 'char' lvalue
          (ImplicitCastExpr 0xa953c98 <col:9> 'char *' <ArrayToPointerDecay>
            (DeclRefExpr 0xa953c64 <col:9> 'char [4096]' lvalue Var 0xa952f70 'buf' 'char [4096]'))
          (IntegerLiteral 0xa953c80 <col:13> 'int' 0))))
    (CompoundStmt 0xa9541c8 <line:230:5, line:238:5>
      (DeclStmt 0xa953de0 <line:231:9, col:30>
        0xa953cf0 "char *res =
          (CallExpr 0xa953da0 <col:19, col:29> 'char *'
            (ImplicitCastExpr 0xa953d90 <col:19> 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa953d74 <col:19> 'char *(const char *) throw()' lvalue Function 0xa4e74e0 'strdup' 'char *(const char *) throw()'))
            (ImplicitCastExpr 0xa953dd0 <col:26> 'const char *' <NoOp>
              (ImplicitCastExpr 0xa953dc0 <col:26> 'char *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa953d5c <col:26> 'char [4096]' lvalue Var 0xa952f70 'buf' 'char [4096]'))))")
      (IfStmt 0xa954160 <line:232:9, line:236:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa953e18 <line:232:13> '_Bool' <PointerToBoolean>
          (ImplicitCastExpr 0xa953e08 <col:13> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa953df0 <col:13> 'char *' lvalue Var 0xa953cf0 'res' 'char *')))
        (CompoundStmt 0xa954148 <line:233:9, line:236:9>
          (IfStmt 0xa954128 <line:234:13, line:235:36>
            <<<NULL>>>
            (BinaryOperator 0xa953fa8 <line:234:17, col:37> '_Bool' '=='
              (ImplicitCastExpr 0xa953f88 <col:17, col:34> 'int' <IntegralCast>
                (ImplicitCastExpr 0xa953f78 <col:17, col:34> 'char' <LValueToRValue>
                  (ArraySubscriptExpr 0xa953f48 <col:17, col:34> 'char' lvalue
                    (ImplicitCastExpr 0xa953f38 <col:17> 'char *' <LValueToRValue>
                      (DeclRefExpr 0xa953e24 <col:17> 'char *' lvalue Var 0xa953cf0 'res' 'char *'))
                    (BinaryOperator 0xa953f20 <col:21, col:33> 'unsigned int' '-'
                      (CallExpr 0xa953eb8 <col:21, col:31> 'size_t':'unsigned int'
                        (ImplicitCastExpr 0xa953ea8 <col:21> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                          (DeclRefExpr 0xa953e8c <col:21> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                        (ImplicitCastExpr 0xa953ee8 <col:28> 'const char *' <NoOp>
                          (ImplicitCastExpr 0xa953ed8 <col:28> 'char *' <LValueToRValue>
                            (DeclRefExpr 0xa953e74 <col:28> 'char *' lvalue Var 0xa953cf0 'res' 'char *'))))
                      (ImplicitCastExpr 0xa953f10 <col:33> 'unsigned int' <IntegralCast>
                        (IntegerLiteral 0xa953ef8 <col:33> 'int' 1))))))
              (ImplicitCastExpr 0xa953f98 <col:37> 'int' <IntegralCast>
                (CharacterLiteral 0xa953f60 <col:37> 'char'10)))
            (BinaryOperator 0xa954110 <line:235:17, col:36> 'char' lvalue '='
              (ArraySubscriptExpr 0xa9540e0 <col:17, col:34> 'char' lvalue
                (ImplicitCastExpr 0xa9540d0 <col:17> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa953fc0 <col:17> 'char *' lvalue Var 0xa953cf0 'res' 'char *'))
                (BinaryOperator 0xa9540b8 <col:21, col:33> 'unsigned int' '-'
                  (CallExpr 0xa954050 <col:21, col:31> 'size_t':'unsigned int'
                    (ImplicitCastExpr 0xa954040 <col:21> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa954024 <col:21> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                    (ImplicitCastExpr 0xa954080 <col:28> 'const char *' <NoOp>
                      (ImplicitCastExpr 0xa954070 <col:28> 'char *' <LValueToRValue>
                        (DeclRefExpr 0xa95400c <col:28> 'char *' lvalue Var 0xa953cf0 'res' 'char *'))))
                  (ImplicitCastExpr 0xa9540a8 <col:33> 'unsigned int' <IntegralCast>
                    (IntegerLiteral 0xa954090 <col:33> 'int' 1))))
              (CharacterLiteral 0xa9540f8 <col:36> 'char'0))
            <<<NULL>>>))
        <<<NULL>>>)
      (ReturnStmt 0xa9541b8 <line:237:9, col:16>
        (ImplicitCastExpr 0xa9541a8 <col:16> 'const char *' <NoOp>
          (ImplicitCastExpr 0xa954198 <col:16> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa95417c <col:16> 'char *' lvalue Var 0xa953cf0 'res' 'char *')))))
    (ReturnStmt 0xa954248 <line:240:9, col:24>
      (ImplicitCastExpr 0xa954238 <col:16, col:24> 'const char *' <NoOp>
        (CStyleCastExpr 0xa954220 <col:16, col:24> 'char *' <NoOp>
          (ImplicitCastExpr 0xa954210 <col:24> 'char *' <NullToPointer>
            (IntegerLiteral 0xa9541e8 <col:24> 'int' 0)))))))


static char *file_exists(const char *dir, const char *in) (CompoundStmt 0xa955900 <../codeBase/fish-shell-master/mimedb.cpp:248:1, line:291:1>
  (DeclStmt 0xa9544e0 <line:249:5, col:30>
    0xa9543f0 "int dir_len =
      (ImplicitCastExpr 0xa9544d0 <col:19, col:29> 'int' <IntegralCast>
        (CallExpr 0xa9544a0 <col:19, col:29> 'size_t':'unsigned int'
          (ImplicitCastExpr 0xa954490 <col:19> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
            (DeclRefExpr 0xa954474 <col:19> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
          (ImplicitCastExpr 0xa9544c0 <col:26> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa95445c <col:26> 'const char *' lvalue ParmVar 0xa9542c0 'dir' 'const char *'))))")
  (DeclStmt 0xa954640 <line:250:5, col:43>
    0xa954500 "int need_sep =
      (ImplicitCastExpr 0xa954630 <col:20, col:40> 'int' <IntegralCast>
        (BinaryOperator 0xa954618 <col:20, col:40> '_Bool' '!='
          (ImplicitCastExpr 0xa9545f8 <col:20, col:35> 'int' <IntegralCast>
            (ImplicitCastExpr 0xa9545e8 <col:20, col:35> 'char' <LValueToRValue>
              (ArraySubscriptExpr 0xa9545b8 <col:20, col:35> 'const char' lvalue
                (ImplicitCastExpr 0xa9545a8 <col:20> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa954534 <col:20> 'const char *' lvalue ParmVar 0xa9542c0 'dir' 'const char *'))
                (BinaryOperator 0xa954590 <col:24, col:34> 'int' '-'
                  (ImplicitCastExpr 0xa954580 <col:24> 'int' <LValueToRValue>
                    (DeclRefExpr 0xa95454c <col:24> 'int' lvalue Var 0xa9543f0 'dir_len' 'int'))
                  (IntegerLiteral 0xa954568 <col:34> 'int' 1)))))
          (ImplicitCastExpr 0xa954608 <col:40> 'int' <IntegralCast>
            (CharacterLiteral 0xa9545d0 <col:40> 'char'47))))")
  (DeclStmt 0xa9548d0 <line:251:5, col:76>
    0xa954660 "char *filename =
      (CStyleCastExpr 0xa9548b8 <col:22, col:75> 'char *' <BitCast>
        (CallExpr 0xa954888 <col:30, col:75> 'void *'
          (ImplicitCastExpr 0xa954878 <col:30> 'void *(*)(size_t)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa954848 <col:30> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
          (BinaryOperator 0xa954830 <col:40, col:74> 'unsigned int' '+'
            (BinaryOperator 0xa9547f0 <col:40, col:70> 'unsigned int' '+'
              (ImplicitCastExpr 0xa9547e0 <col:40, col:50> 'unsigned int' <IntegralCast>
                (BinaryOperator 0xa954720 <col:40, col:50> 'int' '+'
                  (ImplicitCastExpr 0xa954700 <col:40> 'int' <LValueToRValue>
                    (DeclRefExpr 0xa9546cc <col:40> 'int' lvalue Var 0xa9543f0 'dir_len' 'int'))
                  (ImplicitCastExpr 0xa954710 <col:50> 'int' <LValueToRValue>
                    (DeclRefExpr 0xa9546e4 <col:50> 'int' lvalue Var 0xa954500 'need_sep' 'int'))))
              (CallExpr 0xa9547b0 <col:61, col:70> 'size_t':'unsigned int'
                (ImplicitCastExpr 0xa9547a0 <col:61> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa954784 <col:61> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                (ImplicitCastExpr 0xa9547d0 <col:68> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa95476c <col:68> 'const char *' lvalue ParmVar 0xa954310 'in' 'const char *'))))
            (ImplicitCastExpr 0xa954820 <col:74> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa954808 <col:74> 'int' 1)))))")
  (DeclStmt 0xa954928 <line:252:5, col:20>
    0xa9548f0 "char *replaceme")
  (DeclStmt 0xa954dc8 <line:253:5, col:20>
    0xa954950 "struct stat buf =
      (CXXConstructExpr 0xa954da8 <col:17> 'struct stat':'struct stat''void (void) throw()')")
  (IfStmt 0xa954e78 <line:257:5, line:260:5>
    <<<NULL>>>
    (UnaryOperator 0xa954e10 <line:257:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa954e00 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa954df0 <col:10> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa954dd8 <col:10> 'char *' lvalue Var 0xa954660 'filename' 'char *'))))
    (CompoundStmt 0xa954e60 <line:258:5, line:260:5>
      (ReturnStmt 0xa954e50 <line:259:9, col:16>
        (ImplicitCastExpr 0xa954e40 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa954e28 <col:16> 'int' 0))))
    <<<NULL>>>)
  (CallExpr 0xa954f68 <line:261:5, col:25> 'char *'
    (ImplicitCastExpr 0xa954f58 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa954efc <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0760 'strcpy' 'char *(char *restrict, const char *restrict) throw()'))
    (ImplicitCastExpr 0xa954f90 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa954ecc <col:12> 'char *' lvalue Var 0xa954660 'filename' 'char *'))
    (ImplicitCastExpr 0xa954fa0 <col:22> 'const char *' <LValueToRValue>
      (DeclRefExpr 0xa954ee4 <col:22> 'const char *' lvalue ParmVar 0xa9542c0 'dir' 'const char *')))
  (IfStmt 0xa955088 <line:262:5, line:263:31>
    <<<NULL>>>
    (ImplicitCastExpr 0xa954fd8 <line:262:9> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa954fc8 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa954fac <col:9> 'int' lvalue Var 0xa954500 'need_sep' 'int')))
    (BinaryOperator 0xa955070 <line:263:9, col:31> 'char' lvalue '='
      (ArraySubscriptExpr 0xa955040 <col:9, col:27> 'char' lvalue
        (ImplicitCastExpr 0xa955030 <col:9> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa954fe4 <col:9> 'char *' lvalue Var 0xa954660 'filename' 'char *'))
        (UnaryOperator 0xa955018 <col:18, col:25> 'int' postfix '++'
          (DeclRefExpr 0xa954ffc <col:18> 'int' lvalue Var 0xa9543f0 'dir_len' 'int')))
      (CharacterLiteral 0xa955058 <col:31> 'char'47))
    <<<NULL>>>)
  (CallExpr 0xa955188 <line:264:5, col:34> 'char *'
    (ImplicitCastExpr 0xa955178 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa955160 <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0760 'strcpy' 'char *(char *restrict, const char *restrict) throw()'))
    (BinaryOperator 0xa955130 <col:12, col:23> 'char *' '+'
      (ImplicitCastExpr 0xa955110 <col:12> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa9550dc <col:12> 'char *' lvalue Var 0xa954660 'filename' 'char *'))
      (ImplicitCastExpr 0xa955120 <col:23> 'int' <LValueToRValue>
        (DeclRefExpr 0xa9550f4 <col:23> 'int' lvalue Var 0xa9543f0 'dir_len' 'int')))
    (ImplicitCastExpr 0xa9551b0 <col:32> 'const char *' <LValueToRValue>
      (DeclRefExpr 0xa955148 <col:32> 'const char *' lvalue ParmVar 0xa954310 'in' 'const char *')))
  (IfStmt 0xa955350 <line:266:5, line:267:16>
    <<<NULL>>>
    (UnaryOperator 0xa955300 <line:266:9, col:29> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9552f0 <col:10, col:29> '_Bool' <IntegralToBoolean>
        (CallExpr 0xa9552a8 <col:10, col:29> 'int'
          (ImplicitCastExpr 0xa955298 <col:10> 'int (*)(const char *restrict, struct stat *restrict) throw()' <FunctionToPointerDecay>
            (DeclRefExpr 0xa95523c <col:10> 'int (const char *restrict, struct stat *restrict) throw()' lvalue Function 0xa559ac0 'stat' 'int (const char *restrict, struct stat *restrict) throw()'))
          (ImplicitCastExpr 0xa9552e0 <col:15> 'const char *' <NoOp>
            (ImplicitCastExpr 0xa9552d0 <col:15> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa9551f4 <col:15> 'char *' lvalue Var 0xa954660 'filename' 'char *')))
          (UnaryOperator 0xa955228 <col:25, col:26> 'struct stat *' prefix '&'
            (DeclRefExpr 0xa95520c <col:26> 'struct stat':'struct stat' lvalue Var 0xa954950 'buf' 'struct stat':'struct stat')))))
    (ReturnStmt 0xa955340 <line:267:9, col:16>
      (ImplicitCastExpr 0xa955330 <col:16> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa955314 <col:16> 'char *' lvalue Var 0xa954660 'filename' 'char *')))
    <<<NULL>>>)
  (CallExpr 0xa955408 <line:269:5, col:18> 'void'
    (ImplicitCastExpr 0xa9553f8 <col:5> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9553bc <col:5> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
    (ImplicitCastExpr 0xa955438 <col:10> 'void *' <BitCast>
      (ImplicitCastExpr 0xa955428 <col:10> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa9553a4 <col:10> 'char *' lvalue Var 0xa954660 'filename' 'char *'))))
  (BinaryOperator 0xa955598 <line:276:5, col:50> 'char *' lvalue '='
    (DeclRefExpr 0xa955444 <col:5> 'char *' lvalue Var 0xa9548f0 'replaceme' 'char *')
    (CXXConstCastExpr 0xa955580 <col:17, col:50> 'char *' const_cast<char *> <NoOp>
      (CallExpr 0xa955528 <col:35, col:49> 'char *'
        (ImplicitCastExpr 0xa955518 <col:35> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9554c4 <col:35> 'char *(const char *, int) throw()' lvalue Function 0xa4e7890 'strchr' 'char *(const char *, int) throw()'))
        (ImplicitCastExpr 0xa955550 <col:42> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa955494 <col:42> 'const char *' lvalue ParmVar 0xa954310 'in' 'const char *'))
        (ImplicitCastExpr 0xa955560 <col:46> 'int' <IntegralCast>
          (CharacterLiteral 0xa9554b0 <col:46> 'char'45)))))
  (IfStmt 0xa9558a8 <line:277:5, line:285:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa9555d8 <line:277:9> '_Bool' <PointerToBoolean>
      (ImplicitCastExpr 0xa9555c8 <col:9> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa9555b0 <col:9> 'char *' lvalue Var 0xa9548f0 'replaceme' 'char *')))
    (CompoundStmt 0xa955880 <line:278:5, line:285:5>
      (DeclStmt 0xa955638 <line:279:9, col:18>
        0xa955600 "char *res")
      (BinaryOperator 0xa9556a0 <line:281:9, col:22> 'char' lvalue '='
        (UnaryOperator 0xa955670 <col:9, col:10> 'char' lvalue prefix '*'
          (ImplicitCastExpr 0xa955660 <col:10> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa955648 <col:10> 'char *' lvalue Var 0xa9548f0 'replaceme' 'char *')))
        (CharacterLiteral 0xa955688 <col:22> 'char'47))
      (BinaryOperator 0xa9557c0 <line:282:9, col:34> 'char *' lvalue '='
        (DeclRefExpr 0xa9556b8 <col:9> 'char *' lvalue Var 0xa955600 'res' 'char *')
        (CallExpr 0xa955778 <col:15, col:34> 'char *'
          (ImplicitCastExpr 0xa955768 <col:15> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa955734 <col:15> 'char *(const char *, const char *)' lvalue Function 0xa954370 'file_exists' 'char *(const char *, const char *)'))
          (ImplicitCastExpr 0xa9557a0 <col:27> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa955704 <col:27> 'const char *' lvalue ParmVar 0xa9542c0 'dir' 'const char *'))
          (ImplicitCastExpr 0xa9557b0 <col:32> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa95571c <col:32> 'const char *' lvalue ParmVar 0xa954310 'in' 'const char *'))))
      (BinaryOperator 0xa955830 <line:283:9, col:22> 'char' lvalue '='
        (UnaryOperator 0xa955800 <col:9, col:10> 'char' lvalue prefix '*'
          (ImplicitCastExpr 0xa9557f0 <col:10> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa9557d8 <col:10> 'char *' lvalue Var 0xa9548f0 'replaceme' 'char *')))
        (CharacterLiteral 0xa955818 <col:22> 'char'45))
      (ReturnStmt 0xa955870 <line:284:9, col:16>
        (ImplicitCastExpr 0xa955860 <col:16> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa955848 <col:16> 'char *' lvalue Var 0xa955600 'res' 'char *'))))
    <<<NULL>>>)
  (ReturnStmt 0xa9558f0 <line:290:5, col:12>
    (ImplicitCastExpr 0xa9558e0 <col:12> 'char *' <NullToPointer>
      (IntegerLiteral 0xa9558c8 <col:12> 'int' 0))))


static int append_filenames(string_list_t &list, const char *f, int all) (CompoundStmt 0xa96a108 <../codeBase/fish-shell-master/mimedb.cpp:305:1, line:395:1>
  (DeclStmt 0xa967ac8 <line:306:5, col:36>
    0xa955b90 "size_t prev_count =
      (CXXMemberCallExpr 0xa967a80 <col:25, col:35> 'size_type':'unsigned int'
        (MemberExpr 0xa967a5c <col:25, col:30> '<bound member function type>' .size 0xa9613f0
          (ImplicitCastExpr 0xa967ab8 <col:25> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue <NoOp>
            (DeclRefExpr 0xa955bc4 <col:25> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa9559b0 'list' 'string_list_t &'))))")
  (DeclStmt 0xa967b28 <line:307:5, col:17>
    0xa967af0 "char *result")
  (DeclStmt 0xa967b88 <line:308:5, col:30>
    0xa967b50 "const char *xdg_data_home")
  (DeclStmt 0xa967be8 <line:309:5, col:30>
    0xa967bb0 "const char *xdg_data_dirs")
  (DeclStmt 0xa967c48 <line:310:5, col:20>
    0xa967c10 "const char *ptr")
  (BinaryOperator 0xa967d38 <line:312:5, col:43> 'const char *' lvalue '='
    (DeclRefExpr 0xa967c58 <col:5> 'const char *' lvalue Var 0xa967b50 'xdg_data_home' 'const char *')
    (ImplicitCastExpr 0xa967d28 <col:21, col:43> 'const char *' <NoOp>
      (CallExpr 0xa967cf8 <col:21, col:43> 'char *'
        (ImplicitCastExpr 0xa967ce8 <col:21> 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa967cd0 <col:21> 'char *(const char *) throw()' lvalue Function 0xa54c020 'getenv' 'char *(const char *) throw()'))
        (ImplicitCastExpr 0xa967d18 <col:28> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa967ca4 <col:28> 'const char [14]' lvalue "XDG_DATA_HOME")))))
  (IfStmt 0xa968f98 <line:313:5, line:348:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa967d78 <line:313:9> '_Bool' <PointerToBoolean>
      (ImplicitCastExpr 0xa967d68 <col:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa967d50 <col:9> 'const char *' lvalue Var 0xa967b50 'xdg_data_home' 'const char *')))
    (CompoundStmt 0xa968348 <line:314:5, line:322:5>
      (BinaryOperator 0xa967e78 <line:315:9, col:46> 'char *' lvalue '='
        (DeclRefExpr 0xa967d84 <col:9> 'char *' lvalue Var 0xa967af0 'result' 'char *')
        (CallExpr 0xa967e30 <col:18, col:46> 'char *'
          (ImplicitCastExpr 0xa967e20 <col:18> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa967e04 <col:18> 'char *(const char *, const char *)' lvalue Function 0xa954370 'file_exists' 'char *(const char *, const char *)'))
          (ImplicitCastExpr 0xa967e58 <col:30> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa967dd4 <col:30> 'const char *' lvalue Var 0xa967b50 'xdg_data_home' 'const char *'))
          (ImplicitCastExpr 0xa967e68 <col:45> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa967dec <col:45> 'const char *' lvalue ParmVar 0xa955a00 'f' 'const char *'))))
      (IfStmt 0xa968328 <line:316:9, line:321:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa967eb8 <line:316:13> '_Bool' <PointerToBoolean>
          (ImplicitCastExpr 0xa967ea8 <col:13> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa967e90 <col:13> 'char *' lvalue Var 0xa967af0 'result' 'char *')))
        (CompoundStmt 0xa968310 <line:317:9, line:321:9>
          (ExprWithCleanups 0xa968258 <line:318:13, col:34> 'void'
            (CXXTemporary 0xa967fb0)
            (CXXTemporary 0xa968230)
            (CXXMemberCallExpr 0xa967f18 <col:13, col:34> 'void'
              (MemberExpr 0xa967edc <col:13, col:18> '<bound member function type>' .push_back 0xa962af0
                (DeclRefExpr 0xa967ec4 <col:13> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa9559b0 'list' 'string_list_t &'))
              (MaterializeTemporaryExpr 0xa968248 <col:28> 'const value_type':'const class std::basic_string<char>' lvalue
                (CXXBindTemporaryExpr 0xa968238 <col:28> 'const value_type':'const class std::basic_string<char>' (CXXTemporary 0xa968230)
                  (CXXConstructExpr 0xa968208 <col:28> 'const value_type':'const class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                    (ImplicitCastExpr 0xa967f68 <col:28> 'const char *' <NoOp>
                      (ImplicitCastExpr 0xa967f58 <col:28> 'char *' <LValueToRValue>
                        (DeclRefExpr 0xa967efc <col:28> 'char *' lvalue Var 0xa967af0 'result' 'char *')))
                    (CXXDefaultArgExpr 0xa9681f0 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))
          (IfStmt 0xa9682f0 <line:319:13, line:320:24>
            <<<NULL>>>
            (UnaryOperator 0xa9682b0 <line:319:17, col:18> '_Bool' prefix '!'
              (ImplicitCastExpr 0xa9682a0 <col:18> '_Bool' <IntegralToBoolean>
                (ImplicitCastExpr 0xa968290 <col:18> 'int' <LValueToRValue>
                  (DeclRefExpr 0xa968278 <col:18> 'int' lvalue ParmVar 0xa955a50 'all' 'int'))))
            (ReturnStmt 0xa9682e0 <line:320:17, col:24>
              (IntegerLiteral 0xa9682c8 <col:24> 'int' 1))
            <<<NULL>>>))
        <<<NULL>>>))
    (CompoundStmt 0xa968f78 <line:324:5, line:348:5>
      (DeclStmt 0xa9683a8 <line:325:9, col:25>
        0xa968370 "const char *home")
      (BinaryOperator 0xa9684d8 <line:327:9, col:29> 'const char *' lvalue '='
        (DeclRefExpr 0xa9683b8 <col:9> 'const char *' lvalue Var 0xa968370 'home' 'const char *')
        (ImplicitCastExpr 0xa9684c8 <col:16, col:29> 'const char *' <NoOp>
          (CallExpr 0xa968498 <col:16, col:29> 'char *'
            (ImplicitCastExpr 0xa968488 <col:16> 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa968470 <col:16> 'char *(const char *) throw()' lvalue Function 0xa54c020 'getenv' 'char *(const char *) throw()'))
            (ImplicitCastExpr 0xa9684b8 <col:23> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa968450 <col:23> 'const char [5]' lvalue "HOME")))))
      (IfStmt 0xa968f58 <line:328:9, line:347:9>
        <<<NULL>>>
        (BinaryOperator 0xa968540 <line:328:13, /usr/include/linux/stddef.h:8:14> '_Bool' '!='
          (ImplicitCastExpr 0xa968520 <../codeBase/fish-shell-master/mimedb.cpp:328:13> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9684f0 <col:13> 'const char *' lvalue Var 0xa968370 'home' 'const char *'))
          (ImplicitCastExpr 0xa968530 </usr/include/linux/stddef.h:8:14> 'const char *' <NullToPointer>
            (IntegerLiteral 0xa968508 <col:14> 'int' 0)))
        (CompoundStmt 0xa968f28 <../codeBase/fish-shell-master/mimedb.cpp:329:9, line:347:9>
          (DeclStmt 0xa9685a8 <line:330:13, col:35>
            0xa968570 "char *guessed_xdg_home")
          (BinaryOperator 0xa968830 <line:332:13, col:92> 'char *' lvalue '='
            (DeclRefExpr 0xa9685b8 <col:13> 'char *' lvalue Var 0xa968570 'guessed_xdg_home' 'char *')
            (CStyleCastExpr 0xa968818 <col:32, col:92> 'char *' <BitCast>
              (CallExpr 0xa9687e8 <col:40, col:92> 'void *'
                (ImplicitCastExpr 0xa9687d8 <col:40> 'void *(*)(size_t)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa9687c0 <col:40> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
                (BinaryOperator 0xa9687a8 <col:50, col:91> 'unsigned int' '+'
                  (BinaryOperator 0xa968768 <col:50, col:87> 'unsigned int' '+'
                    (CallExpr 0xa968680 <col:50, col:61> 'size_t':'unsigned int'
                      (ImplicitCastExpr 0xa968670 <col:50> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                        (DeclRefExpr 0xa968654 <col:50> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                      (ImplicitCastExpr 0xa9686a0 <col:57> 'const char *' <LValueToRValue>
                        (DeclRefExpr 0xa96863c <col:57> 'const char *' lvalue Var 0xa968370 'home' 'const char *')))
                    (CallExpr 0xa968738 <col:65, col:87> 'size_t':'unsigned int'
                      (ImplicitCastExpr 0xa968728 <col:65> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                        (DeclRefExpr 0xa968710 <col:65> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                      (ImplicitCastExpr 0xa968758 <col:72> 'const char *' <ArrayToPointerDecay>
                        (StringLiteral 0xa9686e4 <col:72> 'const char [14]' lvalue "/.local/share"))))
                  (ImplicitCastExpr 0xa968798 <col:91> 'unsigned int' <IntegralCast>
                    (IntegerLiteral 0xa968780 <col:91> 'int' 1))))))
          (IfStmt 0xa9688c0 <line:333:13, line:334:24>
            <<<NULL>>>
            (UnaryOperator 0xa968880 <line:333:17, col:18> '_Bool' prefix '!'
              (ImplicitCastExpr 0xa968870 <col:18> '_Bool' <PointerToBoolean>
                (ImplicitCastExpr 0xa968860 <col:18> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa968848 <col:18> 'char *' lvalue Var 0xa968570 'guessed_xdg_home' 'char *'))))
            (ReturnStmt 0xa9688b0 <line:334:17, col:24>
              (IntegerLiteral 0xa968898 <col:24> 'int' 0))
            <<<NULL>>>)
          (CallExpr 0xa968970 <line:336:13, col:42> 'char *'
            (ImplicitCastExpr 0xa968960 <col:13> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa968944 <col:13> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0760 'strcpy' 'char *(char *restrict, const char *restrict) throw()'))
            (ImplicitCastExpr 0xa968998 <col:20> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa968914 <col:20> 'char *' lvalue Var 0xa968570 'guessed_xdg_home' 'char *'))
            (ImplicitCastExpr 0xa9689a8 <col:38> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xa96892c <col:38> 'const char *' lvalue Var 0xa968370 'home' 'const char *')))
          (CallExpr 0xa968a58 <line:337:13, col:53> 'char *'
            (ImplicitCastExpr 0xa968a48 <col:13> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa968a30 <col:13> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0b60 'strcat' 'char *(char *restrict, const char *restrict) throw()'))
            (ImplicitCastExpr 0xa968a80 <col:20> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa9689ec <col:20> 'char *' lvalue Var 0xa968570 'guessed_xdg_home' 'char *'))
            (ImplicitCastExpr 0xa968a90 <col:38> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa968a04 <col:38> 'const char [14]' lvalue "/.local/share")))
          (BinaryOperator 0xa968ba0 <line:338:13, col:53> 'char *' lvalue '='
            (DeclRefExpr 0xa968a9c <col:13> 'char *' lvalue Var 0xa967af0 'result' 'char *')
            (CallExpr 0xa968b48 <col:22, col:53> 'char *'
              (ImplicitCastExpr 0xa968b38 <col:22> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa968b1c <col:22> 'char *(const char *, const char *)' lvalue Function 0xa954370 'file_exists' 'char *(const char *, const char *)'))
              (ImplicitCastExpr 0xa968b80 <col:34> 'const char *' <NoOp>
                (ImplicitCastExpr 0xa968b70 <col:34> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa968aec <col:34> 'char *' lvalue Var 0xa968570 'guessed_xdg_home' 'char *')))
              (ImplicitCastExpr 0xa968b90 <col:52> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xa968b04 <col:52> 'const char *' lvalue ParmVar 0xa955a00 'f' 'const char *'))))
          (CallExpr 0xa968c30 <line:339:13, col:34> 'void'
            (ImplicitCastExpr 0xa968c20 <col:13> 'void (*)(void *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa968c04 <col:13> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
            (ImplicitCastExpr 0xa968c60 <col:18> 'void *' <BitCast>
              (ImplicitCastExpr 0xa968c50 <col:18> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa968bec <col:18> 'char *' lvalue Var 0xa968570 'guessed_xdg_home' 'char *'))))
          (IfStmt 0xa968f08 <line:341:13, line:346:13>
            <<<NULL>>>
            (ImplicitCastExpr 0xa968c98 <line:341:17> '_Bool' <PointerToBoolean>
              (ImplicitCastExpr 0xa968c88 <col:17> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa968c6c <col:17> 'char *' lvalue Var 0xa967af0 'result' 'char *')))
            (CompoundStmt 0xa968ef0 <line:342:13, line:346:13>
              (ExprWithCleanups 0xa968e38 <line:343:17, col:38> 'void'
                (CXXTemporary 0xa968d70)
                (CXXTemporary 0xa968e10)
                (CXXMemberCallExpr 0xa968cf8 <col:17, col:38> 'void'
                  (MemberExpr 0xa968cbc <col:17, col:22> '<bound member function type>' .push_back 0xa962af0
                    (DeclRefExpr 0xa968ca4 <col:17> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa9559b0 'list' 'string_list_t &'))
                  (MaterializeTemporaryExpr 0xa968e28 <col:32> 'const value_type':'const class std::basic_string<char>' lvalue
                    (CXXBindTemporaryExpr 0xa968e18 <col:32> 'const value_type':'const class std::basic_string<char>' (CXXTemporary 0xa968e10)
                      (CXXConstructExpr 0xa968de8 <col:32> 'const value_type':'const class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                        (ImplicitCastExpr 0xa968d28 <col:32> 'const char *' <NoOp>
                          (ImplicitCastExpr 0xa968d18 <col:32> 'char *' <LValueToRValue>
                            (DeclRefExpr 0xa968cdc <col:32> 'char *' lvalue Var 0xa967af0 'result' 'char *')))
                        (CXXDefaultArgExpr 0xa968dd0 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))
              (IfStmt 0xa968ed0 <line:344:17, line:345:28>
                <<<NULL>>>
                (UnaryOperator 0xa968e90 <line:344:21, col:22> '_Bool' prefix '!'
                  (ImplicitCastExpr 0xa968e80 <col:22> '_Bool' <IntegralToBoolean>
                    (ImplicitCastExpr 0xa968e70 <col:22> 'int' <LValueToRValue>
                      (DeclRefExpr 0xa968e58 <col:22> 'int' lvalue ParmVar 0xa955a50 'all' 'int'))))
                (ReturnStmt 0xa968ec0 <line:345:21, col:28>
                  (IntegerLiteral 0xa968ea8 <col:28> 'int' 1))
                <<<NULL>>>))
            <<<NULL>>>))
        <<<NULL>>>)))
  (BinaryOperator 0xa969098 <line:350:5, col:43> 'const char *' lvalue '='
    (DeclRefExpr 0xa968fb4 <col:5> 'const char *' lvalue Var 0xa967bb0 'xdg_data_dirs' 'const char *')
    (ImplicitCastExpr 0xa969088 <col:21, col:43> 'const char *' <NoOp>
      (CallExpr 0xa969058 <col:21, col:43> 'char *'
        (ImplicitCastExpr 0xa969048 <col:21> 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa969030 <col:21> 'char *(const char *) throw()' lvalue Function 0xa54c020 'getenv' 'char *(const char *) throw()'))
        (ImplicitCastExpr 0xa969078 <col:28> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa969004 <col:28> 'const char [14]' lvalue "XDG_DATA_DIRS")))))
  (IfStmt 0xa969190 <line:351:5, line:352:25>
    <<<NULL>>>
    (BinaryOperator 0xa969100 <line:351:9, /usr/include/linux/stddef.h:8:14> '_Bool' '=='
      (ImplicitCastExpr 0xa9690e0 <../codeBase/fish-shell-master/mimedb.cpp:351:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa9690b0 <col:9> 'const char *' lvalue Var 0xa967bb0 'xdg_data_dirs' 'const char *'))
      (ImplicitCastExpr 0xa9690f0 </usr/include/linux/stddef.h:8:14> 'const char *' <NullToPointer>
        (IntegerLiteral 0xa9690c8 <col:14> 'int' 0)))
    (BinaryOperator 0xa969178 <../codeBase/fish-shell-master/mimedb.cpp:352:9, col:25> 'const char *' lvalue '='
      (DeclRefExpr 0xa969118 <col:9> 'const char *' lvalue Var 0xa967bb0 'xdg_data_dirs' 'const char *')
      (ImplicitCastExpr 0xa969168 <col:25> 'const char *' <ArrayToPointerDecay>
        (StringLiteral 0xa969130 <col:25> 'const char [28]' lvalue "/usr/local/share:/usr/share")))
    <<<NULL>>>)
  (BinaryOperator 0xa9691f0 <line:354:5, col:11> 'const char *' lvalue '='
    (DeclRefExpr 0xa9691ac <col:5> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *')
    (ImplicitCastExpr 0xa9691e0 <col:11> 'const char *' <LValueToRValue>
      (DeclRefExpr 0xa9691c4 <col:11> 'const char *' lvalue Var 0xa967bb0 'xdg_data_dirs' 'const char *')))
  (WhileStmt 0xa96a028 <line:356:5, line:393:5>
    <<<NULL>>>
    (BinaryOperator 0xa969290 <line:356:12, col:20> '_Bool' '!='
      (ImplicitCastExpr 0xa969270 <col:12, col:13> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa969260 <col:12, col:13> 'char' <LValueToRValue>
          (UnaryOperator 0xa969230 <col:12, col:13> 'const char' lvalue prefix '*'
            (ImplicitCastExpr 0xa969220 <col:13> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xa969208 <col:13> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *')))))
      (ImplicitCastExpr 0xa969280 <col:20> 'int' <IntegralCast>
        (CharacterLiteral 0xa969248 <col:20> 'char'0)))
    (CompoundStmt 0xa969fd8 <line:357:5, line:393:5>
      (DeclStmt 0xa9692f8 <line:358:9, col:28>
        0xa9692c0 "const char *end_ptr")
      (DeclStmt 0xa969358 <line:359:9, col:18>
        0xa969320 "char *dir")
      (DeclStmt 0xa9693b8 <line:360:9, col:16>
        0xa969380 "int len")
      (BinaryOperator 0xa969408 <line:362:9, col:19> 'const char *' lvalue '='
        (DeclRefExpr 0xa9693c8 <col:9> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *')
        (ImplicitCastExpr 0xa9693f8 <col:19> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa9693e0 <col:19> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *')))
      (WhileStmt 0xa9695a8 <line:363:9, line:364:21>
        <<<NULL>>>
        (BinaryOperator 0xa969560 <line:363:16, col:47> '_Bool' '&&'
          (BinaryOperator 0xa9694a8 <col:16, col:28> '_Bool' '!='
            (ImplicitCastExpr 0xa969488 <col:16, col:17> 'int' <IntegralCast>
              (ImplicitCastExpr 0xa969478 <col:16, col:17> 'char' <LValueToRValue>
                (UnaryOperator 0xa969448 <col:16, col:17> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0xa969438 <col:17> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xa969420 <col:17> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *')))))
            (ImplicitCastExpr 0xa969498 <col:28> 'int' <IntegralCast>
              (CharacterLiteral 0xa969460 <col:28> 'char'58)))
          (BinaryOperator 0xa969548 <col:35, col:47> '_Bool' '!='
            (ImplicitCastExpr 0xa969528 <col:35, col:36> 'int' <IntegralCast>
              (ImplicitCastExpr 0xa969518 <col:35, col:36> 'char' <LValueToRValue>
                (UnaryOperator 0xa9694e8 <col:35, col:36> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0xa9694d8 <col:36> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xa9694c0 <col:36> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *')))))
            (ImplicitCastExpr 0xa969538 <col:47> 'int' <IntegralCast>
              (CharacterLiteral 0xa969500 <col:47> 'char'0))))
        (UnaryOperator 0xa969590 <line:364:13, col:21> 'const char *' postfix '++'
          (DeclRefExpr 0xa969578 <col:13> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *')))
      (IfStmt 0xa969678 <line:366:9, line:370:9>
        <<<NULL>>>
        (BinaryOperator 0xa969610 <line:366:13, col:24> '_Bool' '=='
          (ImplicitCastExpr 0xa9695f0 <col:13> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9695bc <col:13> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *'))
          (ImplicitCastExpr 0xa969600 <col:24> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9695d4 <col:24> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *')))
        (CompoundStmt 0xa969660 <line:367:9, line:370:9>
          (UnaryOperator 0xa969640 <line:368:13, col:16> 'const char *' postfix '++'
            (DeclRefExpr 0xa969628 <col:13> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *'))
          (ContinueStmt 0xa969658 <line:369:13>))
        <<<NULL>>>)
      (BinaryOperator 0xa969718 <line:372:9, col:25> 'int' lvalue '='
        (DeclRefExpr 0xa969694 <col:9> 'int' lvalue Var 0xa969380 'len' 'int')
        (BinaryOperator 0xa969700 <col:15, col:25> 'int' '-'
          (ImplicitCastExpr 0xa9696e0 <col:15> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9696ac <col:15> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *'))
          (ImplicitCastExpr 0xa9696f0 <col:25> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9696c4 <col:25> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *'))))
      (BinaryOperator 0xa969858 <line:373:9, col:40> 'char *' lvalue '='
        (DeclRefExpr 0xa969730 <col:9> 'char *' lvalue Var 0xa969320 'dir' 'char *')
        (CStyleCastExpr 0xa969840 <col:15, col:40> 'char *' <BitCast>
          (CallExpr 0xa969800 <col:23, col:40> 'void *'
            (ImplicitCastExpr 0xa9697f0 <col:23> 'void *(*)(size_t)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9697d8 <col:23> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
            (ImplicitCastExpr 0xa969820 <col:33, col:39> 'size_t':'unsigned int' <IntegralCast>
              (BinaryOperator 0xa9697c0 <col:33, col:39> 'int' '+'
                (ImplicitCastExpr 0xa9697b0 <col:33> 'int' <LValueToRValue>
                  (DeclRefExpr 0xa96977c <col:33> 'int' lvalue Var 0xa969380 'len' 'int'))
                (IntegerLiteral 0xa969798 <col:39> 'int' 1))))))
      (IfStmt 0xa9698e8 <line:374:9, line:375:20>
        <<<NULL>>>
        (UnaryOperator 0xa9698a8 <line:374:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa969898 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xa969888 <col:14> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa969870 <col:14> 'char *' lvalue Var 0xa969320 'dir' 'char *'))))
        (ReturnStmt 0xa9698d8 <line:375:13, col:20>
          (IntegerLiteral 0xa9698c0 <col:20> 'int' 0))
        <<<NULL>>>)
      (CallExpr 0xa9699e8 <line:377:9, col:30> 'char *'
        (ImplicitCastExpr 0xa9699d8 <col:9> 'char *(*)(char *restrict, const char *restrict, size_t) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa969984 <col:9> 'char *(char *restrict, const char *restrict, size_t) throw()' lvalue Function 0xa4e09b0 'strncpy' 'char *(char *restrict, const char *restrict, size_t) throw()'))
        (ImplicitCastExpr 0xa969a10 <col:17> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa96993c <col:17> 'char *' lvalue Var 0xa969320 'dir' 'char *'))
        (ImplicitCastExpr 0xa969a20 <col:22> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa969954 <col:22> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *'))
        (ImplicitCastExpr 0xa969a40 <col:27> 'size_t':'unsigned int' <IntegralCast>
          (ImplicitCastExpr 0xa969a30 <col:27> 'int' <LValueToRValue>
            (DeclRefExpr 0xa96996c <col:27> 'int' lvalue Var 0xa969380 'len' 'int'))))
      (BinaryOperator 0xa969ad0 <line:378:9, col:20> 'char' lvalue '='
        (ArraySubscriptExpr 0xa969aa0 <col:9, col:16> 'char' lvalue
          (ImplicitCastExpr 0xa969a80 <col:9> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa969a4c <col:9> 'char *' lvalue Var 0xa969320 'dir' 'char *'))
          (ImplicitCastExpr 0xa969a90 <col:13> 'int' <LValueToRValue>
            (DeclRefExpr 0xa969a64 <col:13> 'int' lvalue Var 0xa969380 'len' 'int')))
        (CharacterLiteral 0xa969ab8 <col:20> 'char'0))
      (BinaryOperator 0xa969be8 <line:379:9, col:36> 'char *' lvalue '='
        (DeclRefExpr 0xa969ae8 <col:9> 'char *' lvalue Var 0xa967af0 'result' 'char *')
        (CallExpr 0xa969b90 <col:18, col:36> 'char *'
          (ImplicitCastExpr 0xa969b80 <col:18> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa969b64 <col:18> 'char *(const char *, const char *)' lvalue Function 0xa954370 'file_exists' 'char *(const char *, const char *)'))
          (ImplicitCastExpr 0xa969bc8 <col:30> 'const char *' <NoOp>
            (ImplicitCastExpr 0xa969bb8 <col:30> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa969b34 <col:30> 'char *' lvalue Var 0xa969320 'dir' 'char *')))
          (ImplicitCastExpr 0xa969bd8 <col:35> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa969b4c <col:35> 'const char *' lvalue ParmVar 0xa955a00 'f' 'const char *'))))
      (CallExpr 0xa969c78 <line:381:9, col:17> 'void'
        (ImplicitCastExpr 0xa969c68 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa969c4c <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (ImplicitCastExpr 0xa969ca8 <col:14> 'void *' <BitCast>
          (ImplicitCastExpr 0xa969c98 <col:14> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa969c34 <col:14> 'char *' lvalue Var 0xa969320 'dir' 'char *'))))
      (IfStmt 0xa969f60 <line:383:9, line:390:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa969ce0 <line:383:13> '_Bool' <PointerToBoolean>
          (ImplicitCastExpr 0xa969cd0 <col:13> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa969cb4 <col:13> 'char *' lvalue Var 0xa967af0 'result' 'char *')))
        (CompoundStmt 0xa969f48 <line:384:9, line:390:9>
          (ExprWithCleanups 0xa969e78 <line:385:13, col:34> 'void'
            (CXXTemporary 0xa969db0)
            (CXXTemporary 0xa969e50)
            (CXXMemberCallExpr 0xa969d40 <col:13, col:34> 'void'
              (MemberExpr 0xa969d04 <col:13, col:18> '<bound member function type>' .push_back 0xa962af0
                (DeclRefExpr 0xa969cec <col:13> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa9559b0 'list' 'string_list_t &'))
              (MaterializeTemporaryExpr 0xa969e68 <col:28> 'const value_type':'const class std::basic_string<char>' lvalue
                (CXXBindTemporaryExpr 0xa969e58 <col:28> 'const value_type':'const class std::basic_string<char>' (CXXTemporary 0xa969e50)
                  (CXXConstructExpr 0xa969e28 <col:28> 'const value_type':'const class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                    (ImplicitCastExpr 0xa969d70 <col:28> 'const char *' <NoOp>
                      (ImplicitCastExpr 0xa969d60 <col:28> 'char *' <LValueToRValue>
                        (DeclRefExpr 0xa969d24 <col:28> 'char *' lvalue Var 0xa967af0 'result' 'char *')))
                    (CXXDefaultArgExpr 0xa969e10 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))
          (IfStmt 0xa969f28 <line:386:13, line:389:13>
            <<<NULL>>>
            (UnaryOperator 0xa969ed0 <line:386:17, col:18> '_Bool' prefix '!'
              (ImplicitCastExpr 0xa969ec0 <col:18> '_Bool' <IntegralToBoolean>
                (ImplicitCastExpr 0xa969eb0 <col:18> 'int' <LValueToRValue>
                  (DeclRefExpr 0xa969e98 <col:18> 'int' lvalue ParmVar 0xa955a50 'all' 'int'))))
            (CompoundStmt 0xa969f10 <line:387:13, line:389:13>
              (ReturnStmt 0xa969f00 <line:388:17, col:24>
                (IntegerLiteral 0xa969ee8 <col:24> 'int' 1)))
            <<<NULL>>>))
        <<<NULL>>>)
      (BinaryOperator 0xa969fc0 <line:392:9, col:15> 'const char *' lvalue '='
        (DeclRefExpr 0xa969f7c <col:9> 'const char *' lvalue Var 0xa967c10 'ptr' 'const char *')
        (ImplicitCastExpr 0xa969fb0 <col:15> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa969f94 <col:15> 'const char *' lvalue Var 0xa9692c0 'end_ptr' 'const char *')))))
  (ReturnStmt 0xa96a0f8 <line:394:5, col:26>
    (ImplicitCastExpr 0xa96a0e8 <col:12, col:26> 'int' <IntegralCast>
      (BinaryOperator 0xa96a0d0 <col:12, col:26> 'unsigned int' '-'
        (CXXMemberCallExpr 0xa96a078 <col:12, col:22> 'size_type':'unsigned int'
          (MemberExpr 0xa96a054 <col:12, col:17> '<bound member function type>' .size 0xa9613f0
            (ImplicitCastExpr 0xa96a098 <col:12> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue <NoOp>
              (DeclRefExpr 0xa96a03c <col:12> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa9559b0 'list' 'string_list_t &'))))
        (ImplicitCastExpr 0xa96a0c0 <col:26> 'size_t':'unsigned int' <LValueToRValue>
          (DeclRefExpr 0xa96a0a4 <col:26> 'size_t':'unsigned int' lvalue Var 0xa955b90 'prev_count' 'size_t':'unsigned int'))))))


static std::string get_filename(char *f) (CompoundStmt 0xa96a780 <../codeBase/fish-shell-master/mimedb.cpp:401:1, line:413:1>
  (DeclStmt 0xa96a2e8 <line:402:5, col:23>
    0xa96a290 "string_list_t list =
      (CXXConstructExpr 0xa96a2c8 <col:19> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >''void (void)')")
  (CallExpr 0xa96a3d8 <line:404:5, col:32> 'int'
    (ImplicitCastExpr 0xa96a3c8 <col:5> 'int (*)(string_list_t &, const char *, int)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa96a378 <col:5> 'int (string_list_t &, const char *, int)' lvalue Function 0xa955b10 'append_filenames' 'int (string_list_t &, const char *, int)'))
    (DeclRefExpr 0xa96a32c <col:22> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xa96a290 'list' 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >')
    (ImplicitCastExpr 0xa96a410 <col:28> 'const char *' <NoOp>
      (ImplicitCastExpr 0xa96a400 <col:28> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa96a344 <col:28> 'char *' lvalue ParmVar 0xa96a180 'f' 'char *')))
    (IntegerLiteral 0xa96a360 <col:31> 'int' 0))
  (IfStmt 0xa96a760 <line:405:5, line:412:5>
    <<<NULL>>>
    (CXXMemberCallExpr 0xa96a458 <line:405:9, col:20> '_Bool'
      (MemberExpr 0xa96a434 <col:9, col:14> '<bound member function type>' .empty 0xa961760
        (ImplicitCastExpr 0xa96a478 <col:9> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue <NoOp>
          (DeclRefExpr 0xa96a41c <col:9> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xa96a290 'list' 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >'))))
    (CompoundStmt 0xa96a650 <line:406:5, line:408:5>
      (ReturnStmt 0xa96a640 <line:407:9, col:16>
        (ExprWithCleanups 0xa96a620 <col:9, col:16> 'std::string':'class std::basic_string<char>'
          (CXXTemporary 0xa96a510)
          (CXXTemporary 0xa96a5b0)
          (CXXConstructExpr 0xa96a5f8 <col:9, col:16> 'std::string':'class std::basic_string<char>''void (const class std::basic_string<char> &)' elidable
            (MaterializeTemporaryExpr 0xa96a5e8 <col:16> 'const class std::basic_string<char>' lvalue
              (ImplicitCastExpr 0xa96a5d8 <col:16> 'const class std::basic_string<char>' <NoOp>
                (ImplicitCastExpr 0xa96a5c8 <col:16> 'std::string':'class std::basic_string<char>' <ConstructorConversion>
                  (CXXBindTemporaryExpr 0xa96a5b8 <col:16> 'std::string':'class std::basic_string<char>' (CXXTemporary 0xa96a5b0)
                    (CXXConstructExpr 0xa96a588 <col:16> 'std::string':'class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                      (ImplicitCastExpr 0xa96a4d0 <col:16> 'const char *' <ArrayToPointerDecay>
                        (StringLiteral 0xa96a4b0 <col:16> 'const char [1]' lvalue ""))
                      (CXXDefaultArgExpr 0xa96a570 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))))))
    (CompoundStmt 0xa96a748 <line:410:5, line:412:5>
      (ReturnStmt 0xa96a738 <line:411:9, col:26>
        (CXXConstructExpr 0xa96a710 <col:16, col:26> 'std::string':'class std::basic_string<char>''void (const class std::basic_string<char> &)'
          (ImplicitCastExpr 0xa96a700 <col:16, col:26> 'const class std::basic_string<char>' lvalue <NoOp>
            (CXXMemberCallExpr 0xa96a6e0 <col:16, col:26> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue
              (MemberExpr 0xa96a6bc <col:16, col:21> '<bound member function type>' .back 0xa9624b0
                (DeclRefExpr 0xa96a664 <col:16> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xa96a290 'list' 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >')))))))))


static char *munge(char *in) (CompoundStmt 0xa96b4f0 <../codeBase/fish-shell-master/mimedb.cpp:421:1, line:465:1>
  (DeclStmt 0xa96aa68 <line:422:5, col:48>
    0xa96a890 "char *out =
      (CStyleCastExpr 0xa96aa50 <col:17, col:47> 'char *' <BitCast>
        (CallExpr 0xa96aa20 <col:25, col:47> 'void *'
          (ImplicitCastExpr 0xa96aa10 <col:25> 'void *(*)(size_t)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa96a9f8 <col:25> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
          (BinaryOperator 0xa96a9e0 <col:35, col:46> 'unsigned int' '+'
            (CallExpr 0xa96a978 <col:35, col:44> 'size_t':'unsigned int'
              (ImplicitCastExpr 0xa96a968 <col:35> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa96a94c <col:35> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
              (ImplicitCastExpr 0xa96a9a8 <col:42> 'const char *' <NoOp>
                (ImplicitCastExpr 0xa96a998 <col:42> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa96a934 <col:42> 'char *' lvalue ParmVar 0xa96a7b0 'in' 'char *'))))
            (ImplicitCastExpr 0xa96a9d0 <col:46> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa96a9b8 <col:46> 'int' 1)))))")
  (DeclStmt 0xa96aaf0 <line:423:5, col:16>
    0xa96aa90 "char *p =
      (ImplicitCastExpr 0xa96aae0 <col:13> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa96aac4 <col:13> 'char *' lvalue Var 0xa96a890 'out' 'char *'))")
  (DeclStmt 0xa96ab60 <line:424:5, col:27>
    0xa96ab10 "int had_whitespace =
      (IntegerLiteral 0xa96ab48 <col:26> 'int' 0)")
  (DeclStmt 0xa96abd0 <line:425:5, col:20>
    0xa96ab80 "int printed =
      (IntegerLiteral 0xa96abb8 <col:19> 'int' 0)")
  (IfStmt 0xa96ac80 <line:426:5, line:429:5>
    <<<NULL>>>
    (UnaryOperator 0xa96ac18 <line:426:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa96ac08 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa96abf8 <col:10> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa96abe0 <col:10> 'char *' lvalue Var 0xa96a890 'out' 'char *'))))
    (CompoundStmt 0xa96ac68 <line:427:5, line:429:5>
      (ReturnStmt 0xa96ac58 <line:428:9, col:16>
        (ImplicitCastExpr 0xa96ac48 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa96ac30 <col:16> 'int' 0))))
    <<<NULL>>>)
  (WhileStmt 0xa96b318 <line:431:5, line:461:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa96acb8 <line:431:12> '_Bool' <IntegralToBoolean>
      (IntegerLiteral 0xa96aca0 <col:12> 'int' 1))
    (CompoundStmt 0xa96b300 <line:432:5, line:461:5>
      (SwitchStmt 0xa96ad28 <line:435:9, line:459:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa96ad18 <line:435:17, col:18> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa96ad08 <col:17, col:18> 'char' <LValueToRValue>
            (UnaryOperator 0xa96acf0 <col:17, col:18> 'char' lvalue prefix '*'
              (ImplicitCastExpr 0xa96ace0 <col:18> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa96acc4 <col:18> 'char *' lvalue ParmVar 0xa96a7b0 'in' 'char *')))))
        (CompoundStmt 0xa96b260 <line:436:9, line:459:9>
          (CaseStmt 0xa96ad60 <line:437:13, line:444:13>
            (ImplicitCastExpr 0xa96b2c0 <line:437:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa96ad48 <col:18> 'char'32))
            <<<NULL>>>
            (CaseStmt 0xa96ad98 <line:438:13, line:444:13>
              (ImplicitCastExpr 0xa96b2b0 <line:438:18> 'int' <IntegralCast>
                (CharacterLiteral 0xa96ad80 <col:18> 'char'10))
              <<<NULL>>>
              (CaseStmt 0xa96add0 <line:439:13, line:444:13>
                (ImplicitCastExpr 0xa96b2a0 <line:439:18> 'int' <IntegralCast>
                  (CharacterLiteral 0xa96adb8 <col:18> 'char'9))
                <<<NULL>>>
                (CaseStmt 0xa96ae08 <line:440:13, line:444:13>
                  (ImplicitCastExpr 0xa96b290 <line:440:18> 'int' <IntegralCast>
                    (CharacterLiteral 0xa96adf0 <col:18> 'char'13))
                  <<<NULL>>>
                  (CompoundStmt 0xa96ae78 <line:441:13, line:444:13>
                    (BinaryOperator 0xa96ae58 <line:442:17, col:34> 'int' lvalue '='
                      (DeclRefExpr 0xa96ae28 <col:17> 'int' lvalue Var 0xa96ab10 'had_whitespace' 'int')
                      (IntegerLiteral 0xa96ae40 <col:34> 'int' 1))
                    (BreakStmt 0xa96ae70 <line:443:17>))))))
          (CaseStmt 0xa96aea8 <line:445:13, line:446:22>
            (ImplicitCastExpr 0xa96b280 <line:445:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa96ae90 <col:18> 'char'0))
            <<<NULL>>>
            (BinaryOperator 0xa96af20 <line:446:17, col:22> 'char' lvalue '='
              (UnaryOperator 0xa96aef0 <col:17, col:18> 'char' lvalue prefix '*'
                (ImplicitCastExpr 0xa96aee0 <col:18> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa96aec8 <col:18> 'char *' lvalue Var 0xa96aa90 'p' 'char *')))
              (CharacterLiteral 0xa96af08 <col:22> 'char'0)))
          (ReturnStmt 0xa96af60 <line:447:17, col:24>
            (ImplicitCastExpr 0xa96af50 <col:24> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa96af38 <col:24> 'char *' lvalue Var 0xa96a890 'out' 'char *')))
          (DefaultStmt 0xa96b248 <line:448:13, line:458:13>
            (CompoundStmt 0xa96b220 <line:449:13, line:458:13>
              (IfStmt 0xa96b0a0 <line:450:17, line:453:17>
                <<<NULL>>>
                (BinaryOperator 0xa96afe0 <line:450:21, col:32> '_Bool' '&&'
                  (ImplicitCastExpr 0xa96afb0 <col:21> '_Bool' <IntegralToBoolean>
                    (ImplicitCastExpr 0xa96afa0 <col:21> 'int' <LValueToRValue>
                      (DeclRefExpr 0xa96af70 <col:21> 'int' lvalue Var 0xa96ab80 'printed' 'int')))
                  (ImplicitCastExpr 0xa96afd0 <col:32> '_Bool' <IntegralToBoolean>
                    (ImplicitCastExpr 0xa96afc0 <col:32> 'int' <LValueToRValue>
                      (DeclRefExpr 0xa96af88 <col:32> 'int' lvalue Var 0xa96ab10 'had_whitespace' 'int'))))
                (CompoundStmt 0xa96b088 <line:451:17, line:453:17>
                  (BinaryOperator 0xa96b070 <line:452:21, col:28> 'char' lvalue '='
                    (UnaryOperator 0xa96b040 <col:21, col:26> 'char' lvalue prefix '*'
                      (ParenExpr 0xa96b028 <col:22, col:26> 'char *'
                        (UnaryOperator 0xa96b010 <col:23, col:24> 'char *' postfix '++'
                          (DeclRefExpr 0xa96aff8 <col:23> 'char *' lvalue Var 0xa96aa90 'p' 'char *'))))
                    (CharacterLiteral 0xa96b058 <col:28> 'char'32)))
                <<<NULL>>>)
              (BinaryOperator 0xa96b0f0 <line:454:17, col:25> 'int' lvalue '='
                (DeclRefExpr 0xa96b0bc <col:17> 'int' lvalue Var 0xa96ab80 'printed' 'int')
                (IntegerLiteral 0xa96b0d8 <col:25> 'int' 1))
              (BinaryOperator 0xa96b138 <line:455:17, col:32> 'int' lvalue '='
                (DeclRefExpr 0xa96b108 <col:17> 'int' lvalue Var 0xa96ab10 'had_whitespace' 'int')
                (IntegerLiteral 0xa96b120 <col:32> 'int' 0))
              (BinaryOperator 0xa96b200 <line:456:17, col:25> 'char' lvalue '='
                (UnaryOperator 0xa96b198 <col:17, col:22> 'char' lvalue prefix '*'
                  (ParenExpr 0xa96b180 <col:18, col:22> 'char *'
                    (UnaryOperator 0xa96b168 <col:19, col:20> 'char *' postfix '++'
                      (DeclRefExpr 0xa96b150 <col:19> 'char *' lvalue Var 0xa96aa90 'p' 'char *'))))
                (ImplicitCastExpr 0xa96b1f0 <col:24, col:25> 'char' <LValueToRValue>
                  (UnaryOperator 0xa96b1d8 <col:24, col:25> 'char' lvalue prefix '*'
                    (ImplicitCastExpr 0xa96b1c8 <col:25> 'char *' <LValueToRValue>
                      (DeclRefExpr 0xa96b1ac <col:25> 'char *' lvalue ParmVar 0xa96a7b0 'in' 'char *')))))
              (BreakStmt 0xa96b218 <line:457:17>)))))
      (UnaryOperator 0xa96b2e8 <line:460:9, col:11> 'char *' postfix '++'
        (DeclRefExpr 0xa96b2cc <col:9> 'char *' lvalue ParmVar 0xa96a7b0 'in' 'char *'))))
  (CallExpr 0xa96b418 <line:462:5, col:64> 'int'
    (ImplicitCastExpr 0xa96b408 <col:5> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa96b3f0 <col:5> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
    (ImplicitCastExpr 0xa96b440 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
      (DeclRefExpr 0xa96b364 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
    (ImplicitCastExpr 0xa96b450 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
      (ParenExpr 0xa96b3b8 <col:19, col:26> 'const char [30]' lvalue
        (StringLiteral 0xa96b37c <line:462:23> 'const char [30]' lvalue "%s: Unknown error in munge()\n")))
    (ImplicitCastExpr 0xa96b460 <line:95:16> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa96b3cc <col:16> 'const char [7]' lvalue "mimedb")))
  (BinaryOperator 0xa96b4a0 <line:463:5, col:11> 'int' lvalue '='
    (DeclRefExpr 0xa96b46c <col:5> 'int' lvalue Var 0xa952100 'error' 'int')
    (IntegerLiteral 0xa96b488 <col:11> 'int' 1))
  (ReturnStmt 0xa96b4e0 <line:464:5, col:12>
    (ImplicitCastExpr 0xa96b4d0 <col:12> 'char *' <NullToPointer>
      (IntegerLiteral 0xa96b4b8 <col:12> 'int' 0))))


static char *get_lang_re() (CompoundStmt 0xa96c450 <../codeBase/fish-shell-master/mimedb.cpp:471:1, line:516:1>
  (DeclStmt 0xa96b638 <line:473:5, col:32>
    0xa96b600 "static char buff[1024]")
  (DeclStmt 0xa96b7c0 <line:474:5, col:49>
    0xa96b660 "const char *lang =
      (ImplicitCastExpr 0xa96b7b0 <col:24, col:48> 'const char *' <NoOp>
        (CallExpr 0xa96b768 <col:24, col:48> 'char *'
          (ImplicitCastExpr 0xa96b758 <col:24> 'char *(*)(int, const char *) throw()' <FunctionToPointerDecay>
            (DeclRefExpr 0xa96b700 <col:24> 'char *(int, const char *) throw()' lvalue Function 0xa5c34a0 'setlocale' 'char *(int, const char *) throw()'))
          (ImplicitCastExpr 0xa96b790 </usr/include/locale.h:41:27> 'int' <IntegralCast>
            (DeclRefExpr 0xa96b6cc <col:27> 'enum <anonymous at /usr/include/i386-linux-gnu/bits/locale.h:27:1>' EnumConstant 0xa5bf380 '__LC_MESSAGES' 'enum <anonymous at /usr/include/i386-linux-gnu/bits/locale.h:27:1>'))
          (ImplicitCastExpr 0xa96b7a0 <../codeBase/fish-shell-master/mimedb.cpp:474:47> 'const char *' <NullToPointer>
            (IntegerLiteral 0xa96b6e8 <col:47> 'int' 0))))")
  (DeclStmt 0xa96b830 <line:475:5, col:16>
    0xa96b7e0 "int close =
      (IntegerLiteral 0xa96b818 <col:15> 'int' 0)")
  (DeclStmt 0xa96b8b0 <line:476:5, col:19>
    0xa96b850 "char *out =
      (ImplicitCastExpr 0xa96b8a0 <col:15> 'char *' <ArrayToPointerDecay>
        (DeclRefExpr 0xa96b884 <col:15> 'char [1024]' lvalue Var 0xa96b600 'buff' 'char [1024]'))")
  (IfStmt 0xa96bc20 <line:478:5, line:483:5>
    <<<NULL>>>
    (BinaryOperator 0xa96ba28 <line:478:9, line:90:19> '_Bool' '>='
      (ParenExpr 0xa96b9e8 <line:478:9, col:26> 'unsigned int'
        (BinaryOperator 0xa96b9d0 <col:10, col:25> 'unsigned int' '+'
          (ImplicitCastExpr 0xa96b9c0 <col:10> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa96b8c0 <col:10> 'int' 1))
          (BinaryOperator 0xa96b9a8 <col:12, col:25> 'unsigned int' '*'
            (CallExpr 0xa96b950 <col:12, col:23> 'size_t':'unsigned int'
              (ImplicitCastExpr 0xa96b940 <col:12> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa96b924 <col:12> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
              (ImplicitCastExpr 0xa96b970 <col:19> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xa96b90c <col:19> 'const char *' lvalue Var 0xa96b660 'lang' 'const char *')))
            (ImplicitCastExpr 0xa96b998 <col:25> 'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa96b980 <col:25> 'int' 4)))))
      (ImplicitCastExpr 0xa96ba18 <line:90:19> 'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa96ba00 <col:19> 'int' 1024)))
    (CompoundStmt 0xa96bc00 <line:479:5, line:483:5>
      (CallExpr 0xa96bb28 <line:480:9, col:66> 'int'
        (ImplicitCastExpr 0xa96bb18 <col:9> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa96bb00 <col:9> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
        (ImplicitCastExpr 0xa96bb50 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
          (DeclRefExpr 0xa96ba74 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
        (ImplicitCastExpr 0xa96bb60 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
          (ParenExpr 0xa96bac8 <col:19, col:26> 'const char [28]' lvalue
            (StringLiteral 0xa96ba8c <line:480:27> 'const char [28]' lvalue "%s: Locale string too long\n")))
        (ImplicitCastExpr 0xa96bb70 <line:95:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa96badc <col:16> 'const char [7]' lvalue "mimedb")))
      (BinaryOperator 0xa96bbb0 <line:481:9, col:17> 'int' lvalue '='
        (DeclRefExpr 0xa96bb7c <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa96bb98 <col:17> 'int' 1))
      (ReturnStmt 0xa96bbf0 <line:482:9, col:16>
        (ImplicitCastExpr 0xa96bbe0 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa96bbc8 <col:16> 'int' 0))))
    <<<NULL>>>)
  (ForStmt 0xa96c208 <line:485:5, line:506:5>
    <<<NULL>>>
    <<<NULL>>>
    (ImplicitCastExpr 0xa96bc90 <line:485:12, col:13> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa96bc80 <col:12, col:13> 'char' <LValueToRValue>
        (UnaryOperator 0xa96bc68 <col:12, col:13> 'const char' lvalue prefix '*'
          (ImplicitCastExpr 0xa96bc58 <col:13> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa96bc3c <col:13> 'const char *' lvalue Var 0xa96b660 'lang' 'const char *')))))
    (UnaryOperator 0xa96bcb8 <col:19, col:23> 'const char *' postfix '++'
      (DeclRefExpr 0xa96bc9c <col:19> 'const char *' lvalue Var 0xa96b660 'lang' 'const char *'))
    (CompoundStmt 0xa96c1f0 <line:486:5, line:506:5>
      (SwitchStmt 0xa96bd30 <line:487:9, line:505:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa96bd20 <line:487:17, col:18> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa96bd10 <col:17, col:18> 'char' <LValueToRValue>
            (UnaryOperator 0xa96bcf8 <col:17, col:18> 'const char' lvalue prefix '*'
              (ImplicitCastExpr 0xa96bce8 <col:18> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xa96bccc <col:18> 'const char *' lvalue Var 0xa96b660 'lang' 'const char *')))))
        (CompoundStmt 0xa96c198 <line:488:9, line:505:9>
          (CaseStmt 0xa96bd68 <line:489:13, line:496:17>
            (ImplicitCastExpr 0xa96c1e0 <line:489:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa96bd50 <col:18> 'char'64))
            <<<NULL>>>
            (CaseStmt 0xa96bda0 <line:490:13, line:496:17>
              (ImplicitCastExpr 0xa96c1d0 <line:490:18> 'int' <IntegralCast>
                (CharacterLiteral 0xa96bd88 <col:18> 'char'46))
              <<<NULL>>>
              (CaseStmt 0xa96bdd8 <line:491:13, line:496:17>
                (ImplicitCastExpr 0xa96c1c0 <line:491:18> 'int' <IntegralCast>
                  (CharacterLiteral 0xa96bdc0 <col:18> 'char'95))
                <<<NULL>>>
                (IfStmt 0xa96bf38 <line:492:17, line:496:17>
                  <<<NULL>>>
                  (ImplicitCastExpr 0xa96be20 <line:492:21> '_Bool' <IntegralToBoolean>
                    (ImplicitCastExpr 0xa96be10 <col:21> 'int' <LValueToRValue>
                      (DeclRefExpr 0xa96bdf8 <col:21> 'int' lvalue Var 0xa96b7e0 'close' 'int')))
                  (CompoundStmt 0xa96bf20 <line:493:17, line:496:17>
                    (BinaryOperator 0xa96be90 <line:494:21, col:30> 'char' lvalue '='
                      (UnaryOperator 0xa96be60 <col:21, col:25> 'char' lvalue prefix '*'
                        (UnaryOperator 0xa96be48 <col:22, col:25> 'char *' postfix '++'
                          (DeclRefExpr 0xa96be2c <col:22> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
                      (CharacterLiteral 0xa96be78 <col:30> 'char'41))
                    (BinaryOperator 0xa96bf08 <line:495:21, col:30> 'char' lvalue '='
                      (UnaryOperator 0xa96bed8 <col:21, col:25> 'char' lvalue prefix '*'
                        (UnaryOperator 0xa96bec0 <col:22, col:25> 'char *' postfix '++'
                          (DeclRefExpr 0xa96bea8 <col:22> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
                      (CharacterLiteral 0xa96bef0 <col:30> 'char'63)))
                  <<<NULL>>>))))
          (BinaryOperator 0xa96bf88 <line:498:17, col:23> 'int' lvalue '='
            (DeclRefExpr 0xa96bf54 <col:17> 'int' lvalue Var 0xa96b7e0 'close' 'int')
            (IntegerLiteral 0xa96bf70 <col:23> 'int' 1))
          (BinaryOperator 0xa96c000 <line:499:17, col:26> 'char' lvalue '='
            (UnaryOperator 0xa96bfd0 <col:17, col:21> 'char' lvalue prefix '*'
              (UnaryOperator 0xa96bfb8 <col:18, col:21> 'char *' postfix '++'
                (DeclRefExpr 0xa96bfa0 <col:18> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
            (CharacterLiteral 0xa96bfe8 <col:26> 'char'40))
          (BinaryOperator 0xa96c0b0 <line:500:17, col:27> 'char' lvalue '='
            (UnaryOperator 0xa96c048 <col:17, col:21> 'char' lvalue prefix '*'
              (UnaryOperator 0xa96c030 <col:18, col:21> 'char *' postfix '++'
                (DeclRefExpr 0xa96c018 <col:18> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
            (ImplicitCastExpr 0xa96c0a0 <col:26, col:27> 'char' <LValueToRValue>
              (UnaryOperator 0xa96c088 <col:26, col:27> 'const char' lvalue prefix '*'
                (ImplicitCastExpr 0xa96c078 <col:27> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa96c05c <col:27> 'const char *' lvalue Var 0xa96b660 'lang' 'const char *')))))
          (BreakStmt 0xa96c0c8 <line:501:17>)
          (DefaultStmt 0xa96c180 <line:503:13, line:504:27>
            (BinaryOperator 0xa96c168 <col:17, col:27> 'char' lvalue '='
              (UnaryOperator 0xa96c100 <col:17, col:21> 'char' lvalue prefix '*'
                (UnaryOperator 0xa96c0e8 <col:18, col:21> 'char *' postfix '++'
                  (DeclRefExpr 0xa96c0d0 <col:18> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
              (ImplicitCastExpr 0xa96c158 <col:26, col:27> 'char' <LValueToRValue>
                (UnaryOperator 0xa96c140 <col:26, col:27> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0xa96c130 <col:27> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xa96c114 <col:27> 'const char *' lvalue Var 0xa96b660 'lang' 'const char *'))))))))))
  (IfStmt 0xa96c370 <line:508:5, line:512:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa96c258 <line:508:9> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa96c248 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa96c22c <col:9> 'int' lvalue Var 0xa96b7e0 'close' 'int')))
    (CompoundStmt 0xa96c358 <line:509:5, line:512:5>
      (BinaryOperator 0xa96c2c8 <line:510:9, col:18> 'char' lvalue '='
        (UnaryOperator 0xa96c298 <col:9, col:13> 'char' lvalue prefix '*'
          (UnaryOperator 0xa96c280 <col:10, col:13> 'char *' postfix '++'
            (DeclRefExpr 0xa96c264 <col:10> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
        (CharacterLiteral 0xa96c2b0 <col:18> 'char'41))
      (BinaryOperator 0xa96c340 <line:511:9, col:18> 'char' lvalue '='
        (UnaryOperator 0xa96c310 <col:9, col:13> 'char' lvalue prefix '*'
          (UnaryOperator 0xa96c2f8 <col:10, col:13> 'char *' postfix '++'
            (DeclRefExpr 0xa96c2e0 <col:10> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
        (CharacterLiteral 0xa96c328 <col:18> 'char'63)))
    <<<NULL>>>)
  (BinaryOperator 0xa96c400 <line:513:5, col:12> 'char' lvalue '='
    (UnaryOperator 0xa96c3c0 <col:5, col:9> 'char' lvalue prefix '*'
      (UnaryOperator 0xa96c3a8 <col:6, col:9> 'char *' postfix '++'
        (DeclRefExpr 0xa96c38c <col:6> 'char *' lvalue Var 0xa96b850 'out' 'char *')))
    (ImplicitCastExpr 0xa96c3f0 <col:12> 'char' <IntegralCast>
      (IntegerLiteral 0xa96c3d8 <col:12> 'int' 0)))
  (ReturnStmt 0xa96c440 <line:515:5, col:12>
    (ImplicitCastExpr 0xa96c430 <col:12> 'char *' <ArrayToPointerDecay>
      (DeclRefExpr 0xa96c418 <col:12> 'char [1024]' lvalue Var 0xa96b600 'buff' 'char [1024]'))))


static char *get_description(const char *mimetype) (CompoundStmt 0xa9720d8 <../codeBase/fish-shell-master/mimedb.cpp:522:1, line:678:1>
  (DeclStmt 0xa96c5b8 <line:523:5, col:18>
    0xa96c580 "char *fn_part")
  (DeclStmt 0xa96c648 <line:525:5, col:19>
    0xa96c5f0 "std::string fn =
      (CXXConstructExpr 0xa96c628 <col:17> 'std::string':'class std::basic_string<char>''void (void)')")
  (DeclStmt 0xa96c6a8 <line:526:5, col:11>
    0xa96c670 "int fd")
  (DeclStmt 0xa96c728 <line:527:5, col:19>
    0xa96c6d0 "struct stat st =
      (CXXConstructExpr 0xa96c708 <col:17> 'struct stat':'struct stat''void (void) throw()')")
  (DeclStmt 0xa96c788 <line:528:5, col:19>
    0xa96c750 "char *contents")
  (DeclStmt 0xa96c900 <line:529:5, col:42>
    0xa96c7b0 "char *start =
      (ImplicitCastExpr 0xa96c800 <col:17> 'char *' <NullToPointer>
        (IntegerLiteral 0xa96c7e8 <col:17> 'int' 0))"
    0xa96c820 "char *stop =
      (ImplicitCastExpr 0xa96c870 <col:26> 'char *' <NullToPointer>
        (IntegerLiteral 0xa96c858 <col:26> 'int' 0))"
    0xa96c890 "char *best_start =
      (ImplicitCastExpr 0xa96c8e0 <col:41> 'char *' <NullToPointer>
        (IntegerLiteral 0xa96c8c8 <col:41> 'int' 0))")
  (IfStmt 0xa96f618 <line:531:5, line:571:5>
    <<<NULL>>>
    (UnaryOperator 0xa96c948 <line:531:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa96c938 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa96c928 <col:10> 'regex_t *' <LValueToRValue>
          (DeclRefExpr 0xa96c910 <col:10> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *'))))
    (CompoundStmt 0xa96f5e0 <line:532:5, line:571:5>
      (DeclStmt 0xa96c9a8 <line:533:9, col:19>
        0xa96c970 "char *lang")
      (DeclStmt 0xa96ca28 <line:534:9, col:29>
        0xa96c9f0 "char buff[1024]")
      (BinaryOperator 0xa96cae8 <line:536:9, col:28> 'char *' lvalue '='
        (DeclRefExpr 0xa96ca38 <col:9> 'char *' lvalue Var 0xa96c970 'lang' 'char *')
        (CallExpr 0xa96cac8 <col:16, col:28> 'char *'
          (ImplicitCastExpr 0xa96cab8 <col:16> 'char *(*)(void)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa96ca84 <col:16> 'char *(void)' lvalue Function 0xa96b540 'get_lang_re' 'char *(void)'))))
      (IfStmt 0xa96cb88 <line:537:9, line:538:20>
        <<<NULL>>>
        (UnaryOperator 0xa96cb38 <line:537:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa96cb28 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xa96cb18 <col:14> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa96cb00 <col:14> 'char *' lvalue Var 0xa96c970 'lang' 'char *'))))
        (ReturnStmt 0xa96cb78 <line:538:13, col:20>
          (ImplicitCastExpr 0xa96cb68 <col:20> 'char *' <NullToPointer>
            (IntegerLiteral 0xa96cb50 <col:20> 'int' 0)))
        <<<NULL>>>)
      (CallExpr 0xa96e4c8 <line:540:9, col:56> 'int'
        (ImplicitCastExpr 0xa96e4b8 <col:9> 'int (*)(char *restrict, size_t, const char *restrict, ...) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa96e464 <col:9> 'int (char *restrict, size_t, const char *restrict, ...) throw()' lvalue Function 0xa511bc0 'snprintf' 'int (char *restrict, size_t, const char *restrict, ...) throw()'))
        (ImplicitCastExpr 0xa96e4f8 <col:18> 'char *' <ArrayToPointerDecay>
          (DeclRefExpr 0xa96e374 <col:18> 'char [1024]' lvalue Var 0xa96c9f0 'buff' 'char [1024]'))
        (ImplicitCastExpr 0xa96e508 <line:90:19> 'size_t':'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa96e390 <col:19> 'int' 1024))
        (ImplicitCastExpr 0xa96e518 <line:74:19> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa96e3f0 <col:19> 'const char [41]' lvalue "<comment( +xml:lang *= *(\"%s\"|'%s'))? *>"))
        (ImplicitCastExpr 0xa96e528 <line:540:46> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa96e434 <col:46> 'char *' lvalue Var 0xa96c970 'lang' 'char *'))
        (ImplicitCastExpr 0xa96e538 <col:52> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa96e44c <col:52> 'char *' lvalue Var 0xa96c970 'lang' 'char *')))
      (BinaryOperator 0xa96e628 <line:542:9, col:56> 'regex_t *' lvalue '='
        (DeclRefExpr 0xa96e544 <col:9> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *')
        (CStyleCastExpr 0xa96e610 <col:20, col:56> 'regex_t *' <BitCast>
          (CallExpr 0xa96e5e0 <col:31, col:56> 'void *'
            (ImplicitCastExpr 0xa96e5d0 <col:31> 'void *(*)(size_t)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa96e5b8 <col:31> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
            (UnaryExprOrTypeTraitExpr 0xa96e5a0 <col:41, col:55> 'unsigned int' sizeof 'regex_t':'struct re_pattern_buffer'))))
      (BinaryOperator 0xa96e720 <line:543:9, col:55> 'regex_t *' lvalue '='
        (DeclRefExpr 0xa96e640 <col:9> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *')
        (CStyleCastExpr 0xa96e708 <col:19, col:55> 'regex_t *' <BitCast>
          (CallExpr 0xa96e6d8 <col:30, col:55> 'void *'
            (ImplicitCastExpr 0xa96e6c8 <col:30> 'void *(*)(size_t)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa96e6b0 <col:30> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
            (UnaryExprOrTypeTraitExpr 0xa96e698 <col:40, col:54> 'unsigned int' sizeof 'regex_t':'struct re_pattern_buffer'))))
      (DeclStmt 0xa96e788 <line:545:9, col:23>
        0xa96e750 "int reg_status")
      (IfStmt 0xa96f308 <line:546:9, line:561:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa96e930 <line:546:13, col:64> '_Bool' <IntegralToBoolean>
          (ImplicitCastExpr 0xa96e920 <col:13, col:64> 'int' <LValueToRValue>
            (ParenExpr 0xa96e908 <col:13, col:64> 'int' lvalue
              (BinaryOperator 0xa96e8f0 <col:14, col:63> 'int' lvalue '='
                (DeclRefExpr 0xa96e798 <col:14> 'int' lvalue Var 0xa96e750 'reg_status' 'int')
                (CallExpr 0xa96e898 <col:27, col:63> 'int'
                  (ImplicitCastExpr 0xa96e888 <col:27> 'int (*)(regex_t *restrict, const char *restrict, int)' <FunctionToPointerDecay>
                    (DeclRefExpr 0xa96e830 <col:27> 'int (regex_t *restrict, const char *restrict, int)' lvalue Function 0xa5bea60 'regcomp' 'int (regex_t *restrict, const char *restrict, int)'))
                  (ImplicitCastExpr 0xa96e8c0 <col:35> 'regex_t *' <LValueToRValue>
                    (DeclRefExpr 0xa96e7e4 <col:35> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *'))
                  (ImplicitCastExpr 0xa96e8e0 <col:45> 'const char *' <NoOp>
                    (ImplicitCastExpr 0xa96e8d0 <col:45> 'char *' <ArrayToPointerDecay>
                      (DeclRefExpr 0xa96e7fc <col:45> 'char [1024]' lvalue Var 0xa96c9f0 'buff' 'char [1024]')))
                  (IntegerLiteral 0xa96e818 </usr/include/regex.h:284:22> 'int' 1))))))
        (CompoundStmt 0xa96ed80 <../codeBase/fish-shell-master/mimedb.cpp:547:9, line:553:9>
          (DeclStmt 0xa96e9a8 <line:548:13, col:38>
            0xa96e970 "char regerrbuf[1024]")
          (CallExpr 0xa96eab8 <line:549:13, col:64> 'size_t':'unsigned int'
            (ImplicitCastExpr 0xa96eaa8 <col:13> 'size_t (*)(int, const regex_t *restrict, char *restrict, size_t)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa96ea50 <col:13> 'size_t (int, const regex_t *restrict, char *restrict, size_t)' lvalue Function 0xa5befe0 'regerror' 'size_t (int, const regex_t *restrict, char *restrict, size_t)'))
            (ImplicitCastExpr 0xa96eae8 <col:22> 'int' <LValueToRValue>
              (DeclRefExpr 0xa96e9ec <col:22> 'int' lvalue Var 0xa96e750 'reg_status' 'int'))
            (ImplicitCastExpr 0xa96eb08 <col:34> 'const regex_t *' <NoOp>
              (ImplicitCastExpr 0xa96eaf8 <col:34> 'regex_t *' <LValueToRValue>
                (DeclRefExpr 0xa96ea04 <col:34> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *')))
            (ImplicitCastExpr 0xa96eb18 <col:44> 'char *' <ArrayToPointerDecay>
              (DeclRefExpr 0xa96ea1c <col:44> 'char [1024]' lvalue Var 0xa96e970 'regerrbuf' 'char [1024]'))
            (ImplicitCastExpr 0xa96eb28 <line:90:19> 'size_t':'unsigned int' <IntegralCast>
              (IntegerLiteral 0xa96ea38 <col:19> 'int' 1024)))
          (CallExpr 0xa96ecb8 <line:550:13, col:119> 'int'
            (ImplicitCastExpr 0xa96eca8 <col:13> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa96ec90 <col:13> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
            (ImplicitCastExpr 0xa96ece8 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
              (DeclRefExpr 0xa96eb6c <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
            (ImplicitCastExpr 0xa96ecf8 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
              (ParenExpr 0xa96ec28 <col:19, col:26> 'const char [60]' lvalue
                (StringLiteral 0xa96ebd0 <line:550:31> 'const char [60]' lvalue "%s: Could not compile regular expressions %s with error %s\n")))
            (ImplicitCastExpr 0xa96ed08 <line:95:16> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa96ec3c <col:16> 'const char [7]' lvalue "mimedb"))
            (ImplicitCastExpr 0xa96ed18 <line:550:104> 'char *' <ArrayToPointerDecay>
              (DeclRefExpr 0xa96ec60 <col:104> 'char [1024]' lvalue Var 0xa96c9f0 'buff' 'char [1024]'))
            (ImplicitCastExpr 0xa96ed28 <col:110> 'char *' <ArrayToPointerDecay>
              (DeclRefExpr 0xa96ec78 <col:110> 'char [1024]' lvalue Var 0xa96e970 'regerrbuf' 'char [1024]')))
          (BinaryOperator 0xa96ed68 <line:551:13, col:19> 'int' lvalue '='
            (DeclRefExpr 0xa96ed34 <col:13> 'int' lvalue Var 0xa952100 'error' 'int')
            (IntegerLiteral 0xa96ed50 <col:19> 'int' 1)))
        (IfStmt 0xa96f2e8 <line:554:14, line:561:9>
          <<<NULL>>>
          (ImplicitCastExpr 0xa96eef8 <line:554:18, col:72> '_Bool' <IntegralToBoolean>
            (ImplicitCastExpr 0xa96eee8 <col:18, col:72> 'int' <LValueToRValue>
              (ParenExpr 0xa96eed0 <col:18, col:72> 'int' lvalue
                (BinaryOperator 0xa96eeb8 <col:19, col:71> 'int' lvalue '='
                  (DeclRefExpr 0xa96eda0 <col:19> 'int' lvalue Var 0xa96e750 'reg_status' 'int')
                  (CallExpr 0xa96ee70 <col:32, col:71> 'int'
                    (ImplicitCastExpr 0xa96ee60 <col:32> 'int (*)(regex_t *restrict, const char *restrict, int)' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa96ee48 <col:32> 'int (regex_t *restrict, const char *restrict, int)' lvalue Function 0xa5bea60 'regcomp' 'int (regex_t *restrict, const char *restrict, int)'))
                    (ImplicitCastExpr 0xa96ee98 <col:40> 'regex_t *' <LValueToRValue>
                      (DeclRefExpr 0xa96edec <col:40> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *'))
                    (ImplicitCastExpr 0xa96eea8 <line:79:18> 'const char *' <ArrayToPointerDecay>
                      (StringLiteral 0xa96ee04 <col:18> 'const char [13]' lvalue "</comment *>"))
                    (IntegerLiteral 0xa96ee30 </usr/include/regex.h:284:22> 'int' 1))))))
          (CompoundStmt 0xa96f2c8 <../codeBase/fish-shell-master/mimedb.cpp:555:9, line:561:9>
            (DeclStmt 0xa96ef78 <line:556:13, col:38>
              0xa96ef40 "char regerrbuf[1024]")
            (CallExpr 0xa96f048 <line:557:13, col:63> 'size_t':'unsigned int'
              (ImplicitCastExpr 0xa96f038 <col:13> 'size_t (*)(int, const regex_t *restrict, char *restrict, size_t)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa96f020 <col:13> 'size_t (int, const regex_t *restrict, char *restrict, size_t)' lvalue Function 0xa5befe0 'regerror' 'size_t (int, const regex_t *restrict, char *restrict, size_t)'))
              (ImplicitCastExpr 0xa96f078 <col:22> 'int' <LValueToRValue>
                (DeclRefExpr 0xa96efbc <col:22> 'int' lvalue Var 0xa96e750 'reg_status' 'int'))
              (ImplicitCastExpr 0xa96f098 <col:34> 'const regex_t *' <NoOp>
                (ImplicitCastExpr 0xa96f088 <col:34> 'regex_t *' <LValueToRValue>
                  (DeclRefExpr 0xa96efd4 <col:34> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *')))
              (ImplicitCastExpr 0xa96f0a8 <col:43> 'char *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa96efec <col:43> 'char [1024]' lvalue Var 0xa96ef40 'regerrbuf' 'char [1024]'))
              (ImplicitCastExpr 0xa96f0b8 <line:90:19> 'size_t':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa96f008 <col:19> 'int' 1024)))
            (CallExpr 0xa96f200 <line:558:13, col:119> 'int'
              (ImplicitCastExpr 0xa96f1f0 <col:13> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa96f1d8 <col:13> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
              (ImplicitCastExpr 0xa96f230 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
                (DeclRefExpr 0xa96f0fc <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
              (ImplicitCastExpr 0xa96f240 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
                (ParenExpr 0xa96f170 <col:19, col:26> 'const char [60]' lvalue
                  (StringLiteral 0xa96f114 <line:558:31> 'const char [60]' lvalue "%s: Could not compile regular expressions %s with error %s\n")))
              (ImplicitCastExpr 0xa96f250 <line:95:16> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa96f184 <col:16> 'const char [7]' lvalue "mimedb"))
              (ImplicitCastExpr 0xa96f260 <line:558:104> 'char *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa96f1a8 <col:104> 'char [1024]' lvalue Var 0xa96c9f0 'buff' 'char [1024]'))
              (ImplicitCastExpr 0xa96f270 <col:110> 'char *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa96f1c0 <col:110> 'char [1024]' lvalue Var 0xa96ef40 'regerrbuf' 'char [1024]')))
            (BinaryOperator 0xa96f2b0 <line:559:13, col:19> 'int' lvalue '='
              (DeclRefExpr 0xa96f27c <col:13> 'int' lvalue Var 0xa952100 'error' 'int')
              (IntegerLiteral 0xa96f298 <col:19> 'int' 1)))
          <<<NULL>>>))
      (IfStmt 0xa96f5c0 <line:563:9, line:570:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa96f350 <line:563:13> '_Bool' <IntegralToBoolean>
          (ImplicitCastExpr 0xa96f340 <col:13> 'int' <LValueToRValue>
            (DeclRefExpr 0xa96f324 <col:13> 'int' lvalue Var 0xa952100 'error' 'int')))
        (CompoundStmt 0xa96f5a0 <line:564:9, line:570:9>
          (CallExpr 0xa96f3d8 <line:565:13, col:26> 'void'
            (ImplicitCastExpr 0xa96f3c8 <col:13> 'void (*)(void *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa96f3ac <col:13> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
            (ImplicitCastExpr 0xa96f408 <col:18> 'void *' <BitCast>
              (ImplicitCastExpr 0xa96f3f8 <col:18> 'regex_t *' <LValueToRValue>
                (DeclRefExpr 0xa96f394 <col:18> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *'))))
          (CallExpr 0xa96f490 <line:566:13, col:25> 'void'
            (ImplicitCastExpr 0xa96f480 <col:13> 'void (*)(void *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa96f464 <col:13> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
            (ImplicitCastExpr 0xa96f4c0 <col:18> 'void *' <BitCast>
              (ImplicitCastExpr 0xa96f4b0 <col:18> 'regex_t *' <LValueToRValue>
                (DeclRefExpr 0xa96f44c <col:18> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *'))))
          (BinaryOperator 0xa96f550 <line:567:13, col:34> 'regex_t *' lvalue '='
            (DeclRefExpr 0xa96f4cc <col:13> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *')
            (ImplicitCastExpr 0xa96f540 <col:24, col:34> 'regex_t *' <LValueToRValue>
              (BinaryOperator 0xa96f528 <col:24, col:34> 'regex_t *' lvalue '='
                (DeclRefExpr 0xa96f4e4 <col:24> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *')
                (ImplicitCastExpr 0xa96f518 <col:34> 'regex_t *' <NullToPointer>
                  (IntegerLiteral 0xa96f500 <col:34> 'int' 0)))))
          (ReturnStmt 0xa96f590 <line:569:13, col:20>
            (ImplicitCastExpr 0xa96f580 <col:20> 'char *' <NullToPointer>
              (IntegerLiteral 0xa96f568 <col:20> 'int' 0))))
        <<<NULL>>>))
    <<<NULL>>>)
  (BinaryOperator 0xa96f970 <line:573:5, col:94> 'char *' lvalue '='
    (DeclRefExpr 0xa96f634 <col:5> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *')
    (CStyleCastExpr 0xa96f958 <col:15, col:94> 'char *' <BitCast>
      (CallExpr 0xa96f928 <col:23, col:94> 'void *'
        (ImplicitCastExpr 0xa96f918 <col:23> 'void *(*)(size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa96f900 <col:23> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
        (BinaryOperator 0xa96f8e8 <col:33, col:93> 'unsigned int' '+'
          (BinaryOperator 0xa96f8a8 <col:33, col:89> 'unsigned int' '+'
            (BinaryOperator 0xa96f7e0 <col:33, col:67> 'unsigned int' '+'
              (CallExpr 0xa96f708 <col:33, col:48> 'size_t':'unsigned int'
                (ImplicitCastExpr 0xa96f6f8 <col:33> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa96f6e0 <col:33> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                (ImplicitCastExpr 0xa96f728 <line:65:18> 'const char *' <ArrayToPointerDecay>
                  (StringLiteral 0xa96f6bc <col:18> 'const char [6]' lvalue "mime/")))
              (CallExpr 0xa96f7b0 <line:573:52, col:67> 'size_t':'unsigned int'
                (ImplicitCastExpr 0xa96f7a0 <col:52> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa96f784 <col:52> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                (ImplicitCastExpr 0xa96f7d0 <col:59> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa96f76c <col:59> 'const char *' lvalue ParmVar 0xa96c4a0 'mimetype' 'const char *'))))
            (CallExpr 0xa96f878 <col:71, col:89> 'size_t':'unsigned int'
              (ImplicitCastExpr 0xa96f868 <col:71> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa96f84c <col:71> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
              (ImplicitCastExpr 0xa96f898 <line:69:21> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa96f82c <col:21> 'const char [5]' lvalue ".xml"))))
          (ImplicitCastExpr 0xa96f8d8 <line:573:93> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa96f8c0 <col:93> 'int' 1))))))
  (IfStmt 0xa96fa28 <line:575:5, line:578:5>
    <<<NULL>>>
    (UnaryOperator 0xa96f9c0 <line:575:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa96f9b0 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa96f9a0 <col:10> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa96f988 <col:10> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *'))))
    (CompoundStmt 0xa96fa10 <line:576:5, line:578:5>
      (ReturnStmt 0xa96fa00 <line:577:9, col:16>
        (ImplicitCastExpr 0xa96f9f0 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa96f9d8 <col:16> 'int' 0))))
    <<<NULL>>>)
  (CallExpr 0xa96fae0 <line:580:5, col:29> 'char *'
    (ImplicitCastExpr 0xa96fad0 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa96fab8 <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0760 'strcpy' 'char *(char *restrict, const char *restrict) throw()'))
    (ImplicitCastExpr 0xa96fb08 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa96fa7c <col:12> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *'))
    (ImplicitCastExpr 0xa96fb18 <line:65:18> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa96fa94 <col:18> 'const char [6]' lvalue "mime/")))
  (CallExpr 0xa96fbb8 <line:581:5, col:29> 'char *'
    (ImplicitCastExpr 0xa96fba8 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa96fb8c <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0b60 'strcat' 'char *(char *restrict, const char *restrict) throw()'))
    (ImplicitCastExpr 0xa96fbe0 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa96fb5c <col:12> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *'))
    (ImplicitCastExpr 0xa96fbf0 <col:21> 'const char *' <LValueToRValue>
      (DeclRefExpr 0xa96fb74 <col:21> 'const char *' lvalue ParmVar 0xa96c4a0 'mimetype' 'const char *')))
  (CallExpr 0xa96fc98 <line:582:5, col:32> 'char *'
    (ImplicitCastExpr 0xa96fc88 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa96fc6c <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0b60 'strcat' 'char *(char *restrict, const char *restrict) throw()'))
    (ImplicitCastExpr 0xa96fcc0 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa96fc34 <col:12> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *'))
    (ImplicitCastExpr 0xa96fcd0 <line:69:21> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa96fc4c <col:21> 'const char [5]' lvalue ".xml")))
  (ExprWithCleanups 0xa96fe80 <line:584:5, col:30> 'class std::basic_string<char>' lvalue
    (CXXTemporary 0xa96fde0)
    (CXXOperatorCallExpr 0xa96fe58 <col:5, col:30> 'class std::basic_string<char>' lvalue
      (ImplicitCastExpr 0xa96fe48 <col:8, <invalid sloc>> 'class std::basic_string<char> &(*)(const class std::basic_string<char> &)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa96fe18 <col:8, <invalid sloc>> 'class std::basic_string<char> &(const class std::basic_string<char> &)' lvalue CXXMethod 0xa8412f0 'operator=' 'class std::basic_string<char> &(const class std::basic_string<char> &)'))
      (DeclRefExpr 0xa96fcdc <col:5> 'std::string':'class std::basic_string<char>' lvalue Var 0xa96c5f0 'fn' 'std::string':'class std::basic_string<char>')
      (MaterializeTemporaryExpr 0xa96fe08 <col:10, col:30> 'const class std::basic_string<char>' lvalue
        (ImplicitCastExpr 0xa96fdf8 <col:10, col:30> 'const class std::basic_string<char>' <NoOp>
          (CXXBindTemporaryExpr 0xa96fde8 <col:10, col:30> 'std::string':'class std::basic_string<char>' (CXXTemporary 0xa96fde0)
            (CallExpr 0xa96fda8 <col:10, col:30> 'std::string':'class std::basic_string<char>'
              (ImplicitCastExpr 0xa96fd98 <col:10> 'std::string (*)(char *)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa96fd44 <col:10> 'std::string (char *)' lvalue Function 0xa96a220 'get_filename' 'std::string (char *)'))
              (ImplicitCastExpr 0xa96fdc8 <col:23> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa96fd2c <col:23> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *'))))))))
  (CallExpr 0xa96ff18 <line:585:5, col:17> 'void'
    (ImplicitCastExpr 0xa96ff08 <col:5> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa96feec <col:5> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
    (ImplicitCastExpr 0xa96ff48 <col:10> 'void *' <BitCast>
      (ImplicitCastExpr 0xa96ff38 <col:10> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa96fed4 <col:10> 'char *' lvalue Var 0xa96c580 'fn_part' 'char *'))))
  (IfStmt 0xa970010 <line:587:5, line:590:5>
    <<<NULL>>>
    (CXXMemberCallExpr 0xa96ff90 <line:587:9, col:18> '_Bool'
      (MemberExpr 0xa96ff6c <col:9, col:12> '<bound member function type>' .empty 0xa843340
        (ImplicitCastExpr 0xa96ffb0 <col:9> 'const class std::basic_string<char>' lvalue <NoOp>
          (DeclRefExpr 0xa96ff54 <col:9> 'std::string':'class std::basic_string<char>' lvalue Var 0xa96c5f0 'fn' 'std::string':'class std::basic_string<char>'))))
    (CompoundStmt 0xa96fff8 <line:588:5, line:590:5>
      (ReturnStmt 0xa96ffe8 <line:589:9, col:16>
        (ImplicitCastExpr 0xa96ffd8 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa96ffc0 <col:16> 'int' 0))))
    <<<NULL>>>)
  (BinaryOperator 0xa970170 <line:593:5, col:35> 'int' lvalue '='
    (DeclRefExpr 0xa97002c <col:5> 'int' lvalue Var 0xa96c670 'fd' 'int')
    (CallExpr 0xa970148 <col:10, col:35> 'int'
      (ImplicitCastExpr 0xa970138 <col:10> 'int (*)(const char *, int, ...)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa970100 <col:10> 'int (const char *, int, ...)' lvalue Function 0xa5a7240 'open' 'int (const char *, int, ...)'))
      (CXXMemberCallExpr 0xa9700b8 <col:15, col:24> 'const char *'
        (MemberExpr 0xa970094 <col:15, col:18> '<bound member function type>' .c_str 0xa6d9410
          (ImplicitCastExpr 0xa9700d8 <col:15> 'const class std::basic_string<char>' lvalue <NoOp>
            (DeclRefExpr 0xa97007c <col:15> 'std::string':'class std::basic_string<char>' lvalue Var 0xa96c5f0 'fn' 'std::string':'class std::basic_string<char>'))))
      (IntegerLiteral 0xa9700e8 </usr/include/i386-linux-gnu/bits/fcntl.h:34:23> 'int' 0)))
  (IfStmt 0xa970348 <../codeBase/fish-shell-master/mimedb.cpp:597:5, line:602:5>
    <<<NULL>>>
    (BinaryOperator 0xa9701e0 <line:597:9, col:16> '_Bool' '=='
      (ImplicitCastExpr 0xa9701d0 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa970188 <col:9> 'int' lvalue Var 0xa96c670 'fd' 'int'))
      (UnaryOperator 0xa9701b8 <col:15, col:16> 'int' prefix '-'
        (IntegerLiteral 0xa9701a0 <col:16> 'int' 1)))
    (CompoundStmt 0xa970328 <line:598:5, line:602:5>
      (CallExpr 0xa970278 <line:599:9, col:22> 'void'
        (ImplicitCastExpr 0xa970268 <col:9> 'void (*)(const char *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa97024c <col:9> 'void (const char *)' lvalue Function 0xa517e00 'perror' 'void (const char *)'))
        (ImplicitCastExpr 0xa970298 <col:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa97022c <col:16> 'const char [5]' lvalue "open")))
      (BinaryOperator 0xa9702d8 <line:600:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa9702a4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa9702c0 <col:15> 'int' 1))
      (ReturnStmt 0xa970318 <line:601:9, col:16>
        (ImplicitCastExpr 0xa970308 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa9702f0 <col:16> 'int' 0))))
    <<<NULL>>>)
  (IfStmt 0xa9705e8 <line:604:5, line:609:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa970488 <line:604:9, col:29> '_Bool' <IntegralToBoolean>
      (CallExpr 0xa970460 <col:9, col:29> 'int'
        (ImplicitCastExpr 0xa970450 <col:9> 'int (*)(const char *restrict, struct stat *restrict) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa970434 <col:9> 'int (const char *restrict, struct stat *restrict) throw()' lvalue Function 0xa559ac0 'stat' 'int (const char *restrict, struct stat *restrict) throw()'))
        (CXXMemberCallExpr 0xa9703d8 <col:14, col:23> 'const char *'
          (MemberExpr 0xa9703b4 <col:14, col:17> '<bound member function type>' .c_str 0xa6d9410
            (ImplicitCastExpr 0xa9703f8 <col:14> 'const class std::basic_string<char>' lvalue <NoOp>
              (DeclRefExpr 0xa97039c <col:14> 'std::string':'class std::basic_string<char>' lvalue Var 0xa96c5f0 'fn' 'std::string':'class std::basic_string<char>'))))
        (UnaryOperator 0xa970420 <col:26, col:27> 'struct stat *' prefix '&'
          (DeclRefExpr 0xa970404 <col:27> 'struct stat':'struct stat' lvalue Var 0xa96c6d0 'st' 'struct stat':'struct stat'))))
    (CompoundStmt 0xa9705c8 <line:605:5, line:609:5>
      (CallExpr 0xa970518 <line:606:9, col:22> 'void'
        (ImplicitCastExpr 0xa970508 <col:9> 'void (*)(const char *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9704ec <col:9> 'void (const char *)' lvalue Function 0xa517e00 'perror' 'void (const char *)'))
        (ImplicitCastExpr 0xa970538 <col:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa9704cc <col:16> 'const char [5]' lvalue "stat")))
      (BinaryOperator 0xa970578 <line:607:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa970544 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa970560 <col:15> 'int' 1))
      (ReturnStmt 0xa9705b8 <line:608:9, col:16>
        (ImplicitCastExpr 0xa9705a8 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa970590 <col:16> 'int' 0))))
    <<<NULL>>>)
  (BinaryOperator 0xa970760 <line:611:5, col:48> 'char *' lvalue '='
    (DeclRefExpr 0xa970604 <col:5> 'char *' lvalue Var 0xa96c750 'contents' 'char *')
    (CStyleCastExpr 0xa970748 <col:16, col:48> 'char *' <BitCast>
      (CallExpr 0xa970708 <col:24, col:48> 'void *'
        (ImplicitCastExpr 0xa9706f8 <col:24> 'void *(*)(size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa9706e0 <col:24> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
        (ImplicitCastExpr 0xa970728 <col:34, col:47> 'size_t':'unsigned int' <IntegralCast>
          (BinaryOperator 0xa9706c8 <col:34, col:47> 'long' '+'
            (ImplicitCastExpr 0xa9706a8 <col:34, col:37> '__off_t':'long' <LValueToRValue>
              (MemberExpr 0xa97066c <col:34, col:37> '__off_t':'long' lvalue .st_size 0xa553700
                (DeclRefExpr 0xa970654 <col:34> 'struct stat':'struct stat' lvalue Var 0xa96c6d0 'st' 'struct stat':'struct stat')))
            (ImplicitCastExpr 0xa9706b8 <col:47> 'long' <IntegralCast>
              (IntegerLiteral 0xa970690 <col:47> 'int' 1)))))))
  (IfStmt 0xa970818 <line:612:5, line:615:5>
    <<<NULL>>>
    (UnaryOperator 0xa9707b0 <line:612:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9707a0 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa970790 <col:10> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa970778 <col:10> 'char *' lvalue Var 0xa96c750 'contents' 'char *'))))
    (CompoundStmt 0xa970800 <line:613:5, line:615:5>
      (ReturnStmt 0xa9707f0 <line:614:9, col:16>
        (ImplicitCastExpr 0xa9707e0 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa9707c8 <col:16> 'int' 0))))
    <<<NULL>>>)
  (IfStmt 0xa970c50 <line:617:5, line:623:5>
    <<<NULL>>>
    (BinaryOperator 0xa970a08 <line:617:9, col:46> '_Bool' '!='
      (ImplicitCastExpr 0xa9709f8 <col:9, col:38> 'long' <IntegralCast>
        (CallExpr 0xa970938 <col:9, col:38> 'ssize_t':'int'
          (ImplicitCastExpr 0xa970928 <col:9> 'ssize_t (*)(int, void *, size_t)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9708d4 <col:9> 'ssize_t (int, void *, size_t)' lvalue Function 0xa56fc80 'read' 'ssize_t (int, void *, size_t)'))
          (ImplicitCastExpr 0xa970960 <col:14> 'int' <LValueToRValue>
            (DeclRefExpr 0xa97086c <col:14> 'int' lvalue Var 0xa96c670 'fd' 'int'))
          (ImplicitCastExpr 0xa970980 <col:18> 'void *' <BitCast>
            (ImplicitCastExpr 0xa970970 <col:18> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa970884 <col:18> 'char *' lvalue Var 0xa96c750 'contents' 'char *')))
          (ImplicitCastExpr 0xa9709a0 <col:28, col:31> 'size_t':'unsigned int' <IntegralCast>
            (ImplicitCastExpr 0xa970990 <col:28, col:31> '__off_t':'long' <LValueToRValue>
              (MemberExpr 0xa9708b4 <col:28, col:31> '__off_t':'long' lvalue .st_size 0xa553700
                (DeclRefExpr 0xa97089c <col:28> 'struct stat':'struct stat' lvalue Var 0xa96c6d0 'st' 'struct stat':'struct stat'))))))
      (ImplicitCastExpr 0xa9709e8 <col:43, col:46> '__off_t':'long' <LValueToRValue>
        (MemberExpr 0xa9709c4 <col:43, col:46> '__off_t':'long' lvalue .st_size 0xa553700
          (DeclRefExpr 0xa9709ac <col:43> 'struct stat':'struct stat' lvalue Var 0xa96c6d0 'st' 'struct stat':'struct stat'))))
    (CompoundStmt 0xa970c30 <line:618:5, line:623:5>
      (CallExpr 0xa970aa0 <line:619:9, col:22> 'void'
        (ImplicitCastExpr 0xa970a90 <col:9> 'void (*)(const char *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa970a74 <col:9> 'void (const char *)' lvalue Function 0xa517e00 'perror' 'void (const char *)'))
        (ImplicitCastExpr 0xa970ac0 <col:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa970a54 <col:16> 'const char [5]' lvalue "read")))
      (BinaryOperator 0xa970b00 <line:620:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa970acc <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa970ae8 <col:15> 'int' 1))
      (CallExpr 0xa970bd8 <line:621:9, col:30> 'void'
        (ImplicitCastExpr 0xa970bc8 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa970bb0 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (CStyleCastExpr 0xa970b98 <col:14, col:22> 'void *' <NoOp>
          (ImplicitCastExpr 0xa970b88 <col:22> 'void *' <BitCast>
            (ImplicitCastExpr 0xa970b78 <col:22> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa970b4c <col:22> 'char *' lvalue Var 0xa96c750 'contents' 'char *')))))
      (ReturnStmt 0xa970c20 <line:622:9, col:16>
        (ImplicitCastExpr 0xa970c10 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa970bf8 <col:16> 'int' 0))))
    <<<NULL>>>)
  (CallExpr 0xa970d08 <line:628:5, col:13> 'int'
    (ImplicitCastExpr 0xa970cf8 <col:5> 'int (*)(int)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa970cbc <col:5> 'int (int)' lvalue Function 0xa50e530 'close' 'int (int)'))
    (ImplicitCastExpr 0xa970d28 <col:11> 'int' <LValueToRValue>
      (DeclRefExpr 0xa970ca4 <col:11> 'int' lvalue Var 0xa96c670 'fd' 'int')))
  (BinaryOperator 0xa970de8 <line:630:5, col:26> 'char' lvalue '='
    (ArraySubscriptExpr 0xa970da8 <col:5, col:24> 'char' lvalue
      (ImplicitCastExpr 0xa970d88 <col:5> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa970d34 <col:5> 'char *' lvalue Var 0xa96c750 'contents' 'char *'))
      (ImplicitCastExpr 0xa970d98 <col:14, col:17> '__off_t':'long' <LValueToRValue>
        (MemberExpr 0xa970d64 <col:14, col:17> '__off_t':'long' lvalue .st_size 0xa553700
          (DeclRefExpr 0xa970d4c <col:14> 'struct stat':'struct stat' lvalue Var 0xa96c6d0 'st' 'struct stat':'struct stat'))))
    (ImplicitCastExpr 0xa970dd8 <col:26> 'char' <IntegralCast>
      (IntegerLiteral 0xa970dc0 <col:26> 'int' 0)))
  (DeclStmt 0xa971100 <line:631:5, col:24>
    0xa970f10 "regmatch_t match[1] =
      (CXXConstructExpr 0xa9710e0 <col:16> 'regmatch_t [1]''void (void) throw()')")
  (DeclStmt 0xa971188 <line:632:5, col:15>
    0xa971120 "int w =
      (UnaryOperator 0xa971170 <col:13, col:14> 'int' prefix '-'
        (IntegerLiteral 0xa971158 <col:14> 'int' 1))")
  (BinaryOperator 0xa9711d8 <line:634:5, col:11> 'char *' lvalue '='
    (DeclRefExpr 0xa971198 <col:5> 'char *' lvalue Var 0xa96c7b0 'start' 'char *')
    (ImplicitCastExpr 0xa9711c8 <col:11> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa9711b0 <col:11> 'char *' lvalue Var 0xa96c750 'contents' 'char *')))
  (WhileStmt 0xa971770 <line:640:5, line:654:5>
    <<<NULL>>>
    (UnaryOperator 0xa9713a8 <line:640:12, col:49> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa971398 <col:13, col:49> '_Bool' <IntegralToBoolean>
        (CallExpr 0xa971308 <col:13, col:49> 'int'
          (ImplicitCastExpr 0xa9712f8 <col:13> 'int (*)(const regex_t *restrict, const char *restrict, size_t, regmatch_t *, int)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9712a0 <col:13> 'int (const regex_t *restrict, const char *restrict, size_t, regmatch_t *, int)' lvalue Function 0xa5bedb0 'regexec' 'int (const regex_t *restrict, const char *restrict, size_t, regmatch_t *, int)'))
          (ImplicitCastExpr 0xa971348 <col:21> 'const regex_t *' <NoOp>
            (ImplicitCastExpr 0xa971338 <col:21> 'regex_t *' <LValueToRValue>
              (DeclRefExpr 0xa971224 <col:21> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *')))
          (ImplicitCastExpr 0xa971368 <col:31> 'const char *' <NoOp>
            (ImplicitCastExpr 0xa971358 <col:31> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa97123c <col:31> 'char *' lvalue Var 0xa96c7b0 'start' 'char *')))
          (ImplicitCastExpr 0xa971378 <col:38> 'size_t':'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa971258 <col:38> 'int' 1))
          (ImplicitCastExpr 0xa971388 <col:41> 'regmatch_t *' <ArrayToPointerDecay>
            (DeclRefExpr 0xa971270 <col:41> 'regmatch_t [1]' lvalue Var 0xa970f10 'match' 'regmatch_t [1]'))
          (IntegerLiteral 0xa971288 <col:48> 'int' 0))))
    (CompoundStmt 0xa971750 <line:641:5, line:654:5>
      (DeclStmt 0xa971530 <line:642:9, col:52>
        0xa9713d0 "int new_w =
          (BinaryOperator 0xa971518 <col:21, col:47> 'int' '-'
            (ImplicitCastExpr 0xa9714f8 <col:21, col:30> 'regoff_t':'int' <LValueToRValue>
              (MemberExpr 0xa97145c <col:21, col:30> 'regoff_t':'int' lvalue .rm_eo 0xa5bccf0
                (ArraySubscriptExpr 0xa971448 <col:21, col:28> 'regmatch_t':'regmatch_t' lvalue
                  (ImplicitCastExpr 0xa971438 <col:21> 'regmatch_t *' <ArrayToPointerDecay>
                    (DeclRefExpr 0xa971404 <col:21> 'regmatch_t [1]' lvalue Var 0xa970f10 'match' 'regmatch_t [1]'))
                  (IntegerLiteral 0xa971420 <col:27> 'int' 0))))
            (ImplicitCastExpr 0xa971508 <col:38, col:47> 'regoff_t':'int' <LValueToRValue>
              (MemberExpr 0xa9714d4 <col:38, col:47> 'regoff_t':'int' lvalue .rm_so 0xa5bccb0
                (ArraySubscriptExpr 0xa9714c0 <col:38, col:45> 'regmatch_t':'regmatch_t' lvalue
                  (ImplicitCastExpr 0xa9714b0 <col:38> 'regmatch_t *' <ArrayToPointerDecay>
                    (DeclRefExpr 0xa97147c <col:38> 'regmatch_t [1]' lvalue Var 0xa970f10 'match' 'regmatch_t [1]'))
                  (IntegerLiteral 0xa971498 <col:44> 'int' 0)))))")
      (CompoundAssignOperator 0xa9715e0 <line:643:9, col:27> 'char *' lvalue '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
        (DeclRefExpr 0xa971540 <col:9> 'char *' lvalue Var 0xa96c7b0 'start' 'char *')
        (ImplicitCastExpr 0xa9715d0 <col:18, col:27> 'regoff_t':'int' <LValueToRValue>
          (MemberExpr 0xa9715ac <col:18, col:27> 'regoff_t':'int' lvalue .rm_eo 0xa5bccf0
            (ArraySubscriptExpr 0xa971598 <col:18, col:25> 'regmatch_t':'regmatch_t' lvalue
              (ImplicitCastExpr 0xa971588 <col:18> 'regmatch_t *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa971558 <col:18> 'regmatch_t [1]' lvalue Var 0xa970f10 'match' 'regmatch_t [1]'))
              (IntegerLiteral 0xa971570 <col:24> 'int' 0)))))
      (IfStmt 0xa971730 <line:645:9, line:653:9>
        <<<NULL>>>
        (BinaryOperator 0xa971650 <line:645:13, col:21> '_Bool' '>'
          (ImplicitCastExpr 0xa971630 <col:13> 'int' <LValueToRValue>
            (DeclRefExpr 0xa971600 <col:13> 'int' lvalue Var 0xa9713d0 'new_w' 'int'))
          (ImplicitCastExpr 0xa971640 <col:21> 'int' <LValueToRValue>
            (DeclRefExpr 0xa971618 <col:21> 'int' lvalue Var 0xa971120 'w' 'int')))
        (CompoundStmt 0xa971718 <line:646:9, line:653:9>
          (BinaryOperator 0xa9716a8 <line:651:13, col:15> 'int' lvalue '='
            (DeclRefExpr 0xa971668 <col:13> 'int' lvalue Var 0xa971120 'w' 'int')
            (ImplicitCastExpr 0xa971698 <col:15> 'int' <LValueToRValue>
              (DeclRefExpr 0xa971680 <col:15> 'int' lvalue Var 0xa9713d0 'new_w' 'int')))
          (BinaryOperator 0xa971700 <line:652:13, col:26> 'char *' lvalue '='
            (DeclRefExpr 0xa9716c0 <col:13> 'char *' lvalue Var 0xa96c890 'best_start' 'char *')
            (ImplicitCastExpr 0xa9716f0 <col:26> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa9716d8 <col:26> 'char *' lvalue Var 0xa96c7b0 'start' 'char *'))))
        <<<NULL>>>)))
  (IfStmt 0xa971de0 <line:656:5, line:672:5>
    <<<NULL>>>
    (BinaryOperator 0xa9717e0 <line:656:9, col:15> '_Bool' '!='
      (ImplicitCastExpr 0xa9717d0 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa971784 <col:9> 'int' lvalue Var 0xa971120 'w' 'int'))
      (UnaryOperator 0xa9717b8 <col:14, col:15> 'int' prefix '-'
        (IntegerLiteral 0xa9717a0 <col:15> 'int' 1)))
    (CompoundStmt 0xa971dc8 <line:657:5, line:672:5>
      (BinaryOperator 0xa971838 <line:658:9, col:17> 'char *' lvalue '='
        (DeclRefExpr 0xa9717f8 <col:9> 'char *' lvalue Var 0xa96c7b0 'start' 'char *')
        (ImplicitCastExpr 0xa971828 <col:17> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa971810 <col:17> 'char *' lvalue Var 0xa96c890 'best_start' 'char *')))
      (IfStmt 0xa971da8 <line:659:9, line:671:9>
        <<<NULL>>>
        (UnaryOperator 0xa9719c8 <line:659:13, col:49> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa9719b8 <col:14, col:49> '_Bool' <IntegralToBoolean>
            (CallExpr 0xa971928 <col:14, col:49> 'int'
              (ImplicitCastExpr 0xa971918 <col:14> 'int (*)(const regex_t *restrict, const char *restrict, size_t, regmatch_t *, int)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa971900 <col:14> 'int (const regex_t *restrict, const char *restrict, size_t, regmatch_t *, int)' lvalue Function 0xa5bedb0 'regexec' 'int (const regex_t *restrict, const char *restrict, size_t, regmatch_t *, int)'))
              (ImplicitCastExpr 0xa971968 <col:22> 'const regex_t *' <NoOp>
                (ImplicitCastExpr 0xa971958 <col:22> 'regex_t *' <LValueToRValue>
                  (DeclRefExpr 0xa971884 <col:22> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *')))
              (ImplicitCastExpr 0xa971988 <col:31> 'const char *' <NoOp>
                (ImplicitCastExpr 0xa971978 <col:31> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa97189c <col:31> 'char *' lvalue Var 0xa96c7b0 'start' 'char *')))
              (ImplicitCastExpr 0xa971998 <col:38> 'size_t':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa9718b8 <col:38> 'int' 1))
              (ImplicitCastExpr 0xa9719a8 <col:41> 'regmatch_t *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa9718d0 <col:41> 'regmatch_t [1]' lvalue Var 0xa970f10 'match' 'regmatch_t [1]'))
              (IntegerLiteral 0xa9718e8 <col:48> 'int' 0))))
        (CompoundStmt 0xa971d80 <line:660:9, line:671:9>
          (DeclStmt 0xa971a28 <line:664:13, col:22>
            0xa9719f0 "char *res")
          (BinaryOperator 0xa971b18 <line:666:13, col:37> 'char *' lvalue '='
            (DeclRefExpr 0xa971a38 <col:13> 'char *' lvalue Var 0xa96c820 'stop' 'char *')
            (BinaryOperator 0xa971b00 <col:20, col:37> 'char *' '+'
              (ImplicitCastExpr 0xa971ae0 <col:20> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa971a50 <col:20> 'char *' lvalue Var 0xa96c7b0 'start' 'char *'))
              (ImplicitCastExpr 0xa971af0 <col:28, col:37> 'regoff_t':'int' <LValueToRValue>
                (MemberExpr 0xa971abc <col:28, col:37> 'regoff_t':'int' lvalue .rm_so 0xa5bccb0
                  (ArraySubscriptExpr 0xa971aa8 <col:28, col:35> 'regmatch_t':'regmatch_t' lvalue
                    (ImplicitCastExpr 0xa971a98 <col:28> 'regmatch_t *' <ArrayToPointerDecay>
                      (DeclRefExpr 0xa971a68 <col:28> 'regmatch_t [1]' lvalue Var 0xa970f10 'match' 'regmatch_t [1]'))
                    (IntegerLiteral 0xa971a80 <col:34> 'int' 0))))))
          (BinaryOperator 0xa971b88 <line:667:13, col:21> 'char' lvalue '='
            (UnaryOperator 0xa971b58 <col:13, col:14> 'char' lvalue prefix '*'
              (ImplicitCastExpr 0xa971b48 <col:14> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa971b30 <col:14> 'char *' lvalue Var 0xa96c820 'stop' 'char *')))
            (CharacterLiteral 0xa971b70 <col:21> 'char'0))
          (BinaryOperator 0xa971c78 <line:668:13, col:30> 'char *' lvalue '='
            (DeclRefExpr 0xa971ba0 <col:13> 'char *' lvalue Var 0xa9719f0 'res' 'char *')
            (CallExpr 0xa971c48 <col:19, col:30> 'char *'
              (ImplicitCastExpr 0xa971c38 <col:19> 'char *(*)(char *)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa971c04 <col:19> 'char *(char *)' lvalue Function 0xa96a810 'munge' 'char *(char *)'))
              (ImplicitCastExpr 0xa971c68 <col:25> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa971bec <col:25> 'char *' lvalue Var 0xa96c7b0 'start' 'char *'))))
          (CallExpr 0xa971d08 <line:669:13, col:26> 'void'
            (ImplicitCastExpr 0xa971cf8 <col:13> 'void (*)(void *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa971cdc <col:13> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
            (ImplicitCastExpr 0xa971d38 <col:18> 'void *' <BitCast>
              (ImplicitCastExpr 0xa971d28 <col:18> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa971cc4 <col:18> 'char *' lvalue Var 0xa96c750 'contents' 'char *'))))
          (ReturnStmt 0xa971d70 <line:670:13, col:20>
            (ImplicitCastExpr 0xa971d60 <col:20> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa971d44 <col:20> 'char *' lvalue Var 0xa9719f0 'res' 'char *'))))
        <<<NULL>>>))
    <<<NULL>>>)
  (CallExpr 0xa971e78 <line:673:5, col:18> 'void'
    (ImplicitCastExpr 0xa971e68 <col:5> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa971e4c <col:5> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
    (ImplicitCastExpr 0xa971ea8 <col:10> 'void *' <BitCast>
      (ImplicitCastExpr 0xa971e98 <col:10> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa971e34 <col:10> 'char *' lvalue Var 0xa96c750 'contents' 'char *'))))
  (CallExpr 0xa971fe8 <line:674:5, col:76> 'int'
    (ImplicitCastExpr 0xa971fd8 <col:5> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa971fc0 <col:5> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
    (ImplicitCastExpr 0xa972018 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
      (DeclRefExpr 0xa971eec <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
    (ImplicitCastExpr 0xa972028 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
      (ParenExpr 0xa971f70 <col:19, col:26> 'const char [32]' lvalue
        (StringLiteral 0xa971f30 <line:674:23> 'const char [32]' lvalue "%s: No description for type %s\n")))
    (ImplicitCastExpr 0xa972038 <line:95:16> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa971f84 <col:16> 'const char [7]' lvalue "mimedb"))
    (ImplicitCastExpr 0xa972048 <line:674:68> 'const char *' <LValueToRValue>
      (DeclRefExpr 0xa971fa8 <col:68> 'const char *' lvalue ParmVar 0xa96c4a0 'mimetype' 'const char *')))
  (BinaryOperator 0xa972088 <line:675:5, col:11> 'int' lvalue '='
    (DeclRefExpr 0xa972054 <col:5> 'int' lvalue Var 0xa952100 'error' 'int')
    (IntegerLiteral 0xa972070 <col:11> 'int' 1))
  (ReturnStmt 0xa9720c8 <line:676:5, col:12>
    (ImplicitCastExpr 0xa9720b8 <col:12> 'char *' <NullToPointer>
      (IntegerLiteral 0xa9720a0 <col:12> 'int' 0))))


static char *get_action(const char *mimetype) (CompoundStmt 0xa974db8 <../codeBase/fish-shell-master/mimedb.cpp:685:1, line:791:1>
  (DeclStmt 0xa9722c0 <line:686:5, col:16>
    0xa972260 "char *res =
      (ImplicitCastExpr 0xa9722b0 <col:15> 'char *' <NullToPointer>
        (IntegerLiteral 0xa972298 <col:15> 'int' 0))")
  (DeclStmt 0xa972370 <line:688:5, col:31>
    0xa9722e0 "const char *launcher"
    0xa972330 "const char *end")
  (DeclStmt 0xa9723e8 <line:689:5, col:33>
    0xa972390 "string_list_t mime_filenames =
      (CXXConstructExpr 0xa9723c8 <col:19> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >''void (void)')")
  (DeclStmt 0xa972470 <line:691:5, col:36>
    0xa972410 "const char *launcher_str =
      (ImplicitCastExpr 0xa972460 </usr/include/linux/stddef.h:8:14> 'const char *' <NullToPointer>
        (IntegerLiteral 0xa972448 <col:14> 'int' 0))")
  (DeclStmt 0xa972520 <../codeBase/fish-shell-master/mimedb.cpp:692:5, col:56>
    0xa972490 "const char *launcher_command_str"
    0xa9724e0 "const char *launcher_command")
  (DeclStmt 0xa972578 <line:693:5, col:24>
    0xa972540 "char *launcher_full")
  (IfStmt 0xa972700 <line:695:5, line:698:5>
    <<<NULL>>>
    (UnaryOperator 0xa972698 <line:695:9, col:61> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa972688 <col:10, col:61> '_Bool' <IntegralToBoolean>
        (CallExpr 0xa972650 <col:10, col:61> 'int'
          (ImplicitCastExpr 0xa972640 <col:10> 'int (*)(string_list_t &, const char *, int)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa972628 <col:10> 'int (string_list_t &, const char *, int)' lvalue Function 0xa955b10 'append_filenames' 'int (string_list_t &, const char *, int)'))
          (DeclRefExpr 0xa9725bc <col:27> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xa972390 'mime_filenames' 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >')
          (ImplicitCastExpr 0xa972678 <line:84:25> 'const char *' <ArrayToPointerDecay>
            (StringLiteral 0xa9725d4 <col:25> 'const char [27]' lvalue "applications/defaults.list"))
          (IntegerLiteral 0xa972610 <line:695:60> 'int' 1))))
    (CompoundStmt 0xa9726e8 <line:696:5, line:698:5>
      (ReturnStmt 0xa9726d8 <line:697:9, col:16>
        (ImplicitCastExpr 0xa9726c8 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa9726b0 <col:16> 'int' 0))))
    <<<NULL>>>)
  (ForStmt 0xa972b00 <line:700:5, line:705:5>
    (DeclStmt 0xa972790 <line:700:10, col:22>
      0xa972730 "size_t i =
        (ImplicitCastExpr 0xa972780 <col:21> 'size_t':'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa972768 <col:21> 'int' 0))")
    <<<NULL>>>
    (BinaryOperator 0xa972830 <col:24, col:48> '_Bool' '<'
      (ImplicitCastExpr 0xa972820 <col:24> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa9727a0 <col:24> 'size_t':'unsigned int' lvalue Var 0xa972730 'i' 'size_t':'unsigned int'))
      (CXXMemberCallExpr 0xa9727f0 <col:28, col:48> 'size_type':'unsigned int'
        (MemberExpr 0xa9727d0 <col:28, col:43> '<bound member function type>' .size 0xa9613f0
          (ImplicitCastExpr 0xa972810 <col:28> 'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue <NoOp>
            (DeclRefExpr 0xa9727b8 <col:28> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xa972390 'mime_filenames' 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >')))))
    (UnaryOperator 0xa972860 <col:51, col:52> 'size_t':'unsigned int' postfix '++'
      (DeclRefExpr 0xa972848 <col:51> 'size_t':'unsigned int' lvalue Var 0xa972730 'i' 'size_t':'unsigned int'))
    (CompoundStmt 0xa972ae8 <line:701:5, line:705:5>
      (BinaryOperator 0xa972a70 <line:702:9, col:73> 'const char *' lvalue '='
        (DeclRefExpr 0xa972874 <col:9> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *')
        (CallExpr 0xa972a38 <col:24, col:73> 'const char *'
          (ImplicitCastExpr 0xa972a28 <col:24> 'const char *(*)(const char *, const char *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa9729ec <col:24> 'const char *(const char *, const char *)' lvalue Function 0xa952ce0 'search_ini' 'const char *(const char *, const char *)'))
          (CXXMemberCallExpr 0xa9729a8 <col:35, col:62> 'const char *'
            (MemberExpr 0xa972984 <col:35, col:56> '<bound member function type>' .c_str 0xa6d9410
              (ImplicitCastExpr 0xa9729c8 <col:35, col:54> 'const class std::basic_string<char>' lvalue <NoOp>
                (CXXMemberCallExpr 0xa972958 <col:35, col:54> 'class std::basic_string<char>':'class std::basic_string<char>' lvalue
                  (MemberExpr 0xa972934 <col:35, col:50> '<bound member function type>' .at 0xa961eb0
                    (DeclRefExpr 0xa9728c4 <col:35> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xa972390 'mime_filenames' 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >'))
                  (ImplicitCastExpr 0xa972978 <col:53> 'size_t':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0xa97291c <col:53> 'size_t':'unsigned int' lvalue Var 0xa972730 'i' 'size_t':'unsigned int'))))))
          (ImplicitCastExpr 0xa972a60 <col:65> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9729d4 <col:65> 'const char *' lvalue ParmVar 0xa972180 'mimetype' 'const char *'))))
      (IfStmt 0xa972ac8 <line:703:9, line:704:13>
        <<<NULL>>>
        (ImplicitCastExpr 0xa972ab0 <line:703:13> '_Bool' <PointerToBoolean>
          (ImplicitCastExpr 0xa972aa0 <col:13> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa972a88 <col:13> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *')))
        (BreakStmt 0xa972ac0 <line:704:13>)
        <<<NULL>>>)))
  (IfStmt 0xa973498 <line:708:5, line:735:5>
    <<<NULL>>>
    (UnaryOperator 0xa972b60 <line:708:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa972b50 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa972b40 <col:10> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa972b24 <col:10> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *'))))
    (CompoundStmt 0xa973470 <line:709:5, line:735:5>
      (DeclStmt 0xa972c88 <line:714:9, col:68>
        0xa972b90 "const char **parents =
          (CallExpr 0xa972c58 <col:33, col:67> 'const char **'
            (ImplicitCastExpr 0xa972c48 <col:33> 'const char **(*)(const char *)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa972c14 <col:33> 'const char **(const char *)' lvalue Function 0xa8eefb0 'xdg_mime_get_mime_parents' 'const char **(const char *)'))
            (ImplicitCastExpr 0xa972c78 <col:59> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xa972bfc <col:59> 'const char *' lvalue ParmVar 0xa972180 'mimetype' 'const char *')))")
      (DeclStmt 0xa972ce8 <line:716:9, col:23>
        0xa972cb0 "const char **p")
      (IfStmt 0xa973060 <line:717:9, line:725:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa972d20 <line:717:13> '_Bool' <PointerToBoolean>
          (ImplicitCastExpr 0xa972d10 <col:13> 'const char **' <LValueToRValue>
            (DeclRefExpr 0xa972cf8 <col:13> 'const char **' lvalue Var 0xa972b90 'parents' 'const char **')))
        (CompoundStmt 0xa973048 <line:718:9, line:725:9>
          (ForStmt 0xa973020 <line:719:13, line:724:13>
            (BinaryOperator 0xa972d70 <line:719:18, col:20> 'const char **' lvalue '='
              (DeclRefExpr 0xa972d2c <col:18> 'const char **' lvalue Var 0xa972cb0 'p' 'const char **')
              (ImplicitCastExpr 0xa972d60 <col:20> 'const char **' <LValueToRValue>
                (DeclRefExpr 0xa972d44 <col:20> 'const char **' lvalue Var 0xa972b90 'parents' 'const char **')))
            <<<NULL>>>
            (ImplicitCastExpr 0xa972dd8 <col:29, col:30> '_Bool' <PointerToBoolean>
              (ImplicitCastExpr 0xa972dc8 <col:29, col:30> 'const char *' <LValueToRValue>
                (UnaryOperator 0xa972db0 <col:29, col:30> 'const char *' lvalue prefix '*'
                  (ImplicitCastExpr 0xa972da0 <col:30> 'const char **' <LValueToRValue>
                    (DeclRefExpr 0xa972d88 <col:30> 'const char **' lvalue Var 0xa972cb0 'p' 'const char **')))))
            (UnaryOperator 0xa972e00 <col:33, col:34> 'const char **' postfix '++'
              (DeclRefExpr 0xa972de4 <col:33> 'const char **' lvalue Var 0xa972cb0 'p' 'const char **'))
            (CompoundStmt 0xa973008 <line:720:13, line:724:13>
              (DeclStmt 0xa972f38 <line:721:17, col:41>
                0xa972e30 "char *a =
                  (CallExpr 0xa972f08 <col:27, col:40> 'char *'
                    (ImplicitCastExpr 0xa972ef8 <col:27> 'char *(*)(const char *)' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa972edc <col:27> 'char *(const char *)' lvalue Function 0xa9721e0 'get_action' 'char *(const char *)'))
                    (ImplicitCastExpr 0xa972f28 <col:38, col:39> 'const char *' <LValueToRValue>
                      (UnaryOperator 0xa972ec8 <col:38, col:39> 'const char *' lvalue prefix '*'
                        (ImplicitCastExpr 0xa972eb8 <col:39> 'const char **' <LValueToRValue>
                          (DeclRefExpr 0xa972e9c <col:39> 'const char **' lvalue Var 0xa972cb0 'p' 'const char **')))))")
              (IfStmt 0xa972fe8 <line:722:17, line:723:28>
                <<<NULL>>>
                (BinaryOperator 0xa972f98 <line:722:21, col:26> '_Bool' '!='
                  (ImplicitCastExpr 0xa972f78 <col:21> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xa972f48 <col:21> 'char *' lvalue Var 0xa972e30 'a' 'char *'))
                  (ImplicitCastExpr 0xa972f88 <col:26> 'char *' <NullToPointer>
                    (IntegerLiteral 0xa972f60 <col:26> 'int' 0)))
                (ReturnStmt 0xa972fd8 <line:723:21, col:28>
                  (ImplicitCastExpr 0xa972fc8 <col:28> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xa972fb0 <col:28> 'char *' lvalue Var 0xa972e30 'a' 'char *')))
                <<<NULL>>>))))
        <<<NULL>>>)
      (IfStmt 0xa973418 <line:731:9, line:732:43>
        <<<NULL>>>
        (BinaryOperator 0xa973338 <line:731:13, col:90> '_Bool' '&&'
          (BinaryOperator 0xa9731e8 <col:13, col:52> '_Bool' '!='
            (CallExpr 0xa973178 <col:13, col:47> 'int'
              (ImplicitCastExpr 0xa973168 <col:13> 'int (*)(const char *, const char *, size_t) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa973150 <col:13> 'int (const char *, const char *, size_t) throw()' lvalue Function 0xa4e11d0 'strncmp' 'int (const char *, const char *, size_t) throw()'))
              (ImplicitCastExpr 0xa9731a0 <col:21> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xa9730b4 <col:21> 'const char *' lvalue ParmVar 0xa972180 'mimetype' 'const char *'))
              (ImplicitCastExpr 0xa9731b0 <col:31> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa973110 <col:31> 'const char [11]' lvalue "text/plain"))
              (ImplicitCastExpr 0xa9731c0 <col:45> 'size_t':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa973138 <col:45> 'int' 10)))
            (IntegerLiteral 0xa9731d0 <col:52> 'int' 0))
          (BinaryOperator 0xa973320 <col:57, col:90> '_Bool' '=='
            (CallExpr 0xa9732b0 <col:57, col:85> 'int'
              (ImplicitCastExpr 0xa9732a0 <col:57> 'int (*)(const char *, const char *, size_t) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa973288 <col:57> 'int (const char *, const char *, size_t) throw()' lvalue Function 0xa4e11d0 'strncmp' 'int (const char *, const char *, size_t) throw()'))
              (ImplicitCastExpr 0xa9732d8 <col:65> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xa973234 <col:65> 'const char *' lvalue ParmVar 0xa972180 'mimetype' 'const char *'))
              (ImplicitCastExpr 0xa9732e8 <col:75> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa97324c <col:75> 'const char [6]' lvalue "text/"))
              (ImplicitCastExpr 0xa9732f8 <col:84> 'size_t':'unsigned int' <IntegralCast>
                (IntegerLiteral 0xa973270 <col:84> 'int' 5)))
            (IntegerLiteral 0xa973308 <col:90> 'int' 0)))
        (ReturnStmt 0xa973408 <line:732:13, col:43>
          (CallExpr 0xa9733d8 <col:20, col:43> 'char *'
            (ImplicitCastExpr 0xa9733c8 <col:20> 'char *(*)(const char *)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9733ac <col:20> 'char *(const char *)' lvalue Function 0xa9721e0 'get_action' 'char *(const char *)'))
            (ImplicitCastExpr 0xa9733f8 <col:31> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa973384 <col:31> 'const char [11]' lvalue "text/plain"))))
        <<<NULL>>>)
      (ReturnStmt 0xa973460 <line:734:9, col:16>
        (ImplicitCastExpr 0xa973450 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa973438 <col:16> 'int' 0))))
    <<<NULL>>>)
  (BinaryOperator 0xa9735e0 <line:738:5, col:59> 'const char *' lvalue '='
    (DeclRefExpr 0xa9734b4 <col:5> 'const char *' lvalue Var 0xa9722e0 'launcher' 'const char *')
    (ImplicitCastExpr 0xa9735d0 <col:16, col:59> 'const char *' <NoOp>
      (CXXConstCastExpr 0xa9735b8 <col:16, col:59> 'char *' const_cast<char *> <NoOp>
        (CallExpr 0xa973560 <col:34, col:58> 'char *'
          (ImplicitCastExpr 0xa973550 <col:34> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
            (DeclRefExpr 0xa973534 <col:34> 'char *(const char *, int) throw()' lvalue Function 0xa4e7890 'strchr' 'char *(const char *, int) throw()'))
          (ImplicitCastExpr 0xa973588 <col:41> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa973504 <col:41> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *'))
          (ImplicitCastExpr 0xa973598 <col:55> 'int' <IntegralCast>
            (CharacterLiteral 0xa973520 <col:55> 'char'61))))))
  (IfStmt 0xa973868 <line:740:5, line:745:5>
    <<<NULL>>>
    (UnaryOperator 0xa973630 <line:740:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa973620 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa973610 <col:10> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa9735f8 <col:10> 'const char *' lvalue Var 0xa9722e0 'launcher' 'const char *'))))
    (CompoundStmt 0xa973848 <line:741:5, line:745:5>
      (CallExpr 0xa973758 <line:742:9, col:94> 'int'
        (ImplicitCastExpr 0xa973748 <col:9> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa973730 <col:9> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
        (ImplicitCastExpr 0xa973788 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
          (DeclRefExpr 0xa97367c <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
        (ImplicitCastExpr 0xa973798 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
          (ParenExpr 0xa9736e0 <col:19, col:26> 'const char [42]' lvalue
            (StringLiteral 0xa973694 <line:742:27> 'const char [42]' lvalue "%s: Could not parse launcher string '%s'\n")))
        (ImplicitCastExpr 0xa9737a8 <line:95:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa9736f4 <col:16> 'const char [7]' lvalue "mimedb"))
        (ImplicitCastExpr 0xa9737b8 <line:742:82> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa973718 <col:82> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *')))
      (BinaryOperator 0xa9737f8 <line:743:9, col:15> 'int' lvalue '='
        (DeclRefExpr 0xa9737c4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa9737e0 <col:15> 'int' 1))
      (ReturnStmt 0xa973838 <line:744:9, col:16>
        (ImplicitCastExpr 0xa973828 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa973810 <col:16> 'int' 0))))
    <<<NULL>>>)
  (UnaryOperator 0xa9738a0 <line:748:5, col:13> 'const char *' postfix '++'
    (DeclRefExpr 0xa973884 <col:5> 'const char *' lvalue Var 0xa9722e0 'launcher' 'const char *'))
  (DeclStmt 0xa973aa0 <line:751:5, col:40>
    0xa9738e0 "std::string mut_launcher =
      (ExprWithCleanups 0xa973a80 <col:17, col:32> 'std::string':'class std::basic_string<char>'
        (CXXTemporary 0xa973970)
        (CXXTemporary 0xa973a10)
        (CXXConstructExpr 0xa973a58 <col:17, col:32> 'std::string':'class std::basic_string<char>''void (const class std::basic_string<char> &)' elidable
          (MaterializeTemporaryExpr 0xa973a48 <col:32> 'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xa973a38 <col:32> 'const class std::basic_string<char>' <NoOp>
              (ImplicitCastExpr 0xa973a28 <col:32> 'std::string':'class std::basic_string<char>' <ConstructorConversion>
                (CXXBindTemporaryExpr 0xa973a18 <col:32> 'std::string':'class std::basic_string<char>' (CXXTemporary 0xa973a10)
                  (CXXConstructExpr 0xa9739e8 <col:32> 'std::string':'class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                    (ImplicitCastExpr 0xa973930 <col:32> 'const char *' <LValueToRValue>
                      (DeclRefExpr 0xa973914 <col:32> 'const char *' lvalue Var 0xa9722e0 'launcher' 'const char *'))
                    (CXXDefaultArgExpr 0xa9739d0 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))))")
  (BinaryOperator 0xa973bb0 <line:754:5, col:31> 'const char *' lvalue '='
    (DeclRefExpr 0xa973ab0 <col:5> 'const char *' lvalue Var 0xa972330 'end' 'const char *')
    (ImplicitCastExpr 0xa973ba0 <col:11, col:31> 'const char *' <NoOp>
      (CallExpr 0xa973b58 <col:11, col:31> 'char *'
        (ImplicitCastExpr 0xa973b48 <col:11> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa973b2c <col:11> 'char *(const char *, int) throw()' lvalue Function 0xa4e7890 'strchr' 'char *(const char *, int) throw()'))
        (ImplicitCastExpr 0xa973b80 <col:18> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa973afc <col:18> 'const char *' lvalue Var 0xa9722e0 'launcher' 'const char *'))
        (ImplicitCastExpr 0xa973b90 <col:28> 'int' <IntegralCast>
          (CharacterLiteral 0xa973b18 <col:28> 'char'59)))))
  (IfStmt 0xa973d10 <line:755:5, line:756:43>
    <<<NULL>>>
    (ImplicitCastExpr 0xa973bf0 <line:755:9> '_Bool' <PointerToBoolean>
      (ImplicitCastExpr 0xa973be0 <col:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa973bc8 <col:9> 'const char *' lvalue Var 0xa972330 'end' 'const char *')))
    (CXXMemberCallExpr 0xa973ce0 <line:756:9, col:43> 'void'
      (MemberExpr 0xa973cc0 <col:9, col:22> '<bound member function type>' .resize 0xa842ee0
        (DeclRefExpr 0xa973bfc <col:9> 'std::string':'class std::basic_string<char>' lvalue Var 0xa9738e0 'mut_launcher' 'std::string':'class std::basic_string<char>'))
      (ImplicitCastExpr 0xa973d00 <col:29, col:35> 'size_type':'unsigned int' <IntegralCast>
        (BinaryOperator 0xa973ca8 <col:29, col:35> 'int' '-'
          (ImplicitCastExpr 0xa973c88 <col:29> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa973c54 <col:29> 'const char *' lvalue Var 0xa972330 'end' 'const char *'))
          (ImplicitCastExpr 0xa973c98 <col:35> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa973c6c <col:35> 'const char *' lvalue Var 0xa9722e0 'launcher' 'const char *')))))
    <<<NULL>>>)
  (BinaryOperator 0xa973f68 <line:758:5, col:87> 'char *' lvalue '='
    (DeclRefExpr 0xa973d2c <col:5> 'char *' lvalue Var 0xa972540 'launcher_full' 'char *')
    (CStyleCastExpr 0xa973f50 <col:21, col:87> 'char *' <BitCast>
      (CallExpr 0xa973f20 <col:29, col:87> 'void *'
        (ImplicitCastExpr 0xa973f10 <col:29> 'void *(*)(size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa973ef8 <col:29> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
        (BinaryOperator 0xa973ee0 <col:39, col:86> 'unsigned int' '+'
          (BinaryOperator 0xa973ea0 <col:39, col:84> 'unsigned int' '+'
            (CXXMemberCallExpr 0xa973db8 <col:39, col:57> 'size_type':'unsigned int'
              (MemberExpr 0xa973d94 <col:39, col:52> '<bound member function type>' .size 0xa842720
                (ImplicitCastExpr 0xa973dd8 <col:39> 'const class std::basic_string<char>' lvalue <NoOp>
                  (DeclRefExpr 0xa973d7c <col:39> 'std::string':'class std::basic_string<char>' lvalue Var 0xa9738e0 'mut_launcher' 'std::string':'class std::basic_string<char>'))))
            (CallExpr 0xa973e70 <col:61, col:84> 'size_t':'unsigned int'
              (ImplicitCastExpr 0xa973e60 <col:61> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa973e48 <col:61> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
              (ImplicitCastExpr 0xa973e90 <line:60:26> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa973e1c <col:26> 'const char [14]' lvalue "applications/"))))
          (ImplicitCastExpr 0xa973ed0 <line:758:86> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa973eb8 <col:86> 'int' 1))))))
  (IfStmt 0xa974100 <line:759:5, line:763:5>
    <<<NULL>>>
    (UnaryOperator 0xa973fb8 <line:759:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa973fa8 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa973f98 <col:10> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa973f80 <col:10> 'char *' lvalue Var 0xa972540 'launcher_full' 'char *'))))
    (CompoundStmt 0xa9740e8 <line:760:5, line:763:5>
      (CallExpr 0xa974090 <line:761:9, col:34> 'void'
        (ImplicitCastExpr 0xa974080 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa974068 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (CStyleCastExpr 0xa974050 <col:14, col:22> 'void *' <NoOp>
          (ImplicitCastExpr 0xa974040 <col:22> 'void *' <BitCast>
            (ImplicitCastExpr 0xa974030 <col:22> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xa974004 <col:22> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *')))))
      (ReturnStmt 0xa9740d8 <line:762:9, col:16>
        (ImplicitCastExpr 0xa9740c8 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa9740b0 <col:16> 'int' 0))))
    <<<NULL>>>)
  (CallExpr 0xa9741c0 <line:765:5, col:43> 'char *'
    (ImplicitCastExpr 0xa9741b0 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa974198 <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0760 'strcpy' 'char *(char *restrict, const char *restrict) throw()'))
    (ImplicitCastExpr 0xa9741e8 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa974154 <col:12> 'char *' lvalue Var 0xa972540 'launcher_full' 'char *'))
    (ImplicitCastExpr 0xa9741f8 <line:60:26> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa97416c <col:26> 'const char [14]' lvalue "applications/")))
  (CallExpr 0xa9742e8 <line:766:5, col:47> 'char *'
    (ImplicitCastExpr 0xa9742d8 <col:5> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9742bc <col:5> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0b60 'strcat' 'char *(char *restrict, const char *restrict) throw()'))
    (ImplicitCastExpr 0xa974310 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa97423c <col:12> 'char *' lvalue Var 0xa972540 'launcher_full' 'char *'))
    (CXXMemberCallExpr 0xa974290 <col:27, col:46> 'const char *'
      (MemberExpr 0xa97426c <col:27, col:40> '<bound member function type>' .c_str 0xa6d9410
        (ImplicitCastExpr 0xa9742b0 <col:27> 'const class std::basic_string<char>' lvalue <NoOp>
          (DeclRefExpr 0xa974254 <col:27> 'std::string':'class std::basic_string<char>' lvalue Var 0xa9738e0 'mut_launcher' 'std::string':'class std::basic_string<char>')))))
  (CallExpr 0xa9743e0 <line:767:5, col:30> 'void'
    (ImplicitCastExpr 0xa9743d0 <col:5> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9743b8 <col:5> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
    (CStyleCastExpr 0xa9743a0 <col:10, col:18> 'void *' <NoOp>
      (ImplicitCastExpr 0xa974390 <col:18> 'void *' <BitCast>
        (ImplicitCastExpr 0xa974380 <col:18> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa974354 <col:18> 'const char *' lvalue Var 0xa972410 'launcher_str' 'const char *')))))
  (DeclStmt 0xa974590 <line:769:5, col:64>
    0xa974430 "std::string launcher_filename =
      (ExprWithCleanups 0xa974570 <col:37, col:63> 'std::string':'class std::basic_string<char>'
        (CXXTemporary 0xa974510)
        (CXXConstructExpr 0xa974548 <col:37, col:63> 'std::string':'class std::basic_string<char>''void (const class std::basic_string<char> &)' elidable
          (MaterializeTemporaryExpr 0xa974538 <col:37, col:63> 'const class std::basic_string<char>' lvalue
            (ImplicitCastExpr 0xa974528 <col:37, col:63> 'const class std::basic_string<char>' <NoOp>
              (CXXBindTemporaryExpr 0xa974518 <col:37, col:63> 'std::string':'class std::basic_string<char>' (CXXTemporary 0xa974510)
                (CallExpr 0xa9744e0 <col:37, col:63> 'std::string':'class std::basic_string<char>'
                  (ImplicitCastExpr 0xa9744d0 <col:37> 'std::string (*)(char *)' <FunctionToPointerDecay>
                    (DeclRefExpr 0xa9744b4 <col:37> 'std::string (char *)' lvalue Function 0xa96a220 'get_filename' 'std::string (char *)'))
                  (ImplicitCastExpr 0xa974500 <col:50> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xa97449c <col:50> 'char *' lvalue Var 0xa972540 'launcher_full' 'char *'))))))))")
  (CallExpr 0xa974618 <line:771:5, col:23> 'void'
    (ImplicitCastExpr 0xa974608 <col:5> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9745ec <col:5> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
    (ImplicitCastExpr 0xa974648 <col:10> 'void *' <BitCast>
      (ImplicitCastExpr 0xa974638 <col:10> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa9745d4 <col:10> 'char *' lvalue Var 0xa972540 'launcher_full' 'char *'))))
  (BinaryOperator 0xa974790 <line:773:5, col:72> 'const char *' lvalue '='
    (DeclRefExpr 0xa974654 <col:5> 'const char *' lvalue Var 0xa972490 'launcher_command_str' 'const char *')
    (CallExpr 0xa974758 <col:28, col:72> 'const char *'
      (ImplicitCastExpr 0xa974748 <col:28> 'const char *(*)(const char *, const char *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa97472c <col:28> 'const char *(const char *, const char *)' lvalue Function 0xa952ce0 'search_ini' 'const char *(const char *, const char *)'))
      (CXXMemberCallExpr 0xa9746e0 <col:39, col:63> 'const char *'
        (MemberExpr 0xa9746bc <col:39, col:57> '<bound member function type>' .c_str 0xa6d9410
          (ImplicitCastExpr 0xa974700 <col:39> 'const class std::basic_string<char>' lvalue <NoOp>
            (DeclRefExpr 0xa9746a4 <col:39> 'std::string':'class std::basic_string<char>' lvalue Var 0xa974430 'launcher_filename' 'std::string':'class std::basic_string<char>'))))
      (ImplicitCastExpr 0xa974780 <col:66> 'const char *' <ArrayToPointerDecay>
        (StringLiteral 0xa97470c <col:66> 'const char [5]' lvalue "Exec"))))
  (IfStmt 0xa974a60 <line:775:5, line:781:5>
    <<<NULL>>>
    (UnaryOperator 0xa9747e0 <line:775:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9747d0 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa9747c0 <col:10> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa9747a8 <col:10> 'const char *' lvalue Var 0xa972490 'launcher_command_str' 'const char *'))))
    (CompoundStmt 0xa974a48 <line:776:5, line:781:5>
      (CallExpr 0xa9749b0 <line:777:9, line:779:42> 'int'
        (ImplicitCastExpr 0xa9749a0 <line:777:9> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa974984 <col:9> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
        (ImplicitCastExpr 0xa9749e0 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
          (DeclRefExpr 0xa97482c <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
        (ImplicitCastExpr 0xa9749f0 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
          (ParenExpr 0xa9748e8 <col:19, col:26> 'const char [57]' lvalue
            (StringLiteral 0xa974890 <line:778:19> 'const char [57]' lvalue "%s: Default launcher '%s' does not specify how to start\n")))
        (ImplicitCastExpr 0xa974a00 <line:95:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xa9748fc <col:16> 'const char [7]' lvalue "mimedb"))
        (CXXMemberCallExpr 0xa974958 <line:779:17, col:41> 'const char *'
          (MemberExpr 0xa974938 <col:17, col:35> '<bound member function type>' .c_str 0xa6d9410
            (ImplicitCastExpr 0xa974978 <col:17> 'const class std::basic_string<char>' lvalue <NoOp>
              (DeclRefExpr 0xa974920 <col:17> 'std::string':'class std::basic_string<char>' lvalue Var 0xa974430 'launcher_filename' 'std::string':'class std::basic_string<char>')))))
      (ReturnStmt 0xa974a38 <line:780:9, col:16>
        (ImplicitCastExpr 0xa974a28 <col:16> 'char *' <NullToPointer>
          (IntegerLiteral 0xa974a10 <col:16> 'int' 0))))
    <<<NULL>>>)
  (BinaryOperator 0xa974b80 <line:783:5, col:56> 'const char *' lvalue '='
    (DeclRefExpr 0xa974a7c <col:5> 'const char *' lvalue Var 0xa9724e0 'launcher_command' 'const char *')
    (ImplicitCastExpr 0xa974b70 <col:24, col:56> 'const char *' <NoOp>
      (CallExpr 0xa974b28 <col:24, col:56> 'char *'
        (ImplicitCastExpr 0xa974b18 <col:24> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa974afc <col:24> 'char *(const char *, int) throw()' lvalue Function 0xa4e7890 'strchr' 'char *(const char *, int) throw()'))
        (ImplicitCastExpr 0xa974b50 <col:31> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa974acc <col:31> 'const char *' lvalue Var 0xa972490 'launcher_command_str' 'const char *'))
        (ImplicitCastExpr 0xa974b60 <col:53> 'int' <IntegralCast>
          (CharacterLiteral 0xa974ae8 <col:53> 'char'61)))))
  (UnaryOperator 0xa974bb0 <line:784:5, col:21> 'const char *' postfix '++'
    (DeclRefExpr 0xa974b98 <col:5> 'const char *' lvalue Var 0xa9724e0 'launcher_command' 'const char *'))
  (BinaryOperator 0xa974c88 <line:786:5, col:37> 'char *' lvalue '='
    (DeclRefExpr 0xa974bc4 <col:5> 'char *' lvalue Var 0xa972260 'res' 'char *')
    (CallExpr 0xa974c58 <col:11, col:37> 'char *'
      (ImplicitCastExpr 0xa974c48 <col:11> 'char *(*)(const char *)' <FunctionToPointerDecay>
        (DeclRefExpr 0xa974c2c <col:11> 'char *(const char *)' lvalue Function 0xa9527f0 'my_strdup' 'char *(const char *)'))
      (ImplicitCastExpr 0xa974c78 <col:21> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa974c14 <col:21> 'const char *' lvalue Var 0xa9724e0 'launcher_command' 'const char *'))))
  (CallExpr 0xa974d60 <line:788:5, col:38> 'void'
    (ImplicitCastExpr 0xa974d50 <col:5> 'void (*)(void *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa974d38 <col:5> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
    (CStyleCastExpr 0xa974d20 <col:10, col:18> 'void *' <NoOp>
      (ImplicitCastExpr 0xa974d10 <col:18> 'void *' <BitCast>
        (ImplicitCastExpr 0xa974d00 <col:18> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa974cd4 <col:18> 'const char *' lvalue Var 0xa972490 'launcher_command_str' 'const char *')))))
  (ReturnStmt 0xa974da8 <line:790:5, col:12>
    (ImplicitCastExpr 0xa974d98 <col:12> 'char *' <LValueToRValue>
      (DeclRefExpr 0xa974d80 <col:12> 'char *' lvalue Var 0xa972260 'res' 'char *'))))


static void writer(char c) (CompoundStmt 0xa975690 <../codeBase/fish-shell-master/mimedb.cpp:798:1, line:818:1>
  (IfStmt 0xa974f88 <line:799:5, line:800:9>
    <<<NULL>>>
    (BinaryOperator 0xa974f60 <line:799:9, col:24> '_Bool' '=='
      (ImplicitCastExpr 0xa974f50 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa974f04 <col:9> 'int' lvalue Var 0xa9521d0 'launch_len' 'int'))
      (UnaryOperator 0xa974f38 <col:23, col:24> 'int' prefix '-'
        (IntegerLiteral 0xa974f20 <col:24> 'int' 1)))
    (ReturnStmt 0xa974f78 <line:800:9>)
    <<<NULL>>>)
  (IfStmt 0xa9755c0 <line:802:5, line:816:5>
    <<<NULL>>>
    (BinaryOperator 0xa974ff8 <line:802:9, col:23> '_Bool' '<='
      (ImplicitCastExpr 0xa974fd8 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa974fa4 <col:9> 'int' lvalue Var 0xa9521d0 'launch_len' 'int'))
      (ImplicitCastExpr 0xa974fe8 <col:23> 'int' <LValueToRValue>
        (DeclRefExpr 0xa974fbc <col:23> 'int' lvalue Var 0xa952230 'launch_pos' 'int')))
    (CompoundStmt 0xa975598 <line:803:5, line:816:5>
      (DeclStmt 0xa975120 <line:804:9, col:50>
        0xa975020 "int new_len =
          (ConditionalOperator 0xa975100 <col:23, col:47> 'int'
            (ImplicitCastExpr 0xa9750f0 <col:23> '_Bool' <IntegralToBoolean>
              (ImplicitCastExpr 0xa9750e0 <col:23> 'int' <LValueToRValue>
                (DeclRefExpr 0xa975054 <col:23> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')))
            (BinaryOperator 0xa9750b0 <col:34, col:36> 'int' '*'
              (IntegerLiteral 0xa975070 <col:34> 'int' 2)
              (ImplicitCastExpr 0xa9750a0 <col:36> 'int' <LValueToRValue>
                (DeclRefExpr 0xa975088 <col:36> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')))
            (IntegerLiteral 0xa9750c8 <col:47> 'int' 256))")
      (DeclStmt 0xa9752d8 <line:805:9, col:63>
        0xa975140 "char *new_buff =
          (CStyleCastExpr 0xa9752c0 <col:26, col:62> 'char *' <BitCast>
            (CallExpr 0xa975248 <col:34, col:62> 'void *'
              (ImplicitCastExpr 0xa975238 <col:34> 'void *(*)(void *, size_t) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9751dc <col:34> 'void *(void *, size_t) throw()' lvalue Function 0xa549c10 'realloc' 'void *(void *, size_t) throw()'))
              (ImplicitCastExpr 0xa975280 <col:42> 'void *' <BitCast>
                (ImplicitCastExpr 0xa975270 <col:42> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa9751ac <col:42> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *')))
              (ImplicitCastExpr 0xa9752a0 <col:55> 'size_t':'unsigned int' <IntegralCast>
                (ImplicitCastExpr 0xa975290 <col:55> 'int' <LValueToRValue>
                  (DeclRefExpr 0xa9751c4 <col:55> 'int' lvalue Var 0xa975020 'new_len' 'int')))))")
      (IfStmt 0xa9754c8 <line:806:9, line:812:9>
        <<<NULL>>>
        (UnaryOperator 0xa975320 <line:806:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa975310 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xa975300 <col:14> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa9752e8 <col:14> 'char *' lvalue Var 0xa975140 'new_buff' 'char *'))))
        (CompoundStmt 0xa9754a8 <line:807:9, line:812:9>
          (CallExpr 0xa9753b0 <line:808:13, col:29> 'void'
            (ImplicitCastExpr 0xa9753a0 <col:13> 'void (*)(void *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa975384 <col:13> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
            (ImplicitCastExpr 0xa9753e0 <col:18> 'void *' <BitCast>
              (ImplicitCastExpr 0xa9753d0 <col:18> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa97536c <col:18> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *'))))
          (BinaryOperator 0xa975438 <line:809:13, col:27> 'int' lvalue '='
            (DeclRefExpr 0xa9753ec <col:13> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')
            (UnaryOperator 0xa975420 <col:26, col:27> 'int' prefix '-'
              (IntegerLiteral 0xa975408 <col:27> 'int' 1)))
          (BinaryOperator 0xa975480 <line:810:13, col:19> 'int' lvalue '='
            (DeclRefExpr 0xa975450 <col:13> 'int' lvalue Var 0xa952100 'error' 'int')
            (IntegerLiteral 0xa975468 <col:19> 'int' 1))
          (ReturnStmt 0xa975498 <line:811:13>))
        <<<NULL>>>)
      (BinaryOperator 0xa975528 <line:813:9, col:23> 'char *' lvalue '='
        (DeclRefExpr 0xa9754e4 <col:9> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *')
        (ImplicitCastExpr 0xa975518 <col:23> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa9754fc <col:23> 'char *' lvalue Var 0xa975140 'new_buff' 'char *')))
      (BinaryOperator 0xa975580 <line:814:9, col:22> 'int' lvalue '='
        (DeclRefExpr 0xa975540 <col:9> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')
        (ImplicitCastExpr 0xa975570 <col:22> 'int' <LValueToRValue>
          (DeclRefExpr 0xa975558 <col:22> 'int' lvalue Var 0xa975020 'new_len' 'int'))))
    <<<NULL>>>)
  (BinaryOperator 0xa975678 <line:817:5, col:31> 'char' lvalue '='
    (ArraySubscriptExpr 0xa975638 <col:5, col:29> 'char' lvalue
      (ImplicitCastExpr 0xa975628 <col:5> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa9755dc <col:5> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *'))
      (UnaryOperator 0xa975610 <col:17, col:27> 'int' postfix '++'
        (DeclRefExpr 0xa9755f4 <col:17> 'int' lvalue Var 0xa952230 'launch_pos' 'int')))
    (ImplicitCastExpr 0xa975668 <col:31> 'char' <LValueToRValue>
      (DeclRefExpr 0xa97564c <col:31> 'char' lvalue ParmVar 0xa974e50 'c' 'char'))))


static void writer_hex(int num) (CompoundStmt 0xa975dd0 <../codeBase/fish-shell-master/mimedb.cpp:824:1, line:831:1>
  (DeclStmt 0xa975820 <line:825:5, col:13>
    0xa975790 "int a"
    0xa9757e0 "int b")
  (BinaryOperator 0xa9758a0 <line:826:5, col:14> 'int' lvalue '='
    (DeclRefExpr 0xa975830 <col:5> 'int' lvalue Var 0xa975790 'a' 'int')
    (BinaryOperator 0xa975888 <col:9, col:14> 'int' '/'
      (ImplicitCastExpr 0xa975878 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa975848 <col:9> 'int' lvalue ParmVar 0xa9756c0 'num' 'int'))
      (IntegerLiteral 0xa975860 <col:14> 'int' 16)))
  (BinaryOperator 0xa975928 <line:827:5, col:14> 'int' lvalue '='
    (DeclRefExpr 0xa9758b8 <col:5> 'int' lvalue Var 0xa9757e0 'b' 'int')
    (BinaryOperator 0xa975910 <col:9, col:14> 'int' '%'
      (ImplicitCastExpr 0xa975900 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa9758d0 <col:9> 'int' lvalue ParmVar 0xa9756c0 'num' 'int'))
      (IntegerLiteral 0xa9758e8 <col:14> 'int' 16)))
  (CallExpr 0xa975b68 <line:829:5, col:34> 'void'
    (ImplicitCastExpr 0xa975b58 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa975b1c <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (ImplicitCastExpr 0xa975b88 <col:12, col:33> 'char' <IntegralCast>
      (ConditionalOperator 0xa975b00 <col:12, col:33> 'int'
        (BinaryOperator 0xa9759b8 <col:12, col:14> '_Bool' '>'
          (ImplicitCastExpr 0xa9759a8 <col:12> 'int' <LValueToRValue>
            (DeclRefExpr 0xa975974 <col:12> 'int' lvalue Var 0xa975790 'a' 'int'))
          (IntegerLiteral 0xa975990 <col:14> 'int' 9))
        (ParenExpr 0xa975a68 <col:16, col:25> 'int'
          (BinaryOperator 0xa975a50 <col:17, col:23> 'int' '-'
            (BinaryOperator 0xa975a20 <col:17, col:21> 'int' '+'
              (ImplicitCastExpr 0xa975a00 <col:17> 'int' <IntegralCast>
                (CharacterLiteral 0xa9759d0 <col:17> 'char'65))
              (ImplicitCastExpr 0xa975a10 <col:21> 'int' <LValueToRValue>
                (DeclRefExpr 0xa9759e4 <col:21> 'int' lvalue Var 0xa975790 'a' 'int')))
            (IntegerLiteral 0xa975a38 <col:23> 'int' 10)))
        (ParenExpr 0xa975ae8 <col:27, col:33> 'int'
          (BinaryOperator 0xa975ad0 <col:28, col:32> 'int' '+'
            (ImplicitCastExpr 0xa975ab0 <col:28> 'int' <IntegralCast>
              (CharacterLiteral 0xa975a80 <col:28> 'char'48))
            (ImplicitCastExpr 0xa975ac0 <col:32> 'int' <LValueToRValue>
              (DeclRefExpr 0xa975a94 <col:32> 'int' lvalue Var 0xa975790 'a' 'int')))))))
  (CallExpr 0xa975da0 <line:830:5, col:34> 'void'
    (ImplicitCastExpr 0xa975d90 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa975d74 <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (ImplicitCastExpr 0xa975dc0 <col:12, col:33> 'char' <IntegralCast>
      (ConditionalOperator 0xa975d58 <col:12, col:33> 'int'
        (BinaryOperator 0xa975c10 <col:12, col:14> '_Bool' '>'
          (ImplicitCastExpr 0xa975c00 <col:12> 'int' <LValueToRValue>
            (DeclRefExpr 0xa975bcc <col:12> 'int' lvalue Var 0xa9757e0 'b' 'int'))
          (IntegerLiteral 0xa975be8 <col:14> 'int' 9))
        (ParenExpr 0xa975cc0 <col:16, col:25> 'int'
          (BinaryOperator 0xa975ca8 <col:17, col:23> 'int' '-'
            (BinaryOperator 0xa975c78 <col:17, col:21> 'int' '+'
              (ImplicitCastExpr 0xa975c58 <col:17> 'int' <IntegralCast>
                (CharacterLiteral 0xa975c28 <col:17> 'char'65))
              (ImplicitCastExpr 0xa975c68 <col:21> 'int' <LValueToRValue>
                (DeclRefExpr 0xa975c3c <col:21> 'int' lvalue Var 0xa9757e0 'b' 'int')))
            (IntegerLiteral 0xa975c90 <col:23> 'int' 10)))
        (ParenExpr 0xa975d40 <col:27, col:33> 'int'
          (BinaryOperator 0xa975d28 <col:28, col:32> 'int' '+'
            (ImplicitCastExpr 0xa975d08 <col:28> 'int' <IntegralCast>
              (CharacterLiteral 0xa975cd8 <col:28> 'char'48))
            (ImplicitCastExpr 0xa975d18 <col:32> 'int' <LValueToRValue>
              (DeclRefExpr 0xa975cec <col:32> 'int' lvalue Var 0xa9757e0 'b' 'int'))))))))


static char *my_getcwd() (CompoundStmt 0xa976d00 <../codeBase/fish-shell-master/mimedb.cpp:837:1, line:849:1>
  (DeclStmt 0xa975ee0 <line:838:5, col:22>
    0xa975e80 "size_t size =
      (ImplicitCastExpr 0xa975ed0 <col:19> 'size_t':'unsigned int' <IntegralCast>
        (IntegerLiteral 0xa975eb8 <col:19> 'int' 100))")
  (WhileStmt 0xa976ce8 <line:839:5, line:848:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa975f08 <line:839:12> '_Bool' <IntegralToBoolean>
      (IntegerLiteral 0xa975ef0 <col:12> 'int' 1))
    (CompoundStmt 0xa976cc0 <line:840:5, line:848:5>
      (DeclStmt 0xa976038 <line:841:9, col:45>
        0xa975f30 "char *buffer =
          (CStyleCastExpr 0xa976020 <col:24, col:44> 'char *' <BitCast>
            (CallExpr 0xa975fe0 <col:33, col:44> 'void *'
              (ImplicitCastExpr 0xa975fd0 <col:33> 'void *(*)(size_t) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa975fb4 <col:33> 'void *(size_t) throw()' lvalue Function 0xa549920 'malloc' 'void *(size_t) throw()'))
              (ImplicitCastExpr 0xa976000 <col:40> 'size_t':'unsigned int' <LValueToRValue>
                (DeclRefExpr 0xa975f9c <col:40> 'size_t':'unsigned int' lvalue Var 0xa975e80 'size' 'size_t':'unsigned int'))))")
      (IfStmt 0xa9761d8 <line:842:9, line:843:20>
        <<<NULL>>>
        (BinaryOperator 0xa976188 <line:842:13, col:37> '_Bool' '=='
          (CallExpr 0xa976118 <col:13, col:32> 'char *'
            (ImplicitCastExpr 0xa976108 <col:13> 'char *(*)(char *, size_t) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9760ac <col:13> 'char *(char *, size_t) throw()' lvalue Function 0xa571a70 'getcwd' 'char *(char *, size_t) throw()'))
            (ImplicitCastExpr 0xa976140 <col:20> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa97607c <col:20> 'char *' lvalue Var 0xa975f30 'buffer' 'char *'))
            (ImplicitCastExpr 0xa976150 <col:28> 'size_t':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0xa976094 <col:28> 'size_t':'unsigned int' lvalue Var 0xa975e80 'size' 'size_t':'unsigned int')))
          (ImplicitCastExpr 0xa976178 <col:37> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa97615c <col:37> 'char *' lvalue Var 0xa975f30 'buffer' 'char *')))
        (ReturnStmt 0xa9761c8 <line:843:13, col:20>
          (ImplicitCastExpr 0xa9761b8 <col:20> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa9761a0 <col:20> 'char *' lvalue Var 0xa975f30 'buffer' 'char *')))
        <<<NULL>>>)
      (CallExpr 0xa976270 <line:844:9, col:20> 'void'
        (ImplicitCastExpr 0xa976260 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa976244 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (ImplicitCastExpr 0xa9762a0 <col:14> 'void *' <BitCast>
          (ImplicitCastExpr 0xa976290 <col:14> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa97622c <col:14> 'char *' lvalue Var 0xa975f30 'buffer' 'char *'))))
      (IfStmt 0xa976c40 <line:845:9, line:846:20>
        <<<NULL>>>
        (BinaryOperator 0xa976bf0 </usr/include/i386-linux-gnu/bits/errno.h:51:18, /usr/include/asm-generic/errno-base.h:37:17> '_Bool' '!='
          (ImplicitCastExpr 0xa976be0 </usr/include/i386-linux-gnu/bits/errno.h:51:18, col:39> 'int' <LValueToRValue>
            (ParenExpr 0xa976bb0 <col:18, col:39> 'int' lvalue
              (UnaryOperator 0xa976b98 <col:19, col:38> 'int' lvalue prefix '*'
                (CallExpr 0xa976b78 <col:20, col:38> 'int *'
                  (ImplicitCastExpr 0xa976b68 <col:20> 'int *(*)(void) throw()' <FunctionToPointerDecay>
                    (DeclRefExpr 0xa9762e4 <col:20> 'int *(void) throw()' lvalue Function 0xa5a8650 '__errno_location' 'int *(void) throw()'))))))
          (IntegerLiteral 0xa976bc8 </usr/include/asm-generic/errno-base.h:37:17> 'int' 34))
        (ReturnStmt 0xa976c30 <../codeBase/fish-shell-master/mimedb.cpp:846:13, col:20>
          (ImplicitCastExpr 0xa976c20 <col:20> 'char *' <NullToPointer>
            (IntegerLiteral 0xa976c08 <col:20> 'int' 0)))
        <<<NULL>>>)
      (CompoundAssignOperator 0xa976ca0 <line:847:9, col:17> 'size_t':'unsigned int' lvalue '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
        (DeclRefExpr 0xa976c5c <col:9> 'size_t':'unsigned int' lvalue Var 0xa975e80 'size' 'size_t':'unsigned int')
        (ImplicitCastExpr 0xa976c90 <col:17> 'unsigned int' <IntegralCast>
          (IntegerLiteral 0xa976c78 <col:17> 'int' 2))))))


static const char *get_fullfile(const char *file) (CompoundStmt 0xa977c58 <../codeBase/fish-shell-master/mimedb.cpp:855:1, line:889:1>
  (DeclStmt 0xa976e48 <line:856:5, col:25>
    0xa976e10 "const char *fullfile")
  (IfStmt 0xa977c00 <line:858:5, line:887:5>
    <<<NULL>>>
    (BinaryOperator 0xa976ef8 <line:858:9, col:20> '_Bool' '=='
      (ImplicitCastExpr 0xa976ed8 <col:9, col:15> 'int' <IntegralCast>
        (ImplicitCastExpr 0xa976ec8 <col:9, col:15> 'char' <LValueToRValue>
          (ArraySubscriptExpr 0xa976e98 <col:9, col:15> 'const char' lvalue
            (ImplicitCastExpr 0xa976e88 <col:9> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xa976e58 <col:9> 'const char *' lvalue ParmVar 0xa976d30 'file' 'const char *'))
            (IntegerLiteral 0xa976e70 <col:14> 'int' 0))))
      (ImplicitCastExpr 0xa976ee8 <col:20> 'int' <IntegralCast>
        (CharacterLiteral 0xa976eb0 <col:20> 'char'47)))
    (CompoundStmt 0xa976f68 <line:859:5, line:861:5>
      (BinaryOperator 0xa976f50 <line:860:9, col:20> 'const char *' lvalue '='
        (DeclRefExpr 0xa976f10 <col:9> 'const char *' lvalue Var 0xa976e10 'fullfile' 'const char *')
        (ImplicitCastExpr 0xa976f40 <col:20> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa976f28 <col:20> 'const char *' lvalue ParmVar 0xa976d30 'file' 'const char *'))))
    (CompoundStmt 0xa977bc8 <line:863:5, line:887:5>
      (DeclStmt 0xa977048 <line:864:9, col:32>
        0xa976f90 "char *cwd =
          (CallExpr 0xa977028 <col:21, col:31> 'char *'
            (ImplicitCastExpr 0xa977018 <col:21> 'char *(*)(void)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa976ffc <col:21> 'char *(void)' lvalue Function 0xa975e10 'my_getcwd' 'char *(void)')))")
      (IfStmt 0xa9771f8 <line:865:9, line:870:9>
        <<<NULL>>>
        (UnaryOperator 0xa977090 <line:865:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa977080 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xa977070 <col:14> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa977058 <col:14> 'char *' lvalue Var 0xa976f90 'cwd' 'char *'))))
        (CompoundStmt 0xa9771d8 <line:866:9, line:870:9>
          (BinaryOperator 0xa9770d8 <line:867:13, col:21> 'int' lvalue '='
            (DeclRefExpr 0xa9770a4 <col:13> 'int' lvalue Var 0xa952100 'error' 'int')
            (IntegerLiteral 0xa9770c0 <col:21> 'int' 1))
          (CallExpr 0xa977170 <line:868:13, col:28> 'void'
            (ImplicitCastExpr 0xa977160 <col:13> 'void (*)(const char *)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa977148 <col:13> 'void (const char *)' lvalue Function 0xa517e00 'perror' 'void (const char *)'))
            (ImplicitCastExpr 0xa977190 <col:20> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa977124 <col:20> 'const char [7]' lvalue "getcwd")))
          (ReturnStmt 0xa9771c8 <line:869:13, col:20>
            (ImplicitCastExpr 0xa9771b8 <col:20> 'const char *' <NullToPointer>
              (IntegerLiteral 0xa9771a0 <col:20> 'int' 0))))
        <<<NULL>>>)
      (DeclStmt 0xa977330 <line:872:9, col:28>
        0xa977230 "int l =
          (ImplicitCastExpr 0xa977320 <col:17, col:27> 'int' <IntegralCast>
            (CallExpr 0xa9772e0 <col:17, col:27> 'size_t':'unsigned int'
              (ImplicitCastExpr 0xa9772d0 <col:17> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9772b4 <col:17> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
              (ImplicitCastExpr 0xa977310 <col:24> 'const char *' <NoOp>
                (ImplicitCastExpr 0xa977300 <col:24> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa97729c <col:24> 'char *' lvalue Var 0xa976f90 'cwd' 'char *')))))")
      (DeclStmt 0xa977568 <line:874:9, col:58>
        0xa977350 "char *tmp =
          (CStyleCastExpr 0xa977550 <col:21, col:57> 'char *' <BitCast>
            (CallExpr 0xa977520 <col:29, col:57> 'void *'
              (ImplicitCastExpr 0xa977510 <col:29> 'void *(*)(size_t)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa9774f8 <col:29> 'void *(size_t)' lvalue Function 0xa952310 'my_malloc' 'void *(size_t)'))
              (BinaryOperator 0xa9774e0 <col:39, col:56> 'unsigned int' '+'
                (BinaryOperator 0xa9774a0 <col:39, col:54> 'unsigned int' '+'
                  (ImplicitCastExpr 0xa977490 <col:39> 'unsigned int' <IntegralCast>
                    (ImplicitCastExpr 0xa977480 <col:39> 'int' <LValueToRValue>
                      (DeclRefExpr 0xa9773bc <col:39> 'int' lvalue Var 0xa977230 'l' 'int')))
                  (CallExpr 0xa977450 <col:43, col:54> 'size_t':'unsigned int'
                    (ImplicitCastExpr 0xa977440 <col:43> 'size_t (*)(const char *) throw()' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa977424 <col:43> 'size_t (const char *) throw()' lvalue Function 0xa4da060 'strlen' 'size_t (const char *) throw()'))
                    (ImplicitCastExpr 0xa977470 <col:50> 'const char *' <LValueToRValue>
                      (DeclRefExpr 0xa97740c <col:50> 'const char *' lvalue ParmVar 0xa976d30 'file' 'const char *'))))
                (ImplicitCastExpr 0xa9774d0 <col:56> 'unsigned int' <IntegralCast>
                  (IntegerLiteral 0xa9774b8 <col:56> 'int' 2)))))")
      (IfStmt 0xa9776d0 <line:875:9, line:879:9>
        <<<NULL>>>
        (UnaryOperator 0xa9775b0 <line:875:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa9775a0 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xa977590 <col:14> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa977578 <col:14> 'char *' lvalue Var 0xa977350 'tmp' 'char *'))))
        (CompoundStmt 0xa9776b8 <line:876:9, line:879:9>
          (CallExpr 0xa977640 <line:877:13, col:21> 'void'
            (ImplicitCastExpr 0xa977630 <col:13> 'void (*)(void *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa977614 <col:13> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
            (ImplicitCastExpr 0xa977670 <col:18> 'void *' <BitCast>
              (ImplicitCastExpr 0xa977660 <col:18> 'char *' <LValueToRValue>
                (DeclRefExpr 0xa9775fc <col:18> 'char *' lvalue Var 0xa976f90 'cwd' 'char *'))))
          (ReturnStmt 0xa9776a8 <line:878:13, col:20>
            (ImplicitCastExpr 0xa977698 <col:20> 'const char *' <NullToPointer>
              (IntegerLiteral 0xa977680 <col:20> 'int' 0))))
        <<<NULL>>>)
      (CallExpr 0xa977780 <line:880:9, col:24> 'char *'
        (ImplicitCastExpr 0xa977770 <col:9> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa977754 <col:9> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0760 'strcpy' 'char *(char *restrict, const char *restrict) throw()'))
        (ImplicitCastExpr 0xa9777a8 <col:16> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa977724 <col:16> 'char *' lvalue Var 0xa977350 'tmp' 'char *'))
        (ImplicitCastExpr 0xa9777c8 <col:21> 'const char *' <NoOp>
          (ImplicitCastExpr 0xa9777b8 <col:21> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa97773c <col:21> 'char *' lvalue Var 0xa976f90 'cwd' 'char *'))))
      (IfStmt 0xa9779b0 <line:881:9, line:882:28>
        <<<NULL>>>
        (BinaryOperator 0xa9778b8 <line:881:13, col:25> '_Bool' '!='
          (ImplicitCastExpr 0xa977898 <col:13, col:20> 'int' <IntegralCast>
            (ImplicitCastExpr 0xa977888 <col:13, col:20> 'char' <LValueToRValue>
              (ArraySubscriptExpr 0xa977858 <col:13, col:20> 'char' lvalue
                (ImplicitCastExpr 0xa977848 <col:13> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa9777d4 <col:13> 'char *' lvalue Var 0xa976f90 'cwd' 'char *'))
                (BinaryOperator 0xa977830 <col:17, col:19> 'int' '-'
                  (ImplicitCastExpr 0xa977820 <col:17> 'int' <LValueToRValue>
                    (DeclRefExpr 0xa9777ec <col:17> 'int' lvalue Var 0xa977230 'l' 'int'))
                  (IntegerLiteral 0xa977808 <col:19> 'int' 1)))))
          (ImplicitCastExpr 0xa9778a8 <col:25> 'int' <IntegralCast>
            (CharacterLiteral 0xa977870 <col:25> 'char'47)))
        (CallExpr 0xa977968 <line:882:13, col:28> 'char *'
          (ImplicitCastExpr 0xa977958 <col:13> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
            (DeclRefExpr 0xa97793c <col:13> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0b60 'strcat' 'char *(char *restrict, const char *restrict) throw()'))
          (ImplicitCastExpr 0xa977990 <col:20> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa977904 <col:20> 'char *' lvalue Var 0xa977350 'tmp' 'char *'))
          (ImplicitCastExpr 0xa9779a0 <col:25> 'const char *' <ArrayToPointerDecay>
            (StringLiteral 0xa97791c <col:25> 'const char [2]' lvalue "/")))
        <<<NULL>>>)
      (CallExpr 0xa977a60 <line:883:9, col:25> 'char *'
        (ImplicitCastExpr 0xa977a50 <col:9> 'char *(*)(char *restrict, const char *restrict) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa977a34 <col:9> 'char *(char *restrict, const char *restrict) throw()' lvalue Function 0xa4e0b60 'strcat' 'char *(char *restrict, const char *restrict) throw()'))
        (ImplicitCastExpr 0xa977a88 <col:16> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa977a04 <col:16> 'char *' lvalue Var 0xa977350 'tmp' 'char *'))
        (ImplicitCastExpr 0xa977a98 <col:21> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa977a1c <col:21> 'const char *' lvalue ParmVar 0xa976d30 'file' 'const char *')))
      (CallExpr 0xa977b20 <line:885:9, col:17> 'void'
        (ImplicitCastExpr 0xa977b10 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xa977af4 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (ImplicitCastExpr 0xa977b50 <col:14> 'void *' <BitCast>
          (ImplicitCastExpr 0xa977b40 <col:14> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa977adc <col:14> 'char *' lvalue Var 0xa976f90 'cwd' 'char *'))))
      (BinaryOperator 0xa977bb0 <line:886:9, col:20> 'const char *' lvalue '='
        (DeclRefExpr 0xa977b5c <col:9> 'const char *' lvalue Var 0xa976e10 'fullfile' 'const char *')
        (ImplicitCastExpr 0xa977ba0 <col:20> 'const char *' <NoOp>
          (ImplicitCastExpr 0xa977b90 <col:20> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa977b74 <col:20> 'char *' lvalue Var 0xa977350 'tmp' 'char *'))))))
  (ReturnStmt 0xa977c48 <line:888:5, col:12>
    (ImplicitCastExpr 0xa977c38 <col:12> 'const char *' <LValueToRValue>
      (DeclRefExpr 0xa977c1c <col:12> 'const char *' lvalue Var 0xa976e10 'fullfile' 'const char *'))))


static void write_url(const char *file) (CompoundStmt 0xa9792b0 <../codeBase/fish-shell-master/mimedb.cpp:896:1, line:937:1>
  (DeclStmt 0xa977e58 <line:897:5, col:46>
    0xa977d60 "const char *fullfile =
      (CallExpr 0xa977e28 <col:28, col:45> 'const char *'
        (ImplicitCastExpr 0xa977e18 <col:28> 'const char *(*)(const char *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa977de4 <col:28> 'const char *(const char *)' lvalue Function 0xa976d90 'get_fullfile' 'const char *(const char *)'))
        (ImplicitCastExpr 0xa977e48 <col:41> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa977dcc <col:41> 'const char *' lvalue ParmVar 0xa977c90 'file' 'const char *')))")
  (DeclStmt 0xa977ee0 <line:898:5, col:31>
    0xa977e80 "const char *str =
      (ImplicitCastExpr 0xa977ed0 <col:23> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa977eb4 <col:23> 'const char *' lvalue Var 0xa977d60 'fullfile' 'const char *'))")
  (IfStmt 0xa977fe0 <line:900:5, line:904:5>
    <<<NULL>>>
    (BinaryOperator 0xa977f40 <line:900:9, col:16> '_Bool' '=='
      (ImplicitCastExpr 0xa977f20 <col:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa977ef0 <col:9> 'const char *' lvalue Var 0xa977e80 'str' 'const char *'))
      (ImplicitCastExpr 0xa977f30 <col:16> 'const char *' <NullToPointer>
        (IntegerLiteral 0xa977f08 <col:16> 'int' 0)))
    (CompoundStmt 0xa977fc8 <line:901:5, line:904:5>
      (BinaryOperator 0xa977fa0 <line:902:9, col:23> 'int' lvalue '='
        (DeclRefExpr 0xa977f58 <col:9> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')
        (UnaryOperator 0xa977f88 <col:22, col:23> 'int' prefix '-'
          (IntegerLiteral 0xa977f70 <col:23> 'int' 1)))
      (ReturnStmt 0xa977fb8 <line:903:9>))
    <<<NULL>>>)
  (CallExpr 0xa978078 <line:906:5, col:15> 'void'
    (ImplicitCastExpr 0xa978068 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa97804c <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa978038 <col:12> 'char'102))
  (CallExpr 0xa978110 <line:907:5, col:15> 'void'
    (ImplicitCastExpr 0xa978100 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9780e4 <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa9780d0 <col:12> 'char'105))
  (CallExpr 0xa9781a8 <line:908:5, col:15> 'void'
    (ImplicitCastExpr 0xa978198 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa97817c <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa978168 <col:12> 'char'108))
  (CallExpr 0xa978240 <line:909:5, col:15> 'void'
    (ImplicitCastExpr 0xa978230 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa978214 <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa978200 <col:12> 'char'101))
  (CallExpr 0xa9782d8 <line:910:5, col:15> 'void'
    (ImplicitCastExpr 0xa9782c8 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9782ac <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa978298 <col:12> 'char'58))
  (CallExpr 0xa978370 <line:911:5, col:15> 'void'
    (ImplicitCastExpr 0xa978360 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa978344 <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa978330 <col:12> 'char'47))
  (CallExpr 0xa978408 <line:912:5, col:15> 'void'
    (ImplicitCastExpr 0xa9783f8 <col:5> 'void (*)(char)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9783dc <col:5> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
    (CharacterLiteral 0xa9783c8 <col:12> 'char'47))
  (WhileStmt 0xa979130 <line:913:5, line:933:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa978478 <line:913:12, col:13> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa978468 <col:12, col:13> 'char' <LValueToRValue>
        (UnaryOperator 0xa978450 <col:12, col:13> 'const char' lvalue prefix '*'
          (ImplicitCastExpr 0xa978440 <col:13> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa978428 <col:13> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
    (CompoundStmt 0xa979118 <line:914:5, line:933:5>
      (IfStmt 0xa9790c8 <line:915:9, line:931:9>
        <<<NULL>>>
        (BinaryOperator 0xa978b08 <line:915:13, line:918:43> '_Bool' '||'
          (BinaryOperator 0xa978980 <line:915:13, line:917:47> '_Bool' '||'
            (BinaryOperator 0xa9787c8 <line:915:13, line:916:47> '_Bool' '||'
              (ParenExpr 0xa978610 <line:915:13, col:43> '_Bool'
                (BinaryOperator 0xa9785f8 <col:14, col:42> '_Bool' '&&'
                  (ParenExpr 0xa978528 <col:14, col:26> '_Bool'
                    (BinaryOperator 0xa978510 <col:15, col:23> '_Bool' '>='
                      (ImplicitCastExpr 0xa9784f0 <col:15, col:16> 'int' <IntegralCast>
                        (ImplicitCastExpr 0xa9784e0 <col:15, col:16> 'char' <LValueToRValue>
                          (UnaryOperator 0xa9784b0 <col:15, col:16> 'const char' lvalue prefix '*'
                            (ImplicitCastExpr 0xa9784a0 <col:16> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xa978484 <col:16> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
                      (ImplicitCastExpr 0xa978500 <col:23> 'int' <IntegralCast>
                        (CharacterLiteral 0xa9784c8 <col:23> 'char'97))))
                  (ParenExpr 0xa9785e0 <col:31, col:42> '_Bool'
                    (BinaryOperator 0xa9785c8 <col:32, col:39> '_Bool' '<='
                      (ImplicitCastExpr 0xa9785a8 <col:32, col:33> 'int' <IntegralCast>
                        (ImplicitCastExpr 0xa978598 <col:32, col:33> 'char' <LValueToRValue>
                          (UnaryOperator 0xa978568 <col:32, col:33> 'const char' lvalue prefix '*'
                            (ImplicitCastExpr 0xa978558 <col:33> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xa97853c <col:33> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
                      (ImplicitCastExpr 0xa9785b8 <col:39> 'int' <IntegralCast>
                        (CharacterLiteral 0xa978580 <col:39> 'char'122))))))
              (ParenExpr 0xa9787b0 <line:916:17, col:47> '_Bool'
                (BinaryOperator 0xa978798 <col:18, col:46> '_Bool' '&&'
                  (ParenExpr 0xa9786c8 <col:18, col:30> '_Bool'
                    (BinaryOperator 0xa9786b0 <col:19, col:27> '_Bool' '>='
                      (ImplicitCastExpr 0xa978690 <col:19, col:20> 'int' <IntegralCast>
                        (ImplicitCastExpr 0xa978680 <col:19, col:20> 'char' <LValueToRValue>
                          (UnaryOperator 0xa978650 <col:19, col:20> 'const char' lvalue prefix '*'
                            (ImplicitCastExpr 0xa978640 <col:20> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xa978624 <col:20> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
                      (ImplicitCastExpr 0xa9786a0 <col:27> 'int' <IntegralCast>
                        (CharacterLiteral 0xa978668 <col:27> 'char'65))))
                  (ParenExpr 0xa978780 <col:35, col:46> '_Bool'
                    (BinaryOperator 0xa978768 <col:36, col:43> '_Bool' '<='
                      (ImplicitCastExpr 0xa978748 <col:36, col:37> 'int' <IntegralCast>
                        (ImplicitCastExpr 0xa978738 <col:36, col:37> 'char' <LValueToRValue>
                          (UnaryOperator 0xa978708 <col:36, col:37> 'const char' lvalue prefix '*'
                            (ImplicitCastExpr 0xa9786f8 <col:37> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xa9786dc <col:37> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
                      (ImplicitCastExpr 0xa978758 <col:43> 'int' <IntegralCast>
                        (CharacterLiteral 0xa978720 <col:43> 'char'90)))))))
            (ParenExpr 0xa978968 <line:917:17, col:47> '_Bool'
              (BinaryOperator 0xa978950 <col:18, col:46> '_Bool' '&&'
                (ParenExpr 0xa978880 <col:18, col:30> '_Bool'
                  (BinaryOperator 0xa978868 <col:19, col:27> '_Bool' '>='
                    (ImplicitCastExpr 0xa978848 <col:19, col:20> 'int' <IntegralCast>
                      (ImplicitCastExpr 0xa978838 <col:19, col:20> 'char' <LValueToRValue>
                        (UnaryOperator 0xa978808 <col:19, col:20> 'const char' lvalue prefix '*'
                          (ImplicitCastExpr 0xa9787f8 <col:20> 'const char *' <LValueToRValue>
                            (DeclRefExpr 0xa9787e0 <col:20> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
                    (ImplicitCastExpr 0xa978858 <col:27> 'int' <IntegralCast>
                      (CharacterLiteral 0xa978820 <col:27> 'char'48))))
                (ParenExpr 0xa978938 <col:35, col:46> '_Bool'
                  (BinaryOperator 0xa978920 <col:36, col:43> '_Bool' '<='
                    (ImplicitCastExpr 0xa978900 <col:36, col:37> 'int' <IntegralCast>
                      (ImplicitCastExpr 0xa9788f0 <col:36, col:37> 'char' <LValueToRValue>
                        (UnaryOperator 0xa9788c0 <col:36, col:37> 'const char' lvalue prefix '*'
                          (ImplicitCastExpr 0xa9788b0 <col:37> 'const char *' <LValueToRValue>
                            (DeclRefExpr 0xa978894 <col:37> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))
                    (ImplicitCastExpr 0xa978910 <col:43> 'int' <IntegralCast>
                      (CharacterLiteral 0xa9788d8 <col:43> 'char'57)))))))
          (ParenExpr 0xa978af0 <line:918:17, col:43> '_Bool'
            (BinaryOperator 0xa978ad8 <col:18, col:42> '_Bool' '!='
              (CallExpr 0xa978a58 <col:18, col:37> 'char *'
                (ImplicitCastExpr 0xa978a48 <col:18> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa978a2c <col:18> 'char *(const char *, int) throw()' lvalue Function 0xa4e7890 'strchr' 'char *(const char *, int) throw()'))
                (ImplicitCastExpr 0xa978a80 <col:25> 'const char *' <ArrayToPointerDecay>
                  (StringLiteral 0xa9789cc <col:25> 'const char [6]' lvalue "-_.~/"))
                (ImplicitCastExpr 0xa978aa0 <col:33, col:34> 'int' <IntegralCast>
                  (ImplicitCastExpr 0xa978a90 <col:33, col:34> 'char' <LValueToRValue>
                    (UnaryOperator 0xa978a18 <col:33, col:34> 'const char' lvalue prefix '*'
                      (ImplicitCastExpr 0xa978a08 <col:34> 'const char *' <LValueToRValue>
                        (DeclRefExpr 0xa9789f0 <col:34> 'const char *' lvalue Var 0xa977e80 'str' 'const char *'))))))
              (ImplicitCastExpr 0xa978ac8 <col:42> 'char *' <NullToPointer>
                (IntegerLiteral 0xa978ab0 <col:42> 'int' 0)))))
        (CompoundStmt 0xa978bf0 <line:919:9, line:921:9>
          (CallExpr 0xa978bc0 <line:920:13, col:24> 'void'
            (ImplicitCastExpr 0xa978bb0 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa978b94 <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (ImplicitCastExpr 0xa978be0 <col:20, col:21> 'char' <LValueToRValue>
              (UnaryOperator 0xa978b80 <col:20, col:21> 'const char' lvalue prefix '*'
                (ImplicitCastExpr 0xa978b70 <col:21> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa978b54 <col:21> 'const char *' lvalue Var 0xa977e80 'str' 'const char *'))))))
        (IfStmt 0xa9790a8 <line:922:14, line:931:9>
          <<<NULL>>>
          (BinaryOperator 0xa978d48 <line:922:18, col:42> '_Bool' '!='
            (CallExpr 0xa978cc8 <col:18, col:37> 'char *'
              (ImplicitCastExpr 0xa978cb8 <col:18> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xa978c9c <col:18> 'char *(const char *, int) throw()' lvalue Function 0xa4e7890 'strchr' 'char *(const char *, int) throw()'))
              (ImplicitCastExpr 0xa978cf0 <col:25> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa978c3c <col:25> 'const char [6]' lvalue "()?&="))
              (ImplicitCastExpr 0xa978d10 <col:33, col:34> 'int' <IntegralCast>
                (ImplicitCastExpr 0xa978d00 <col:33, col:34> 'char' <LValueToRValue>
                  (UnaryOperator 0xa978c88 <col:33, col:34> 'const char' lvalue prefix '*'
                    (ImplicitCastExpr 0xa978c78 <col:34> 'const char *' <LValueToRValue>
                      (DeclRefExpr 0xa978c60 <col:34> 'const char *' lvalue Var 0xa977e80 'str' 'const char *'))))))
            (ImplicitCastExpr 0xa978d38 <col:42> 'char *' <NullToPointer>
              (IntegerLiteral 0xa978d20 <col:42> 'int' 0)))
          (CompoundStmt 0xa978ec8 <line:923:9, line:926:9>
            (CallExpr 0xa978dd8 <line:924:13, col:24> 'void'
              (ImplicitCastExpr 0xa978dc8 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa978dac <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa978d98 <col:20> 'char'92))
            (CallExpr 0xa978e98 <line:925:13, col:24> 'void'
              (ImplicitCastExpr 0xa978e88 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa978e6c <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (ImplicitCastExpr 0xa978eb8 <col:20, col:21> 'char' <LValueToRValue>
                (UnaryOperator 0xa978e58 <col:20, col:21> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0xa978e48 <col:21> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xa978e2c <col:21> 'const char *' lvalue Var 0xa977e80 'str' 'const char *'))))))
          (CompoundStmt 0xa979090 <line:928:9, line:931:9>
            (CallExpr 0xa978f58 <line:929:13, col:23> 'void'
              (ImplicitCastExpr 0xa978f48 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa978f2c <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa978f18 <col:20> 'char'37))
            (CallExpr 0xa979060 <line:930:13, col:43> 'void'
              (ImplicitCastExpr 0xa979050 <col:13> 'void (*)(int)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa979038 <col:13> 'void (int)' lvalue Function 0xa975710 'writer_hex' 'void (int)'))
              (ImplicitCastExpr 0xa979080 <col:24, col:40> 'int' <IntegralCast>
                (CStyleCastExpr 0xa979020 <col:24, col:40> 'unsigned char' <NoOp>
                  (ImplicitCastExpr 0xa979010 <col:39, col:40> 'unsigned char' <IntegralCast>
                    (ImplicitCastExpr 0xa979000 <col:39, col:40> 'char' <LValueToRValue>
                      (UnaryOperator 0xa978fd8 <col:39, col:40> 'const char' lvalue prefix '*'
                        (ImplicitCastExpr 0xa978fc8 <col:40> 'const char *' <LValueToRValue>
                          (DeclRefExpr 0xa978fac <col:40> 'const char *' lvalue Var 0xa977e80 'str' 'const char *')))))))))))
      (UnaryOperator 0xa979100 <line:932:9, col:12> 'const char *' postfix '++'
        (DeclRefExpr 0xa9790e4 <col:9> 'const char *' lvalue Var 0xa977e80 'str' 'const char *'))))
  (IfStmt 0xa979290 <line:934:5, line:935:30>
    <<<NULL>>>
    (BinaryOperator 0xa979198 <line:934:9, col:21> '_Bool' '!='
      (ImplicitCastExpr 0xa979178 <col:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa979144 <col:9> 'const char *' lvalue Var 0xa977d60 'fullfile' 'const char *'))
      (ImplicitCastExpr 0xa979188 <col:21> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa97915c <col:21> 'const char *' lvalue ParmVar 0xa977c90 'file' 'const char *')))
    (CallExpr 0xa979270 <line:935:9, col:30> 'void'
      (ImplicitCastExpr 0xa979260 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa979248 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
      (CStyleCastExpr 0xa979230 <col:14, col:22> 'void *' <NoOp>
        (ImplicitCastExpr 0xa979220 <col:22> 'void *' <BitCast>
          (ImplicitCastExpr 0xa979210 <col:22> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa9791e4 <col:22> 'const char *' lvalue Var 0xa977d60 'fullfile' 'const char *')))))
    <<<NULL>>>))


static void write_file(const char *file, int print_path) (CompoundStmt 0xa97ad58 <../codeBase/fish-shell-master/mimedb.cpp:943:1, line:1031:1>
  (DeclStmt 0xa979468 <line:944:5, col:25>
    0xa979430 "const char *fullfile")
  (DeclStmt 0xa9794c8 <line:945:5, col:20>
    0xa979490 "const char *str")
  (IfStmt 0xa979988 <line:946:5, line:960:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa979500 <line:946:9> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa9794f0 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa9794d8 <col:9> 'int' lvalue ParmVar 0xa979350 'print_path' 'int')))
    (CompoundStmt 0xa979640 <line:947:5, line:950:5>
      (BinaryOperator 0xa9795d0 <line:948:9, col:37> 'const char *' lvalue '='
        (DeclRefExpr 0xa97950c <col:9> 'const char *' lvalue Var 0xa979430 'fullfile' 'const char *')
        (CallExpr 0xa9795a0 <col:20, col:37> 'const char *'
          (ImplicitCastExpr 0xa979590 <col:20> 'const char *(*)(const char *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xa979574 <col:20> 'const char *(const char *)' lvalue Function 0xa976d90 'get_fullfile' 'const char *(const char *)'))
          (ImplicitCastExpr 0xa9795c0 <col:33> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa97955c <col:33> 'const char *' lvalue ParmVar 0xa979300 'file' 'const char *'))))
      (BinaryOperator 0xa979628 <line:949:9, col:15> 'const char *' lvalue '='
        (DeclRefExpr 0xa9795e8 <col:9> 'const char *' lvalue Var 0xa979490 'str' 'const char *')
        (ImplicitCastExpr 0xa979618 <col:15> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa979600 <col:15> 'const char *' lvalue Var 0xa979430 'fullfile' 'const char *'))))
    (CompoundStmt 0xa979968 <line:952:5, line:960:5>
      (DeclStmt 0xa979750 <line:953:9, col:36>
        0xa979670 "char *tmp =
          (CallExpr 0xa979720 <col:21, col:35> 'char *'
            (ImplicitCastExpr 0xa979710 <col:21> 'char *(*)(const char *)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9796f4 <col:21> 'char *(const char *)' lvalue Function 0xa9527f0 'my_strdup' 'char *(const char *)'))
            (ImplicitCastExpr 0xa979740 <col:31> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xa9796dc <col:31> 'const char *' lvalue ParmVar 0xa979300 'file' 'const char *')))")
      (IfStmt 0xa9797d8 <line:954:9, line:957:9>
        <<<NULL>>>
        (UnaryOperator 0xa979798 <line:954:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xa979788 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xa979778 <col:14> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa979760 <col:14> 'char *' lvalue Var 0xa979670 'tmp' 'char *'))))
        (CompoundStmt 0xa9797c0 <line:955:9, line:957:9>
          (ReturnStmt 0xa9797b0 <line:956:13>))
        <<<NULL>>>)
      (BinaryOperator 0xa9798e8 <line:958:9, col:27> 'const char *' lvalue '='
        (DeclRefExpr 0xa9797f4 <col:9> 'const char *' lvalue Var 0xa979490 'str' 'const char *')
        (ImplicitCastExpr 0xa9798d8 </usr/include/libgen.h:36:18, ../codeBase/fish-shell-master/mimedb.cpp:958:27> 'const char *' <NoOp>
          (CallExpr 0xa9798a8 </usr/include/libgen.h:36:18, ../codeBase/fish-shell-master/mimedb.cpp:958:27> 'char *'
            (ImplicitCastExpr 0xa979898 </usr/include/libgen.h:36:18> 'char *(*)(char *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97985c <col:18> 'char *(char *) throw()' lvalue Function 0xa5a8500 '__xpg_basename' 'char *(char *) throw()'))
            (ImplicitCastExpr 0xa9798c8 <../codeBase/fish-shell-master/mimedb.cpp:958:24> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa979844 <col:24> 'char *' lvalue Var 0xa979670 'tmp' 'char *')))))
      (BinaryOperator 0xa979950 <line:959:9, col:20> 'const char *' lvalue '='
        (DeclRefExpr 0xa979900 <col:9> 'const char *' lvalue Var 0xa979430 'fullfile' 'const char *')
        (ImplicitCastExpr 0xa979940 <col:20> 'const char *' <NoOp>
          (ImplicitCastExpr 0xa979930 <col:20> 'char *' <LValueToRValue>
            (DeclRefExpr 0xa979918 <col:20> 'char *' lvalue Var 0xa979670 'tmp' 'char *'))))))
  (IfStmt 0xa979a68 <line:962:5, line:966:5>
    <<<NULL>>>
    (UnaryOperator 0xa9799e0 <line:962:9, col:10> '_Bool' prefix '!'
      (ImplicitCastExpr 0xa9799d0 <col:10> '_Bool' <PointerToBoolean>
        (ImplicitCastExpr 0xa9799c0 <col:10> 'const char *' <LValueToRValue>
          (DeclRefExpr 0xa9799a4 <col:10> 'const char *' lvalue Var 0xa979490 'str' 'const char *'))))
    (CompoundStmt 0xa979a50 <line:963:5, line:966:5>
      (BinaryOperator 0xa979a28 <line:964:9, col:17> 'int' lvalue '='
        (DeclRefExpr 0xa9799f4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')
        (IntegerLiteral 0xa979a10 <col:17> 'int' 1))
      (ReturnStmt 0xa979a40 <line:965:9>))
    <<<NULL>>>)
  (WhileStmt 0xa97abd8 <line:968:5, line:1027:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa979ad8 <line:968:12, col:13> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa979ac8 <col:12, col:13> 'char' <LValueToRValue>
        (UnaryOperator 0xa979ab0 <col:12, col:13> 'const char' lvalue prefix '*'
          (ImplicitCastExpr 0xa979aa0 <col:13> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa979a84 <col:13> 'const char *' lvalue Var 0xa979490 'str' 'const char *')))))
    (CompoundStmt 0xa97abc0 <line:969:5, line:1027:5>
      (SwitchStmt 0xa979b48 <line:970:9, line:1025:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa979b38 <line:970:17, col:18> 'int' <IntegralCast>
          (ImplicitCastExpr 0xa979b28 <col:17, col:18> 'char' <LValueToRValue>
            (UnaryOperator 0xa979b10 <col:17, col:18> 'const char' lvalue prefix '*'
              (ImplicitCastExpr 0xa979b00 <col:18> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xa979ae4 <col:18> 'const char *' lvalue Var 0xa979490 'str' 'const char *')))))
        (CompoundStmt 0xa97a990 <line:971:9, line:1025:9>
          (CaseStmt 0xa979b80 <line:972:13, line:993:28>
            (ImplicitCastExpr 0xa97ab80 <line:972:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa979b68 <col:18> 'char'41))
            <<<NULL>>>
            (CaseStmt 0xa979bb8 <line:973:13, line:993:28>
              (ImplicitCastExpr 0xa97ab70 <line:973:18> 'int' <IntegralCast>
                (CharacterLiteral 0xa979ba0 <col:18> 'char'40))
              <<<NULL>>>
              (CaseStmt 0xa979bf0 <line:974:13, line:993:28>
                (ImplicitCastExpr 0xa97ab60 <line:974:18> 'int' <IntegralCast>
                  (CharacterLiteral 0xa979bd8 <col:18> 'char'45))
                <<<NULL>>>
                (CaseStmt 0xa979c28 <line:975:13, line:993:28>
                  (ImplicitCastExpr 0xa97ab50 <line:975:18> 'int' <IntegralCast>
                    (CharacterLiteral 0xa979c10 <col:18> 'char'35))
                  <<<NULL>>>
                  (CaseStmt 0xa979c60 <line:976:13, line:993:28>
                    (ImplicitCastExpr 0xa97ab40 <line:976:18> 'int' <IntegralCast>
                      (CharacterLiteral 0xa979c48 <col:18> 'char'36))
                    <<<NULL>>>
                    (CaseStmt 0xa979c98 <line:977:13, line:993:28>
                      (ImplicitCastExpr 0xa97ab30 <line:977:18> 'int' <IntegralCast>
                        (CharacterLiteral 0xa979c80 <col:18> 'char'125))
                      <<<NULL>>>
                      (CaseStmt 0xa979cd0 <line:978:13, line:993:28>
                        (ImplicitCastExpr 0xa97ab20 <line:978:18> 'int' <IntegralCast>
                          (CharacterLiteral 0xa979cb8 <col:18> 'char'123))
                        <<<NULL>>>
                        (CaseStmt 0xa979d08 <line:979:13, line:993:28>
                          (ImplicitCastExpr 0xa97ab10 <line:979:18> 'int' <IntegralCast>
                            (CharacterLiteral 0xa979cf0 <col:18> 'char'93))
                          <<<NULL>>>
                          (CaseStmt 0xa979d40 <line:980:13, line:993:28>
                            (ImplicitCastExpr 0xa97ab00 <line:980:18> 'int' <IntegralCast>
                              (CharacterLiteral 0xa979d28 <col:18> 'char'91))
                            <<<NULL>>>
                            (CaseStmt 0xa979d78 <line:981:13, line:993:28>
                              (ImplicitCastExpr 0xa97aaf0 <line:981:18> 'int' <IntegralCast>
                                (CharacterLiteral 0xa979d60 <col:18> 'char'42))
                              <<<NULL>>>
                              (CaseStmt 0xa979db0 <line:982:13, line:993:28>
                                (ImplicitCastExpr 0xa97aae0 <line:982:18> 'int' <IntegralCast>
                                  (CharacterLiteral 0xa979d98 <col:18> 'char'63))
                                <<<NULL>>>
                                (CaseStmt 0xa979de8 <line:983:13, line:993:28>
                                  (ImplicitCastExpr 0xa97aad0 <line:983:18> 'int' <IntegralCast>
                                    (CharacterLiteral 0xa979dd0 <col:18> 'char'32))
                                  <<<NULL>>>
                                  (CaseStmt 0xa979e20 <line:984:13, line:993:28>
                                    (ImplicitCastExpr 0xa97aac0 <line:984:18> 'int' <IntegralCast>
                                      (CharacterLiteral 0xa979e08 <col:18> 'char'124))
                                    <<<NULL>>>
                                    (CaseStmt 0xa979e58 <line:985:13, line:993:28>
                                      (ImplicitCastExpr 0xa97aab0 <line:985:18> 'int' <IntegralCast>
                                        (CharacterLiteral 0xa979e40 <col:18> 'char'60))
                                      <<<NULL>>>
                                      (CaseStmt 0xa979e90 <line:986:13, line:993:28>
                                        (ImplicitCastExpr 0xa97aaa0 <line:986:18> 'int' <IntegralCast>
                                          (CharacterLiteral 0xa979e78 <col:18> 'char'62))
                                        <<<NULL>>>
                                        (CaseStmt 0xa979ec8 <line:987:13, line:993:28>
                                          (ImplicitCastExpr 0xa97aa90 <line:987:18> 'int' <IntegralCast>
                                            (CharacterLiteral 0xa979eb0 <col:18> 'char'94))
                                          <<<NULL>>>
                                          (CaseStmt 0xa979f00 <line:988:13, line:993:28>
                                            (ImplicitCastExpr 0xa97aa80 <line:988:18> 'int' <IntegralCast>
                                              (CharacterLiteral 0xa979ee8 <col:18> 'char'38))
                                            <<<NULL>>>
                                            (CaseStmt 0xa979f38 <line:989:13, line:993:28>
                                              (ImplicitCastExpr 0xa97aa70 <line:989:18> 'int' <IntegralCast>
                                                (CharacterLiteral 0xa979f20 <col:18> 'char'92))
                                              <<<NULL>>>
                                              (CaseStmt 0xa979f70 <line:990:13, line:993:28>
                                                (ImplicitCastExpr 0xa97aa60 <line:990:18> 'int' <IntegralCast>
                                                  (CharacterLiteral 0xa979f58 <col:18> 'char'96))
                                                <<<NULL>>>
                                                (CaseStmt 0xa979fa8 <line:991:13, line:993:28>
                                                  (ImplicitCastExpr 0xa97aa50 <line:991:18> 'int' <IntegralCast>
                                                    (CharacterLiteral 0xa979f90 <col:18> 'char'39))
                                                  <<<NULL>>>
                                                  (CaseStmt 0xa979fe0 <line:992:13, line:993:28>
                                                    (ImplicitCastExpr 0xa97aa40 <line:992:18> 'int' <IntegralCast>
                                                      (CharacterLiteral 0xa979fc8 <col:18> 'char'34))
                                                    <<<NULL>>>
                                                    (CallExpr 0xa97a078 <line:993:17, col:28> 'void'
                                                      (ImplicitCastExpr 0xa97a068 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                                                        (DeclRefExpr 0xa97a04c <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
                                                      (CharacterLiteral 0xa97a038 <col:24> 'char'92)))))))))))))))))))))))
          (CallExpr 0xa97a138 <line:994:17, col:28> 'void'
            (ImplicitCastExpr 0xa97a128 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97a10c <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (ImplicitCastExpr 0xa97a158 <col:24, col:25> 'char' <LValueToRValue>
              (UnaryOperator 0xa97a0f8 <col:24, col:25> 'const char' lvalue prefix '*'
                (ImplicitCastExpr 0xa97a0e8 <col:25> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xa97a0cc <col:25> 'const char *' lvalue Var 0xa979490 'str' 'const char *')))))
          (BreakStmt 0xa97a168 <line:995:17>)
          (CaseStmt 0xa97a188 <line:997:13, line:998:28>
            (ImplicitCastExpr 0xa97aa30 <line:997:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa97a170 <col:18> 'char'10))
            <<<NULL>>>
            (CallExpr 0xa97a220 <line:998:17, col:28> 'void'
              (ImplicitCastExpr 0xa97a210 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa97a1f4 <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa97a1e0 <col:24> 'char'92)))
          (CallExpr 0xa97a2b8 <line:999:17, col:27> 'void'
            (ImplicitCastExpr 0xa97a2a8 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97a28c <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97a278 <col:24> 'char'110))
          (BreakStmt 0xa97a2d8 <line:1000:17>)
          (CaseStmt 0xa97a2f8 <line:1002:13, line:1003:28>
            (ImplicitCastExpr 0xa97aa20 <line:1002:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa97a2e0 <col:18> 'char'13))
            <<<NULL>>>
            (CallExpr 0xa97a390 <line:1003:17, col:28> 'void'
              (ImplicitCastExpr 0xa97a380 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa97a364 <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa97a350 <col:24> 'char'92)))
          (CallExpr 0xa97a428 <line:1004:17, col:27> 'void'
            (ImplicitCastExpr 0xa97a418 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97a3fc <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97a3e8 <col:24> 'char'114))
          (BreakStmt 0xa97a448 <line:1005:17>)
          (CaseStmt 0xa97a468 <line:1007:13, line:1008:28>
            (ImplicitCastExpr 0xa97aa10 <line:1007:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa97a450 <col:18> 'char'9))
            <<<NULL>>>
            (CallExpr 0xa97a500 <line:1008:17, col:28> 'void'
              (ImplicitCastExpr 0xa97a4f0 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa97a4d4 <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa97a4c0 <col:24> 'char'92)))
          (CallExpr 0xa97a598 <line:1009:17, col:27> 'void'
            (ImplicitCastExpr 0xa97a588 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97a56c <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97a558 <col:24> 'char'116))
          (BreakStmt 0xa97a5b8 <line:1010:17>)
          (CaseStmt 0xa97a5d8 <line:1012:13, line:1013:28>
            (ImplicitCastExpr 0xa97aa00 <line:1012:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa97a5c0 <col:18> 'char'8))
            <<<NULL>>>
            (CallExpr 0xa97a670 <line:1013:17, col:28> 'void'
              (ImplicitCastExpr 0xa97a660 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa97a644 <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa97a630 <col:24> 'char'92)))
          (CallExpr 0xa97a708 <line:1014:17, col:27> 'void'
            (ImplicitCastExpr 0xa97a6f8 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97a6dc <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97a6c8 <col:24> 'char'98))
          (BreakStmt 0xa97a728 <line:1015:17>)
          (CaseStmt 0xa97a748 <line:1017:13, line:1018:28>
            (ImplicitCastExpr 0xa97a9f0 <line:1017:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa97a730 <col:18> 'char'11))
            <<<NULL>>>
            (CallExpr 0xa97a7e0 <line:1018:17, col:28> 'void'
              (ImplicitCastExpr 0xa97a7d0 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa97a7b4 <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (CharacterLiteral 0xa97a7a0 <col:24> 'char'92)))
          (CallExpr 0xa97a878 <line:1019:17, col:27> 'void'
            (ImplicitCastExpr 0xa97a868 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97a84c <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97a838 <col:24> 'char'118))
          (BreakStmt 0xa97a898 <line:1020:17>)
          (DefaultStmt 0xa97a970 <line:1022:13, line:1023:28>
            (CallExpr 0xa97a940 <col:17, col:28> 'void'
              (ImplicitCastExpr 0xa97a930 <col:17> 'void (*)(char)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa97a914 <col:17> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
              (ImplicitCastExpr 0xa97a960 <col:24, col:25> 'char' <LValueToRValue>
                (UnaryOperator 0xa97a900 <col:24, col:25> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0xa97a8f0 <col:25> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xa97a8d4 <col:25> 'const char *' lvalue Var 0xa979490 'str' 'const char *'))))))
          (BreakStmt 0xa97a988 <line:1024:17>)))
      (UnaryOperator 0xa97aba8 <line:1026:9, col:12> 'const char *' postfix '++'
        (DeclRefExpr 0xa97ab8c <col:9> 'const char *' lvalue Var 0xa979490 'str' 'const char *'))))
  (IfStmt 0xa97ad38 <line:1029:5, line:1030:30>
    <<<NULL>>>
    (BinaryOperator 0xa97ac40 <line:1029:9, col:21> '_Bool' '!='
      (ImplicitCastExpr 0xa97ac20 <col:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa97abec <col:9> 'const char *' lvalue Var 0xa979430 'fullfile' 'const char *'))
      (ImplicitCastExpr 0xa97ac30 <col:21> 'const char *' <LValueToRValue>
        (DeclRefExpr 0xa97ac04 <col:21> 'const char *' lvalue ParmVar 0xa979300 'file' 'const char *')))
    (CallExpr 0xa97ad18 <line:1030:9, col:30> 'void'
      (ImplicitCastExpr 0xa97ad08 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xa97acf0 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
      (CStyleCastExpr 0xa97acd8 <col:14, col:22> 'void *' <NoOp>
        (ImplicitCastExpr 0xa97acc8 <col:22> 'void *' <BitCast>
          (ImplicitCastExpr 0xa97acb8 <col:22> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xa97ac8c <col:22> 'const char *' lvalue Var 0xa979430 'fullfile' 'const char *')))))
    <<<NULL>>>))


static void launch(char *filter, const string_list_t &files, size_t fileno) (CompoundStmt 0xa97e798 <../codeBase/fish-shell-master/mimedb.cpp:1041:1, line:1205:1>
  (DeclStmt 0xa97afe0 <line:1042:5, col:28>
    0xa97af80 "char *filter_org =
      (ImplicitCastExpr 0xa97afd0 <col:22> 'char *' <LValueToRValue>
        (DeclRefExpr 0xa97afb4 <col:22> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *'))")
  (DeclStmt 0xa97b050 <line:1043:5, col:16>
    0xa97b000 "int count =
      (IntegerLiteral 0xa97b038 <col:15> 'int' 0)")
  (DeclStmt 0xa97b0c0 <line:1044:5, col:23>
    0xa97b070 "int launch_again =
      (IntegerLiteral 0xa97b0a8 <col:22> 'int' 0)")
  (IfStmt 0xa97b178 <line:1046:5, line:1047:9>
    <<<NULL>>>
    (BinaryOperator 0xa97b150 <line:1046:9, col:25> '_Bool' '<='
      (CXXMemberCallExpr 0xa97b108 <col:9, col:20> 'size_type':'unsigned int'
        (MemberExpr 0xa97b0e8 <col:9, col:15> '<bound member function type>' .size 0xa9613f0
          (DeclRefExpr 0xa97b0d0 <col:9> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &')))
      (ImplicitCastExpr 0xa97b140 <col:25> 'size_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0xa97b124 <col:25> 'size_t':'unsigned int' lvalue ParmVar 0xa97ae40 'fileno' 'size_t':'unsigned int')))
    (ReturnStmt 0xa97b168 <line:1047:9>)
    <<<NULL>>>)
  (BinaryOperator 0xa97b1c8 <line:1050:5, col:16> 'int' lvalue '='
    (DeclRefExpr 0xa97b194 <col:5> 'int' lvalue Var 0xa952230 'launch_pos' 'int')
    (IntegerLiteral 0xa97b1b0 <col:16> 'int' 0))
  (ForStmt 0xa97dc90 <line:1052:5, line:1167:5>
    <<<NULL>>>
    <<<NULL>>>
    (BinaryOperator 0xa97b290 <line:1052:12, col:24> '_Bool' '&&'
      (ImplicitCastExpr 0xa97b280 <col:12, col:13> '_Bool' <IntegralToBoolean>
        (ImplicitCastExpr 0xa97b270 <col:12, col:13> 'char' <LValueToRValue>
          (UnaryOperator 0xa97b208 <col:12, col:13> 'char' lvalue prefix '*'
            (ImplicitCastExpr 0xa97b1f8 <col:13> 'char *' <LValueToRValue>
              (DeclRefExpr 0xa97b1e0 <col:13> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
      (UnaryOperator 0xa97b258 <col:23, col:24> '_Bool' prefix '!'
        (ImplicitCastExpr 0xa97b248 <col:24> '_Bool' <IntegralToBoolean>
          (ImplicitCastExpr 0xa97b238 <col:24> 'int' <LValueToRValue>
            (DeclRefExpr 0xa97b21c <col:24> 'int' lvalue Var 0xa952100 'error' 'int')))))
    (UnaryOperator 0xa97b2c0 <col:31, col:37> 'char *' postfix '++'
      (DeclRefExpr 0xa97b2a8 <col:31> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *'))
    (CompoundStmt 0xa97dc78 <line:1053:5, line:1167:5>
      (IfStmt 0xa97dc58 <line:1054:9, line:1166:9>
        <<<NULL>>>
        (BinaryOperator 0xa97b360 <line:1054:13, col:24> '_Bool' '=='
          (ImplicitCastExpr 0xa97b340 <col:13, col:14> 'int' <IntegralCast>
            (ImplicitCastExpr 0xa97b330 <col:13, col:14> 'char' <LValueToRValue>
              (UnaryOperator 0xa97b300 <col:13, col:14> 'char' lvalue prefix '*'
                (ImplicitCastExpr 0xa97b2f0 <col:14> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa97b2d4 <col:14> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
          (ImplicitCastExpr 0xa97b350 <col:24> 'int' <IntegralCast>
            (CharacterLiteral 0xa97b318 <col:24> 'char'37)))
        (CompoundStmt 0xa97db28 <line:1055:9, line:1161:9>
          (UnaryOperator 0xa97b390 <line:1056:13, col:19> 'char *' postfix '++'
            (DeclRefExpr 0xa97b378 <col:13> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *'))
          (SwitchStmt 0xa97b408 <line:1057:13, line:1160:13>
            <<<NULL>>>
            (ImplicitCastExpr 0xa97b3f8 <line:1057:21, col:22> 'int' <IntegralCast>
              (ImplicitCastExpr 0xa97b3e8 <col:21, col:22> 'char' <LValueToRValue>
                (UnaryOperator 0xa97b3d0 <col:21, col:22> 'char' lvalue prefix '*'
                  (ImplicitCastExpr 0xa97b3c0 <col:22> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xa97b3a4 <col:22> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
            (CompoundStmt 0xa97da70 <line:1058:13, line:1160:13>
              (CaseStmt 0xa97b440 <line:1059:17, line:1064:17>
                (ImplicitCastExpr 0xa97db18 <line:1059:22> 'int' <IntegralCast>
                  (CharacterLiteral 0xa97b428 <col:22> 'char'117))
                <<<NULL>>>
                (CompoundStmt 0xa97b630 <line:1060:17, line:1064:17>
                  (BinaryOperator 0xa97b490 <line:1061:21, col:36> 'int' lvalue '='
                    (DeclRefExpr 0xa97b460 <col:21> 'int' lvalue Var 0xa97b070 'launch_again' 'int')
                    (IntegerLiteral 0xa97b478 <col:36> 'int' 1))
                  (CallExpr 0xa97b608 <line:1062:21, col:55> 'void'
                    (ImplicitCastExpr 0xa97b5f8 <col:21> 'void (*)(const char *)' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa97b5dc <col:21> 'void (const char *)' lvalue Function 0xa977ce0 'write_url' 'void (const char *)'))
                    (CXXMemberCallExpr 0xa97b5c0 <col:31, col:54> 'const char *'
                      (MemberExpr 0xa97b59c <col:31, col:48> '<bound member function type>' .c_str 0xa6d9410
                        (CXXMemberCallExpr 0xa97b570 <col:31, col:46> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                          (MemberExpr 0xa97b54c <col:31, col:37> '<bound member function type>' .at 0xa962040
                            (DeclRefExpr 0xa97b4dc <col:31> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                          (ImplicitCastExpr 0xa97b590 <col:40> 'size_t':'unsigned int' <LValueToRValue>
                            (DeclRefExpr 0xa97b534 <col:40> 'size_t':'unsigned int' lvalue ParmVar 0xa97ae40 'fileno' 'size_t':'unsigned int'))))))
                  (BreakStmt 0xa97b628 <line:1063:21>)))
              (CaseStmt 0xa97b668 <line:1065:17, line:1077:17>
                (ImplicitCastExpr 0xa97db08 <line:1065:22> 'int' <IntegralCast>
                  (CharacterLiteral 0xa97b650 <col:22> 'char'85))
                <<<NULL>>>
                (CompoundStmt 0xa97bb18 <line:1066:17, line:1077:17>
                  (ForStmt 0xa97bae8 <line:1067:21, line:1074:21>
                    (DeclStmt 0xa97b6f0 <line:1067:26, col:36>
                      0xa97b690 "size_t i =
                        (ImplicitCastExpr 0xa97b6e0 <col:35> 'size_t':'unsigned int' <IntegralCast>
                          (IntegerLiteral 0xa97b6c8 <col:35> 'int' 0))")
                    <<<NULL>>>
                    (BinaryOperator 0xa97b780 <col:38, col:51> '_Bool' '<'
                      (ImplicitCastExpr 0xa97b770 <col:38> 'size_t':'unsigned int' <LValueToRValue>
                        (DeclRefExpr 0xa97b700 <col:38> 'size_t':'unsigned int' lvalue Var 0xa97b690 'i' 'size_t':'unsigned int'))
                      (CXXMemberCallExpr 0xa97b750 <col:40, col:51> 'size_type':'unsigned int'
                        (MemberExpr 0xa97b730 <col:40, col:46> '<bound member function type>' .size 0xa9613f0
                          (DeclRefExpr 0xa97b718 <col:40> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))))
                    (UnaryOperator 0xa97b7b0 <col:54, col:55> 'size_t':'unsigned int' postfix '++'
                      (DeclRefExpr 0xa97b798 <col:54> 'size_t':'unsigned int' lvalue Var 0xa97b690 'i' 'size_t':'unsigned int'))
                    (CompoundStmt 0xa97bac8 <line:1068:21, line:1074:21>
                      (IfStmt 0xa97b8c8 <line:1069:25, line:1070:39>
                        <<<NULL>>>
                        (BinaryOperator 0xa97b818 <line:1069:29, col:34> '_Bool' '!='
                          (ImplicitCastExpr 0xa97b7f8 <col:29> 'size_t':'unsigned int' <LValueToRValue>
                            (DeclRefExpr 0xa97b7c4 <col:29> 'size_t':'unsigned int' lvalue Var 0xa97b690 'i' 'size_t':'unsigned int'))
                          (ImplicitCastExpr 0xa97b808 <col:34> 'unsigned int' <IntegralCast>
                            (IntegerLiteral 0xa97b7e0 <col:34> 'int' 0)))
                        (CallExpr 0xa97b8a8 <line:1070:29, col:39> 'void'
                          (ImplicitCastExpr 0xa97b898 <col:29> 'void (*)(char)' <FunctionToPointerDecay>
                            (DeclRefExpr 0xa97b87c <col:29> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
                          (CharacterLiteral 0xa97b868 <col:36> 'char'32))
                        <<<NULL>>>)
                      (CallExpr 0xa97ba48 <line:1071:25, col:54> 'void'
                        (ImplicitCastExpr 0xa97ba38 <col:25> 'void (*)(const char *)' <FunctionToPointerDecay>
                          (DeclRefExpr 0xa97ba1c <col:25> 'void (const char *)' lvalue Function 0xa977ce0 'write_url' 'void (const char *)'))
                        (CXXMemberCallExpr 0xa97ba00 <col:35, col:53> 'const char *'
                          (MemberExpr 0xa97b9dc <col:35, col:47> '<bound member function type>' .c_str 0xa6d9410
                            (CXXMemberCallExpr 0xa97b9b0 <col:35, col:45> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                              (MemberExpr 0xa97b98c <col:35, col:41> '<bound member function type>' .at 0xa962040
                                (DeclRefExpr 0xa97b91c <col:35> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                              (ImplicitCastExpr 0xa97b9d0 <col:44> 'size_t':'unsigned int' <LValueToRValue>
                                (DeclRefExpr 0xa97b974 <col:44> 'size_t':'unsigned int' lvalue Var 0xa97b690 'i' 'size_t':'unsigned int'))))))
                      (IfStmt 0xa97baa8 <line:1072:25, line:1073:29>
                        <<<NULL>>>
                        (ImplicitCastExpr 0xa97ba90 <line:1072:29> '_Bool' <IntegralToBoolean>
                          (ImplicitCastExpr 0xa97ba80 <col:29> 'int' <LValueToRValue>
                            (DeclRefExpr 0xa97ba68 <col:29> 'int' lvalue Var 0xa952100 'error' 'int')))
                        (BreakStmt 0xa97baa0 <line:1073:29>)
                        <<<NULL>>>)))
                  (BreakStmt 0xa97bb10 <line:1076:21>)))
              (CaseStmt 0xa97bb48 <line:1079:17, line:1085:17>
                (ImplicitCastExpr 0xa97daf8 <line:1079:22> 'int' <IntegralCast>
                  (CharacterLiteral 0xa97bb30 <col:22> 'char'102))
                <<<NULL>>>
                (CaseStmt 0xa97bb80 <line:1080:17, line:1085:17>
                  (ImplicitCastExpr 0xa97dae8 <line:1080:22> 'int' <IntegralCast>
                    (CharacterLiteral 0xa97bb68 <col:22> 'char'110))
                  <<<NULL>>>
                  (CompoundStmt 0xa97be48 <line:1081:17, line:1085:17>
                    (BinaryOperator 0xa97bbd0 <line:1082:21, col:36> 'int' lvalue '='
                      (DeclRefExpr 0xa97bba0 <col:21> 'int' lvalue Var 0xa97b070 'launch_again' 'int')
                      (IntegerLiteral 0xa97bbb8 <col:36> 'int' 1))
                    (CallExpr 0xa97be08 <line:1083:21, col:72> 'void'
                      (ImplicitCastExpr 0xa97bdf8 <col:21> 'void (*)(const char *, int)' <FunctionToPointerDecay>
                        (DeclRefExpr 0xa97bdc0 <col:21> 'void (const char *, int)' lvalue Function 0xa9793b0 'write_file' 'void (const char *, int)'))
                      (CXXMemberCallExpr 0xa97bd00 <col:32, col:55> 'const char *'
                        (MemberExpr 0xa97bcdc <col:32, col:49> '<bound member function type>' .c_str 0xa6d9410
                          (CXXMemberCallExpr 0xa97bcb0 <col:32, col:47> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                            (MemberExpr 0xa97bc8c <col:32, col:38> '<bound member function type>' .at 0xa962040
                              (DeclRefExpr 0xa97bc1c <col:32> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                            (ImplicitCastExpr 0xa97bcd0 <col:41> 'size_t':'unsigned int' <LValueToRValue>
                              (DeclRefExpr 0xa97bc74 <col:41> 'size_t':'unsigned int' lvalue ParmVar 0xa97ae40 'fileno' 'size_t':'unsigned int')))))
                      (ImplicitCastExpr 0xa97be30 <col:58, col:69> 'int' <IntegralCast>
                        (BinaryOperator 0xa97bda8 <col:58, col:69> '_Bool' '=='
                          (ImplicitCastExpr 0xa97bd88 <col:58, col:59> 'int' <IntegralCast>
                            (ImplicitCastExpr 0xa97bd78 <col:58, col:59> 'char' <LValueToRValue>
                              (UnaryOperator 0xa97bd48 <col:58, col:59> 'char' lvalue prefix '*'
                                (ImplicitCastExpr 0xa97bd38 <col:59> 'char *' <LValueToRValue>
                                  (DeclRefExpr 0xa97bd1c <col:59> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
                          (ImplicitCastExpr 0xa97bd98 <col:69> 'int' <IntegralCast>
                            (CharacterLiteral 0xa97bd60 <col:69> 'char'102)))))
                    (BreakStmt 0xa97be40 <line:1084:21>))))
              (CaseStmt 0xa97be80 <line:1087:17, line:1099:17>
                (ImplicitCastExpr 0xa97dad8 <line:1087:22> 'int' <IntegralCast>
                  (CharacterLiteral 0xa97be68 <col:22> 'char'70))
                <<<NULL>>>
                (CaseStmt 0xa97beb8 <line:1088:17, line:1099:17>
                  (ImplicitCastExpr 0xa97dac8 <line:1088:22> 'int' <IntegralCast>
                    (CharacterLiteral 0xa97bea0 <col:22> 'char'78))
                  <<<NULL>>>
                  (CompoundStmt 0xa97c420 <line:1089:17, line:1099:17>
                    (ForStmt 0xa97c3f0 <line:1090:21, line:1097:21>
                      (DeclStmt 0xa97bf40 <line:1090:26, col:36>
                        0xa97bee0 "size_t i =
                          (ImplicitCastExpr 0xa97bf30 <col:35> 'size_t':'unsigned int' <IntegralCast>
                            (IntegerLiteral 0xa97bf18 <col:35> 'int' 0))")
                      <<<NULL>>>
                      (BinaryOperator 0xa97bfd0 <col:38, col:51> '_Bool' '<'
                        (ImplicitCastExpr 0xa97bfc0 <col:38> 'size_t':'unsigned int' <LValueToRValue>
                          (DeclRefExpr 0xa97bf50 <col:38> 'size_t':'unsigned int' lvalue Var 0xa97bee0 'i' 'size_t':'unsigned int'))
                        (CXXMemberCallExpr 0xa97bfa0 <col:40, col:51> 'size_type':'unsigned int'
                          (MemberExpr 0xa97bf80 <col:40, col:46> '<bound member function type>' .size 0xa9613f0
                            (DeclRefExpr 0xa97bf68 <col:40> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))))
                      (UnaryOperator 0xa97c000 <col:54, col:55> 'size_t':'unsigned int' postfix '++'
                        (DeclRefExpr 0xa97bfe8 <col:54> 'size_t':'unsigned int' lvalue Var 0xa97bee0 'i' 'size_t':'unsigned int'))
                      (CompoundStmt 0xa97c3d0 <line:1091:21, line:1097:21>
                        (IfStmt 0xa97c118 <line:1092:25, line:1093:39>
                          <<<NULL>>>
                          (BinaryOperator 0xa97c068 <line:1092:29, col:34> '_Bool' '!='
                            (ImplicitCastExpr 0xa97c048 <col:29> 'size_t':'unsigned int' <LValueToRValue>
                              (DeclRefExpr 0xa97c014 <col:29> 'size_t':'unsigned int' lvalue Var 0xa97bee0 'i' 'size_t':'unsigned int'))
                            (ImplicitCastExpr 0xa97c058 <col:34> 'unsigned int' <IntegralCast>
                              (IntegerLiteral 0xa97c030 <col:34> 'int' 0)))
                          (CallExpr 0xa97c0f8 <line:1093:29, col:39> 'void'
                            (ImplicitCastExpr 0xa97c0e8 <col:29> 'void (*)(char)' <FunctionToPointerDecay>
                              (DeclRefExpr 0xa97c0cc <col:29> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
                            (CharacterLiteral 0xa97c0b8 <col:36> 'char'32))
                          <<<NULL>>>)
                        (CallExpr 0xa97c338 <line:1094:25, col:71> 'void'
                          (ImplicitCastExpr 0xa97c328 <col:25> 'void (*)(const char *, int)' <FunctionToPointerDecay>
                            (DeclRefExpr 0xa97c310 <col:25> 'void (const char *, int)' lvalue Function 0xa9793b0 'write_file' 'void (const char *, int)'))
                          (CXXMemberCallExpr 0xa97c250 <col:36, col:54> 'const char *'
                            (MemberExpr 0xa97c22c <col:36, col:48> '<bound member function type>' .c_str 0xa6d9410
                              (CXXMemberCallExpr 0xa97c200 <col:36, col:46> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                                (MemberExpr 0xa97c1dc <col:36, col:42> '<bound member function type>' .at 0xa962040
                                  (DeclRefExpr 0xa97c16c <col:36> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                                (ImplicitCastExpr 0xa97c220 <col:45> 'size_t':'unsigned int' <LValueToRValue>
                                  (DeclRefExpr 0xa97c1c4 <col:45> 'size_t':'unsigned int' lvalue Var 0xa97bee0 'i' 'size_t':'unsigned int')))))
                          (ImplicitCastExpr 0xa97c360 <col:57, col:68> 'int' <IntegralCast>
                            (BinaryOperator 0xa97c2f8 <col:57, col:68> '_Bool' '=='
                              (ImplicitCastExpr 0xa97c2d8 <col:57, col:58> 'int' <IntegralCast>
                                (ImplicitCastExpr 0xa97c2c8 <col:57, col:58> 'char' <LValueToRValue>
                                  (UnaryOperator 0xa97c298 <col:57, col:58> 'char' lvalue prefix '*'
                                    (ImplicitCastExpr 0xa97c288 <col:58> 'char *' <LValueToRValue>
                                      (DeclRefExpr 0xa97c26c <col:58> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
                              (ImplicitCastExpr 0xa97c2e8 <col:68> 'int' <IntegralCast>
                                (CharacterLiteral 0xa97c2b0 <col:68> 'char'70)))))
                        (IfStmt 0xa97c3b0 <line:1095:25, line:1096:29>
                          <<<NULL>>>
                          (ImplicitCastExpr 0xa97c398 <line:1095:29> '_Bool' <IntegralToBoolean>
                            (ImplicitCastExpr 0xa97c388 <col:29> 'int' <LValueToRValue>
                              (DeclRefExpr 0xa97c36c <col:29> 'int' lvalue Var 0xa952100 'error' 'int')))
                          (BreakStmt 0xa97c3a8 <line:1096:29>)
                          <<<NULL>>>)))
                    (BreakStmt 0xa97c418 <line:1098:21>))))
              (CaseStmt 0xa97c450 <line:1102:17, line:1124:17>
                (ImplicitCastExpr 0xa97dab8 <line:1102:22> 'int' <IntegralCast>
                  (CharacterLiteral 0xa97c438 <col:22> 'char'100))
                <<<NULL>>>
                (CompoundStmt 0xa97cca0 <line:1103:17, line:1124:17>
                  (DeclStmt 0xa97c638 <line:1104:21, col:77>
                    0xa97c480 "const char *cpy =
                      (CallExpr 0xa97c618 <col:39, col:76> 'const char *'
                        (ImplicitCastExpr 0xa97c608 <col:39> 'const char *(*)(const char *)' <FunctionToPointerDecay>
                          (DeclRefExpr 0xa97c5ec <col:39> 'const char *(const char *)' lvalue Function 0xa976d90 'get_fullfile' 'const char *(const char *)'))
                        (CXXMemberCallExpr 0xa97c5d0 <col:52, col:75> 'const char *'
                          (MemberExpr 0xa97c5ac <col:52, col:69> '<bound member function type>' .c_str 0xa6d9410
                            (CXXMemberCallExpr 0xa97c580 <col:52, col:67> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                              (MemberExpr 0xa97c55c <col:52, col:58> '<bound member function type>' .at 0xa962040
                                (DeclRefExpr 0xa97c4ec <col:52> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                              (ImplicitCastExpr 0xa97c5a0 <col:61> 'size_t':'unsigned int' <LValueToRValue>
                                (DeclRefExpr 0xa97c544 <col:61> 'size_t':'unsigned int' lvalue ParmVar 0xa97ae40 'fileno' 'size_t':'unsigned int'))))))")
                  (DeclStmt 0xa97c698 <line:1105:21, col:30>
                    0xa97c660 "char *dir")
                  (BinaryOperator 0xa97c6d8 <line:1107:21, col:34> 'int' lvalue '='
                    (DeclRefExpr 0xa97c6a8 <col:21> 'int' lvalue Var 0xa97b070 'launch_again' 'int')
                    (IntegerLiteral 0xa97c6c0 <col:34> 'int' 1))
                  (IfStmt 0xa97c918 <line:1111:21, line:1112:44>
                    <<<NULL>>>
                    (BinaryOperator 0xa97c818 <line:1111:25, col:55> '_Bool' '=='
                      (ImplicitCastExpr 0xa97c808 <col:25> 'const char *' <LValueToRValue>
                        (DeclRefExpr 0xa97c6f0 <col:25> 'const char *' lvalue Var 0xa97c480 'cpy' 'const char *'))
                      (CXXMemberCallExpr 0xa97c7e8 <col:32, col:55> 'const char *'
                        (MemberExpr 0xa97c7c4 <col:32, col:49> '<bound member function type>' .c_str 0xa6d9410
                          (CXXMemberCallExpr 0xa97c798 <col:32, col:47> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                            (MemberExpr 0xa97c778 <col:32, col:38> '<bound member function type>' .at 0xa962040
                              (DeclRefExpr 0xa97c708 <col:32> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                            (ImplicitCastExpr 0xa97c7b8 <col:41> 'size_t':'unsigned int' <LValueToRValue>
                              (DeclRefExpr 0xa97c760 <col:41> 'size_t':'unsigned int' lvalue ParmVar 0xa97ae40 'fileno' 'size_t':'unsigned int'))))))
                    (BinaryOperator 0xa97c900 <line:1112:25, col:44> 'const char *' lvalue '='
                      (DeclRefExpr 0xa97c830 <col:25> 'const char *' lvalue Var 0xa97c480 'cpy' 'const char *')
                      (ImplicitCastExpr 0xa97c8f0 <col:31, col:44> 'const char *' <NoOp>
                        (CallExpr 0xa97c8c0 <col:31, col:44> 'char *'
                          (ImplicitCastExpr 0xa97c8b0 <col:31> 'char *(*)(const char *)' <FunctionToPointerDecay>
                            (DeclRefExpr 0xa97c894 <col:31> 'char *(const char *)' lvalue Function 0xa9527f0 'my_strdup' 'char *(const char *)'))
                          (ImplicitCastExpr 0xa97c8e0 <col:41> 'const char *' <LValueToRValue>
                            (DeclRefExpr 0xa97c87c <col:41> 'const char *' lvalue Var 0xa97c480 'cpy' 'const char *')))))
                    <<<NULL>>>)
                  (IfStmt 0xa97c9c0 <line:1114:21, line:1117:21>
                    <<<NULL>>>
                    (BinaryOperator 0xa97c988 <line:1114:25, col:32> '_Bool' '=='
                      (ImplicitCastExpr 0xa97c968 <col:25> 'const char *' <LValueToRValue>
                        (DeclRefExpr 0xa97c934 <col:25> 'const char *' lvalue Var 0xa97c480 'cpy' 'const char *'))
                      (ImplicitCastExpr 0xa97c978 <col:32> 'const char *' <NullToPointer>
                        (IntegerLiteral 0xa97c950 <col:32> 'int' 0)))
                    (CompoundStmt 0xa97c9a8 <line:1115:21, line:1117:21>
                      (BreakStmt 0xa97c9a0 <line:1116:25>))
                    <<<NULL>>>)
                  (BinaryOperator 0xa97cac8 <line:1119:21, col:44> 'char *' lvalue '='
                    (DeclRefExpr 0xa97c9dc <col:21> 'char *' lvalue Var 0xa97c660 'dir' 'char *')
                    (CallExpr 0xa97caa8 <col:25, col:44> 'char *'
                      (ImplicitCastExpr 0xa97ca98 <col:25> 'char *(*)(char *) throw()' <FunctionToPointerDecay>
                        (DeclRefExpr 0xa97ca80 <col:25> 'char *(char *) throw()' lvalue Function 0xa5a8420 'dirname' 'char *(char *) throw()'))
                      (CStyleCastExpr 0xa97ca68 <col:33, col:41> 'char *' <NoOp>
                        (ImplicitCastExpr 0xa97ca58 <col:41> 'const char *' <LValueToRValue>
                          (DeclRefExpr 0xa97ca2c <col:41> 'const char *' lvalue Var 0xa97c480 'cpy' 'const char *')))))
                  (CallExpr 0xa97cb70 <line:1120:21, col:38> 'void'
                    (ImplicitCastExpr 0xa97cb60 <col:21> 'void (*)(const char *, int)' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa97cb48 <col:21> 'void (const char *, int)' lvalue Function 0xa9793b0 'write_file' 'void (const char *, int)'))
                    (ImplicitCastExpr 0xa97cba8 <col:32> 'const char *' <NoOp>
                      (ImplicitCastExpr 0xa97cb98 <col:32> 'char *' <LValueToRValue>
                        (DeclRefExpr 0xa97cb14 <col:32> 'char *' lvalue Var 0xa97c660 'dir' 'char *')))
                    (IntegerLiteral 0xa97cb30 <col:37> 'int' 1))
                  (CallExpr 0xa97cc78 <line:1121:21, col:37> 'void'
                    (ImplicitCastExpr 0xa97cc68 <col:21> 'void (*)(void *) throw()' <FunctionToPointerDecay>
                      (DeclRefExpr 0xa97cc50 <col:21> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
                    (CStyleCastExpr 0xa97cc38 <col:26, col:34> 'void *' <NoOp>
                      (ImplicitCastExpr 0xa97cc28 <col:34> 'void *' <BitCast>
                        (ImplicitCastExpr 0xa97cc18 <col:34> 'const char *' <LValueToRValue>
                          (DeclRefExpr 0xa97cbec <col:34> 'const char *' lvalue Var 0xa97c480 'cpy' 'const char *')))))
                  (BreakStmt 0xa97cc98 <line:1123:21>)))
              (CaseStmt 0xa97ccf0 <line:1126:17, line:1153:17>
                (ImplicitCastExpr 0xa97daa8 <line:1126:22> 'int' <IntegralCast>
                  (CharacterLiteral 0xa97ccd8 <col:22> 'char'68))
                <<<NULL>>>
                (CompoundStmt 0xa97d7c0 <line:1127:17, line:1153:17>
                  (ForStmt 0xa97d790 <line:1128:21, line:1151:21>
                    (DeclStmt 0xa97cd80 <line:1128:26, col:36>
                      0xa97cd20 "size_t i =
                        (ImplicitCastExpr 0xa97cd70 <col:35> 'size_t':'unsigned int' <IntegralCast>
                          (IntegerLiteral 0xa97cd58 <col:35> 'int' 0))")
                    <<<NULL>>>
                    (BinaryOperator 0xa97ce10 <col:38, col:51> '_Bool' '<'
                      (ImplicitCastExpr 0xa97ce00 <col:38> 'size_t':'unsigned int' <LValueToRValue>
                        (DeclRefExpr 0xa97cd90 <col:38> 'size_t':'unsigned int' lvalue Var 0xa97cd20 'i' 'size_t':'unsigned int'))
                      (CXXMemberCallExpr 0xa97cde0 <col:40, col:51> 'size_type':'unsigned int'
                        (MemberExpr 0xa97cdc0 <col:40, col:46> '<bound member function type>' .size 0xa9613f0
                          (DeclRefExpr 0xa97cda8 <col:40> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))))
                    (UnaryOperator 0xa97ce40 <col:54, col:55> 'size_t':'unsigned int' postfix '++'
                      (DeclRefExpr 0xa97ce28 <col:54> 'size_t':'unsigned int' lvalue Var 0xa97cd20 'i' 'size_t':'unsigned int'))
                    (CompoundStmt 0xa97d760 <line:1129:21, line:1151:21>
                      (DeclStmt 0xa97d028 <line:1130:25, col:76>
                        0xa97ce70 "const char *cpy =
                          (CallExpr 0xa97d008 <col:43, col:75> 'const char *'
                            (ImplicitCastExpr 0xa97cff8 <col:43> 'const char *(*)(const char *)' <FunctionToPointerDecay>
                              (DeclRefExpr 0xa97cfdc <col:43> 'const char *(const char *)' lvalue Function 0xa976d90 'get_fullfile' 'const char *(const char *)'))
                            (CXXMemberCallExpr 0xa97cfc0 <col:56, col:74> 'const char *'
                              (MemberExpr 0xa97cf9c <col:56, col:68> '<bound member function type>' .c_str 0xa6d9410
                                (CXXMemberCallExpr 0xa97cf70 <col:56, col:66> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                                  (MemberExpr 0xa97cf4c <col:56, col:62> '<bound member function type>' .at 0xa962040
                                    (DeclRefExpr 0xa97cedc <col:56> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                                  (ImplicitCastExpr 0xa97cf90 <col:65> 'size_t':'unsigned int' <LValueToRValue>
                                    (DeclRefExpr 0xa97cf34 <col:65> 'size_t':'unsigned int' lvalue Var 0xa97cd20 'i' 'size_t':'unsigned int'))))))")
                      (DeclStmt 0xa97d088 <line:1131:25, col:34>
                        0xa97d050 "char *dir")
                      (IfStmt 0xa97d2c0 <line:1136:25, line:1137:48>
                        <<<NULL>>>
                        (BinaryOperator 0xa97d1c0 <line:1136:29, col:54> '_Bool' '=='
                          (ImplicitCastExpr 0xa97d1b0 <col:29> 'const char *' <LValueToRValue>
                            (DeclRefExpr 0xa97d098 <col:29> 'const char *' lvalue Var 0xa97ce70 'cpy' 'const char *'))
                          (CXXMemberCallExpr 0xa97d190 <col:36, col:54> 'const char *'
                            (MemberExpr 0xa97d16c <col:36, col:48> '<bound member function type>' .c_str 0xa6d9410
                              (CXXMemberCallExpr 0xa97d140 <col:36, col:46> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue
                                (MemberExpr 0xa97d120 <col:36, col:42> '<bound member function type>' .at 0xa962040
                                  (DeclRefExpr 0xa97d0b0 <col:36> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &'))
                                (ImplicitCastExpr 0xa97d160 <col:45> 'size_t':'unsigned int' <LValueToRValue>
                                  (DeclRefExpr 0xa97d108 <col:45> 'size_t':'unsigned int' lvalue Var 0xa97cd20 'i' 'size_t':'unsigned int'))))))
                        (BinaryOperator 0xa97d2a8 <line:1137:29, col:48> 'const char *' lvalue '='
                          (DeclRefExpr 0xa97d1d8 <col:29> 'const char *' lvalue Var 0xa97ce70 'cpy' 'const char *')
                          (ImplicitCastExpr 0xa97d298 <col:35, col:48> 'const char *' <NoOp>
                            (CallExpr 0xa97d268 <col:35, col:48> 'char *'
                              (ImplicitCastExpr 0xa97d258 <col:35> 'char *(*)(const char *)' <FunctionToPointerDecay>
                                (DeclRefExpr 0xa97d23c <col:35> 'char *(const char *)' lvalue Function 0xa9527f0 'my_strdup' 'char *(const char *)'))
                              (ImplicitCastExpr 0xa97d288 <col:45> 'const char *' <LValueToRValue>
                                (DeclRefExpr 0xa97d224 <col:45> 'const char *' lvalue Var 0xa97ce70 'cpy' 'const char *')))))
                        <<<NULL>>>)
                      (IfStmt 0xa97d368 <line:1139:25, line:1142:25>
                        <<<NULL>>>
                        (BinaryOperator 0xa97d330 <line:1139:29, col:36> '_Bool' '=='
                          (ImplicitCastExpr 0xa97d310 <col:29> 'const char *' <LValueToRValue>
                            (DeclRefExpr 0xa97d2dc <col:29> 'const char *' lvalue Var 0xa97ce70 'cpy' 'const char *'))
                          (ImplicitCastExpr 0xa97d320 <col:36> 'const char *' <NullToPointer>
                            (IntegerLiteral 0xa97d2f8 <col:36> 'int' 0)))
                        (CompoundStmt 0xa97d350 <line:1140:25, line:1142:25>
                          (BreakStmt 0xa97d348 <line:1141:29>))
                        <<<NULL>>>)
                      (BinaryOperator 0xa97d470 <line:1143:25, col:48> 'char *' lvalue '='
                        (DeclRefExpr 0xa97d384 <col:25> 'char *' lvalue Var 0xa97d050 'dir' 'char *')
                        (CallExpr 0xa97d450 <col:29, col:48> 'char *'
                          (ImplicitCastExpr 0xa97d440 <col:29> 'char *(*)(char *) throw()' <FunctionToPointerDecay>
                            (DeclRefExpr 0xa97d428 <col:29> 'char *(char *) throw()' lvalue Function 0xa5a8420 'dirname' 'char *(char *) throw()'))
                          (CStyleCastExpr 0xa97d410 <col:37, col:45> 'char *' <NoOp>
                            (ImplicitCastExpr 0xa97d400 <col:45> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xa97d3d4 <col:45> 'const char *' lvalue Var 0xa97ce70 'cpy' 'const char *')))))
                      (IfStmt 0xa97d588 <line:1145:25, line:1146:39>
                        <<<NULL>>>
                        (BinaryOperator 0xa97d4d8 <line:1145:29, col:34> '_Bool' '!='
                          (ImplicitCastExpr 0xa97d4b8 <col:29> 'size_t':'unsigned int' <LValueToRValue>
                            (DeclRefExpr 0xa97d488 <col:29> 'size_t':'unsigned int' lvalue Var 0xa97cd20 'i' 'size_t':'unsigned int'))
                          (ImplicitCastExpr 0xa97d4c8 <col:34> 'unsigned int' <IntegralCast>
                            (IntegerLiteral 0xa97d4a0 <col:34> 'int' 0)))
                        (CallExpr 0xa97d568 <line:1146:29, col:39> 'void'
                          (ImplicitCastExpr 0xa97d558 <col:29> 'void (*)(char)' <FunctionToPointerDecay>
                            (DeclRefExpr 0xa97d53c <col:29> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
                          (CharacterLiteral 0xa97d528 <col:36> 'char'32))
                        <<<NULL>>>)
                      (CallExpr 0xa97d638 <line:1148:25, col:42> 'void'
                        (ImplicitCastExpr 0xa97d628 <col:25> 'void (*)(const char *, int)' <FunctionToPointerDecay>
                          (DeclRefExpr 0xa97d610 <col:25> 'void (const char *, int)' lvalue Function 0xa9793b0 'write_file' 'void (const char *, int)'))
                        (ImplicitCastExpr 0xa97d670 <col:36> 'const char *' <NoOp>
                          (ImplicitCastExpr 0xa97d660 <col:36> 'char *' <LValueToRValue>
                            (DeclRefExpr 0xa97d5dc <col:36> 'char *' lvalue Var 0xa97d050 'dir' 'char *')))
                        (IntegerLiteral 0xa97d5f8 <col:41> 'int' 1))
                      (CallExpr 0xa97d740 <line:1149:25, col:41> 'void'
                        (ImplicitCastExpr 0xa97d730 <col:25> 'void (*)(void *) throw()' <FunctionToPointerDecay>
                          (DeclRefExpr 0xa97d718 <col:25> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
                        (CStyleCastExpr 0xa97d700 <col:30, col:38> 'void *' <NoOp>
                          (ImplicitCastExpr 0xa97d6f0 <col:38> 'void *' <BitCast>
                            (ImplicitCastExpr 0xa97d6e0 <col:38> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xa97d6b4 <col:38> 'const char *' lvalue Var 0xa97ce70 'cpy' 'const char *')))))))
                  (BreakStmt 0xa97d7b8 <line:1152:21>)))
              (DefaultStmt 0xa97da08 <line:1155:17, line:1156:122>
                (CallExpr 0xa97d978 <col:21, col:122> 'int'
                  (ImplicitCastExpr 0xa97d968 <col:21> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
                    (DeclRefExpr 0xa97d94c <col:21> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
                  (ImplicitCastExpr 0xa97d9a8 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
                    (DeclRefExpr 0xa97d80c <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
                  (ImplicitCastExpr 0xa97d9b8 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
                    (ParenExpr 0xa97d8c0 <col:19, col:26> 'const char [51]' lvalue
                      (StringLiteral 0xa97d870 <line:1156:39> 'const char [51]' lvalue "%s: Unsupported switch '%c' in launch string '%s'\n")))
                  (ImplicitCastExpr 0xa97d9c8 <line:95:16> 'const char *' <ArrayToPointerDecay>
                    (StringLiteral 0xa97d8d4 <col:16> 'const char [7]' lvalue "mimedb"))
                  (ImplicitCastExpr 0xa97d9e8 <line:1156:103, col:104> 'int' <IntegralCast>
                    (ImplicitCastExpr 0xa97d9d8 <col:103, col:104> 'char' <LValueToRValue>
                      (UnaryOperator 0xa97d920 <col:103, col:104> 'char' lvalue prefix '*'
                        (ImplicitCastExpr 0xa97d910 <col:104> 'char *' <LValueToRValue>
                          (DeclRefExpr 0xa97d8f8 <col:104> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
                  (ImplicitCastExpr 0xa97d9f8 <col:112> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xa97d934 <col:112> 'char *' lvalue Var 0xa97af80 'filter_org' 'char *'))))
              (BinaryOperator 0xa97da50 <line:1157:21, col:32> 'int' lvalue '='
                (DeclRefExpr 0xa97da1c <col:21> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')
                (IntegerLiteral 0xa97da38 <col:32> 'int' 0))
              (BreakStmt 0xa97da68 <line:1158:21>))))
        (CompoundStmt 0xa97dc40 <line:1163:9, line:1166:9>
          (CallExpr 0xa97dbe0 <line:1164:13, col:27> 'void'
            (ImplicitCastExpr 0xa97dbd0 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97dbb4 <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (ImplicitCastExpr 0xa97dc00 <col:20, col:21> 'char' <LValueToRValue>
              (UnaryOperator 0xa97dba0 <col:20, col:21> 'char' lvalue prefix '*'
                (ImplicitCastExpr 0xa97db90 <col:21> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa97db74 <col:21> 'char *' lvalue ParmVar 0xa97ad90 'filter' 'char *')))))
          (UnaryOperator 0xa97dc28 <line:1165:13, col:18> 'int' postfix '++'
            (DeclRefExpr 0xa97dc0c <col:13> 'int' lvalue Var 0xa97b000 'count' 'int'))))))
  (IfStmt 0xa97dd00 <line:1169:5, line:1170:9>
    <<<NULL>>>
    (ImplicitCastExpr 0xa97dce0 <line:1169:9> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa97dcd0 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa97dcb4 <col:9> 'int' lvalue Var 0xa952100 'error' 'int')))
    (ReturnStmt 0xa97dcf0 <line:1170:9>)
    <<<NULL>>>)
  (SwitchStmt 0xa97dd48 <line:1172:5, line:1199:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa97dd38 <line:1172:13> 'int' <LValueToRValue>
      (DeclRefExpr 0xa97dd1c <col:13> 'int' lvalue Var 0xa9521d0 'launch_len' 'int'))
    (CompoundStmt 0xa97e598 <line:1173:5, line:1199:5>
      (CaseStmt 0xa97dd98 <line:1174:9, line:1179:9>
        (UnaryOperator 0xa97dd80 <line:1174:14, col:15> 'int' prefix '-'
          (IntegerLiteral 0xa97dd68 <col:15> 'int' 1))
        <<<NULL>>>
        (CompoundStmt 0xa97df48 <line:1175:9, line:1179:9>
          (BinaryOperator 0xa97dde8 <line:1176:13, col:26> 'int' lvalue '='
            (DeclRefExpr 0xa97ddb8 <col:13> 'int' lvalue Var 0xa9521d0 'launch_len' 'int')
            (IntegerLiteral 0xa97ddd0 <col:26> 'int' 0))
          (CallExpr 0xa97dee0 <line:1177:13, col:61> 'int'
            (ImplicitCastExpr 0xa97ded0 <col:13> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97deb8 <col:13> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
            (ImplicitCastExpr 0xa97df08 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
              (DeclRefExpr 0xa97de34 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
            (ImplicitCastExpr 0xa97df18 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
              (ParenExpr 0xa97de80 <col:19, col:26> 'const char [19]' lvalue
                (StringLiteral 0xa97de4c <line:1177:31> 'const char [19]' lvalue "%s: Out of memory\n")))
            (ImplicitCastExpr 0xa97df28 <line:95:16> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa97de94 <col:16> 'const char [7]' lvalue "mimedb")))
          (ReturnStmt 0xa97df38 <line:1178:13>)))
      (CaseStmt 0xa97df80 <line:1180:9, line:1183:9>
        (IntegerLiteral 0xa97df68 <line:1180:14> 'int' 0)
        <<<NULL>>>
        (CompoundStmt 0xa97dfb0 <line:1181:9, line:1183:9>
          (ReturnStmt 0xa97dfa0 <line:1182:13>)))
      (DefaultStmt 0xa97e580 <line:1184:9, line:1198:9>
        (CompoundStmt 0xa97e558 <line:1185:9, line:1198:9>
          (CallExpr 0xa97e040 <line:1187:13, col:23> 'void'
            (ImplicitCastExpr 0xa97e030 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97e014 <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97e000 <col:20> 'char'32))
          (CallExpr 0xa97e0d8 <line:1188:13, col:23> 'void'
            (ImplicitCastExpr 0xa97e0c8 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97e0ac <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97e098 <col:20> 'char'38))
          (CallExpr 0xa97e170 <line:1189:13, col:24> 'void'
            (ImplicitCastExpr 0xa97e160 <col:13> 'void (*)(char)' <FunctionToPointerDecay>
              (DeclRefExpr 0xa97e144 <col:13> 'void (char)' lvalue Function 0xa974ea0 'writer' 'void (char)'))
            (CharacterLiteral 0xa97e130 <col:20> 'char'0))
          (IfStmt 0xa97e530 <line:1191:13, line:1195:13>
            <<<NULL>>>
            (BinaryOperator 0xa97e298 <line:1191:17, col:41> '_Bool' '=='
              (CallExpr 0xa97e228 <col:17, col:35> 'int'
                (ImplicitCastExpr 0xa97e218 <col:17> 'int (*)(const char *)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa97e1dc <col:17> 'int (const char *)' lvalue Function 0xa54d800 'system' 'int (const char *)'))
                (ImplicitCastExpr 0xa97e258 <col:24> 'const char *' <NoOp>
                  (ImplicitCastExpr 0xa97e248 <col:24> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xa97e1c4 <col:24> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *'))))
              (UnaryOperator 0xa97e280 <col:40, col:41> 'int' prefix '-'
                (IntegerLiteral 0xa97e268 <col:41> 'int' 1)))
            (CompoundStmt 0xa97e518 <line:1192:13, line:1195:13>
              (CallExpr 0xa97e3d8 <line:1193:17, col:69> 'int'
                (ImplicitCastExpr 0xa97e3c8 <col:17> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa97e3b0 <col:17> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
                (ImplicitCastExpr 0xa97e408 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
                  (DeclRefExpr 0xa97e2e4 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
                (ImplicitCastExpr 0xa97e418 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
                  (ParenExpr 0xa97e360 <col:19, col:26> 'const char [36]' lvalue
                    (StringLiteral 0xa97e320 <line:105:22> 'const char [36]' lvalue "%s: Could not execute command \"%s\"\n")))
                (ImplicitCastExpr 0xa97e428 <line:95:16> 'const char *' <ArrayToPointerDecay>
                  (StringLiteral 0xa97e374 <col:16> 'const char [7]' lvalue "mimedb"))
                (ImplicitCastExpr 0xa97e438 <line:1193:58> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xa97e398 <col:58> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *')))
              (CallExpr 0xa97e4f8 <line:1194:17, col:41> 'void'
                (ImplicitCastExpr 0xa97e4e8 <col:17> 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xa97e498 <col:17> 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0xa54ad50 'exit' 'void (int) __attribute__((noreturn)) throw()'))
                (IntegerLiteral 0xa97e480 <line:110:29> 'int' 1)))
            <<<NULL>>>)
          (BreakStmt 0xa97e550 <line:1197:13>)))))
  (IfStmt 0xa97e778 <line:1200:5, line:1203:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa97e5e0 <line:1200:9> '_Bool' <IntegralToBoolean>
      (ImplicitCastExpr 0xa97e5d0 <col:9> 'int' <LValueToRValue>
        (DeclRefExpr 0xa97e5b4 <col:9> 'int' lvalue Var 0xa97b070 'launch_again' 'int')))
    (CompoundStmt 0xa97e760 <line:1201:5, line:1203:5>
      (CallExpr 0xa97e728 <line:1202:9, col:43> 'void'
        (ImplicitCastExpr 0xa97e718 <col:9> 'void (*)(char *, const string_list_t &, size_t)' <FunctionToPointerDecay>
          (DeclRefExpr 0xa97e6c0 <col:9> 'void (char *, const string_list_t &, size_t)' lvalue Function 0xa97af00 'launch' 'void (char *, const string_list_t &, size_t)'))
        (ImplicitCastExpr 0xa97e750 <col:16> 'char *' <LValueToRValue>
          (DeclRefExpr 0xa97e624 <col:16> 'char *' lvalue Var 0xa97af80 'filter_org' 'char *'))
        (DeclRefExpr 0xa97e63c <col:28> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ParmVar 0xa97ae00 'files' 'const string_list_t &')
        (BinaryOperator 0xa97e6a8 <col:35, col:42> 'unsigned int' '+'
          (ImplicitCastExpr 0xa97e688 <col:35> 'size_t':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0xa97e654 <col:35> 'size_t':'unsigned int' lvalue ParmVar 0xa97ae40 'fileno' 'size_t':'unsigned int'))
          (ImplicitCastExpr 0xa97e698 <col:42> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0xa97e670 <col:42> 'int' 1)))))
    <<<NULL>>>))


static void locale_init() (CompoundStmt 0xa9bef10 <../codeBase/fish-shell-master/mimedb.cpp:1211:1, line:1215:1>
  (CallExpr 0xa97e8e0 <line:1212:5, col:25> 'char *'
    (ImplicitCastExpr 0xa97e8d0 <col:5> 'char *(*)(int, const char *) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0xa97e8b8 <col:5> 'char *(int, const char *) throw()' lvalue Function 0xa5c34a0 'setlocale' 'char *(int, const char *) throw()'))
    (ImplicitCastExpr 0xa97e908 </usr/include/locale.h:42:19> 'int' <IntegralCast>
      (DeclRefExpr 0xa97e884 <col:19> 'enum <anonymous at /usr/include/i386-linux-gnu/bits/locale.h:27:1>' EnumConstant 0xa5c2940 '__LC_ALL' 'enum <anonymous at /usr/include/i386-linux-gnu/bits/locale.h:27:1>'))
    (ImplicitCastExpr 0xa97e918 <../codeBase/fish-shell-master/mimedb.cpp:1212:23> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa97e89c <col:23> 'const char [1]' lvalue "")))
  (CallExpr 0xa9beee0 <line:1214:5, col:33> 'char *'
    (ImplicitCastExpr 0xa9beed0 <col:5> 'char *(*)(const char *)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9beeb4 <col:5> 'char *(const char *)' lvalue Function 0xa946150 'fish_textdomain' 'char *(const char *)'))
    (ImplicitCastExpr 0xa9bef00 <../codeBase/fish-shell-master/config.h:183:22> 'const char *' <ArrayToPointerDecay>
      (StringLiteral 0xa9bee94 <col:22> 'const char [5]' lvalue "fish"))))


extern void __assume(bool);
extern void __noop();
extern void __debugbreak();
extern void __sync_swap();
int main(int argc, char *argv[]) (CompoundStmt 0xaa2b0d8 <../codeBase/fish-shell-master/mimedb.cpp:1222:1, line:1463:1>
  (DeclStmt 0xa9bf0f0 <line:1223:5, col:28>
    0xa9bf090 "int input_type =
      (ImplicitCastExpr 0xa9bf0e0 <col:20> 'int' <IntegralCast>
        (DeclRefExpr 0xa9bf0c4 <col:20> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951e90 'FILEDATA' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))")
  (DeclStmt 0xa9bf170 <line:1224:5, col:29>
    0xa9bf110 "int output_type =
      (ImplicitCastExpr 0xa9bf160 <col:21> 'int' <IntegralCast>
        (DeclRefExpr 0xa9bf144 <col:21> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f10 'MIMETYPE' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))")
  (DeclStmt 0xa9bf1c8 <line:1226:5, col:25>
    0xa9bf190 "const char *mimetype")
  (DeclStmt 0xa9bf250 <line:1227:5, col:19>
    0xa9bf1f0 "char *output =
      (ImplicitCastExpr 0xa9bf240 <col:18> 'char *' <NullToPointer>
        (IntegerLiteral 0xa9bf228 <col:18> 'int' 0))")
  (DeclStmt 0xa9bf2a8 <line:1229:5, col:10>
    0xa9bf270 "int i")
  (DeclStmt 0xa9bf900 <line:1231:5, col:63>
    0xa9bf8d0 "typedef std::map<std::string, string_list_t> launch_hash_t")
  (DeclStmt 0xa9963a0 <line:1232:5, col:30>
    0xa9bf930 "launch_hash_t launch_hash =
      (CXXConstructExpr 0xa9962e0 <col:19> 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >''void (void)')")
  (CallExpr 0xa996410 <line:1234:5, col:17> 'void'
    (ImplicitCastExpr 0xa996400 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
      (DeclRefExpr 0xa9963e4 <col:5> 'void (void)' lvalue Function 0xa97e7f0 'locale_init' 'void (void)')))
  (WhileStmt 0xaa264f0 <line:1239:5, line:1342:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xa996448 <line:1239:12> '_Bool' <IntegralToBoolean>
      (IntegerLiteral 0xa996430 <col:12> 'int' 1))
    (CompoundStmt 0xaa264c8 <line:1240:5, line:1342:5>
      (DeclStmt 0xa9970c0 <line:1241:9, line:1284:9>
        0xa9964c0 "static struct option long_options[10] =
          (InitListExpr 0xa996bd8 <line:1243:9, line:1283:9> 'struct option [10]'
            (InitListExpr 0xa996c00 <line:1244:13, line:1246:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996c40 <line:1245:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa9964f4 <col:17> 'const char [16]' lvalue "input-file-data"))
              (IntegerLiteral 0xa996520 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996c50 <../codeBase/fish-shell-master/mimedb.cpp:1245:49> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996538 <col:49> 'int' 0))
              (ImplicitCastExpr 0xa996c60 <col:52> 'int' <IntegralCast>
                (CharacterLiteral 0xa996550 <col:52> 'char'116)))
            (InitListExpr 0xa996c70 <line:1248:13, line:1250:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996cb0 <line:1249:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa9965a0 <col:17> 'const char [15]' lvalue "input-filename"))
              (IntegerLiteral 0xa9965d0 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996cc0 <../codeBase/fish-shell-master/mimedb.cpp:1249:48> 'int *' <NullToPointer>
                (IntegerLiteral 0xa9965e8 <col:48> 'int' 0))
              (ImplicitCastExpr 0xa996cd0 <col:51> 'int' <IntegralCast>
                (CharacterLiteral 0xa996600 <col:51> 'char'102)))
            (InitListExpr 0xa996ce0 <line:1252:13, line:1254:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996d28 <line:1253:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa996650 <col:17> 'const char [11]' lvalue "input-mime"))
              (IntegerLiteral 0xa996678 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996d38 <../codeBase/fish-shell-master/mimedb.cpp:1253:44> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996690 <col:44> 'int' 0))
              (ImplicitCastExpr 0xa996d48 <col:47> 'int' <IntegralCast>
                (CharacterLiteral 0xa9966a8 <col:47> 'char'105)))
            (InitListExpr 0xa996d58 <line:1256:13, line:1258:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996d90 <line:1257:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa9966f8 <col:17> 'const char [12]' lvalue "output-mime"))
              (IntegerLiteral 0xa996720 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996da0 <../codeBase/fish-shell-master/mimedb.cpp:1257:45> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996738 <col:45> 'int' 0))
              (ImplicitCastExpr 0xa996db0 <col:48> 'int' <IntegralCast>
                (CharacterLiteral 0xa996750 <col:48> 'char'109)))
            (InitListExpr 0xa996dc0 <line:1260:13, line:1262:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996e18 <line:1261:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa9967a0 <col:17> 'const char [19]' lvalue "output-description"))
              (IntegerLiteral 0xa9967d0 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996e28 <../codeBase/fish-shell-master/mimedb.cpp:1261:52> 'int *' <NullToPointer>
                (IntegerLiteral 0xa9967e8 <col:52> 'int' 0))
              (ImplicitCastExpr 0xa996e38 <col:55> 'int' <IntegralCast>
                (CharacterLiteral 0xa996800 <col:55> 'char'100)))
            (InitListExpr 0xa996e48 <line:1264:13, line:1266:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996e80 <line:1265:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa996850 <col:17> 'const char [14]' lvalue "output-action"))
              (IntegerLiteral 0xa996880 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996e90 <../codeBase/fish-shell-master/mimedb.cpp:1265:47> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996898 <col:47> 'int' 0))
              (ImplicitCastExpr 0xa996ea0 <col:50> 'int' <IntegralCast>
                (CharacterLiteral 0xa9968b0 <col:50> 'char'97)))
            (InitListExpr 0xa996eb0 <line:1268:13, line:1270:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996ee8 <line:1269:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa996900 <col:17> 'const char [5]' lvalue "help"))
              (IntegerLiteral 0xa996920 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996ef8 <../codeBase/fish-shell-master/mimedb.cpp:1269:38> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996938 <col:38> 'int' 0))
              (ImplicitCastExpr 0xa996f08 <col:41> 'int' <IntegralCast>
                (CharacterLiteral 0xa996950 <col:41> 'char'104)))
            (InitListExpr 0xa996f18 <line:1272:13, line:1274:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996f50 <line:1273:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa9969a0 <col:17> 'const char [8]' lvalue "version"))
              (IntegerLiteral 0xa9969c8 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa996f60 <../codeBase/fish-shell-master/mimedb.cpp:1273:41> 'int *' <NullToPointer>
                (IntegerLiteral 0xa9969e0 <col:41> 'int' 0))
              (ImplicitCastExpr 0xa996f70 <col:44> 'int' <IntegralCast>
                (CharacterLiteral 0xa9969f8 <col:44> 'char'118)))
            (InitListExpr 0xa996f80 <line:1276:13, line:1278:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa996ff8 <line:1277:17> 'const char *' <ArrayToPointerDecay>
                (StringLiteral 0xa996a48 <col:17> 'const char [7]' lvalue "launch"))
              (IntegerLiteral 0xa996a70 </usr/include/getopt.h:118:23> 'int' 0)
              (ImplicitCastExpr 0xa997008 <../codeBase/fish-shell-master/mimedb.cpp:1277:40> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996a88 <col:40> 'int' 0))
              (ImplicitCastExpr 0xa997018 <col:43> 'int' <IntegralCast>
                (CharacterLiteral 0xa996aa0 <col:43> 'char'108)))
            (InitListExpr 0xa997028 <line:1280:13, line:1282:13> 'struct option':'struct option'
              (ImplicitCastExpr 0xa997060 <line:1281:17> 'const char *' <NullToPointer>
                (IntegerLiteral 0xa996af0 <col:17> 'int' 0))
              (IntegerLiteral 0xa996b08 <col:20> 'int' 0)
              (ImplicitCastExpr 0xa997070 <col:23> 'int *' <NullToPointer>
                (IntegerLiteral 0xa996b20 <col:23> 'int' 0))
              (IntegerLiteral 0xa996b38 <col:26> 'int' 0)))")
      (DeclStmt 0xa997130 <line:1286:9, col:26>
        0xa9970e0 "int opt_index =
          (IntegerLiteral 0xa997118 <col:25> 'int' 0)")
      (DeclStmt 0xa9973c8 <line:1288:9, line:1292:42>
        0xa997150 "int opt =
          (CallExpr 0xa997338 <line:1288:19, line:1292:41> 'int'
            (ImplicitCastExpr 0xa997328 <line:1288:19> 'int (*)(int, char *const *, const char *, const struct option *, int *) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa9972d4 <col:19> 'int (int, char *const *, const char *, const struct option *, int *) throw()' lvalue Function 0xa8ee2e0 'getopt_long' 'int (int, char *const *, const char *, const struct option *, int *) throw()'))
            (ImplicitCastExpr 0xa997368 <col:31> 'int' <LValueToRValue>
              (DeclRefExpr 0xa9971bc <col:31> 'int' lvalue ParmVar 0xa9bef40 'argc' 'int'))
            (ImplicitCastExpr 0xa997388 <line:1289:31> 'char *const *' <NoOp>
              (ImplicitCastExpr 0xa997378 <col:31> 'char **' <LValueToRValue>
                (DeclRefExpr 0xa9971d4 <col:31> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **')))
            (ImplicitCastExpr 0xa997398 <line:100:23> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xa997230 <col:23> 'const char [10]' lvalue "tfimdalhv"))
            (ImplicitCastExpr 0xa9973b8 <line:1291:31> 'const struct option *' <NoOp>
              (ImplicitCastExpr 0xa9973a8 <col:31> 'struct option *' <ArrayToPointerDecay>
                (DeclRefExpr 0xa997258 <col:31> 'struct option [10]' lvalue Var 0xa9964c0 'long_options' 'struct option [10]')))
            (UnaryOperator 0xa997288 <line:1292:31, col:32> 'int *' prefix '&'
              (DeclRefExpr 0xa997270 <col:32> 'int' lvalue Var 0xa9970e0 'opt_index' 'int')))")
      (IfStmt 0xa997450 <line:1294:9, line:1295:13>
        <<<NULL>>>
        (BinaryOperator 0xa997430 <line:1294:13, col:21> '_Bool' '=='
          (ImplicitCastExpr 0xa997420 <col:13> 'int' <LValueToRValue>
            (DeclRefExpr 0xa9973d8 <col:13> 'int' lvalue Var 0xa997150 'opt' 'int'))
          (UnaryOperator 0xa997408 <col:20, col:21> 'int' prefix '-'
            (IntegerLiteral 0xa9973f0 <col:21> 'int' 1)))
        (BreakStmt 0xa997448 <line:1295:13>)
        <<<NULL>>>)
      (SwitchStmt 0xa997498 <line:1297:9, line:1341:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xa997488 <line:1297:17> 'int' <LValueToRValue>
          (DeclRefExpr 0xa99746c <col:17> 'int' lvalue Var 0xa997150 'opt' 'int'))
        (CompoundStmt 0xaa263c8 <line:1298:9, line:1341:9>
          (CaseStmt 0xa9974d0 <line:1299:13, line:1300:17>
            (IntegerLiteral 0xa9974b8 <line:1299:18> 'int' 0)
            <<<NULL>>>
            (BreakStmt 0xa9974f0 <line:1300:17>))
          (CaseStmt 0xa997510 <line:1302:13, line:1303:28>
            (ImplicitCastExpr 0xaa264b8 <line:1302:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa9974f8 <col:18> 'char'116))
            <<<NULL>>>
            (BinaryOperator 0xa997570 <line:1303:17, col:28> 'int' lvalue '='
              (DeclRefExpr 0xa997530 <col:17> 'int' lvalue Var 0xa9bf090 'input_type' 'int')
              (ImplicitCastExpr 0xa997560 <col:28> 'int' <IntegralCast>
                (DeclRefExpr 0xa997548 <col:28> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951e90 'FILEDATA' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa997588 <line:1304:17>)
          (CaseStmt 0xa9975a8 <line:1306:13, line:1307:28>
            (ImplicitCastExpr 0xaa264a8 <line:1306:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa997590 <col:18> 'char'102))
            <<<NULL>>>
            (BinaryOperator 0xa997608 <line:1307:17, col:28> 'int' lvalue '='
              (DeclRefExpr 0xa9975c8 <col:17> 'int' lvalue Var 0xa9bf090 'input_type' 'int')
              (ImplicitCastExpr 0xa9975f8 <col:28> 'int' <IntegralCast>
                (DeclRefExpr 0xa9975e0 <col:28> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951ed0 'FILENAME' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa997620 <line:1308:17>)
          (CaseStmt 0xa997640 <line:1310:13, line:1311:28>
            (ImplicitCastExpr 0xaa26498 <line:1310:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa997628 <col:18> 'char'105))
            <<<NULL>>>
            (BinaryOperator 0xa9976a0 <line:1311:17, col:28> 'int' lvalue '='
              (DeclRefExpr 0xa997660 <col:17> 'int' lvalue Var 0xa9bf090 'input_type' 'int')
              (ImplicitCastExpr 0xa997690 <col:28> 'int' <IntegralCast>
                (DeclRefExpr 0xa997678 <col:28> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f10 'MIMETYPE' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa9976b8 <line:1312:17>)
          (CaseStmt 0xa9976d8 <line:1314:13, line:1315:29>
            (ImplicitCastExpr 0xaa26488 <line:1314:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa9976c0 <col:18> 'char'109))
            <<<NULL>>>
            (BinaryOperator 0xa997738 <line:1315:17, col:29> 'int' lvalue '='
              (DeclRefExpr 0xa9976f8 <col:17> 'int' lvalue Var 0xa9bf110 'output_type' 'int')
              (ImplicitCastExpr 0xa997728 <col:29> 'int' <IntegralCast>
                (DeclRefExpr 0xa997710 <col:29> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f10 'MIMETYPE' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa997750 <line:1316:17>)
          (CaseStmt 0xa997770 <line:1318:13, line:1319:29>
            (ImplicitCastExpr 0xaa26478 <line:1318:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa997758 <col:18> 'char'100))
            <<<NULL>>>
            (BinaryOperator 0xa9977d0 <line:1319:17, col:29> 'int' lvalue '='
              (DeclRefExpr 0xa997790 <col:17> 'int' lvalue Var 0xa9bf110 'output_type' 'int')
              (ImplicitCastExpr 0xa9977c0 <col:29> 'int' <IntegralCast>
                (DeclRefExpr 0xa9977a8 <col:29> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f50 'DESCRIPTION' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa9977e8 <line:1320:17>)
          (CaseStmt 0xa997808 <line:1322:13, line:1323:29>
            (ImplicitCastExpr 0xaa26468 <line:1322:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa9977f0 <col:18> 'char'97))
            <<<NULL>>>
            (BinaryOperator 0xa997868 <line:1323:17, col:29> 'int' lvalue '='
              (DeclRefExpr 0xa997828 <col:17> 'int' lvalue Var 0xa9bf110 'output_type' 'int')
              (ImplicitCastExpr 0xa997858 <col:29> 'int' <IntegralCast>
                (DeclRefExpr 0xa997840 <col:29> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f90 'ACTION' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa997880 <line:1324:17>)
          (CaseStmt 0xa9978a0 <line:1326:13, line:1327:29>
            (ImplicitCastExpr 0xaa26458 <line:1326:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa997888 <col:18> 'char'108))
            <<<NULL>>>
            (BinaryOperator 0xa997900 <line:1327:17, col:29> 'int' lvalue '='
              (DeclRefExpr 0xa9978c0 <col:17> 'int' lvalue Var 0xa9bf110 'output_type' 'int')
              (ImplicitCastExpr 0xa9978f0 <col:29> 'int' <IntegralCast>
                (DeclRefExpr 0xa9978d8 <col:29> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951fd0 'LAUNCH' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
          (BreakStmt 0xa997918 <line:1328:17>)
          (CaseStmt 0xa997938 <line:1330:13, line:1331:38>
            (ImplicitCastExpr 0xaa26448 <line:1330:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa997920 <col:18> 'char'104))
            <<<NULL>>>
            (CallExpr 0xa997a28 <line:1331:17, col:38> 'void'
              (ImplicitCastExpr 0xa997a18 <col:17> 'void (*)(const char *, int)' <FunctionToPointerDecay>
                (DeclRefExpr 0xa997a00 <col:17> 'void (const char *, int)' lvalue Function 0xa951a90 'print_help' 'void (const char *, int)'))
              (ImplicitCastExpr 0xa997a60 <col:28, col:34> 'const char *' <NoOp>
                (ImplicitCastExpr 0xa997a50 <col:28, col:34> 'char *' <LValueToRValue>
                  (ArraySubscriptExpr 0xa9979d0 <col:28, col:34> 'char *' lvalue
                    (ImplicitCastExpr 0xa9979c0 <col:28> 'char **' <LValueToRValue>
                      (DeclRefExpr 0xa99798c <col:28> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                    (IntegerLiteral 0xa9979a8 <col:33> 'int' 0))))
              (IntegerLiteral 0xa9979e8 <col:37> 'int' 1)))
          (CallExpr 0xa997ae8 <line:1332:17, col:23> 'void'
            (ImplicitCastExpr 0xa997ad8 <col:17> 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xa997ac0 <col:17> 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0xa54ad50 'exit' 'void (int) __attribute__((noreturn)) throw()'))
            (IntegerLiteral 0xa997aa8 <col:22> 'int' 0))
          (CaseStmt 0xa997b20 <line:1334:13, <invalid sloc>>
            (ImplicitCastExpr 0xaa26438 <col:18> 'int' <IntegralCast>
              (CharacterLiteral 0xa997b08 <col:18> 'char'118))
            <<<NULL>>>
            (NullStmt 0xaa262c0 <<invalid sloc>>))
          (CallExpr 0xaa26348 <line:1336:17, col:23> 'void'
            (ImplicitCastExpr 0xaa26338 <col:17> 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa26320 <col:17> 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0xa54ad50 'exit' 'void (int) __attribute__((noreturn)) throw()'))
            (IntegerLiteral 0xaa26308 <col:22> 'int' 0))
          (CaseStmt 0xaa26380 <line:1338:13, line:1339:24>
            (ImplicitCastExpr 0xaa26428 <line:1338:18> 'int' <IntegralCast>
              (CharacterLiteral 0xaa26368 <col:18> 'char'63))
            <<<NULL>>>
            (ReturnStmt 0xaa263b8 <line:1339:17, col:24>
              (IntegerLiteral 0xaa263a0 <col:24> 'int' 1)))))))
  (IfStmt 0xaa26978 <line:1344:5, line:1349:5>
    <<<NULL>>>
    (BinaryOperator 0xaa26608 <line:1344:9, col:55> '_Bool' '&&'
      (ParenExpr 0xaa26570 <col:9, col:31> '_Bool'
        (BinaryOperator 0xaa26558 <col:10, col:25> '_Bool' '=='
          (ImplicitCastExpr 0xaa26538 <col:10> 'int' <LValueToRValue>
            (DeclRefExpr 0xaa26504 <col:10> 'int' lvalue Var 0xa9bf110 'output_type' 'int'))
          (ImplicitCastExpr 0xaa26548 <col:25> 'int' <IntegralCast>
            (DeclRefExpr 0xaa2651c <col:25> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951fd0 'LAUNCH' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))))
      (ParenExpr 0xaa265f0 <col:34, col:55> '_Bool'
        (BinaryOperator 0xaa265d8 <col:35, col:47> '_Bool' '=='
          (ImplicitCastExpr 0xaa265b8 <col:35> 'int' <LValueToRValue>
            (DeclRefExpr 0xaa26584 <col:35> 'int' lvalue Var 0xa9bf090 'input_type' 'int'))
          (ImplicitCastExpr 0xaa265c8 <col:47> 'int' <IntegralCast>
            (DeclRefExpr 0xaa2659c <col:47> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f10 'MIMETYPE' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>')))))
    (CompoundStmt 0xaa26958 <line:1345:5, line:1349:5>
      (CallExpr 0xaa26750 <line:1346:9, col:69> 'int'
        (ImplicitCastExpr 0xaa26740 <col:9> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa26728 <col:9> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
        (ImplicitCastExpr 0xaa26778 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
          (DeclRefExpr 0xaa26654 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
        (ImplicitCastExpr 0xaa26788 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
          (ParenExpr 0xaa266f0 <col:19, col:26> 'const char [31]' lvalue
            (StringLiteral 0xaa266b0 <line:1346:27> 'const char [31]' lvalue "%s: Can not launch a mimetype\n")))
        (ImplicitCastExpr 0xaa26798 <line:95:16> 'const char *' <ArrayToPointerDecay>
          (StringLiteral 0xaa26704 <col:16> 'const char [7]' lvalue "mimedb")))
      (CallExpr 0xaa26878 <line:1347:9, col:30> 'void'
        (ImplicitCastExpr 0xaa26868 <col:9> 'void (*)(const char *, int)' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa26850 <col:9> 'void (const char *, int)' lvalue Function 0xa951a90 'print_help' 'void (const char *, int)'))
        (ImplicitCastExpr 0xaa268b0 <col:20, col:26> 'const char *' <NoOp>
          (ImplicitCastExpr 0xaa268a0 <col:20, col:26> 'char *' <LValueToRValue>
            (ArraySubscriptExpr 0xaa26820 <col:20, col:26> 'char *' lvalue
              (ImplicitCastExpr 0xaa26810 <col:20> 'char **' <LValueToRValue>
                (DeclRefExpr 0xaa267dc <col:20> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
              (IntegerLiteral 0xaa267f8 <col:25> 'int' 0))))
        (IntegerLiteral 0xaa26838 <col:29> 'int' 2))
      (CallExpr 0xaa26938 <line:1348:9, col:15> 'void'
        (ImplicitCastExpr 0xaa26928 <col:9> 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa26910 <col:9> 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0xa54ad50 'exit' 'void (int) __attribute__((noreturn)) throw()'))
        (IntegerLiteral 0xaa268f8 <col:14> 'int' 1)))
    <<<NULL>>>)
  (ForStmt 0xaa28338 <line:1357:5, line:1427:5>
    (BinaryOperator 0xaa269d8 <line:1357:10, col:14> 'int' lvalue '='
      (DeclRefExpr 0xaa26994 <col:10> 'int' lvalue Var 0xa9bf270 'i' 'int')
      (ImplicitCastExpr 0xaa269c8 <col:14> 'int' <LValueToRValue>
        (DeclRefExpr 0xaa269ac <col:14> 'int' lvalue Var 0xa8ed3c0 'optind' 'int')))
    <<<NULL>>>
    (BinaryOperator 0xaa26ad8 <col:22, col:41> '_Bool' '&&'
      (ParenExpr 0xaa26a58 <col:22, col:31> '_Bool'
        (BinaryOperator 0xaa26a40 <col:23, col:27> '_Bool' '<'
          (ImplicitCastExpr 0xaa26a20 <col:23> 'int' <LValueToRValue>
            (DeclRefExpr 0xaa269f0 <col:23> 'int' lvalue Var 0xa9bf270 'i' 'int'))
          (ImplicitCastExpr 0xaa26a30 <col:27> 'int' <LValueToRValue>
            (DeclRefExpr 0xaa26a08 <col:27> 'int' lvalue ParmVar 0xa9bef40 'argc' 'int'))))
      (ParenExpr 0xaa26ac0 <col:34, col:41> '_Bool'
        (UnaryOperator 0xaa26aa8 <col:35, col:36> '_Bool' prefix '!'
          (ImplicitCastExpr 0xaa26a98 <col:36> '_Bool' <IntegralToBoolean>
            (ImplicitCastExpr 0xaa26a88 <col:36> 'int' <LValueToRValue>
              (DeclRefExpr 0xaa26a6c <col:36> 'int' lvalue Var 0xa952100 'error' 'int'))))))
    (UnaryOperator 0xaa26b08 <col:44, col:45> 'int' postfix '++'
      (DeclRefExpr 0xaa26af0 <col:44> 'int' lvalue Var 0xa9bf270 'i' 'int'))
    (CompoundStmt 0xaa28310 <line:1358:5, line:1427:5>
      (IfStmt 0xaa270c8 <line:1360:9, line:1369:69>
        <<<NULL>>>
        (BinaryOperator 0xaa26b70 <line:1360:13, col:27> '_Bool' '=='
          (ImplicitCastExpr 0xaa26b50 <col:13> 'int' <LValueToRValue>
            (DeclRefExpr 0xaa26b1c <col:13> 'int' lvalue Var 0xa9bf090 'input_type' 'int'))
          (ImplicitCastExpr 0xaa26b60 <col:27> 'int' <IntegralCast>
            (DeclRefExpr 0xaa26b34 <col:27> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951ed0 'FILENAME' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>')))
        (CompoundStmt 0xaa26cc0 <line:1361:9, line:1363:9>
          (BinaryOperator 0xaa26ca8 <line:1362:13, col:69> 'const char *' lvalue '='
            (DeclRefExpr 0xaa26b88 <col:13> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *')
            (CallExpr 0xaa26c68 <col:24, col:69> 'const char *'
              (ImplicitCastExpr 0xaa26c58 <col:24> 'const char *(*)(const char *)' <FunctionToPointerDecay>
                (DeclRefExpr 0xaa26c3c <col:24> 'const char *(const char *)' lvalue Function 0xa8eea40 'xdg_mime_get_mime_type_from_file_name' 'const char *(const char *)'))
              (ImplicitCastExpr 0xaa26c98 <col:62, col:68> 'const char *' <NoOp>
                (ImplicitCastExpr 0xaa26c88 <col:62, col:68> 'char *' <LValueToRValue>
                  (ArraySubscriptExpr 0xaa26c28 <col:62, col:68> 'char *' lvalue
                    (ImplicitCastExpr 0xaa26c08 <col:62> 'char **' <LValueToRValue>
                      (DeclRefExpr 0xaa26bd4 <col:62> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                    (ImplicitCastExpr 0xaa26c18 <col:67> 'int' <LValueToRValue>
                      (DeclRefExpr 0xaa26bec <col:67> 'int' lvalue Var 0xa9bf270 'i' 'int'))))))))
        (IfStmt 0xaa270a8 <line:1364:14, line:1369:69>
          <<<NULL>>>
          (BinaryOperator 0xaa26d28 <line:1364:18, col:32> '_Bool' '=='
            (ImplicitCastExpr 0xaa26d08 <col:18> 'int' <LValueToRValue>
              (DeclRefExpr 0xaa26cd4 <col:18> 'int' lvalue Var 0xa9bf090 'input_type' 'int'))
            (ImplicitCastExpr 0xaa26d18 <col:32> 'int' <IntegralCast>
              (DeclRefExpr 0xaa26cec <col:32> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951e90 'FILEDATA' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>')))
          (CompoundStmt 0xaa26e78 <line:1365:9, line:1367:9>
            (BinaryOperator 0xaa26e60 <line:1366:13, col:63> 'const char *' lvalue '='
              (DeclRefExpr 0xaa26d40 <col:13> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *')
              (CallExpr 0xaa26e20 <col:24, col:63> 'const char *'
                (ImplicitCastExpr 0xaa26e10 <col:24> 'const char *(*)(const char *)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa26df4 <col:24> 'const char *(const char *)' lvalue Function 0xa8ee960 'xdg_mime_get_mime_type_for_file' 'const char *(const char *)'))
                (ImplicitCastExpr 0xaa26e50 <col:56, col:62> 'const char *' <NoOp>
                  (ImplicitCastExpr 0xaa26e40 <col:56, col:62> 'char *' <LValueToRValue>
                    (ArraySubscriptExpr 0xaa26de0 <col:56, col:62> 'char *' lvalue
                      (ImplicitCastExpr 0xaa26dc0 <col:56> 'char **' <LValueToRValue>
                        (DeclRefExpr 0xaa26d8c <col:56> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                      (ImplicitCastExpr 0xaa26dd0 <col:61> 'int' <LValueToRValue>
                        (DeclRefExpr 0xaa26da4 <col:61> 'int' lvalue Var 0xa9bf270 'i' 'int'))))))))
          (BinaryOperator 0xaa27090 <line:1369:13, col:69> 'const char *' lvalue '='
            (DeclRefExpr 0xaa26e8c <col:13> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *')
            (ImplicitCastExpr 0xaa27080 <col:24, col:69> 'const char *' <NoOp>
              (ConditionalOperator 0xaa27060 <col:24, col:69> 'char *'
                (ImplicitCastExpr 0xaa27030 <col:24, col:59> '_Bool' <IntegralToBoolean>
                  (CallExpr 0xaa26f70 <col:24, col:59> 'int'
                    (ImplicitCastExpr 0xaa26f60 <col:24> 'int (*)(const char *)' <FunctionToPointerDecay>
                      (DeclRefExpr 0xaa26f44 <col:24> 'int (const char *)' lvalue Function 0xa8eeb20 'xdg_mime_is_valid_mime_type' 'int (const char *)'))
                    (ImplicitCastExpr 0xaa26fa0 <col:52, col:58> 'const char *' <NoOp>
                      (ImplicitCastExpr 0xaa26f90 <col:52, col:58> 'char *' <LValueToRValue>
                        (ArraySubscriptExpr 0xaa26f30 <col:52, col:58> 'char *' lvalue
                          (ImplicitCastExpr 0xaa26f10 <col:52> 'char **' <LValueToRValue>
                            (DeclRefExpr 0xaa26edc <col:52> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                          (ImplicitCastExpr 0xaa26f20 <col:57> 'int' <LValueToRValue>
                            (DeclRefExpr 0xaa26ef4 <col:57> 'int' lvalue Var 0xa9bf270 'i' 'int')))))))
                (ImplicitCastExpr 0xaa27040 <col:61, col:67> 'char *' <LValueToRValue>
                  (ArraySubscriptExpr 0xaa27000 <col:61, col:67> 'char *' lvalue
                    (ImplicitCastExpr 0xaa26fe0 <col:61> 'char **' <LValueToRValue>
                      (DeclRefExpr 0xaa26fac <col:61> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                    (ImplicitCastExpr 0xaa26ff0 <col:66> 'int' <LValueToRValue>
                      (DeclRefExpr 0xaa26fc4 <col:66> 'int' lvalue Var 0xa9bf270 'i' 'int'))))
                (ImplicitCastExpr 0xaa27050 <col:69> 'char *' <NullToPointer>
                  (IntegerLiteral 0xaa27018 <col:69> 'int' 0)))))))
      (BinaryOperator 0xaa271a8 <line:1371:9, col:55> 'const char *' lvalue '='
        (DeclRefExpr 0xaa270e4 <col:9> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *')
        (CallExpr 0xaa27178 <col:20, col:55> 'const char *'
          (ImplicitCastExpr 0xaa27168 <col:20> 'const char *(*)(const char *)' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa2714c <col:20> 'const char *(const char *)' lvalue Function 0xa8ef090 'xdg_mime_unalias_mime_type' 'const char *(const char *)'))
          (ImplicitCastExpr 0xaa27198 <col:47> 'const char *' <LValueToRValue>
            (DeclRefExpr 0xaa27134 <col:47> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *'))))
      (IfStmt 0xaa274b8 <line:1372:9, line:1377:9>
        <<<NULL>>>
        (UnaryOperator 0xaa271f8 <line:1372:13, col:14> '_Bool' prefix '!'
          (ImplicitCastExpr 0xaa271e8 <col:14> '_Bool' <PointerToBoolean>
            (ImplicitCastExpr 0xaa271d8 <col:14> 'const char *' <LValueToRValue>
              (DeclRefExpr 0xaa271c0 <col:14> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *'))))
        (CompoundStmt 0xaa27498 <line:1373:9, line:1377:9>
          (CallExpr 0xaa273b8 <line:1374:13, col:100> 'int'
            (ImplicitCastExpr 0xaa273a8 <col:13> 'int (*)(FILE *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa2738c <col:13> 'int (FILE *restrict, const char *restrict, ...)' lvalue Function 0xa4ea0a0 'fprintf' 'int (FILE *restrict, const char *restrict, ...)'))
            (ImplicitCastExpr 0xaa273e8 </usr/include/stdio.h:175:16> 'struct _IO_FILE *' <LValueToRValue>
              (DeclRefExpr 0xaa27244 <col:16> 'struct _IO_FILE *' lvalue Var 0xa508820 'stderr' 'struct _IO_FILE *'))
            (ImplicitCastExpr 0xaa273f8 <../codeBase/fish-shell-master/mimedb.cpp:161:19, col:26> 'const char *' <ArrayToPointerDecay>
              (ParenExpr 0xaa272f0 <col:19, col:26> 'const char [49]' lvalue
                (StringLiteral 0xaa272a0 <line:1374:31> 'const char [49]' lvalue "%s: Could not parse mimetype from argument '%s'\n")))
            (ImplicitCastExpr 0xaa27408 <line:95:16> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xaa27304 <col:16> 'const char [7]' lvalue "mimedb"))
            (ImplicitCastExpr 0xaa27418 <line:1374:93, col:99> 'char *' <LValueToRValue>
              (ArraySubscriptExpr 0xaa27378 <col:93, col:99> 'char *' lvalue
                (ImplicitCastExpr 0xaa27358 <col:93> 'char **' <LValueToRValue>
                  (DeclRefExpr 0xaa27328 <col:93> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                (ImplicitCastExpr 0xaa27368 <col:98> 'int' <LValueToRValue>
                  (DeclRefExpr 0xaa27340 <col:98> 'int' lvalue Var 0xa9bf270 'i' 'int')))))
          (BinaryOperator 0xaa27458 <line:1375:13, col:19> 'int' lvalue '='
            (DeclRefExpr 0xaa27424 <col:13> 'int' lvalue Var 0xa952100 'error' 'int')
            (IntegerLiteral 0xaa27440 <col:19> 'int' 1))
          (ReturnStmt 0xaa27488 <line:1376:13, col:20>
            (IntegerLiteral 0xaa27470 <col:20> 'int' 1)))
        <<<NULL>>>)
      (SwitchStmt 0xaa27500 <line:1382:9, line:1415:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xaa274f0 <line:1382:17> 'int' <LValueToRValue>
          (DeclRefExpr 0xaa274d4 <col:17> 'int' lvalue Var 0xa9bf110 'output_type' 'int'))
        (CompoundStmt 0xaa27f58 <line:1383:9, line:1415:9>
          (CaseStmt 0xaa27538 <line:1384:13, line:1389:13>
            (ImplicitCastExpr 0xaa27fa8 <line:1384:18> 'int' <IntegralCast>
              (DeclRefExpr 0xaa2751c <col:18> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f10 'MIMETYPE' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))
            <<<NULL>>>
            (CompoundStmt 0xaa275e0 <line:1385:13, line:1389:13>
              (BinaryOperator 0xaa275c0 <line:1386:17, col:34> 'char *' lvalue '='
                (DeclRefExpr 0xaa27558 <col:17> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')
                (CStyleCastExpr 0xaa275a8 <col:26, col:34> 'char *' <NoOp>
                  (ImplicitCastExpr 0xaa27598 <col:34> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xaa27570 <col:34> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *'))))
              (BreakStmt 0xaa275d8 <line:1387:17>)))
          (CaseStmt 0xaa27610 <line:1390:13, line:1397:13>
            (ImplicitCastExpr 0xaa27f98 <line:1390:18> 'int' <IntegralCast>
              (DeclRefExpr 0xaa275f8 <col:18> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f50 'DESCRIPTION' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))
            <<<NULL>>>
            (CompoundStmt 0xaa27878 <line:1391:13, line:1397:13>
              (BinaryOperator 0xaa276f0 <line:1392:17, col:50> 'char *' lvalue '='
                (DeclRefExpr 0xaa27630 <col:17> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')
                (CallExpr 0xaa276c0 <col:26, col:50> 'char *'
                  (ImplicitCastExpr 0xaa276b0 <col:26> 'char *(*)(const char *)' <FunctionToPointerDecay>
                    (DeclRefExpr 0xaa27694 <col:26> 'char *(const char *)' lvalue Function 0xa96c500 'get_description' 'char *(const char *)'))
                  (ImplicitCastExpr 0xaa276e0 <col:42> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xaa2767c <col:42> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *'))))
              (IfStmt 0xaa27850 <line:1393:17, line:1394:49>
                <<<NULL>>>
                (UnaryOperator 0xaa27740 <line:1393:21, col:22> '_Bool' prefix '!'
                  (ImplicitCastExpr 0xaa27730 <col:22> '_Bool' <PointerToBoolean>
                    (ImplicitCastExpr 0xaa27720 <col:22> 'char *' <LValueToRValue>
                      (DeclRefExpr 0xaa27708 <col:22> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *'))))
                (BinaryOperator 0xaa27838 <line:1394:21, col:49> 'char *' lvalue '='
                  (DeclRefExpr 0xaa27754 <col:21> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')
                  (CallExpr 0xaa27808 <col:30, col:49> 'char *'
                    (ImplicitCastExpr 0xaa277f8 <col:30> 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
                      (DeclRefExpr 0xaa277dc <col:30> 'char *(const char *) throw()' lvalue Function 0xa4e74e0 'strdup' 'char *(const char *) throw()'))
                    (ImplicitCastExpr 0xaa27828 <line:161:19, col:26> 'const char *' <ArrayToPointerDecay>
                      (ParenExpr 0xaa277c8 <col:19, col:26> 'const char [8]' lvalue
                        (StringLiteral 0xaa277a4 <line:1394:39> 'const char [8]' lvalue "Unknown")))))
                <<<NULL>>>)
              (BreakStmt 0xaa27870 <line:1396:17>)))
          (CaseStmt 0xaa278b0 <line:1398:13, line:1402:13>
            (ImplicitCastExpr 0xaa27f88 <line:1398:18> 'int' <IntegralCast>
              (DeclRefExpr 0xaa27894 <col:18> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951f90 'ACTION' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))
            <<<NULL>>>
            (CompoundStmt 0xaa279b0 <line:1399:13, line:1402:13>
              (BinaryOperator 0xaa27990 <line:1400:17, col:45> 'char *' lvalue '='
                (DeclRefExpr 0xaa278d0 <col:17> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')
                (CallExpr 0xaa27960 <col:26, col:45> 'char *'
                  (ImplicitCastExpr 0xaa27950 <col:26> 'char *(*)(const char *)' <FunctionToPointerDecay>
                    (DeclRefExpr 0xaa27934 <col:26> 'char *(const char *)' lvalue Function 0xa9721e0 'get_action' 'char *(const char *)'))
                  (ImplicitCastExpr 0xaa27980 <col:37> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0xaa2791c <col:37> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *'))))
              (BreakStmt 0xaa279a8 <line:1401:17>)))
          (CaseStmt 0xaa279e0 <line:1403:13, line:1414:13>
            (ImplicitCastExpr 0xaa27f78 <line:1403:18> 'int' <IntegralCast>
              (DeclRefExpr 0xaa279c8 <col:18> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951fd0 'LAUNCH' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>'))
            <<<NULL>>>
            (CompoundStmt 0xaa27f38 <line:1404:13, line:1414:13>
              (BinaryOperator 0xaa27a40 <line:1411:17, col:26> 'char *' lvalue '='
                (DeclRefExpr 0xaa27a00 <col:17> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')
                (ImplicitCastExpr 0xaa27a30 <col:26> 'char *' <NullToPointer>
                  (IntegerLiteral 0xaa27a18 <col:26> 'int' 0)))
              (DeclStmt 0xaa27d30 <line:1412:17, col:57>
                0xaa27a70 "string_list_t &l =
                  (ExprWithCleanups 0xaa27d10 <col:36, col:56> 'mapped_type':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue
                    (CXXTemporary 0xaa27bc0)
                    (CXXTemporary 0xaa27c60)
                    (CXXOperatorCallExpr 0xaa27ce8 <col:36, col:56> 'mapped_type':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue
                      (ImplicitCastExpr 0xaa27cd8 <col:47, col:56> 'mapped_type &(*)(const key_type &)' <FunctionToPointerDecay>
                        (DeclRefExpr 0xaa27c88 <col:47, col:56> 'mapped_type &(const key_type &)' lvalue CXXMethod 0xa9905b0 'operator[]' 'mapped_type &(const key_type &)'))
                      (DeclRefExpr 0xaa27aa4 <col:36> 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue Var 0xa9bf930 'launch_hash' 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >')
                      (MaterializeTemporaryExpr 0xaa27c78 <col:48> 'const key_type':'const class std::basic_string<char>' lvalue
                        (CXXBindTemporaryExpr 0xaa27c68 <col:48> 'const key_type':'const class std::basic_string<char>' (CXXTemporary 0xaa27c60)
                          (CXXConstructExpr 0xaa27c38 <col:48> 'const key_type':'const class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                            (ImplicitCastExpr 0xaa27b78 <col:48> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0xaa27abc <col:48> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *'))
                            (CXXDefaultArgExpr 0xaa27c20 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))")
              (ExprWithCleanups 0xaa27f18 <line:1413:17, col:36> 'void'
                (CXXTemporary 0xaa27e50)
                (CXXTemporary 0xaa27ef0)
                (CXXMemberCallExpr 0xaa27de0 <col:17, col:36> 'void'
                  (MemberExpr 0xaa27d58 <col:17, col:19> '<bound member function type>' .push_back 0xa962af0
                    (DeclRefExpr 0xaa27d40 <col:17> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xaa27a70 'l' 'string_list_t &'))
                  (MaterializeTemporaryExpr 0xaa27f08 <col:29, col:35> 'const value_type':'const class std::basic_string<char>' lvalue
                    (CXXBindTemporaryExpr 0xaa27ef8 <col:29, col:35> 'const value_type':'const class std::basic_string<char>' (CXXTemporary 0xaa27ef0)
                      (CXXConstructExpr 0xaa27ec8 <col:29, col:35> 'const value_type':'const class std::basic_string<char>''void (const char *, const class std::allocator<char> &)'
                        (ImplicitCastExpr 0xaa27e10 <col:29, col:35> 'const char *' <NoOp>
                          (ImplicitCastExpr 0xaa27e00 <col:29, col:35> 'char *' <LValueToRValue>
                            (ArraySubscriptExpr 0xaa27dc8 <col:29, col:35> 'char *' lvalue
                              (ImplicitCastExpr 0xaa27da8 <col:29> 'char **' <LValueToRValue>
                                (DeclRefExpr 0xaa27d78 <col:29> 'char **' lvalue ParmVar 0xa9bef90 'argv' 'char **'))
                              (ImplicitCastExpr 0xaa27db8 <col:34> 'int' <LValueToRValue>
                                (DeclRefExpr 0xaa27d90 <col:34> 'int' lvalue Var 0xa9bf270 'i' 'int')))))
                        (CXXDefaultArgExpr 0xaa27eb0 <<invalid sloc>> 'const class std::allocator<char>':'const class std::allocator<char>' lvalue))))))))))
      (IfStmt 0xaa28298 <line:1420:9, line:1425:9>
        <<<NULL>>>
        (ImplicitCastExpr 0xaa27fe0 <line:1420:13> '_Bool' <PointerToBoolean>
          (ImplicitCastExpr 0xaa27fd0 <col:13> 'char *' <LValueToRValue>
            (DeclRefExpr 0xaa27fb4 <col:13> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')))
        (CompoundStmt 0xaa28280 <line:1421:9, line:1425:9>
          (CallExpr 0xaa280e8 <line:1422:13, col:34> 'int'
            (ImplicitCastExpr 0xaa280d8 <col:13> 'int (*)(const char *restrict, ...)' <FunctionToPointerDecay>
              (DeclRefExpr 0xaa28088 <col:13> 'int (const char *restrict, ...)' lvalue Function 0xa4ea230 'printf' 'int (const char *restrict, ...)'))
            (ImplicitCastExpr 0xaa28110 <col:20> 'const char *' <ArrayToPointerDecay>
              (StringLiteral 0xaa28050 <col:20> 'const char [4]' lvalue "%s\n"))
            (ImplicitCastExpr 0xaa28120 <col:28> 'char *' <LValueToRValue>
              (DeclRefExpr 0xaa28070 <col:28> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')))
          (IfStmt 0xaa28260 <line:1423:13, line:1424:28>
            <<<NULL>>>
            (BinaryOperator 0xaa28190 <line:1423:17, col:27> '_Bool' '!='
              (ImplicitCastExpr 0xaa28180 <col:17> 'const char *' <NoOp>
                (ImplicitCastExpr 0xaa28160 <col:17> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xaa2812c <col:17> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')))
              (ImplicitCastExpr 0xaa28170 <col:27> 'const char *' <LValueToRValue>
                (DeclRefExpr 0xaa28144 <col:27> 'const char *' lvalue Var 0xa9bf190 'mimetype' 'const char *')))
            (CallExpr 0xaa28220 <line:1424:17, col:28> 'void'
              (ImplicitCastExpr 0xaa28210 <col:17> 'void (*)(void *) throw()' <FunctionToPointerDecay>
                (DeclRefExpr 0xaa281f4 <col:17> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
              (ImplicitCastExpr 0xaa28250 <col:22> 'void *' <BitCast>
                (ImplicitCastExpr 0xaa28240 <col:22> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xaa281dc <col:22> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *'))))
            <<<NULL>>>))
        <<<NULL>>>)
      (BinaryOperator 0xaa282f8 <line:1426:9, col:18> 'char *' lvalue '='
        (DeclRefExpr 0xaa282b4 <col:9> 'char *' lvalue Var 0xa9bf1f0 'output' 'char *')
        (ImplicitCastExpr 0xaa282e8 <col:18> 'char *' <NullToPointer>
          (IntegerLiteral 0xaa282d0 <col:18> 'int' 0)))))
  (IfStmt 0xaa2ab78 <line:1432:5, line:1447:5>
    <<<NULL>>>
    (BinaryOperator 0xaa28418 <line:1432:9, col:35> '_Bool' '&&'
      (BinaryOperator 0xaa283b0 <col:9, col:24> '_Bool' '=='
        (ImplicitCastExpr 0xaa28390 <col:9> 'int' <LValueToRValue>
          (DeclRefExpr 0xaa2835c <col:9> 'int' lvalue Var 0xa9bf110 'output_type' 'int'))
        (ImplicitCastExpr 0xaa283a0 <col:24> 'int' <IntegralCast>
          (DeclRefExpr 0xaa28374 <col:24> 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>' EnumConstant 0xa951fd0 'LAUNCH' 'enum <anonymous at ../codeBase/fish-shell-master/mimedb.cpp:116:1>')))
      (UnaryOperator 0xaa28400 <col:34, col:35> '_Bool' prefix '!'
        (ImplicitCastExpr 0xaa283f0 <col:35> '_Bool' <IntegralToBoolean>
          (ImplicitCastExpr 0xaa283e0 <col:35> 'int' <LValueToRValue>
            (DeclRefExpr 0xaa283c8 <col:35> 'int' lvalue Var 0xa952100 'error' 'int')))))
    (CompoundStmt 0xaa2ab60 <line:1433:5, line:1447:5>
      (ForStmt 0xaa2ab38 <line:1434:9, line:1446:9>
        (DeclStmt 0xaa29970 <line:1434:14, col:64>
          0xaa28480 "launch_hash_t::iterator iter =
            (CXXConstructExpr 0xaa29948 <col:45, col:63> 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >''void (const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > &) throw()' elidable
              (MaterializeTemporaryExpr 0xaa298c0 <col:45, col:63> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
                (ImplicitCastExpr 0xaa298b0 <col:45, col:63> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
                  (CXXMemberCallExpr 0xaa28530 <col:45, col:63> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                    (MemberExpr 0xaa2850c <col:45, col:57> '<bound member function type>' .begin 0xa98ef70
                      (DeclRefExpr 0xaa284b4 <col:45> 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue Var 0xa9bf930 'launch_hash' 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >'))))))")
        <<<NULL>>>
        (CXXOperatorCallExpr 0xaa29ad8 <col:66, col:90> '_Bool'
          (ImplicitCastExpr 0xaa29ac8 <col:71, <invalid sloc>> '_Bool (*)(const _Self &) const' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa29a78 <col:71, <invalid sloc>> '_Bool (const _Self &) const' lvalue CXXMethod 0xaa29720 'operator!=' '_Bool (const _Self &) const'))
          (ImplicitCastExpr 0xaa29a68 <col:66> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
            (DeclRefExpr 0xaa29980 <col:66> 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa28480 'iter' 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))
          (MaterializeTemporaryExpr 0xaa29a40 <col:74, col:90> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
            (ImplicitCastExpr 0xaa29a30 <col:74, col:90> 'const _Self':'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' <NoOp>
              (CXXMemberCallExpr 0xaa29a10 <col:74, col:90> 'iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'
                (MemberExpr 0xaa299f0 <col:74, col:86> '<bound member function type>' .end 0xa98f360
                  (DeclRefExpr 0xaa29998 <col:74> 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >' lvalue Var 0xa9bf930 'launch_hash' 'launch_hash_t':'class std::map<class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >, struct std::less<class std::basic_string<char> >, class std::allocator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > > >'))))))
        (CXXOperatorCallExpr 0xaa29b98 <col:93, col:95> '_Self':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue
          (ImplicitCastExpr 0xaa29b88 <<invalid sloc>> '_Self &(*)(void)' <FunctionToPointerDecay>
            (DeclRefExpr 0xaa29b38 <<invalid sloc>> '_Self &(void)' lvalue CXXMethod 0xaa29010 'operator++' '_Self &(void)'))
          (DeclRefExpr 0xaa29afc <col:95> 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa28480 'iter' 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))
        (CompoundStmt 0xaa2ab18 <line:1435:9, line:1446:9>
          (DeclStmt 0xaa2a6f0 <line:1436:13, col:55>
            0xaa29bd0 "const char *mimetype =
              (CXXMemberCallExpr 0xaa2a6d0 <col:36, col:54> 'const char *'
                (MemberExpr 0xaa2a6ac <col:36, col:48> '<bound member function type>' .c_str 0xa6d9410
                  (MemberExpr 0xaa2a68c <col:36, col:42> 'const class std::basic_string<char>':'const class std::basic_string<char>' lvalue ->first 0xaa29e30
                    (CXXOperatorCallExpr 0xaa29c98 <col:36> 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'
                      (ImplicitCastExpr 0xaa29c88 <<invalid sloc>> 'pointer (*)(void) const' <FunctionToPointerDecay>
                        (DeclRefExpr 0xaa29c30 <<invalid sloc>> 'pointer (void) const' lvalue CXXMethod 0xaa28e80 'operator->' 'pointer (void) const'))
                      (ImplicitCastExpr 0xaa29c20 <col:36> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                        (DeclRefExpr 0xaa29c04 <col:36> 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa28480 'iter' 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))))")
          (DeclStmt 0xaa2a7d8 <line:1437:13, col:48>
            0xaa2a710 "string_list_t &files =
              (MemberExpr 0xaa2a7b8 <col:36, col:42> 'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue ->second 0xaa29e70
                (CXXOperatorCallExpr 0xaa2a798 <col:36> 'pointer':'struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > *'
                  (ImplicitCastExpr 0xaa2a788 <<invalid sloc>> 'pointer (*)(void) const' <FunctionToPointerDecay>
                    (DeclRefExpr 0xaa2a770 <<invalid sloc>> 'pointer (void) const' lvalue CXXMethod 0xaa28e80 'operator->' 'pointer (void) const'))
                  (ImplicitCastExpr 0xaa2a760 <col:36> 'const struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue <NoOp>
                    (DeclRefExpr 0xaa2a744 <col:36> 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >' lvalue Var 0xaa28480 'iter' 'launch_hash_t::iterator':'struct std::_Rb_tree_iterator<struct std::pair<const class std::basic_string<char>, class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > > > >'))))")
          (DeclStmt 0xaa2a8e0 <line:1439:13, col:50>
            0xaa2a800 "char *launcher =
              (CallExpr 0xaa2a8b0 <col:30, col:49> 'char *'
                (ImplicitCastExpr 0xaa2a8a0 <col:30> 'char *(*)(const char *)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa2a884 <col:30> 'char *(const char *)' lvalue Function 0xa9721e0 'get_action' 'char *(const char *)'))
                (ImplicitCastExpr 0xaa2a8d0 <col:41> 'const char *' <LValueToRValue>
                  (DeclRefExpr 0xaa2a86c <col:41> 'const char *' lvalue Var 0xaa29bd0 'mimetype' 'const char *')))")
          (IfStmt 0xaa2aaf8 <line:1441:13, line:1445:13>
            <<<NULL>>>
            (ImplicitCastExpr 0xaa2a918 <line:1441:17> '_Bool' <PointerToBoolean>
              (ImplicitCastExpr 0xaa2a908 <col:17> 'char *' <LValueToRValue>
                (DeclRefExpr 0xaa2a8f0 <col:17> 'char *' lvalue Var 0xaa2a800 'launcher' 'char *')))
            (CompoundStmt 0xaa2aae0 <line:1442:13, line:1445:13>
              (CallExpr 0xaa2a9d0 <line:1443:17, col:42> 'void'
                (ImplicitCastExpr 0xaa2a9c0 <col:17> 'void (*)(char *, const string_list_t &, size_t)' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa2a9a8 <col:17> 'void (char *, const string_list_t &, size_t)' lvalue Function 0xa97af00 'launch' 'void (char *, const string_list_t &, size_t)'))
                (ImplicitCastExpr 0xaa2a9f8 <col:24> 'char *' <LValueToRValue>
                  (DeclRefExpr 0xaa2a95c <col:24> 'char *' lvalue Var 0xaa2a800 'launcher' 'char *'))
                (ImplicitCastExpr 0xaa2aa08 <col:34> 'const string_list_t':'const class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue <NoOp>
                  (DeclRefExpr 0xaa2a974 <col:34> 'string_list_t':'class std::vector<class std::basic_string<char>, class std::allocator<class std::basic_string<char> > >' lvalue Var 0xaa2a710 'files' 'string_list_t &'))
                (ImplicitCastExpr 0xaa2aa18 <col:41> 'size_t':'unsigned int' <IntegralCast>
                  (IntegerLiteral 0xaa2a990 <col:41> 'int' 0)))
              (CallExpr 0xaa2aaa0 <line:1444:17, col:30> 'void'
                (ImplicitCastExpr 0xaa2aa90 <col:17> 'void (*)(void *) throw()' <FunctionToPointerDecay>
                  (DeclRefExpr 0xaa2aa74 <col:17> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
                (ImplicitCastExpr 0xaa2aad0 <col:22> 'void *' <BitCast>
                  (ImplicitCastExpr 0xaa2aac0 <col:22> 'char *' <LValueToRValue>
                    (DeclRefExpr 0xaa2aa5c <col:22> 'char *' lvalue Var 0xaa2a800 'launcher' 'char *')))))
            <<<NULL>>>))))
    <<<NULL>>>)
  (IfStmt 0xaa2ac88 <line:1449:5, line:1450:25>
    <<<NULL>>>
    (ImplicitCastExpr 0xaa2abc0 <line:1449:9> '_Bool' <PointerToBoolean>
      (ImplicitCastExpr 0xaa2abb0 <col:9> 'char *' <LValueToRValue>
        (DeclRefExpr 0xaa2ab94 <col:9> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *')))
    (CallExpr 0xaa2ac48 <line:1450:9, col:25> 'void'
      (ImplicitCastExpr 0xaa2ac38 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
        (DeclRefExpr 0xaa2ac1c <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
      (ImplicitCastExpr 0xaa2ac78 <col:14> 'void *' <BitCast>
        (ImplicitCastExpr 0xaa2ac68 <col:14> 'char *' <LValueToRValue>
          (DeclRefExpr 0xaa2ac04 <col:14> 'char *' lvalue Var 0xa952160 'launch_buff' 'char *'))))
    <<<NULL>>>)
  (IfStmt 0xaa2b000 <line:1452:5, line:1458:5>
    <<<NULL>>>
    (ImplicitCastExpr 0xaa2acd0 <line:1452:9> '_Bool' <PointerToBoolean>
      (ImplicitCastExpr 0xaa2acc0 <col:9> 'regex_t *' <LValueToRValue>
        (DeclRefExpr 0xaa2aca4 <col:9> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *')))
    (CompoundStmt 0xaa2afe0 <line:1453:5, line:1458:5>
      (CallExpr 0xaa2ad98 <line:1454:9, col:25> 'void'
        (ImplicitCastExpr 0xaa2ad88 <col:9> 'void (*)(regex_t *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa2ad2c <col:9> 'void (regex_t *)' lvalue Function 0xa5bf100 'regfree' 'void (regex_t *)'))
        (ImplicitCastExpr 0xaa2adb8 <col:17> 'regex_t *' <LValueToRValue>
          (DeclRefExpr 0xaa2ad14 <col:17> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *')))
      (CallExpr 0xaa2ae40 <line:1455:9, col:24> 'void'
        (ImplicitCastExpr 0xaa2ae30 <col:9> 'void (*)(regex_t *)' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa2ae14 <col:9> 'void (regex_t *)' lvalue Function 0xa5bf100 'regfree' 'void (regex_t *)'))
        (ImplicitCastExpr 0xaa2ae60 <col:17> 'regex_t *' <LValueToRValue>
          (DeclRefExpr 0xaa2adfc <col:17> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *')))
      (CallExpr 0xaa2aee8 <line:1456:9, col:22> 'void'
        (ImplicitCastExpr 0xaa2aed8 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa2aebc <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (ImplicitCastExpr 0xaa2af18 <col:14> 'void *' <BitCast>
          (ImplicitCastExpr 0xaa2af08 <col:14> 'regex_t *' <LValueToRValue>
            (DeclRefExpr 0xaa2aea4 <col:14> 'regex_t *' lvalue Var 0xa952020 'start_re' 'regex_t *'))))
      (CallExpr 0xaa2afa0 <line:1457:9, col:21> 'void'
        (ImplicitCastExpr 0xaa2af90 <col:9> 'void (*)(void *) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0xaa2af74 <col:9> 'void (void *) throw()' lvalue Function 0xa549d70 'free' 'void (void *) throw()'))
        (ImplicitCastExpr 0xaa2afd0 <col:14> 'void *' <BitCast>
          (ImplicitCastExpr 0xaa2afc0 <col:14> 'regex_t *' <LValueToRValue>
            (DeclRefExpr 0xaa2af5c <col:14> 'regex_t *' lvalue Var 0xa952090 'stop_re' 'regex_t *')))))
    <<<NULL>>>)
  (CallExpr 0xaa2b080 <line:1460:5, col:23> 'void'
    (ImplicitCastExpr 0xaa2b070 <col:5> 'void (*)(void)' <FunctionToPointerDecay>
      (DeclRefExpr 0xaa2b054 <col:5> 'void (void)' lvalue Function 0xa8ef210 'xdg_mime_shutdown' 'void (void)')))
  (ReturnStmt 0xaa2b0c8 <line:1462:5, col:12>
    (ImplicitCastExpr 0xaa2b0b8 <col:12> 'int' <LValueToRValue>
      (DeclRefExpr 0xaa2b09c <col:12> 'int' lvalue Var 0xa952100 'error' 'int'))))


extern float __builtin_tanhf(float);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_addsubpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_rcpps(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern long double __builtin_tanhl(long double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_psubusb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_addsubps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_isunordered();
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psubusw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern int __builtin_islessequal();
extern float __builtin_sqrtf(float);
extern float __builtin_expf(float);
extern long double __builtin_sqrtl(long double);
extern long double __builtin_expl(long double);
extern void __builtin_ia32_vzeroall();
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pi2fd(__attribute__((__vector_size__(2 * sizeof(int)))) int);
extern float __builtin_erfcf(float);
extern long double __builtin_erfcl(long double);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psubsw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern int __builtin___fprintf_chk(FILE *, int, const char *, ...);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pi2fw(__attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_cvttps2dq(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern float __builtin_cargf(_Complex float);
extern long double __builtin_cargl(_Complex long double);
extern void __sync_add_and_fetch();
extern int __builtin_ffsl(unsigned long);
extern long long __builtin_llrint(double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_rcpss(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_isnan();
extern void __builtin_abort();
extern float __builtin_atan2f(float, float);
extern long double __builtin_atan2l(long double, long double);
extern float __builtin_nexttowardf(float, float);
extern long double __builtin_nexttowardl(long double, long double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pmulhrw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(32 * sizeof(char)))) char __builtin_ia32_lddqu256(const char *);
extern __attribute__((__vector_size__(4 * sizeof(double)))) double __builtin_ia32_minpd256(__attribute__((__vector_size__(4 * sizeof(double)))) double, __attribute__((__vector_size__(4 * sizeof(double)))) double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psrlwi(__attribute__((__vector_size__(4 * sizeof(short)))) short, int);
extern void __sync_synchronize();
extern _Complex double __builtin_conj(_Complex double);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_paddsw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern void *__builtin_dwarf_cfa();
extern __attribute__((__vector_size__(4 * sizeof(double)))) double __builtin_ia32_maxpd256(__attribute__((__vector_size__(4 * sizeof(double)))) double, __attribute__((__vector_size__(4 * sizeof(double)))) double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_punpcklwd(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pmulhw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern double __builtin_trunc(double);
extern float __builtin_huge_valf();
extern float __builtin_copysignf(float, float);
extern long double __builtin_huge_vall();
extern long double __builtin_copysignl(long double, long double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pmulhuw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern void __builtin_ia32_sfence();
extern double __builtin_rint(double);
extern float __builtin_fmodf(float, float);
extern _Complex double __builtin_csin(_Complex double);
extern long double __builtin_fmodl(long double, long double);
extern long __builtin_lround(double);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_cvtpd2pi(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_ia32_ptestc256(__attribute__((__vector_size__(4 * sizeof(long long)))) long long, __attribute__((__vector_size__(4 * sizeof(long long)))) long long);
extern int __builtin_bcmp(void *, void *, unsigned int);
extern int __builtin_popcountl(unsigned long);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_cvtpd2ps(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern float __builtin_truncf(float);
extern long double __builtin_truncl(long double);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pminsw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern float __builtin_floorf(float);
extern float __builtin_cosf(float);
extern double __builtin_cosh(double);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfsub(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pmullw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern long double __builtin_cosl(long double);
extern long double __builtin_floorl(long double);
extern _Complex float __builtin_casinf(_Complex float);
extern _Complex long double __builtin_casinl(_Complex long double);
extern _Complex double __builtin_casinh(_Complex double);
extern _Complex double __builtin_cacos(_Complex double);
extern int __builtin_ia32_comieq(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern void __sync_fetch_and_sub();
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_paddd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_paddq(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_paddw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern float __builtin_powif(float, int);
extern void __atomic_fetch_xor();
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pmaxsw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern long double __builtin_powil(long double, int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_paddb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern char __sync_fetch_and_sub_1(volatile char *, char, ...);
extern short __sync_fetch_and_sub_2(volatile short *, short, ...);
extern int __sync_fetch_and_sub_4(volatile int *, int, ...);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_hsubps256(__attribute__((__vector_size__(8 * sizeof(float)))) float, __attribute__((__vector_size__(8 * sizeof(float)))) float);
extern long long __sync_fetch_and_sub_8(volatile long long *, long long, ...);
extern int __builtin_ia32_comige(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pabsw128(__attribute__((__vector_size__(8 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_psadbw128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern int __builtin_ia32_comigt(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_cvttps2pi(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_flt_rounds();
extern void __builtin_ia32_emms();
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_psrlqi128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, int);
extern double __builtin_cos(double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psrawi(__attribute__((__vector_size__(4 * sizeof(short)))) short, int);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_phaddd128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern float __builtin_nearbyintf(float);
extern float __builtin_coshf(float);
extern long double __builtin_nearbyintl(long double);
extern long double __builtin_coshl(long double);
extern long double __builtin_asinhl(long double);
extern float __builtin_asinhf(float);
extern int __builtin___printf_chk(int, const char *, ...);
extern int __builtin_signbitf(float);
extern int __builtin_signbitl(long double);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfsubr(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern unsigned int __builtin_bswap32(unsigned int);
extern char *__builtin___stpncpy_chk(char *, const char *, unsigned int, unsigned int);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psllw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern int __builtin_isfinite();
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_haddpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_haddps256(__attribute__((__vector_size__(8 * sizeof(float)))) float, __attribute__((__vector_size__(8 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_haddps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __int128_t __sync_swap_16(volatile __int128_t *, __int128_t, ...);
extern int __builtin_ia32_comile(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pminuw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern float __builtin_crealf(_Complex float);
extern long double __builtin_creall(_Complex long double);
extern int __builtin_ia32_comilt(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pmulld128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern unsigned long long __builtin_bswap64(unsigned long long);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfacc(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern int __builtin_ctz(unsigned int);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_dppd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double, int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_palignr(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char, char);
extern float __builtin_remainderf(float, float);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_dpps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float, int);
extern long double __builtin_remainderl(long double, long double);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfpnacc(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern char *__builtin_rindex(const char *, int);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pmaxuw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfadd(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern void __builtin_prefetch(const void *, ...);
extern int __builtin_ia32_ucomisdeq(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_roundpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, int);
extern double __builtin_atan2(double, double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_roundps(__attribute__((__vector_size__(4 * sizeof(float)))) float, int);
extern float __builtin_powf(float, float);
extern double __builtin_powi(double, int);
extern long double __builtin_powl(long double, long double);
extern int __builtin_ia32_ucomisdge(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_ia32_vtestcpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern float __builtin_tgammaf(float);
extern long double __builtin_tgammal(long double);
extern float __builtin_atanf(float);
extern double __builtin_atanh(double);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pmaddwd(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern long double __builtin_atanl(long double);
extern int __builtin_ia32_ucomisdgt(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_ia32_vtestcps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_phsubd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern float __builtin_nextafterf(float, float);
extern _Complex float __builtin_casinhf(_Complex float);
extern long double __builtin_nextafterl(long double, long double);
extern _Complex long double __builtin_casinhl(_Complex long double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_phsubw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_roundsd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double, int);
extern _Complex float __builtin_csinhf(_Complex float);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_roundss(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float, int);
extern _Complex long double __builtin_csinhl(_Complex long double);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_psrldi128(__attribute__((__vector_size__(4 * sizeof(int)))) int, int);
extern int __builtin_popcount(unsigned int);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pslld(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_psllq(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psllw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern float __builtin_rintf(float);
extern long double __builtin_rintl(long double);
extern int __builtin_ia32_ucomisdle(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfrcpit1(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfrcpit2(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern float __builtin_remquof(float, float, int *);
extern int __builtin_ia32_ucomisdlt(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern long double __builtin_remquol(long double, long double, int *);
extern float __builtin_log1pf(float);
extern int __builtin_parityll(unsigned long long);
extern long double __builtin_log1pl(long double);
extern void __sync_lock_release_16(volatile __int128_t *, ...);
extern unsigned long long __builtin_ia32_crc32di(unsigned long long, unsigned long long);
extern double __builtin_cabs(_Complex double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pcmpgtb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pcmpgtd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_pcmpgtq(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_psignb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pcmpgtw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_movntdqa(__attribute__((__vector_size__(2 * sizeof(long long)))) long long *);
extern void __builtin_unreachable();
extern int __builtin_fprintf(FILE *, const char *, ...);
extern void __sync_lock_release();
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pslldi(__attribute__((__vector_size__(2 * sizeof(int)))) int, int);
extern int __builtin_isgreaterequal();
extern void __builtin_unwind_init();
extern _Complex float __builtin_ctanf(_Complex float);
extern _Complex double __builtin_ctanh(_Complex double);
extern void __sync_fetch_and_and();
extern _Complex long double __builtin_ctanl(_Complex long double);
extern __attribute__((__vector_size__(4 * sizeof(double)))) double __builtin_ia32_cmppd256(__attribute__((__vector_size__(4 * sizeof(double)))) double, __attribute__((__vector_size__(4 * sizeof(double)))) double, char);
extern _Complex double __builtin_clog(_Complex double);
extern char *__builtin___strncpy_chk(char *, const char *, unsigned int, unsigned int);
extern double __builtin_log10(double);
extern double __builtin_lgamma(double);
extern unsigned int __builtin_ia32_crc32hi(unsigned int, unsigned short);
extern int __builtin___vprintf_chk(int, const char *, __builtin_va_list);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_packssdw(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern void __sync_sub_and_fetch();
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pavgb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_por(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_phsubw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern double __builtin_log1p(double);
extern _Complex double __builtin_ctan(_Complex double);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_psradi128(__attribute__((__vector_size__(4 * sizeof(int)))) int, int);
extern int __builtin___sprintf_chk(char *, int, unsigned int, const char *, ...);
extern short __sync_sub_and_fetch_2(volatile short *, short, ...);
extern float __builtin_log2f(float);
extern long double __builtin_log2l(long double);
extern char __sync_sub_and_fetch_1(volatile char *, char, ...);
extern int __sync_sub_and_fetch_4(volatile int *, int, ...);
extern void __builtin_ia32_lfence();
extern long long __sync_sub_and_fetch_8(volatile long long *, long long, ...);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_blendpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double, int);
extern _Complex double __builtin_casin(_Complex double);
extern int __builtin_ia32_cvtss2si(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_ia32_vtestzpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_blendps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float, int);
extern double __builtin_remainder(double, double);
extern int __builtin_ia32_vtestzps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psrlwi128(__attribute__((__vector_size__(8 * sizeof(short)))) short, int);
extern void __builtin_bcopy(void *, void *, unsigned int);
extern void __builtin_ia32_storeupd(double *, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_ia32_comisdneq(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern void __builtin_ia32_storeups(float *, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_aesimc128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern long long __builtin_llround(double);
extern double __builtin_acos(double);
extern double __builtin_sin(double);
extern _Complex double __builtin_cpow(_Complex double, _Complex double);
extern double __builtin_erfc(double);
extern long double __builtin_erfl(long double);
extern float __builtin_erff(float);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_hsubpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_psllqi128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, int);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_hsubps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern unsigned int __builtin_ia32_crc32qi(unsigned int, unsigned char);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfmax(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern void __builtin_ia32_femms();
extern int __sync_fetch_and_max(volatile int *, int);
extern _Complex float __builtin_cacosf(_Complex float);
extern _Complex double __builtin_cacosh(_Complex double);
extern char *__builtin_strcat(char *, const char *);
extern _Complex long double __builtin_cacosl(_Complex long double);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_psllqi(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, int);
extern unsigned int __builtin_ia32_crc32si(unsigned int, unsigned int);
extern double __builtin_ceil(double);
extern double __builtin_carg(_Complex double);
extern float __builtin_inff();
extern long double __builtin_infl();
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pmaddubsw(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psrlw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_aesdec128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psrawi128(__attribute__((__vector_size__(8 * sizeof(short)))) short, int);
extern int __builtin_ia32_ucomieq(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern char __sync_fetch_and_xor_1(volatile char *, char, ...);
extern double __builtin_expm1(double);
extern int __sync_fetch_and_xor_4(volatile int *, int, ...);
extern short __sync_fetch_and_xor_2(volatile short *, short, ...);
extern void __builtin_stdarg_start(__builtin_va_list &, ...);
extern void __sync_and_and_fetch();
extern long long __sync_fetch_and_xor_8(volatile long long *, long long, ...);
extern void __sync_fetch_and_xor();
extern char *__builtin___strcpy_chk(char *, const char *, unsigned int);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_pmuludq(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern int __builtin_parity(unsigned int);
extern __int128_t __sync_add_and_fetch_16(volatile __int128_t *, __int128_t, ...);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pminsd128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern int __builtin_ia32_ucomige(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern double __builtin_floor(double);
extern int __builtin_ia32_ucomigt(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pminsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_lddqu(const char *);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psllwi(__attribute__((__vector_size__(4 * sizeof(short)))) short, int);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfmin(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern void __builtin_va_copy(__builtin_va_list &, __builtin_va_list &);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pmaxsd128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern char *__builtin_strchr(const char *, int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pminub(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern double __builtin_fdim(double, double);
extern int __sync_fetch_and_min(volatile int *, int);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_cvttpd2dq(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __int128_t __sync_sub_and_fetch_16(volatile __int128_t *, __int128_t, ...);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pabsd128(__attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_packsswb(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern float __builtin_roundf(float);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pmulhrsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern long double __builtin_roundl(long double);
extern unsigned int __builtin_strcspn(const char *, const char *);
extern void __builtin_ia32_maskmovq(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char, char *);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pslldi128(__attribute__((__vector_size__(4 * sizeof(int)))) int, int);
extern int __builtin_ia32_ucomile(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pslld128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern int __builtin_ia32_ucomilt(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern float __builtin_modff(float, float *);
extern char __sync_fetch_and_or_1(volatile char *, char, ...);
extern short __sync_fetch_and_or_2(volatile short *, short, ...);
extern int __sync_fetch_and_or_4(volatile int *, int, ...);
extern long long __sync_fetch_and_or_8(volatile long long *, long long, ...);
extern long double __builtin_modfl(long double, long double *);
extern unsigned int __builtin_annotation(unsigned int, const char *);
extern void __atomic_signal_fence(int);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_pand(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern int __builtin_strcmp(const char *, const char *);
extern double __builtin_frexp(double, int *);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_minpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_minps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pminud128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern int __builtin_ilogbf(float);
extern int __builtin_ilogbl(long double);
extern float __builtin_fabsf(float);
extern long double __builtin_fabsl(long double);
extern int __builtin_isless();
extern void __builtin_bzero(void *, unsigned int);
extern float __builtin_atanhf(float);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_rcpps256(__attribute__((__vector_size__(8 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_pmaxud128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_phaddsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern long double __builtin_atanhl(long double);
extern int __builtin_isgreater();
extern char *__builtin_strcpy(char *, const char *);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_minsd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern char __sync_xor_and_fetch_1(volatile char *, char, ...);
extern short __sync_xor_and_fetch_2(volatile short *, short, ...);
extern int __sync_xor_and_fetch_4(volatile int *, int, ...);
extern long long __sync_xor_and_fetch_8(volatile long long *, long long, ...);
extern _Complex double __builtin_cexp(_Complex double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_minss(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern void __sync_xor_and_fetch();
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfrsqrt(__attribute__((__vector_size__(2 * sizeof(float)))) float);
extern int __builtin_ctzl(unsigned long);
extern float __builtin_tanf(float);
extern double __builtin_tanh(double);
extern long double __builtin_tanl(long double);
extern int __builtin_abs(int);
extern double __builtin_nexttoward(double, double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_paddsb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psignw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_paddsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_psllq128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pfcmpeq(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern void *__builtin___memcpy_chk(void *, const void *, unsigned int, unsigned int);
extern int __builtin_strncasecmp(const char *, const char *, unsigned int);
extern __int128_t __sync_fetch_and_or_16(volatile __int128_t *, __int128_t, ...);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfmul(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern _Complex double __builtin_catan(_Complex double);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfrsqit1(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pfcmpge(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(double)))) double __builtin_ia32_hsubpd256(__attribute__((__vector_size__(4 * sizeof(double)))) double, __attribute__((__vector_size__(4 * sizeof(double)))) double);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_cvttpd2pi(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_sqrtps256(__attribute__((__vector_size__(8 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pfcmpgt(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern double __builtin_log(double);
extern float __builtin_fmaxf(float, float);
extern char *__builtin___strncat_chk(char *, const char *, unsigned int, unsigned int);
extern long double __builtin_fmaxl(long double, long double);
extern float __builtin_cimagf(_Complex float);
extern long double __builtin_cimagl(_Complex long double);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pavgw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psraw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_vpermilpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, char);
extern double __builtin_tan(double);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_psllwi128(__attribute__((__vector_size__(8 * sizeof(short)))) short, int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_psubb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern double __builtin_asin(double);
extern void *__builtin___mempcpy_chk(void *, const void *, unsigned int, unsigned int);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_psubd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_vpermilps(__attribute__((__vector_size__(4 * sizeof(float)))) float, char);
extern char *__builtin_index(const char *, int);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_psubq(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psubw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern _Complex float __builtin_catanhf(_Complex float);
extern _Complex long double __builtin_catanhl(_Complex long double);
extern int __builtin_isinf_sign();
extern double __builtin_huge_val();
extern __int128_t __sync_fetch_and_add_16(volatile __int128_t *, __int128_t, ...);
extern float __builtin_asinf(float);
extern double __builtin_asinh(double);
extern __attribute__((__vector_size__(4 * sizeof(double)))) double __builtin_ia32_haddpd256(__attribute__((__vector_size__(4 * sizeof(double)))) double, __attribute__((__vector_size__(4 * sizeof(double)))) double);
extern long double __builtin_asinl(long double);
extern _Complex long double __builtin_ctanhl(_Complex long double);
extern _Complex float __builtin_ctanhf(_Complex float);
extern void __builtin_eh_return(unsigned int, void *);
extern _Complex float __builtin_csqrtf(_Complex float);
extern _Complex long double __builtin_csqrtl(_Complex long double);
extern double __builtin_fabs(double);
extern char *__builtin_strncat(char *, const char *, unsigned int);
extern void __atomic_load();
extern unsigned long long __builtin_extend_pointer(void *);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_rsqrtps(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern float __builtin_fminf(float, float);
extern double __builtin_scalbn(double, int);
extern long double __builtin_fminl(long double, long double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pshufb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern int __builtin_ia32_pmovmskb(__attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pshufw(__attribute__((__vector_size__(4 * sizeof(short)))) short, char);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_pxor(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern int __builtin___vfprintf_chk(FILE *, int, const char *, __builtin_va_list);
extern int __builtin_signbit(double);
extern double __builtin_pow(double, double);
extern double __builtin_tgamma(double);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_phsubd128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_rsqrtss(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_ia32_ptestz128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_cvtps2dq(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern float __builtin_fdimf(float, float);
extern long double __builtin_fdiml(long double, long double);
extern float __builtin_acoshf(float);
extern long double __builtin_acoshl(long double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psadbw(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern void *__builtin_frame_address(unsigned int);
extern _Complex float __builtin_csinf(_Complex float);
extern _Complex double __builtin_csinh(_Complex double);
extern _Complex long double __builtin_csinl(_Complex long double);
extern char *__builtin_stpncpy(char *, const char *, unsigned int);
extern long __builtin_lrint(double);
extern long __builtin_lrintf(float);
extern long __builtin_lrintl(long double);
extern void __builtin_ia32_clflush(const void *);
extern double __builtin_scalbln(double, long);
extern __int128_t __sync_fetch_and_xor_16(volatile __int128_t *, __int128_t, ...);
extern double __builtin_cbrt(double);
extern char *__builtin___strcat_chk(char *, const char *, unsigned int);
extern float __builtin_scalbnf(float, int);
extern long double __builtin_scalbnl(long double, int);
extern float __builtin_expm1f(float);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_minps256(__attribute__((__vector_size__(8 * sizeof(float)))) float, __attribute__((__vector_size__(8 * sizeof(float)))) float);
extern int __builtin_fpclassify(int, int, int, int, ...);
extern long double __builtin_expm1l(long double);
extern int __builtin_classify_type();
extern int __builtin_isnormal();
extern int __builtin_strncmp(const char *, const char *, unsigned int);
extern float __builtin_sinhf(float);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_phsubsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern void *__builtin___memset_chk(void *, int, unsigned int, unsigned int);
extern long double __builtin_sinhl(long double);
extern char __sync_fetch_and_and_1(volatile char *, char, ...);
extern short __sync_fetch_and_and_2(volatile short *, short, ...);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_maxps256(__attribute__((__vector_size__(8 * sizeof(float)))) float, __attribute__((__vector_size__(8 * sizeof(float)))) float);
extern long long __sync_fetch_and_and_8(volatile long long *, long long, ...);
extern long __builtin_lroundf(float);
extern long __builtin_lroundl(long double);
extern double __builtin_creal(_Complex double);
extern float __builtin_logbf(float);
extern _Complex float __builtin_cacoshf(_Complex float);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_psrld128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_sqrtpd(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern long double __builtin_logbl(long double);
extern _Complex float __builtin_ccoshf(_Complex float);
extern int __builtin_ia32_comineq(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern _Complex long double __builtin_ccoshl(_Complex long double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_psubsb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern double __builtin_erf(double);
extern __int128_t __sync_or_and_fetch_16(volatile __int128_t *, __int128_t, ...);
extern _Complex long double __builtin_cacoshl(_Complex long double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_sqrtps(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_psignb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psubsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_psignd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern int __sync_fetch_and_and_4(volatile int *, int, ...);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pcmpeqb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pcmpeqd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_cvtps2pd(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_pcmpeqq(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psignw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfrcp(__attribute__((__vector_size__(2 * sizeof(float)))) float);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_cvtps2pi(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pcmpeqw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern double __builtin_round(double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pabsb(__attribute__((__vector_size__(8 * sizeof(char)))) char);
extern char *__builtin_strncpy(char *, const char *, unsigned int);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pabsd(__attribute__((__vector_size__(2 * sizeof(int)))) int);
extern _Complex double __builtin_cproj(_Complex double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pavgusb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern int __builtin___snprintf_chk(char *, unsigned int, int, unsigned int, const char *, ...);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pabsw(__attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_sqrtsd(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern void __builtin_longjmp(void **, int);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_aesenc128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern void *__builtin_mempcpy(void *, const void *, unsigned int);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_sqrtss(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_ia32_cvtsd2si(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern double __builtin_inf();
extern double __builtin_modf(double, double *);
extern char *__builtin_strrchr(const char *, int);
extern void __builtin_ia32_ldmxcsr(unsigned int);
extern float __builtin_ldexpf(float, int);
extern float __builtin_log10f(float);
extern long double __builtin_log10l(long double);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pf2id(__attribute__((__vector_size__(2 * sizeof(float)))) float);
extern long double __builtin_ldexpl(long double, int);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pf2iw(__attribute__((__vector_size__(2 * sizeof(float)))) float);
extern __int128_t __sync_xor_and_fetch_16(volatile __int128_t *, __int128_t, ...);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_psrad(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern unsigned int __builtin_strspn(const char *, const char *);
extern double __builtin_exp(double);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_psrlq128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psraw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_blendvpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern double __builtin_atan(double);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_pmulhw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern _Complex float __builtin_clogf(_Complex float);
extern _Complex long double __builtin_clogl(_Complex long double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_blendvps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern float __builtin_fmaf(float, float, float);
extern long double __builtin_fmal(long double, long double, long double);
extern _Complex float __builtin_catanf(_Complex float);
extern _Complex double __builtin_catanh(_Complex double);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pshufb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern double __builtin_fmax(double, double);
extern _Complex long double __builtin_catanl(_Complex long double);
extern int __builtin_vsprintf(char *, const char *, __builtin_va_list);
extern __int128_t __sync_fetch_and_sub_16(volatile __int128_t *, __int128_t, ...);
extern void __sync_or_and_fetch();
extern long long __builtin_llroundf(float);
extern long long __builtin_llroundl(long double);
extern char *__builtin_strstr(const char *, const char *);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_cvtdq2pd(__attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_pandn(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_cmppd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double, char);
extern float __builtin_ceilf(float);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_cvtdq2ps(__attribute__((__vector_size__(4 * sizeof(int)))) int);
extern int __builtin_parityl(unsigned long);
extern long double __builtin_ceill(long double);
extern void __atomic_exchange();
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_cmpps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float, char);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_phaddd(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern char __sync_add_and_fetch_1(volatile char *, char, ...);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_psubsb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern short __sync_add_and_fetch_2(volatile short *, short, ...);
extern long long __sync_add_and_fetch_8(volatile long long *, long long, ...);
extern int __sync_add_and_fetch_4(volatile int *, int, ...);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_phaddw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern void __builtin_ia32_mwait(unsigned int, unsigned int);
extern char *__builtin___stpcpy_chk(char *, const char *, unsigned int);
extern _Complex double __builtin_csqrt(_Complex double);
extern char *__builtin_strdup(const char *);
extern int __builtin_printf(const char *, ...);
extern double __builtin_hypot(double, double);
extern _Complex float __builtin_cexpf(_Complex float);
extern _Complex long double __builtin_cexpl(_Complex long double);
extern void __atomic_thread_fence(int);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_cmpsd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double, char);
extern char __sync_and_and_fetch_1(volatile char *, char, ...);
extern short __sync_and_and_fetch_2(volatile short *, short, ...);
extern void *__builtin___memmove_chk(void *, const void *, unsigned int, unsigned int);
extern int __sync_and_and_fetch_4(volatile int *, int, ...);
extern unsigned int __sync_fetch_and_umax(volatile unsigned int *, unsigned int);
extern double __builtin_copysign(double, double);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_psignd128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_cmpss(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float, char);
extern int __builtin_ffsll(unsigned long long);
extern int __builtin_ia32_ptestc128(__attribute__((__vector_size__(2 * sizeof(long long)))) long long, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern long long __sync_and_and_fetch_8(volatile long long *, long long, ...);
extern int __builtin_ia32_movmskps(__attribute__((__vector_size__(4 * sizeof(float)))) float);
extern int __builtin_isinf();
extern int __builtin_ia32_movmskpd(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_popcountll(unsigned long long);
extern float __builtin_scalblnf(float, long);
extern double __builtin_fmin(double, double);
extern float __builtin_acosf(float);
extern double __builtin_acosh(double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_paddusb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern long double __builtin_acosl(long double);
extern long double __builtin_scalblnl(long double, long);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_paddsb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern unsigned int __builtin_object_size(const void *, int);
extern double __builtin_ldexp(double, int);
extern void __builtin_ia32_storedqu(char *, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_paddusw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern _Complex float __builtin_conjf(_Complex float);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_psrld(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern float __builtin_lgammaf(float);
extern _Complex long double __builtin_conjl(_Complex long double);
extern long double __builtin_lgammal(long double);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_psrlq(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern void __sync_fetch_and_or();
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_psrlw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern int __builtin_ia32_comisdeq(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern void __atomic_fetch_sub();
extern void __sync_lock_release_1(volatile char *, ...);
extern void __sync_lock_release_2(volatile short *, ...);
extern __attribute__((__vector_size__(8 * sizeof(short)))) short __builtin_ia32_phaddw128(__attribute__((__vector_size__(8 * sizeof(short)))) short, __attribute__((__vector_size__(8 * sizeof(short)))) short);
extern void __sync_lock_release_4(volatile int *, ...);
extern __attribute__((__vector_size__(4 * sizeof(int)))) int __builtin_ia32_psrad128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern void __sync_lock_release_8(volatile long long *, ...);
extern int __builtin_ia32_comisdge(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_punpckhbw(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern double __builtin_cimag(_Complex double);
extern void __builtin_ia32_mfence();
extern int __builtin_ia32_comisdgt(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern float __builtin_sinf(float);
extern double __builtin_sinh(double);
extern long double __builtin_sinl(long double);
extern int __builtin_islessgreater();
extern float __builtin_nanf(const char *);
extern long double __builtin_nanl(const char *);
extern int __builtin___vsprintf_chk(char *, int, unsigned int, const char *, __builtin_va_list);
extern double __builtin_nans(const char *);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pminsb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern int __builtin_snprintf(char *, unsigned int, const char *, ...);
extern int __builtin_strcasecmp(const char *, const char *);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_punpckhdq(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern int __builtin_ffs(unsigned int);
extern void __builtin_shufflevector();
extern unsigned int __sync_fetch_and_umin(volatile unsigned int *, unsigned int);
extern double __builtin_fmod(double, double);
extern double __builtin_nearbyint(double);
extern char __sync_swap_1(volatile char *, char, ...);
extern short __sync_swap_2(volatile short *, short, ...);
extern int __sync_swap_4(volatile int *, int, ...);
extern void __builtin_ia32_monitor(void *, unsigned int, unsigned int);
extern long long __sync_swap_8(volatile long long *, long long, ...);
extern double __builtin_remquo(double, double, int *);
extern _Complex float __builtin_cprojf(_Complex float);
extern _Complex long double __builtin_cprojl(_Complex long double);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pmaxsb128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern __int128_t __sync_fetch_and_and_16(volatile __int128_t *, __int128_t, ...);
extern float __builtin_cabsf(_Complex float);
extern long double __builtin_cabsl(_Complex long double);
extern void __builtin_ia32_storehps(__attribute__((__vector_size__(2 * sizeof(int)))) int *, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_cmpps256(__attribute__((__vector_size__(8 * sizeof(float)))) float, __attribute__((__vector_size__(8 * sizeof(float)))) float, char);
extern _Complex double __builtin_ccosh(_Complex double);
extern _Complex float __builtin_ccosf(_Complex float);
extern char __sync_or_and_fetch_1(volatile char *, char, ...);
extern _Complex long double __builtin_ccosl(_Complex long double);
extern short __sync_or_and_fetch_2(volatile short *, short, ...);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pmaxsw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern long long __sync_or_and_fetch_8(volatile long long *, long long, ...);
extern int __sync_or_and_fetch_4(volatile int *, int, ...);
extern long long __builtin_llrintf(float);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pabsb128(__attribute__((__vector_size__(16 * sizeof(char)))) char);
extern long long __builtin_llrintl(long double);
extern int __builtin_ia32_ucomineq(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern long double __builtin_hypotl(long double, long double);
extern _Complex double __builtin_ccos(_Complex double);
extern float __builtin_hypotf(float, float);
extern int __builtin_ia32_comisdle(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_ia32_comisdlt(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern int __builtin_ia32_ptestz256(__attribute__((__vector_size__(4 * sizeof(long long)))) long long, __attribute__((__vector_size__(4 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pmaxub(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern double __builtin_nextafter(double, double);
extern int __builtin_setjmp(void **) __attribute((returns_twice));
extern void __builtin_ia32_movntdq(__attribute__((__vector_size__(2 * sizeof(long long)))) long long *, __attribute__((__vector_size__(2 * sizeof(long long)))) long long);
extern int __builtin_ctzll(unsigned long long);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_psrldi(__attribute__((__vector_size__(2 * sizeof(int)))) int, int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_punpcklbw(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern double __builtin_fma(double, double, double);
extern float __builtin_nansf(const char *);
extern void __atomic_fetch_add();
extern long double __builtin_cbrtl(long double);
extern float __builtin_cbrtf(float);
extern long double __builtin_nansl(const char *);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_pswapdsi(__attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pswapdsf(__attribute__((__vector_size__(2 * sizeof(float)))) float);
extern void __builtin_trap();
extern __attribute__((__vector_size__(4 * sizeof(double)))) double __builtin_ia32_sqrtpd256(__attribute__((__vector_size__(4 * sizeof(double)))) double);
extern void __builtin_ia32_movnti(int *, int);
extern void __builtin_ia32_movntq(__attribute__((__vector_size__(1 * sizeof(long long)))) long long *, __attribute__((__vector_size__(1 * sizeof(long long)))) long long);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pminub128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_pavgb(__attribute__((__vector_size__(8 * sizeof(char)))) char, __attribute__((__vector_size__(8 * sizeof(char)))) char);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_punpckldq(__attribute__((__vector_size__(2 * sizeof(int)))) int, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_pavgw(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern unsigned int __builtin_ia32_stmxcsr();
extern float __builtin_exp2f(float);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_maxpd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern long double __builtin_exp2l(long double);
extern int __builtin_ilogb(double);
extern float __builtin_frexpf(float, int *);
extern long double __builtin_frexpl(long double, int *);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_maxps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern __attribute__((__vector_size__(16 * sizeof(char)))) char __builtin_ia32_pmaxub128(__attribute__((__vector_size__(16 * sizeof(char)))) char, __attribute__((__vector_size__(16 * sizeof(char)))) char);
extern short __sync_fetch_and_add_2(volatile short *, short, ...);
extern char *__builtin_stpcpy(char *, const char *);
extern void __builtin_ia32_storelps(__attribute__((__vector_size__(2 * sizeof(int)))) int *, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern long long __sync_fetch_and_add_8(volatile long long *, long long, ...);
extern char __sync_fetch_and_add_1(volatile char *, char, ...);
extern void __atomic_fetch_or();
extern double __builtin_nan(const char *);
extern void *__builtin_return_address(unsigned int);
extern void __sync_lock_test_and_set();
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_maxsd(__attribute__((__vector_size__(2 * sizeof(double)))) double, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __attribute__((__vector_size__(2 * sizeof(double)))) double __builtin_ia32_cvtpi2pd(__attribute__((__vector_size__(2 * sizeof(int)))) int);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_maxss(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern double __builtin_log2(double);
extern __attribute__((__vector_size__(4 * sizeof(float)))) float __builtin_ia32_cvtpi2ps(__attribute__((__vector_size__(4 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(int)))) int);
extern void *__builtin_alloca(unsigned int);
extern __attribute__((__vector_size__(2 * sizeof(float)))) float __builtin_ia32_pfnacc(__attribute__((__vector_size__(2 * sizeof(float)))) float, __attribute__((__vector_size__(2 * sizeof(float)))) float);
extern _Complex float __builtin_cpowf(_Complex float, _Complex float);
extern double __builtin_logb(double);
extern _Complex long double __builtin_cpowl(_Complex long double, _Complex long double);
extern float __builtin_logf(float);
extern long double __builtin_logl(long double);
extern void __atomic_store();
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_pmuldq128(__attribute__((__vector_size__(4 * sizeof(int)))) int, __attribute__((__vector_size__(4 * sizeof(int)))) int);
extern __attribute__((__vector_size__(2 * sizeof(int)))) int __builtin_ia32_psradi(__attribute__((__vector_size__(2 * sizeof(int)))) int, int);
extern __attribute__((__vector_size__(8 * sizeof(char)))) char __builtin_ia32_packuswb(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern char *__builtin_strpbrk(const char *, const char *);
extern void __builtin_ia32_movntpd(double *, __attribute__((__vector_size__(2 * sizeof(double)))) double);
extern void __atomic_fetch_and();
extern void __builtin_ia32_movntps(float *, __attribute__((__vector_size__(4 * sizeof(float)))) float);
extern char *__builtin_strndup(const char *, unsigned int);
extern __attribute__((__vector_size__(2 * sizeof(long long)))) long long __builtin_ia32_cvtpd2dq(__attribute__((__vector_size__(2 * sizeof(double)))) double);
extern __int128_t __sync_and_and_fetch_16(volatile __int128_t *, __int128_t, ...);
extern int __builtin_constant_p();
extern __attribute__((__vector_size__(8 * sizeof(float)))) float __builtin_ia32_dpps256(__attribute__((__vector_size__(8 * sizeof(float)))) float, __attribute__((__vector_size__(8 * sizeof(float)))) float, int);
extern double __builtin_exp2(double);
extern __attribute__((__vector_size__(4 * sizeof(short)))) short __builtin_ia32_punpckhwd(__attribute__((__vector_size__(4 * sizeof(short)))) short, __attribute__((__vector_size__(4 * sizeof(short)))) short);
extern __attribute__((__vector_size__(1 * sizeof(long long)))) long long __builtin_ia32_psrlqi(__attribute__((__vector_size__(1 * sizeof(long long)))) long long, int);
extern double __builtin_sqrt(double);
