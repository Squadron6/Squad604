typedef char *__builtin_va_list;
typedef typeof (((int *)0) - ((int *)0)) ptrdiff_t;
typedef typeof (sizeof(int)) size_t;
extern "C" {
    union wait {
        union wait;
        int w_status;
        struct {
            unsigned int __w_termsig : (IntegerLiteral 0x8d0a250 </usr/include/i386-linux-gnu/bits/waitstatus.h:73:27> 'int' 7)
;
            unsigned int __w_coredump : (IntegerLiteral 0x8d0a2b0 </usr/include/i386-linux-gnu/bits/waitstatus.h:74:28> 'int' 1)
;
            unsigned int __w_retcode : (IntegerLiteral 0x8d0a310 </usr/include/i386-linux-gnu/bits/waitstatus.h:75:27> 'int' 8)
;
            unsigned int : (IntegerLiteral 0x8d0a370 </usr/include/i386-linux-gnu/bits/waitstatus.h:76:15> 'int' 16)
;
        };
        struct <anonymous struct at /usr/include/i386-linux-gnu/bits/waitstatus.h:70:5> __wait_terminated;
        struct {
            unsigned int __w_stopval : (IntegerLiteral 0x8d0a510 </usr/include/i386-linux-gnu/bits/waitstatus.h:88:27> 'int' 8)
;
            unsigned int __w_stopsig : (IntegerLiteral 0x8d0a570 </usr/include/i386-linux-gnu/bits/waitstatus.h:89:27> 'int' 8)
;
            unsigned int : (IntegerLiteral 0x8d0a5d0 </usr/include/i386-linux-gnu/bits/waitstatus.h:90:15> 'int' 16)
;
        };
        struct <anonymous struct at /usr/include/i386-linux-gnu/bits/waitstatus.h:85:5> __wait_stopped;
    };
    struct {
        int quot;
        int rem;
    };
    typedef struct div_t div_t;
    struct {
        long quot;
        long rem;
    };
    typedef struct ldiv_t ldiv_t;
    struct {
        long long quot;
        long long rem;
    };
    typedef struct lldiv_t lldiv_t;
    extern size_t __ctype_get_mb_cur_max() throw();
    extern double atof(const char *__nptr) throw();
    extern int atoi(const char *__nptr) throw();
    extern long atol(const char *__nptr) throw();
    extern long long atoll(const char *__nptr) throw();
    extern double strtod(const char *restrict __nptr, char **restrict __endptr) throw();
    extern float strtof(const char *restrict __nptr, char **restrict __endptr) throw();
    extern long double strtold(const char *restrict __nptr, char **restrict __endptr) throw();
    extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base) throw();
    struct __locale_struct {
        struct __locale_struct;
        struct __locale_data;
        struct __locale_data *__locales[13];
        const unsigned short *__ctype_b;
        const int *__ctype_tolower;
        const int *__ctype_toupper;
        const char *__names[13];
    };
    typedef struct __locale_struct *__locale_t;
    typedef __locale_t locale_t;
    extern long strtol_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern unsigned long strtoul_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern long long strtoll_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern unsigned long long strtoull_l(const char *restrict __nptr, char **restrict __endptr, int __base, __locale_t __loc) throw();
    extern double strtod_l(const char *restrict __nptr, char **restrict __endptr, __locale_t __loc) throw();
    extern float strtof_l(const char *restrict __nptr, char **restrict __endptr, __locale_t __loc) throw();
    extern long double strtold_l(const char *restrict __nptr, char **restrict __endptr, __locale_t __loc) throw();
    extern char *l64a(long __n) throw();
    extern long a64l(const char *__s) throw();
    extern "C" {
        typedef unsigned char __u_char;
        typedef unsigned short __u_short;
        typedef unsigned int __u_int;
        typedef unsigned long __u_long;
        typedef signed char __int8_t;
        typedef unsigned char __uint8_t;
        typedef short __int16_t;
        typedef unsigned short __uint16_t;
        typedef int __int32_t;
        typedef unsigned int __uint32_t;
        typedef long long __int64_t;
        typedef unsigned long long __uint64_t;
        typedef long long __quad_t;
        typedef unsigned long long __u_quad_t;
        typedef __u_quad_t __dev_t;
        typedef unsigned int __uid_t;
        typedef unsigned int __gid_t;
        typedef unsigned long __ino_t;
        typedef __u_quad_t __ino64_t;
        typedef unsigned int __mode_t;
        typedef unsigned int __nlink_t;
        typedef long __off_t;
        typedef __quad_t __off64_t;
        typedef int __pid_t;
        struct {
            int __val[2];
        };
        typedef struct __fsid_t __fsid_t;
        typedef long __clock_t;
        typedef unsigned long __rlim_t;
        typedef __u_quad_t __rlim64_t;
        typedef unsigned int __id_t;
        typedef long __time_t;
        typedef unsigned int __useconds_t;
        typedef long __suseconds_t;
        typedef int __daddr_t;
        typedef long __swblk_t;
        typedef int __key_t;
        typedef int __clockid_t;
        typedef void *__timer_t;
        typedef long __blksize_t;
        typedef long __blkcnt_t;
        typedef __quad_t __blkcnt64_t;
        typedef unsigned long __fsblkcnt_t;
        typedef __u_quad_t __fsblkcnt64_t;
        typedef unsigned long __fsfilcnt_t;
        typedef __u_quad_t __fsfilcnt64_t;
        typedef int __ssize_t;
        typedef __off64_t __loff_t;
        typedef __quad_t *__qaddr_t;
        typedef char *__caddr_t;
        typedef int __intptr_t;
        typedef unsigned int __socklen_t;
        typedef __u_char u_char;
        typedef __u_short u_short;
        typedef __u_int u_int;
        typedef __u_long u_long;
        typedef __quad_t quad_t;
        typedef __u_quad_t u_quad_t;
        typedef __fsid_t fsid_t;
        typedef __loff_t loff_t;
        typedef __ino_t ino_t;
        typedef __ino64_t ino64_t;
        typedef __dev_t dev_t;
        typedef __gid_t gid_t;
        typedef __mode_t mode_t;
        typedef __nlink_t nlink_t;
        typedef __uid_t uid_t;
        typedef __off_t off_t;
        typedef __off64_t off64_t;
        typedef __pid_t pid_t;
        typedef __id_t id_t;
        typedef __ssize_t ssize_t;
        typedef __daddr_t daddr_t;
        typedef __caddr_t caddr_t;
        typedef __key_t key_t;
        typedef __clock_t clock_t;
        typedef __time_t time_t;
        typedef __clockid_t clockid_t;
        typedef __timer_t timer_t;
        typedef __useconds_t useconds_t;
        typedef __suseconds_t suseconds_t;
        typedef unsigned long ulong;
        typedef unsigned short ushort;
        typedef unsigned int uint;
        typedef signed char int8_t;
        typedef short int16_t;
        typedef int int32_t;
        typedef long long int64_t;
        typedef unsigned char u_int8_t;
        typedef unsigned short u_int16_t;
        typedef unsigned int u_int32_t;
        typedef unsigned long long u_int64_t;
        typedef int register_t;
        typedef int __sig_atomic_t;
        struct {
            unsigned long __val[32];
        };
        typedef struct __sigset_t __sigset_t;
        typedef __sigset_t sigset_t;
        struct timespec {
            struct timespec;
            __time_t tv_sec;
            long tv_nsec;
        };
        struct timeval {
            struct timeval;
            __time_t tv_sec;
            __suseconds_t tv_usec;
        };
        typedef long __fd_mask;
        struct {
            __fd_mask fds_bits[32];
        };
        typedef struct fd_set fd_set;
        typedef __fd_mask fd_mask;
        extern "C" {
            extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout);
            extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask);
        }
        extern "C" {
            extern unsigned int gnu_dev_major(unsigned long long __dev) throw();
            extern unsigned int gnu_dev_minor(unsigned long long __dev) throw();
            extern unsigned long long gnu_dev_makedev(unsigned int __major, unsigned int __minor) throw();
        }
        typedef __blksize_t blksize_t;
        typedef __blkcnt_t blkcnt_t;
        typedef __fsblkcnt_t fsblkcnt_t;
        typedef __fsfilcnt_t fsfilcnt_t;
        typedef __blkcnt64_t blkcnt64_t;
        typedef __fsblkcnt64_t fsblkcnt64_t;
        typedef __fsfilcnt64_t fsfilcnt64_t;
        typedef unsigned long pthread_t;
        union {
            char __size[36];
            long __align;
        };
        typedef union pthread_attr_t pthread_attr_t;
        struct __pthread_internal_slist {
            struct __pthread_internal_slist;
            struct __pthread_internal_slist *__next;
        };
        typedef struct __pthread_internal_slist __pthread_slist_t;
        union {
            struct __pthread_mutex_s {
                struct __pthread_mutex_s;
                int __lock;
                unsigned int __count;
                int __owner;
                int __kind;
                unsigned int __nusers;
                union {
                    int __spins;
                    __pthread_slist_t __list;
                } ;
                ;
                ;
            };
            struct __pthread_mutex_s __data;
            char __size[24];
            long __align;
        };
        typedef union pthread_mutex_t pthread_mutex_t;
        union {
            char __size[4];
            long __align;
        };
        typedef union pthread_mutexattr_t pthread_mutexattr_t;
        union {
            struct {
                int __lock;
                unsigned int __futex;
                unsigned long long __total_seq;
                unsigned long long __wakeup_seq;
                unsigned long long __woken_seq;
                void *__mutex;
                unsigned int __nwaiters;
                unsigned int __broadcast_seq;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/pthreadtypes.h:86:3> __data;
            char __size[48];
            long long __align;
        };
        typedef union pthread_cond_t pthread_cond_t;
        union {
            char __size[4];
            long __align;
        };
        typedef union pthread_condattr_t pthread_condattr_t;
        typedef unsigned int pthread_key_t;
        typedef int pthread_once_t;
        union {
            struct {
                int __lock;
                unsigned int __nr_readers;
                unsigned int __readers_wakeup;
                unsigned int __writer_wakeup;
                unsigned int __nr_readers_queued;
                unsigned int __nr_writers_queued;
                unsigned char __flags;
                unsigned char __shared;
                unsigned char __pad1;
                unsigned char __pad2;
                int __writer;
            };
            struct <anonymous struct at /usr/include/i386-linux-gnu/bits/pthreadtypes.h:121:3> __data;
            char __size[32];
            long __align;
        };
        typedef union pthread_rwlock_t pthread_rwlock_t;
        union {
            char __size[8];
            long __align;
        };
        typedef union pthread_rwlockattr_t pthread_rwlockattr_t;
        typedef volatile int pthread_spinlock_t;
        union {
            char __size[20];
            long __align;
        };
        typedef union pthread_barrier_t pthread_barrier_t;
        union {
            char __size[4];
            int __align;
        };
        typedef union pthread_barrierattr_t pthread_barrierattr_t;
    }
    extern long random() throw();
    extern void srandom(unsigned int __seed) throw();
    extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen) throw();
    extern char *setstate(char *__statebuf) throw();
    struct random_data {
        struct random_data;
        int32_t *fptr;
        int32_t *rptr;
        int32_t *state;
        int rand_type;
        int rand_deg;
        int rand_sep;
        int32_t *end_ptr;
    };
    extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result) throw();
    extern int srandom_r(unsigned int __seed, struct random_data *__buf) throw();
    extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf) throw();
    extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf) throw();
    extern int rand() throw();
    extern void srand(unsigned int __seed) throw();
    extern int rand_r(unsigned int *__seed) throw();
    extern double drand48() throw();
    extern double erand48(unsigned short __xsubi[3]) throw();
    extern long lrand48() throw();
    extern long nrand48(unsigned short __xsubi[3]) throw();
    extern long mrand48() throw();
    extern long jrand48(unsigned short __xsubi[3]) throw();
    extern void srand48(long __seedval) throw();
    extern unsigned short *seed48(unsigned short __seed16v[3]) throw();
    extern void lcong48(unsigned short __param[7]) throw();
    struct drand48_data {
        struct drand48_data;
        unsigned short __x[3];
        unsigned short __old_x[3];
        unsigned short __c;
        unsigned short __init;
        unsigned long long __a;
    };
    extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result) throw();
    extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result) throw();
    extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result) throw();
    extern int srand48_r(long __seedval, struct drand48_data *__buffer) throw();
    extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer) throw();
    extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer) throw();
    extern void *malloc(size_t __size) throw();
    extern void *calloc(size_t __nmemb, size_t __size) throw();
    extern void *realloc(void *__ptr, size_t __size) throw();
    extern void free(void *__ptr) throw();
    extern void cfree(void *__ptr) throw();
    extern "C" {
        extern void *alloca(size_t __size) throw();
    }
    extern void *valloc(size_t __size) throw();
    extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size) throw();
    extern void abort() throw();
    extern int atexit(void (*__func)()) throw();
    extern "C++" extern int at_quick_exit(void (*__func)()) throw()
    extern int on_exit(void (*__func)(int, void *), void *__arg) throw();
    extern void exit(int __status) throw();
    extern void quick_exit(int __status) throw();
    extern void _Exit(int __status) throw();
    extern char *getenv(const char *__name) throw();
    extern char *__secure_getenv(const char *__name) throw();
    extern int putenv(char *__string) throw();
    extern int setenv(const char *__name, const char *__value, int __replace) throw();
    extern int unsetenv(const char *__name) throw();
    extern int clearenv() throw();
    extern char *mktemp(char *__template) throw();
    extern int mkstemp(char *__template);
    extern int mkstemp64(char *__template);
    extern int mkstemps(char *__template, int __suffixlen);
    extern int mkstemps64(char *__template, int __suffixlen);
    extern char *mkdtemp(char *__template) throw();
    extern int mkostemp(char *__template, int __flags);
    extern int mkostemp64(char *__template, int __flags);
    extern int mkostemps(char *__template, int __suffixlen, int __flags);
    extern int mkostemps64(char *__template, int __suffixlen, int __flags);
    extern int system(const char *__command);
    extern char *canonicalize_file_name(const char *__name) throw();
    extern char *realpath(const char *restrict __name, char *restrict __resolved) throw();
    typedef int (*__compar_fn_t)(const void *, const void *);
    typedef __compar_fn_t comparison_fn_t;
    typedef int (*__compar_d_fn_t)(const void *, const void *, void *);
    extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
    extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
    extern void qsort_r(void *__base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void *__arg);
    extern int abs(int __x) throw();
    extern long labs(long __x) throw();
    extern long long llabs(long long __x) throw();
    extern div_t div(int __numer, int __denom) throw();
    extern ldiv_t ldiv(long __numer, long __denom) throw();
    extern lldiv_t lldiv(long long __numer, long long __denom) throw();
    extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *gcvt(double __value, int __ndigit, char *__buf) throw();
    extern char *qecvt(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *qfcvt(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign) throw();
    extern char *qgcvt(long double __value, int __ndigit, char *__buf) throw();
    extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int qecvt_r(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int qfcvt_r(long double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len) throw();
    extern int mblen(const char *__s, size_t __n) throw();
    extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n) throw();
    extern int wctomb(char *__s, wchar_t __wchar) throw();
    extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n) throw();
    extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n) throw();
    extern int rpmatch(const char *__response) throw();
    extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep) throw();
    extern void setkey(const char *__key) throw();
    extern int posix_openpt(int __oflag);
    extern int grantpt(int __fd) throw();
    extern int unlockpt(int __fd) throw();
    extern char *ptsname(int __fd) throw();
    extern int ptsname_r(int __fd, char *__buf, size_t __buflen) throw();
    extern int getpt();
    extern int getloadavg(double __loadavg[], int __nelem) throw();
}
extern "C" {
    typedef void (*XdgMimeCallback)(void *);
    typedef void (*XdgMimeDestroy)(void *);
    extern const char *xdg_mime_type_unknown;
    const char *xdg_mime_get_mime_type_for_data(const void *data, size_t len);
    const char *xdg_mime_get_mime_type_for_file(const char *file_name);
    const char *xdg_mime_get_mime_type_from_file_name(const char *file_name);
    int xdg_mime_is_valid_mime_type(const char *mime_type);
    int xdg_mime_mime_type_equal(const char *mime_a, const char *mime_b);
    int xdg_mime_media_type_equal(const char *mime_a, const char *mime_b);
    int xdg_mime_mime_type_subclass(const char *mime_a, const char *mime_b);
    const char **xdg_mime_get_mime_parents(const char *mime);
    const char *xdg_mime_unalias_mime_type(const char *mime);
    int xdg_mime_get_max_buffer_extents();
    void xdg_mime_shutdown();
    void xdg_mime_dump();
    int xdg_mime_register_reload_callback(XdgMimeCallback callback, void *data, XdgMimeDestroy destroy);
    void xdg_mime_remove_callback(int callback_id);
}
typedef unsigned int xdg_unichar_t;
typedef unsigned char xdg_uchar8_t;
typedef unsigned short xdg_uint16_t;
typedef unsigned int xdg_uint32_t;
extern const char *const _xdg_utf8_skip;
xdg_unichar_t _xdg_utf8_to_ucs4(const char *source);
xdg_unichar_t _xdg_ucs4_to_lower(xdg_unichar_t source);
int _xdg_utf8_validate(const char *source);
const char *_xdg_get_base_name(const char *file_name);
extern "C" {
    enum  {
        _ISupper = (ImplicitCastExpr 0x8d8c088 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d857f0 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d857d0 <col:24, col:76> 'int'
      (BinaryOperator 0x8d85638 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d85608 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d855f0 <line:50:22> 'int' 0))
        (IntegerLiteral 0x8d85620 <line:45:32> 'int' 8))
      (ParenExpr 0x8d856f8 <col:36, col:54> 'int'
        (BinaryOperator 0x8d856e0 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d856b0 <col:37, col:48> 'int'
            (BinaryOperator 0x8d85698 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d85650 <col:38> 'int' 1)
              (ParenExpr 0x8d85680 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d85668 <line:50:22> 'int' 0))))
          (IntegerLiteral 0x8d856c8 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d857b8 <col:58, col:76> 'int'
        (BinaryOperator 0x8d857a0 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d85770 <col:59, col:70> 'int'
            (BinaryOperator 0x8d85758 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d85710 <col:60> 'int' 1)
              (ParenExpr 0x8d85740 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d85728 <line:50:22> 'int' 0))))
          (IntegerLiteral 0x8d85788 <line:45:75> 'int' 8))))))
,
        _ISlower = (ImplicitCastExpr 0x8d8c098 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d85a48 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d85a28 <col:24, col:76> 'int'
      (BinaryOperator 0x8d85890 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d85860 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d85848 <line:51:22> 'int' 1))
        (IntegerLiteral 0x8d85878 <line:45:32> 'int' 8))
      (ParenExpr 0x8d85950 <col:36, col:54> 'int'
        (BinaryOperator 0x8d85938 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d85908 <col:37, col:48> 'int'
            (BinaryOperator 0x8d858f0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d858a8 <col:38> 'int' 1)
              (ParenExpr 0x8d858d8 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d858c0 <line:51:22> 'int' 1))))
          (IntegerLiteral 0x8d85920 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d85a10 <col:58, col:76> 'int'
        (BinaryOperator 0x8d859f8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d859c8 <col:59, col:70> 'int'
            (BinaryOperator 0x8d859b0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d85968 <col:60> 'int' 1)
              (ParenExpr 0x8d85998 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d85980 <line:51:22> 'int' 1))))
          (IntegerLiteral 0x8d859e0 <line:45:75> 'int' 8))))))
,
        _ISalpha = (ImplicitCastExpr 0x8d8c0a8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d85c98 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d85c78 <col:24, col:76> 'int'
      (BinaryOperator 0x8d85ae0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d85ab0 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d85a98 <line:52:22> 'int' 2))
        (IntegerLiteral 0x8d85ac8 <line:45:32> 'int' 8))
      (ParenExpr 0x8d85ba0 <col:36, col:54> 'int'
        (BinaryOperator 0x8d85b88 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d85b58 <col:37, col:48> 'int'
            (BinaryOperator 0x8d85b40 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d85af8 <col:38> 'int' 1)
              (ParenExpr 0x8d85b28 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d85b10 <line:52:22> 'int' 2))))
          (IntegerLiteral 0x8d85b70 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d85c60 <col:58, col:76> 'int'
        (BinaryOperator 0x8d85c48 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d85c18 <col:59, col:70> 'int'
            (BinaryOperator 0x8d85c00 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d85bb8 <col:60> 'int' 1)
              (ParenExpr 0x8d85be8 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d85bd0 <line:52:22> 'int' 2))))
          (IntegerLiteral 0x8d85c30 <line:45:75> 'int' 8))))))
,
        _ISdigit = (ImplicitCastExpr 0x8d8c0b8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d85ee8 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d85ec8 <col:24, col:76> 'int'
      (BinaryOperator 0x8d85d30 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d85d00 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d85ce8 <line:53:22> 'int' 3))
        (IntegerLiteral 0x8d85d18 <line:45:32> 'int' 8))
      (ParenExpr 0x8d85df0 <col:36, col:54> 'int'
        (BinaryOperator 0x8d85dd8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d85da8 <col:37, col:48> 'int'
            (BinaryOperator 0x8d85d90 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d85d48 <col:38> 'int' 1)
              (ParenExpr 0x8d85d78 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d85d60 <line:53:22> 'int' 3))))
          (IntegerLiteral 0x8d85dc0 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d85eb0 <col:58, col:76> 'int'
        (BinaryOperator 0x8d85e98 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d85e68 <col:59, col:70> 'int'
            (BinaryOperator 0x8d85e50 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d85e08 <col:60> 'int' 1)
              (ParenExpr 0x8d85e38 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d85e20 <line:53:22> 'int' 3))))
          (IntegerLiteral 0x8d85e80 <line:45:75> 'int' 8))))))
,
        _ISxdigit = (ImplicitCastExpr 0x8d8c0c8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8afe8 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8afc8 <col:24, col:76> 'int'
      (BinaryOperator 0x8d85f80 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d85f50 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d85f38 <line:54:23> 'int' 4))
        (IntegerLiteral 0x8d85f68 <line:45:32> 'int' 8))
      (ParenExpr 0x8d86040 <col:36, col:54> 'int'
        (BinaryOperator 0x8d86028 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d85ff8 <col:37, col:48> 'int'
            (BinaryOperator 0x8d85fe0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d85f98 <col:38> 'int' 1)
              (ParenExpr 0x8d85fc8 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d85fb0 <line:54:23> 'int' 4))))
          (IntegerLiteral 0x8d86010 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8afb0 <col:58, col:76> 'int'
        (BinaryOperator 0x8d860e8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d860b8 <col:59, col:70> 'int'
            (BinaryOperator 0x8d860a0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d86058 <col:60> 'int' 1)
              (ParenExpr 0x8d86088 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d86070 <line:54:23> 'int' 4))))
          (IntegerLiteral 0x8d860d0 <line:45:75> 'int' 8))))))
,
        _ISspace = (ImplicitCastExpr 0x8d8c0d8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8b238 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8b218 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8b080 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8b050 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8b038 <line:55:22> 'int' 5))
        (IntegerLiteral 0x8d8b068 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8b140 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8b128 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8b0f8 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8b0e0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8b098 <col:38> 'int' 1)
              (ParenExpr 0x8d8b0c8 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8b0b0 <line:55:22> 'int' 5))))
          (IntegerLiteral 0x8d8b110 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8b200 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8b1e8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8b1b8 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8b1a0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8b158 <col:60> 'int' 1)
              (ParenExpr 0x8d8b188 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8b170 <line:55:22> 'int' 5))))
          (IntegerLiteral 0x8d8b1d0 <line:45:75> 'int' 8))))))
,
        _ISprint = (ImplicitCastExpr 0x8d8c0e8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8b488 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8b468 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8b2d0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8b2a0 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8b288 <line:56:22> 'int' 6))
        (IntegerLiteral 0x8d8b2b8 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8b390 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8b378 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8b348 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8b330 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8b2e8 <col:38> 'int' 1)
              (ParenExpr 0x8d8b318 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8b300 <line:56:22> 'int' 6))))
          (IntegerLiteral 0x8d8b360 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8b450 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8b438 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8b408 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8b3f0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8b3a8 <col:60> 'int' 1)
              (ParenExpr 0x8d8b3d8 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8b3c0 <line:56:22> 'int' 6))))
          (IntegerLiteral 0x8d8b420 <line:45:75> 'int' 8))))))
,
        _ISgraph = (ImplicitCastExpr 0x8d8c0f8 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8b6d8 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8b6b8 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8b520 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8b4f0 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8b4d8 <line:57:22> 'int' 7))
        (IntegerLiteral 0x8d8b508 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8b5e0 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8b5c8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8b598 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8b580 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8b538 <col:38> 'int' 1)
              (ParenExpr 0x8d8b568 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8b550 <line:57:22> 'int' 7))))
          (IntegerLiteral 0x8d8b5b0 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8b6a0 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8b688 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8b658 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8b640 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8b5f8 <col:60> 'int' 1)
              (ParenExpr 0x8d8b628 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8b610 <line:57:22> 'int' 7))))
          (IntegerLiteral 0x8d8b670 <line:45:75> 'int' 8))))))
,
        _ISblank = (ImplicitCastExpr 0x8d8c108 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8b928 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8b908 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8b770 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8b740 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8b728 <line:58:22> 'int' 8))
        (IntegerLiteral 0x8d8b758 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8b830 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8b818 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8b7e8 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8b7d0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8b788 <col:38> 'int' 1)
              (ParenExpr 0x8d8b7b8 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8b7a0 <line:58:22> 'int' 8))))
          (IntegerLiteral 0x8d8b800 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8b8f0 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8b8d8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8b8a8 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8b890 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8b848 <col:60> 'int' 1)
              (ParenExpr 0x8d8b878 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8b860 <line:58:22> 'int' 8))))
          (IntegerLiteral 0x8d8b8c0 <line:45:75> 'int' 8))))))
,
        _IScntrl = (ImplicitCastExpr 0x8d8c118 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8bb78 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8bb58 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8b9c0 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8b990 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8b978 <line:59:22> 'int' 9))
        (IntegerLiteral 0x8d8b9a8 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8ba80 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8ba68 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8ba38 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8ba20 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8b9d8 <col:38> 'int' 1)
              (ParenExpr 0x8d8ba08 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8b9f0 <line:59:22> 'int' 9))))
          (IntegerLiteral 0x8d8ba50 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8bb40 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8bb28 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8baf8 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8bae0 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8ba98 <col:60> 'int' 1)
              (ParenExpr 0x8d8bac8 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8bab0 <line:59:22> 'int' 9))))
          (IntegerLiteral 0x8d8bb10 <line:45:75> 'int' 8))))))
,
        _ISpunct = (ImplicitCastExpr 0x8d8c128 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8bdc8 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8bda8 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8bc10 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8bbe0 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8bbc8 <line:60:22> 'int' 10))
        (IntegerLiteral 0x8d8bbf8 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8bcd0 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8bcb8 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8bc88 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8bc70 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8bc28 <col:38> 'int' 1)
              (ParenExpr 0x8d8bc58 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8bc40 <line:60:22> 'int' 10))))
          (IntegerLiteral 0x8d8bca0 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8bd90 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8bd78 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8bd48 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8bd30 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8bce8 <col:60> 'int' 1)
              (ParenExpr 0x8d8bd18 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8bd00 <line:60:22> 'int' 10))))
          (IntegerLiteral 0x8d8bd60 <line:45:75> 'int' 8))))))
,
        _ISalnum = (ImplicitCastExpr 0x8d8c138 </usr/include/ctype.h:45:23, col:77> 'unsigned int' <IntegralCast>
  (ParenExpr 0x8d8c038 <col:23, col:77> 'int'
    (ConditionalOperator 0x8d8c018 <col:24, col:76> 'int'
      (BinaryOperator 0x8d8be60 <col:24, col:32> '_Bool' '<'
        (ParenExpr 0x8d8be30 <col:24, col:28> 'int'
          (IntegerLiteral 0x8d8be18 <line:61:22> 'int' 11))
        (IntegerLiteral 0x8d8be48 <line:45:32> 'int' 8))
      (ParenExpr 0x8d8bf20 <col:36, col:54> 'int'
        (BinaryOperator 0x8d8bf08 <col:37, col:53> 'int' '<<'
          (ParenExpr 0x8d8bed8 <col:37, col:48> 'int'
            (BinaryOperator 0x8d8bec0 <col:38, col:47> 'int' '<<'
              (IntegerLiteral 0x8d8be78 <col:38> 'int' 1)
              (ParenExpr 0x8d8bea8 <col:43, col:47> 'int'
                (IntegerLiteral 0x8d8be90 <line:61:22> 'int' 11))))
          (IntegerLiteral 0x8d8bef0 <line:45:53> 'int' 8)))
      (ParenExpr 0x8d8c000 <col:58, col:76> 'int'
        (BinaryOperator 0x8d8bfe8 <col:59, col:75> 'int' '>>'
          (ParenExpr 0x8d8bfb8 <col:59, col:70> 'int'
            (BinaryOperator 0x8d8bf80 <col:60, col:69> 'int' '<<'
              (IntegerLiteral 0x8d8bf38 <col:60> 'int' 1)
              (ParenExpr 0x8d8bf68 <col:65, col:69> 'int'
                (IntegerLiteral 0x8d8bf50 <line:61:22> 'int' 11))))
          (IntegerLiteral 0x8d8bfd0 <line:45:75> 'int' 8))))))

    };
    extern const unsigned short **__ctype_b_loc() throw();
    extern const __int32_t **__ctype_tolower_loc() throw();
    extern const __int32_t **__ctype_toupper_loc() throw();
    extern int isalnum(int) throw();
    extern int isalpha(int) throw();
    extern int iscntrl(int) throw();
    extern int isdigit(int) throw();
    extern int islower(int) throw();
    extern int isgraph(int) throw();
    extern int isprint(int) throw();
    extern int ispunct(int) throw();
    extern int isspace(int) throw();
    extern int isupper(int) throw();
    extern int isxdigit(int) throw();
    extern int tolower(int __c) throw();
    extern int toupper(int __c) throw();
    extern int isblank(int) throw();
    extern int isctype(int __c, int __mask) throw();
    extern int isascii(int __c) throw();
    extern int toascii(int __c) throw();
    extern int _toupper(int) throw();
    extern int _tolower(int) throw();
    extern int isalnum_l(int, __locale_t) throw();
    extern int isalpha_l(int, __locale_t) throw();
    extern int iscntrl_l(int, __locale_t) throw();
    extern int isdigit_l(int, __locale_t) throw();
    extern int islower_l(int, __locale_t) throw();
    extern int isgraph_l(int, __locale_t) throw();
    extern int isprint_l(int, __locale_t) throw();
    extern int ispunct_l(int, __locale_t) throw();
    extern int isspace_l(int, __locale_t) throw();
    extern int isupper_l(int, __locale_t) throw();
    extern int isxdigit_l(int, __locale_t) throw();
    extern int isblank_l(int, __locale_t) throw();
    extern int __tolower_l(int __c, __locale_t __l) throw();
    extern int tolower_l(int __c, __locale_t __l) throw();
    extern int __toupper_l(int __c, __locale_t __l) throw();
    extern int toupper_l(int __c, __locale_t __l) throw();
}
extern "C" {
    extern void *memcpy(void *restrict __dest, const void *restrict __src, size_t __n) throw();
    extern void *memmove(void *__dest, const void *__src, size_t __n) throw();
    extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n) throw();
    extern void *memset(void *__s, int __c, size_t __n) throw();
    extern int memcmp(const void *__s1, const void *__s2, size_t __n) throw();
    extern void *memchr(const void *__s, int __c, size_t __n) throw();
    extern void *rawmemchr(const void *__s, int __c) throw();
    extern void *memrchr(const void *__s, int __c, size_t __n) throw();
    extern char *strcpy(char *restrict __dest, const char *restrict __src) throw();
    extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern char *strcat(char *restrict __dest, const char *restrict __src) throw();
    extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern int strcmp(const char *__s1, const char *__s2) throw();
    extern int strncmp(const char *__s1, const char *__s2, size_t __n) throw();
    extern int strcoll(const char *__s1, const char *__s2) throw();
    extern size_t strxfrm(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern int strcoll_l(const char *__s1, const char *__s2, __locale_t __l) throw();
    extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l) throw();
    extern char *strdup(const char *__s) throw();
    extern char *strndup(const char *__string, size_t __n) throw();
    extern char *strchr(const char *__s, int __c) throw();
    extern char *strrchr(const char *__s, int __c) throw();
    extern char *strchrnul(const char *__s, int __c) throw();
    extern size_t strcspn(const char *__s, const char *__reject) throw();
    extern size_t strspn(const char *__s, const char *__accept) throw();
    extern char *strpbrk(const char *__s, const char *__accept) throw();
    extern char *strstr(const char *__haystack, const char *__needle) throw();
    extern char *strtok(char *restrict __s, const char *restrict __delim) throw();
    extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr) throw();
    extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr) throw();
    extern char *strcasestr(const char *__haystack, const char *__needle) throw();
    extern void *memmem(const void *__haystack, size_t __haystacklen, const void *__needle, size_t __needlelen) throw();
    extern void *__mempcpy(void *restrict __dest, const void *restrict __src, size_t __n) throw();
    extern void *mempcpy(void *restrict __dest, const void *restrict __src, size_t __n) throw();
    extern size_t strlen(const char *__s) throw();
    extern size_t strnlen(const char *__string, size_t __maxlen) throw();
    extern char *strerror(int __errnum) throw();
    extern char *strerror_r(int __errnum, char *__buf, size_t __buflen) throw();
    extern char *strerror_l(int __errnum, __locale_t __l) throw();
    extern void __bzero(void *__s, size_t __n) throw();
    extern void bcopy(const void *__src, void *__dest, size_t __n) throw();
    extern void bzero(void *__s, size_t __n) throw();
    extern int bcmp(const void *__s1, const void *__s2, size_t __n) throw();
    extern char *index(const char *__s, int __c) throw();
    extern char *rindex(const char *__s, int __c) throw();
    extern int ffs(int __i) throw();
    extern int ffsl(long __l) throw();
    extern int ffsll(long long __ll) throw();
    extern int strcasecmp(const char *__s1, const char *__s2) throw();
    extern int strncasecmp(const char *__s1, const char *__s2, size_t __n) throw();
    extern int strcasecmp_l(const char *__s1, const char *__s2, __locale_t __loc) throw();
    extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, __locale_t __loc) throw();
    extern char *strsep(char **restrict __stringp, const char *restrict __delim) throw();
    extern char *strsignal(int __sig) throw();
    extern char *__stpcpy(char *restrict __dest, const char *restrict __src) throw();
    extern char *stpcpy(char *restrict __dest, const char *restrict __src) throw();
    extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n) throw();
    extern int strverscmp(const char *__s1, const char *__s2) throw();
    extern char *strfry(char *__string) throw();
    extern void *memfrob(void *__s, size_t __n) throw();
    extern char *basename(const char *__filename) throw();
}
static const char _xdg_utf8_skip_data[256] = (InitListExpr 0x8da1e08 <../codeBase/fish-shell-master/xdgmimeint.cpp:45:1, line:54:1> 'const char [256]'
  (ImplicitCastExpr 0x8da2230 <line:46:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da01a8 <col:5> 'int' 1))
  (ImplicitCastExpr 0x8da2240 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da01c0 <col:7> 'int' 1))
  (ImplicitCastExpr 0x8da2268 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da01d8 <col:9> 'int' 1))
  (ImplicitCastExpr 0x8da2278 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da01f0 <col:11> 'int' 1))
  (ImplicitCastExpr 0x8da2288 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0208 <col:13> 'int' 1))
  (ImplicitCastExpr 0x8da2298 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0220 <col:15> 'int' 1))
  (ImplicitCastExpr 0x8da22a8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0258 <col:17> 'int' 1))
  (ImplicitCastExpr 0x8da22b8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0270 <col:19> 'int' 1))
  (ImplicitCastExpr 0x8da22c8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0288 <col:21> 'int' 1))
  (ImplicitCastExpr 0x8da22d8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da02a0 <col:23> 'int' 1))
  (ImplicitCastExpr 0x8da22e8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da02b8 <col:25> 'int' 1))
  (ImplicitCastExpr 0x8da22f8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da02d0 <col:27> 'int' 1))
  (ImplicitCastExpr 0x8da2308 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da02e8 <col:29> 'int' 1))
  (ImplicitCastExpr 0x8da2318 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0300 <col:31> 'int' 1))
  (ImplicitCastExpr 0x8da2328 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0318 <col:33> 'int' 1))
  (ImplicitCastExpr 0x8da2338 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0330 <col:35> 'int' 1))
  (ImplicitCastExpr 0x8da2348 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0348 <col:37> 'int' 1))
  (ImplicitCastExpr 0x8da2358 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0360 <col:39> 'int' 1))
  (ImplicitCastExpr 0x8da2368 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0378 <col:41> 'int' 1))
  (ImplicitCastExpr 0x8da2378 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0390 <col:43> 'int' 1))
  (ImplicitCastExpr 0x8da2388 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da03a8 <col:45> 'int' 1))
  (ImplicitCastExpr 0x8da2398 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da03c0 <col:47> 'int' 1))
  (ImplicitCastExpr 0x8da23a8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da03d8 <col:49> 'int' 1))
  (ImplicitCastExpr 0x8da23b8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da03f0 <col:51> 'int' 1))
  (ImplicitCastExpr 0x8da23c8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0408 <col:53> 'int' 1))
  (ImplicitCastExpr 0x8da23d8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0420 <col:55> 'int' 1))
  (ImplicitCastExpr 0x8da23e8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0438 <col:57> 'int' 1))
  (ImplicitCastExpr 0x8da23f8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0450 <col:59> 'int' 1))
  (ImplicitCastExpr 0x8da2408 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0468 <col:61> 'int' 1))
  (ImplicitCastExpr 0x8da2418 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0480 <col:63> 'int' 1))
  (ImplicitCastExpr 0x8da2428 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0498 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da2438 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da04b0 <col:67> 'int' 1))
  (ImplicitCastExpr 0x8da2448 <line:47:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da04c8 <col:5> 'int' 1))
  (ImplicitCastExpr 0x8da2458 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da04e0 <col:7> 'int' 1))
  (ImplicitCastExpr 0x8da2468 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da04f8 <col:9> 'int' 1))
  (ImplicitCastExpr 0x8da2478 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0510 <col:11> 'int' 1))
  (ImplicitCastExpr 0x8da2488 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0528 <col:13> 'int' 1))
  (ImplicitCastExpr 0x8da2498 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0540 <col:15> 'int' 1))
  (ImplicitCastExpr 0x8da24a8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0558 <col:17> 'int' 1))
  (ImplicitCastExpr 0x8da24b8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0570 <col:19> 'int' 1))
  (ImplicitCastExpr 0x8da24c8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0588 <col:21> 'int' 1))
  (ImplicitCastExpr 0x8da24d8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da05a0 <col:23> 'int' 1))
  (ImplicitCastExpr 0x8da24e8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da05b8 <col:25> 'int' 1))
  (ImplicitCastExpr 0x8da24f8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da05d0 <col:27> 'int' 1))
  (ImplicitCastExpr 0x8da2508 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da05e8 <col:29> 'int' 1))
  (ImplicitCastExpr 0x8da2518 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0600 <col:31> 'int' 1))
  (ImplicitCastExpr 0x8da2528 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0618 <col:33> 'int' 1))
  (ImplicitCastExpr 0x8da2538 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0630 <col:35> 'int' 1))
  (ImplicitCastExpr 0x8da2548 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0648 <col:37> 'int' 1))
  (ImplicitCastExpr 0x8da2558 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0660 <col:39> 'int' 1))
  (ImplicitCastExpr 0x8da2568 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0678 <col:41> 'int' 1))
  (ImplicitCastExpr 0x8da2578 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0690 <col:43> 'int' 1))
  (ImplicitCastExpr 0x8da2588 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da06a8 <col:45> 'int' 1))
  (ImplicitCastExpr 0x8da2598 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da06c0 <col:47> 'int' 1))
  (ImplicitCastExpr 0x8da25a8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da06d8 <col:49> 'int' 1))
  (ImplicitCastExpr 0x8da25b8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da06f0 <col:51> 'int' 1))
  (ImplicitCastExpr 0x8da25c8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0708 <col:53> 'int' 1))
  (ImplicitCastExpr 0x8da25d8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0720 <col:55> 'int' 1))
  (ImplicitCastExpr 0x8da25e8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0738 <col:57> 'int' 1))
  (ImplicitCastExpr 0x8da25f8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0750 <col:59> 'int' 1))
  (ImplicitCastExpr 0x8da2608 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0768 <col:61> 'int' 1))
  (ImplicitCastExpr 0x8da2618 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0780 <col:63> 'int' 1))
  (ImplicitCastExpr 0x8da2628 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0798 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da2638 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da07b0 <col:67> 'int' 1))
  (ImplicitCastExpr 0x8da2648 <line:48:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da07c8 <col:5> 'int' 1))
  (ImplicitCastExpr 0x8da2658 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da07e0 <col:7> 'int' 1))
  (ImplicitCastExpr 0x8da2668 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da07f8 <col:9> 'int' 1))
  (ImplicitCastExpr 0x8da2678 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0810 <col:11> 'int' 1))
  (ImplicitCastExpr 0x8da2688 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0828 <col:13> 'int' 1))
  (ImplicitCastExpr 0x8da2698 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0840 <col:15> 'int' 1))
  (ImplicitCastExpr 0x8da26a8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0858 <col:17> 'int' 1))
  (ImplicitCastExpr 0x8da26b8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0870 <col:19> 'int' 1))
  (ImplicitCastExpr 0x8da26c8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0888 <col:21> 'int' 1))
  (ImplicitCastExpr 0x8da26d8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da08a0 <col:23> 'int' 1))
  (ImplicitCastExpr 0x8da26e8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da08b8 <col:25> 'int' 1))
  (ImplicitCastExpr 0x8da26f8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da08d0 <col:27> 'int' 1))
  (ImplicitCastExpr 0x8da2708 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da08e8 <col:29> 'int' 1))
  (ImplicitCastExpr 0x8da2718 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0900 <col:31> 'int' 1))
  (ImplicitCastExpr 0x8da2728 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0918 <col:33> 'int' 1))
  (ImplicitCastExpr 0x8da2738 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0930 <col:35> 'int' 1))
  (ImplicitCastExpr 0x8da2748 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0948 <col:37> 'int' 1))
  (ImplicitCastExpr 0x8da2758 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0960 <col:39> 'int' 1))
  (ImplicitCastExpr 0x8da2768 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0978 <col:41> 'int' 1))
  (ImplicitCastExpr 0x8da2778 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0990 <col:43> 'int' 1))
  (ImplicitCastExpr 0x8da2788 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da09a8 <col:45> 'int' 1))
  (ImplicitCastExpr 0x8da2798 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da09c0 <col:47> 'int' 1))
  (ImplicitCastExpr 0x8da27a8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da09d8 <col:49> 'int' 1))
  (ImplicitCastExpr 0x8da27b8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da09f0 <col:51> 'int' 1))
  (ImplicitCastExpr 0x8da27c8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a08 <col:53> 'int' 1))
  (ImplicitCastExpr 0x8da27d8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a20 <col:55> 'int' 1))
  (ImplicitCastExpr 0x8da27e8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a38 <col:57> 'int' 1))
  (ImplicitCastExpr 0x8da27f8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a50 <col:59> 'int' 1))
  (ImplicitCastExpr 0x8da2808 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a68 <col:61> 'int' 1))
  (ImplicitCastExpr 0x8da2818 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a80 <col:63> 'int' 1))
  (ImplicitCastExpr 0x8da2828 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0a98 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da2838 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ab0 <col:67> 'int' 1))
  (ImplicitCastExpr 0x8da2848 <line:49:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ac8 <col:5> 'int' 1))
  (ImplicitCastExpr 0x8da2858 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ae0 <col:7> 'int' 1))
  (ImplicitCastExpr 0x8da2868 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0af8 <col:9> 'int' 1))
  (ImplicitCastExpr 0x8da2878 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0b10 <col:11> 'int' 1))
  (ImplicitCastExpr 0x8da2888 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0b28 <col:13> 'int' 1))
  (ImplicitCastExpr 0x8da2898 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0b40 <col:15> 'int' 1))
  (ImplicitCastExpr 0x8da28a8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0b58 <col:17> 'int' 1))
  (ImplicitCastExpr 0x8da28b8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0b70 <col:19> 'int' 1))
  (ImplicitCastExpr 0x8da28c8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0b88 <col:21> 'int' 1))
  (ImplicitCastExpr 0x8da28d8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ba0 <col:23> 'int' 1))
  (ImplicitCastExpr 0x8da28e8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0bb8 <col:25> 'int' 1))
  (ImplicitCastExpr 0x8da28f8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0bd0 <col:27> 'int' 1))
  (ImplicitCastExpr 0x8da2908 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0be8 <col:29> 'int' 1))
  (ImplicitCastExpr 0x8da2918 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c00 <col:31> 'int' 1))
  (ImplicitCastExpr 0x8da2928 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c18 <col:33> 'int' 1))
  (ImplicitCastExpr 0x8da2938 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c30 <col:35> 'int' 1))
  (ImplicitCastExpr 0x8da2948 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c48 <col:37> 'int' 1))
  (ImplicitCastExpr 0x8da2958 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c60 <col:39> 'int' 1))
  (ImplicitCastExpr 0x8da2968 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c78 <col:41> 'int' 1))
  (ImplicitCastExpr 0x8da2978 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0c90 <col:43> 'int' 1))
  (ImplicitCastExpr 0x8da2988 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ca8 <col:45> 'int' 1))
  (ImplicitCastExpr 0x8da2998 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0cc0 <col:47> 'int' 1))
  (ImplicitCastExpr 0x8da29a8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0cd8 <col:49> 'int' 1))
  (ImplicitCastExpr 0x8da29b8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0cf0 <col:51> 'int' 1))
  (ImplicitCastExpr 0x8da29c8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d08 <col:53> 'int' 1))
  (ImplicitCastExpr 0x8da29d8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d20 <col:55> 'int' 1))
  (ImplicitCastExpr 0x8da29e8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d38 <col:57> 'int' 1))
  (ImplicitCastExpr 0x8da29f8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d50 <col:59> 'int' 1))
  (ImplicitCastExpr 0x8da2a08 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d68 <col:61> 'int' 1))
  (ImplicitCastExpr 0x8da2a18 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d80 <col:63> 'int' 1))
  (ImplicitCastExpr 0x8da2a28 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0d98 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da2a38 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0db0 <col:67> 'int' 1))
  (ImplicitCastExpr 0x8da2a48 <line:50:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0dc8 <col:5> 'int' 1))
  (ImplicitCastExpr 0x8da2a58 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0de0 <col:7> 'int' 1))
  (ImplicitCastExpr 0x8da2a68 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0df8 <col:9> 'int' 1))
  (ImplicitCastExpr 0x8da2a78 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0e10 <col:11> 'int' 1))
  (ImplicitCastExpr 0x8da2a88 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0e28 <col:13> 'int' 1))
  (ImplicitCastExpr 0x8da2a98 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0e40 <col:15> 'int' 1))
  (ImplicitCastExpr 0x8da2aa8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0e58 <col:17> 'int' 1))
  (ImplicitCastExpr 0x8da2ab8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0e70 <col:19> 'int' 1))
  (ImplicitCastExpr 0x8da2ac8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0e88 <col:21> 'int' 1))
  (ImplicitCastExpr 0x8da2ad8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ea0 <col:23> 'int' 1))
  (ImplicitCastExpr 0x8da2ae8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0eb8 <col:25> 'int' 1))
  (ImplicitCastExpr 0x8da2af8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ed0 <col:27> 'int' 1))
  (ImplicitCastExpr 0x8da2b08 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ee8 <col:29> 'int' 1))
  (ImplicitCastExpr 0x8da2b18 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f00 <col:31> 'int' 1))
  (ImplicitCastExpr 0x8da2b28 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f18 <col:33> 'int' 1))
  (ImplicitCastExpr 0x8da2b38 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f30 <col:35> 'int' 1))
  (ImplicitCastExpr 0x8da2b48 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f48 <col:37> 'int' 1))
  (ImplicitCastExpr 0x8da2b58 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f60 <col:39> 'int' 1))
  (ImplicitCastExpr 0x8da2b68 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f78 <col:41> 'int' 1))
  (ImplicitCastExpr 0x8da2b78 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0f90 <col:43> 'int' 1))
  (ImplicitCastExpr 0x8da2b88 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0fa8 <col:45> 'int' 1))
  (ImplicitCastExpr 0x8da2b98 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0fc0 <col:47> 'int' 1))
  (ImplicitCastExpr 0x8da2ba8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0fd8 <col:49> 'int' 1))
  (ImplicitCastExpr 0x8da2bb8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da0ff0 <col:51> 'int' 1))
  (ImplicitCastExpr 0x8da2bc8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1008 <col:53> 'int' 1))
  (ImplicitCastExpr 0x8da2bd8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1020 <col:55> 'int' 1))
  (ImplicitCastExpr 0x8da2be8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1038 <col:57> 'int' 1))
  (ImplicitCastExpr 0x8da2bf8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1050 <col:59> 'int' 1))
  (ImplicitCastExpr 0x8da2c08 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1068 <col:61> 'int' 1))
  (ImplicitCastExpr 0x8da2c18 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1080 <col:63> 'int' 1))
  (ImplicitCastExpr 0x8da2c28 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1098 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da2c38 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da10b0 <col:67> 'int' 1))
  (ImplicitCastExpr 0x8da2c48 <line:51:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da10c8 <col:5> 'int' 1))
  (ImplicitCastExpr 0x8da2c58 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da10e0 <col:7> 'int' 1))
  (ImplicitCastExpr 0x8da2c68 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da10f8 <col:9> 'int' 1))
  (ImplicitCastExpr 0x8da2c78 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1110 <col:11> 'int' 1))
  (ImplicitCastExpr 0x8da2c88 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1128 <col:13> 'int' 1))
  (ImplicitCastExpr 0x8da2c98 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1140 <col:15> 'int' 1))
  (ImplicitCastExpr 0x8da2ca8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1158 <col:17> 'int' 1))
  (ImplicitCastExpr 0x8da2cb8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1170 <col:19> 'int' 1))
  (ImplicitCastExpr 0x8da2cc8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1188 <col:21> 'int' 1))
  (ImplicitCastExpr 0x8da2cd8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da11a0 <col:23> 'int' 1))
  (ImplicitCastExpr 0x8da2ce8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da11b8 <col:25> 'int' 1))
  (ImplicitCastExpr 0x8da2cf8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da11d0 <col:27> 'int' 1))
  (ImplicitCastExpr 0x8da2d08 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da11e8 <col:29> 'int' 1))
  (ImplicitCastExpr 0x8da2d18 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1200 <col:31> 'int' 1))
  (ImplicitCastExpr 0x8da2d28 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1218 <col:33> 'int' 1))
  (ImplicitCastExpr 0x8da2d38 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1230 <col:35> 'int' 1))
  (ImplicitCastExpr 0x8da2d48 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1260 <col:37> 'int' 1))
  (ImplicitCastExpr 0x8da2d58 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1278 <col:39> 'int' 1))
  (ImplicitCastExpr 0x8da2d68 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1290 <col:41> 'int' 1))
  (ImplicitCastExpr 0x8da2d78 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da12a8 <col:43> 'int' 1))
  (ImplicitCastExpr 0x8da2d88 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da12c0 <col:45> 'int' 1))
  (ImplicitCastExpr 0x8da2d98 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da12d8 <col:47> 'int' 1))
  (ImplicitCastExpr 0x8da2da8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da12f0 <col:49> 'int' 1))
  (ImplicitCastExpr 0x8da2db8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1308 <col:51> 'int' 1))
  (ImplicitCastExpr 0x8da2dc8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1320 <col:53> 'int' 1))
  (ImplicitCastExpr 0x8da2dd8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1338 <col:55> 'int' 1))
  (ImplicitCastExpr 0x8da2de8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1350 <col:57> 'int' 1))
  (ImplicitCastExpr 0x8da2df8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1368 <col:59> 'int' 1))
  (ImplicitCastExpr 0x8da2e08 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1380 <col:61> 'int' 1))
  (ImplicitCastExpr 0x8da2e18 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1398 <col:63> 'int' 1))
  (ImplicitCastExpr 0x8da2e28 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da13b0 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da2e38 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da13c8 <col:67> 'int' 1))
  (ImplicitCastExpr 0x8da2e48 <line:52:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da13e0 <col:5> 'int' 2))
  (ImplicitCastExpr 0x8da2e58 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da13f8 <col:7> 'int' 2))
  (ImplicitCastExpr 0x8da2e68 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1410 <col:9> 'int' 2))
  (ImplicitCastExpr 0x8da2e78 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1428 <col:11> 'int' 2))
  (ImplicitCastExpr 0x8da2e88 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1440 <col:13> 'int' 2))
  (ImplicitCastExpr 0x8da2e98 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1458 <col:15> 'int' 2))
  (ImplicitCastExpr 0x8da2ea8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1470 <col:17> 'int' 2))
  (ImplicitCastExpr 0x8da2eb8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1488 <col:19> 'int' 2))
  (ImplicitCastExpr 0x8da2ec8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da14a0 <col:21> 'int' 2))
  (ImplicitCastExpr 0x8da2ed8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da14b8 <col:23> 'int' 2))
  (ImplicitCastExpr 0x8da2ee8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da14d0 <col:25> 'int' 2))
  (ImplicitCastExpr 0x8da2ef8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da14e8 <col:27> 'int' 2))
  (ImplicitCastExpr 0x8da2f08 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1500 <col:29> 'int' 2))
  (ImplicitCastExpr 0x8da2f18 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1518 <col:31> 'int' 2))
  (ImplicitCastExpr 0x8da2f28 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1530 <col:33> 'int' 2))
  (ImplicitCastExpr 0x8da2f38 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1548 <col:35> 'int' 2))
  (ImplicitCastExpr 0x8da2f48 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1560 <col:37> 'int' 2))
  (ImplicitCastExpr 0x8da2f58 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1578 <col:39> 'int' 2))
  (ImplicitCastExpr 0x8da2f68 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1590 <col:41> 'int' 2))
  (ImplicitCastExpr 0x8da2f78 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da15a8 <col:43> 'int' 2))
  (ImplicitCastExpr 0x8da2f88 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da15c0 <col:45> 'int' 2))
  (ImplicitCastExpr 0x8da2f98 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da15d8 <col:47> 'int' 2))
  (ImplicitCastExpr 0x8da2fa8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da15f0 <col:49> 'int' 2))
  (ImplicitCastExpr 0x8da2fb8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1608 <col:51> 'int' 2))
  (ImplicitCastExpr 0x8da2fc8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1620 <col:53> 'int' 2))
  (ImplicitCastExpr 0x8da2fd8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1638 <col:55> 'int' 2))
  (ImplicitCastExpr 0x8da2fe8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1650 <col:57> 'int' 2))
  (ImplicitCastExpr 0x8da2ff8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1668 <col:59> 'int' 2))
  (ImplicitCastExpr 0x8da3008 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1680 <col:61> 'int' 2))
  (ImplicitCastExpr 0x8da3018 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1698 <col:63> 'int' 2))
  (ImplicitCastExpr 0x8da3028 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da16b0 <col:65> 'int' 2))
  (ImplicitCastExpr 0x8da3038 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da16c8 <col:67> 'int' 2))
  (ImplicitCastExpr 0x8da3048 <line:53:5> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da16e0 <col:5> 'int' 3))
  (ImplicitCastExpr 0x8da3058 <col:7> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da16f8 <col:7> 'int' 3))
  (ImplicitCastExpr 0x8da3068 <col:9> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1710 <col:9> 'int' 3))
  (ImplicitCastExpr 0x8da3078 <col:11> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1728 <col:11> 'int' 3))
  (ImplicitCastExpr 0x8da3088 <col:13> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1740 <col:13> 'int' 3))
  (ImplicitCastExpr 0x8da3098 <col:15> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1758 <col:15> 'int' 3))
  (ImplicitCastExpr 0x8da30a8 <col:17> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1770 <col:17> 'int' 3))
  (ImplicitCastExpr 0x8da30b8 <col:19> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1788 <col:19> 'int' 3))
  (ImplicitCastExpr 0x8da30c8 <col:21> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da17a0 <col:21> 'int' 3))
  (ImplicitCastExpr 0x8da30d8 <col:23> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da17b8 <col:23> 'int' 3))
  (ImplicitCastExpr 0x8da30e8 <col:25> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da17d0 <col:25> 'int' 3))
  (ImplicitCastExpr 0x8da30f8 <col:27> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da17e8 <col:27> 'int' 3))
  (ImplicitCastExpr 0x8da3108 <col:29> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1800 <col:29> 'int' 3))
  (ImplicitCastExpr 0x8da3118 <col:31> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1818 <col:31> 'int' 3))
  (ImplicitCastExpr 0x8da3128 <col:33> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1830 <col:33> 'int' 3))
  (ImplicitCastExpr 0x8da3138 <col:35> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1848 <col:35> 'int' 3))
  (ImplicitCastExpr 0x8da3148 <col:37> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1860 <col:37> 'int' 4))
  (ImplicitCastExpr 0x8da3158 <col:39> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1878 <col:39> 'int' 4))
  (ImplicitCastExpr 0x8da3168 <col:41> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1890 <col:41> 'int' 4))
  (ImplicitCastExpr 0x8da3178 <col:43> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da18a8 <col:43> 'int' 4))
  (ImplicitCastExpr 0x8da3188 <col:45> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da18c0 <col:45> 'int' 4))
  (ImplicitCastExpr 0x8da3198 <col:47> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da18d8 <col:47> 'int' 4))
  (ImplicitCastExpr 0x8da31a8 <col:49> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da18f0 <col:49> 'int' 4))
  (ImplicitCastExpr 0x8da31b8 <col:51> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1908 <col:51> 'int' 4))
  (ImplicitCastExpr 0x8da31c8 <col:53> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1920 <col:53> 'int' 5))
  (ImplicitCastExpr 0x8da31d8 <col:55> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1938 <col:55> 'int' 5))
  (ImplicitCastExpr 0x8da31e8 <col:57> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1950 <col:57> 'int' 5))
  (ImplicitCastExpr 0x8da31f8 <col:59> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1968 <col:59> 'int' 5))
  (ImplicitCastExpr 0x8da3208 <col:61> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1980 <col:61> 'int' 6))
  (ImplicitCastExpr 0x8da3218 <col:63> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da1998 <col:63> 'int' 6))
  (ImplicitCastExpr 0x8da3228 <col:65> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da19b0 <col:65> 'int' 1))
  (ImplicitCastExpr 0x8da3238 <col:67> 'const char' <IntegralCast>
    (IntegerLiteral 0x8da19c8 <col:67> 'int' 1)))
;
const char *const _xdg_utf8_skip = (ImplicitCastExpr 0x8da32c0 <../codeBase/fish-shell-master/xdgmimeint.cpp:56:37> 'const char *' <ArrayToPointerDecay>
  (DeclRefExpr 0x8da32a4 <col:37> 'const char [256]' lvalue Var 0x8da0170 '_xdg_utf8_skip_data' 'const char [256]'))
;
xdg_unichar_t _xdg_utf8_to_ucs4(const char *source) (CompoundStmt 0x8da56c8 <../codeBase/fish-shell-master/xdgmimeint.cpp:63:1, line:119:1>
  (DeclStmt 0x8da33d8 <line:64:5, col:24>
    0x8da33a0 "xdg_unichar_t ucs32")
  (IfStmt 0x8da5670 <line:65:5, line:117:5>
    <<<NULL>>>
    (UnaryOperator 0x8da34a0 <line:65:9, col:25> '_Bool' prefix '!'
      (ImplicitCastExpr 0x8da3490 <col:10, col:25> '_Bool' <IntegralToBoolean>
        (ParenExpr 0x8da3478 <col:10, col:25> 'int'
          (BinaryOperator 0x8da3460 <col:11, col:21> 'int' '&'
            (ImplicitCastExpr 0x8da3450 <col:11, col:12> 'int' <IntegralCast>
              (ImplicitCastExpr 0x8da3440 <col:11, col:12> 'char' <LValueToRValue>
                (UnaryOperator 0x8da3410 <col:11, col:12> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0x8da3400 <col:12> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0x8da33e8 <col:12> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
            (IntegerLiteral 0x8da3428 <col:21> 'int' 128)))))
    (CompoundStmt 0x8da3548 <line:66:5, line:68:5>
      (BinaryOperator 0x8da3530 <line:67:9, col:18> 'xdg_unichar_t':'unsigned int' lvalue '='
        (DeclRefExpr 0x8da34b4 <col:9> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da33a0 'ucs32' 'xdg_unichar_t':'unsigned int')
        (ImplicitCastExpr 0x8da3520 <col:17, col:18> 'xdg_unichar_t':'unsigned int' <IntegralCast>
          (ImplicitCastExpr 0x8da3510 <col:17, col:18> 'char' <LValueToRValue>
            (UnaryOperator 0x8da34f8 <col:17, col:18> 'const char' lvalue prefix '*'
              (ImplicitCastExpr 0x8da34e8 <col:18> 'const char *' <LValueToRValue>
                (DeclRefExpr 0x8da34cc <col:18> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))))
    (CompoundStmt 0x8da5650 <line:70:5, line:117:5>
      (DeclStmt 0x8da35c0 <line:71:9, col:27>
        0x8da3570 "int bytelength =
          (IntegerLiteral 0x8da35a8 <col:26> 'int' 0)")
      (DeclStmt 0x8da3618 <line:72:9, col:29>
        0x8da35e0 "xdg_unichar_t result")
      (IfStmt 0x8da5630 <line:73:9, line:116:9>
        <<<NULL>>>
        (UnaryOperator 0x8da36e0 <line:73:13, col:29> '_Bool' prefix '!'
          (ImplicitCastExpr 0x8da36d0 <col:14, col:29> '_Bool' <IntegralToBoolean>
            (ParenExpr 0x8da36b8 <col:14, col:29> 'int'
              (BinaryOperator 0x8da36a0 <col:15, col:25> 'int' '&'
                (ImplicitCastExpr 0x8da3690 <col:15, col:16> 'int' <IntegralCast>
                  (ImplicitCastExpr 0x8da3680 <col:15, col:16> 'char' <LValueToRValue>
                    (UnaryOperator 0x8da3650 <col:15, col:16> 'const char' lvalue prefix '*'
                      (ImplicitCastExpr 0x8da3640 <col:16> 'const char *' <LValueToRValue>
                        (DeclRefExpr 0x8da3628 <col:16> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                (IntegerLiteral 0x8da3668 <col:25> 'int' 64)))))
        (CompoundStmt 0x8da3788 <line:74:9, line:76:9>
          (BinaryOperator 0x8da3770 <line:75:13, col:22> 'xdg_unichar_t':'unsigned int' lvalue '='
            (DeclRefExpr 0x8da36f4 <col:13> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da33a0 'ucs32' 'xdg_unichar_t':'unsigned int')
            (ImplicitCastExpr 0x8da3760 <col:21, col:22> 'xdg_unichar_t':'unsigned int' <IntegralCast>
              (ImplicitCastExpr 0x8da3750 <col:21, col:22> 'char' <LValueToRValue>
                (UnaryOperator 0x8da3738 <col:21, col:22> 'const char' lvalue prefix '*'
                  (ImplicitCastExpr 0x8da3728 <col:22> 'const char *' <LValueToRValue>
                    (DeclRefExpr 0x8da370c <col:22> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))))
        (CompoundStmt 0x8da5610 <line:78:9, line:116:9>
          (IfStmt 0x8da5360 <line:79:13, line:108:13>
            <<<NULL>>>
            (UnaryOperator 0x8da3858 <line:79:17, col:33> '_Bool' prefix '!'
              (ImplicitCastExpr 0x8da3848 <col:18, col:33> '_Bool' <IntegralToBoolean>
                (ParenExpr 0x8da3830 <col:18, col:33> 'int'
                  (BinaryOperator 0x8da3818 <col:19, col:29> 'int' '&'
                    (ImplicitCastExpr 0x8da3808 <col:19, col:20> 'int' <IntegralCast>
                      (ImplicitCastExpr 0x8da37f8 <col:19, col:20> 'char' <LValueToRValue>
                        (UnaryOperator 0x8da37c8 <col:19, col:20> 'const char' lvalue prefix '*'
                          (ImplicitCastExpr 0x8da37b8 <col:20> 'const char *' <LValueToRValue>
                            (DeclRefExpr 0x8da379c <col:20> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                    (IntegerLiteral 0x8da37e0 <col:29> 'int' 32)))))
            (CompoundStmt 0x8da3990 <line:80:13, line:83:13>
              (BinaryOperator 0x8da3930 <line:81:17, col:38> 'xdg_unichar_t':'unsigned int' lvalue '='
                (DeclRefExpr 0x8da386c <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                (ImplicitCastExpr 0x8da3920 <col:26, col:38> 'xdg_unichar_t':'unsigned int' <IntegralCast>
                  (BinaryOperator 0x8da3908 <col:26, col:38> 'int' '&'
                    (ImplicitCastExpr 0x8da38f8 <col:26, col:33> 'int' <IntegralCast>
                      (ImplicitCastExpr 0x8da38e8 <col:26, col:33> 'char' <LValueToRValue>
                        (UnaryOperator 0x8da38b8 <col:26, col:33> 'const char' lvalue prefix '*'
                          (UnaryOperator 0x8da38a0 <col:27, col:33> 'const char *' postfix '++'
                            (DeclRefExpr 0x8da3884 <col:27> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                    (IntegerLiteral 0x8da38d0 <col:38> 'int' 31))))
              (BinaryOperator 0x8da3978 <line:82:17, col:30> 'int' lvalue '='
                (DeclRefExpr 0x8da3948 <col:17> 'int' lvalue Var 0x8da3570 'bytelength' 'int')
                (IntegerLiteral 0x8da3960 <col:30> 'int' 2)))
            (IfStmt 0x8da5340 <line:84:18, line:108:13>
              <<<NULL>>>
              (UnaryOperator 0x8da3a60 <line:84:22, col:38> '_Bool' prefix '!'
                (ImplicitCastExpr 0x8da3a50 <col:23, col:38> '_Bool' <IntegralToBoolean>
                  (ParenExpr 0x8da3a38 <col:23, col:38> 'int'
                    (BinaryOperator 0x8da3a20 <col:24, col:34> 'int' '&'
                      (ImplicitCastExpr 0x8da3a10 <col:24, col:25> 'int' <IntegralCast>
                        (ImplicitCastExpr 0x8da3a00 <col:24, col:25> 'char' <LValueToRValue>
                          (UnaryOperator 0x8da39d0 <col:24, col:25> 'const char' lvalue prefix '*'
                            (ImplicitCastExpr 0x8da39c0 <col:25> 'const char *' <LValueToRValue>
                              (DeclRefExpr 0x8da39a8 <col:25> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                      (IntegerLiteral 0x8da39e8 <col:34> 'int' 16)))))
              (CompoundStmt 0x8da3b98 <line:85:13, line:88:13>
                (BinaryOperator 0x8da3b38 <line:86:17, col:38> 'xdg_unichar_t':'unsigned int' lvalue '='
                  (DeclRefExpr 0x8da3a74 <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                  (ImplicitCastExpr 0x8da3b28 <col:26, col:38> 'xdg_unichar_t':'unsigned int' <IntegralCast>
                    (BinaryOperator 0x8da3b10 <col:26, col:38> 'int' '&'
                      (ImplicitCastExpr 0x8da3b00 <col:26, col:33> 'int' <IntegralCast>
                        (ImplicitCastExpr 0x8da3af0 <col:26, col:33> 'char' <LValueToRValue>
                          (UnaryOperator 0x8da3ac0 <col:26, col:33> 'const char' lvalue prefix '*'
                            (UnaryOperator 0x8da3aa8 <col:27, col:33> 'const char *' postfix '++'
                              (DeclRefExpr 0x8da3a8c <col:27> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                      (IntegerLiteral 0x8da3ad8 <col:38> 'int' 15))))
                (BinaryOperator 0x8da3b80 <line:87:17, col:30> 'int' lvalue '='
                  (DeclRefExpr 0x8da3b50 <col:17> 'int' lvalue Var 0x8da3570 'bytelength' 'int')
                  (IntegerLiteral 0x8da3b68 <col:30> 'int' 3)))
              (IfStmt 0x8da5320 <line:89:18, line:108:13>
                <<<NULL>>>
                (UnaryOperator 0x8da3c68 <line:89:22, col:38> '_Bool' prefix '!'
                  (ImplicitCastExpr 0x8da3c58 <col:23, col:38> '_Bool' <IntegralToBoolean>
                    (ParenExpr 0x8da3c40 <col:23, col:38> 'int'
                      (BinaryOperator 0x8da3c28 <col:24, col:34> 'int' '&'
                        (ImplicitCastExpr 0x8da3c18 <col:24, col:25> 'int' <IntegralCast>
                          (ImplicitCastExpr 0x8da3c08 <col:24, col:25> 'char' <LValueToRValue>
                            (UnaryOperator 0x8da3bd8 <col:24, col:25> 'const char' lvalue prefix '*'
                              (ImplicitCastExpr 0x8da3bc8 <col:25> 'const char *' <LValueToRValue>
                                (DeclRefExpr 0x8da3bb0 <col:25> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                        (IntegerLiteral 0x8da3bf0 <col:34> 'int' 8)))))
                (CompoundStmt 0x8da3da0 <line:90:13, line:93:13>
                  (BinaryOperator 0x8da3d40 <line:91:17, col:38> 'xdg_unichar_t':'unsigned int' lvalue '='
                    (DeclRefExpr 0x8da3c7c <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                    (ImplicitCastExpr 0x8da3d30 <col:26, col:38> 'xdg_unichar_t':'unsigned int' <IntegralCast>
                      (BinaryOperator 0x8da3d18 <col:26, col:38> 'int' '&'
                        (ImplicitCastExpr 0x8da3d08 <col:26, col:33> 'int' <IntegralCast>
                          (ImplicitCastExpr 0x8da3cf8 <col:26, col:33> 'char' <LValueToRValue>
                            (UnaryOperator 0x8da3cc8 <col:26, col:33> 'const char' lvalue prefix '*'
                              (UnaryOperator 0x8da3cb0 <col:27, col:33> 'const char *' postfix '++'
                                (DeclRefExpr 0x8da3c94 <col:27> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                        (IntegerLiteral 0x8da3ce0 <col:38> 'int' 7))))
                  (BinaryOperator 0x8da3d88 <line:92:17, col:30> 'int' lvalue '='
                    (DeclRefExpr 0x8da3d58 <col:17> 'int' lvalue Var 0x8da3570 'bytelength' 'int')
                    (IntegerLiteral 0x8da3d70 <col:30> 'int' 4)))
                (IfStmt 0x8da5300 <line:94:18, line:108:13>
                  <<<NULL>>>
                  (UnaryOperator 0x8da3e70 <line:94:22, col:38> '_Bool' prefix '!'
                    (ImplicitCastExpr 0x8da3e60 <col:23, col:38> '_Bool' <IntegralToBoolean>
                      (ParenExpr 0x8da3e48 <col:23, col:38> 'int'
                        (BinaryOperator 0x8da3e30 <col:24, col:34> 'int' '&'
                          (ImplicitCastExpr 0x8da3e20 <col:24, col:25> 'int' <IntegralCast>
                            (ImplicitCastExpr 0x8da3e10 <col:24, col:25> 'char' <LValueToRValue>
                              (UnaryOperator 0x8da3de0 <col:24, col:25> 'const char' lvalue prefix '*'
                                (ImplicitCastExpr 0x8da3dd0 <col:25> 'const char *' <LValueToRValue>
                                  (DeclRefExpr 0x8da3db8 <col:25> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                          (IntegerLiteral 0x8da3df8 <col:34> 'int' 4)))))
                  (CompoundStmt 0x8da3fa8 <line:95:13, line:98:13>
                    (BinaryOperator 0x8da3f48 <line:96:17, col:38> 'xdg_unichar_t':'unsigned int' lvalue '='
                      (DeclRefExpr 0x8da3e84 <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                      (ImplicitCastExpr 0x8da3f38 <col:26, col:38> 'xdg_unichar_t':'unsigned int' <IntegralCast>
                        (BinaryOperator 0x8da3f20 <col:26, col:38> 'int' '&'
                          (ImplicitCastExpr 0x8da3f10 <col:26, col:33> 'int' <IntegralCast>
                            (ImplicitCastExpr 0x8da3f00 <col:26, col:33> 'char' <LValueToRValue>
                              (UnaryOperator 0x8da3ed0 <col:26, col:33> 'const char' lvalue prefix '*'
                                (UnaryOperator 0x8da3eb8 <col:27, col:33> 'const char *' postfix '++'
                                  (DeclRefExpr 0x8da3e9c <col:27> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                          (IntegerLiteral 0x8da3ee8 <col:38> 'int' 3))))
                    (BinaryOperator 0x8da3f90 <line:97:17, col:30> 'int' lvalue '='
                      (DeclRefExpr 0x8da3f60 <col:17> 'int' lvalue Var 0x8da3570 'bytelength' 'int')
                      (IntegerLiteral 0x8da3f78 <col:30> 'int' 5)))
                  (IfStmt 0x8da52e0 <line:99:18, line:108:13>
                    <<<NULL>>>
                    (UnaryOperator 0x8da4078 <line:99:22, col:38> '_Bool' prefix '!'
                      (ImplicitCastExpr 0x8da4068 <col:23, col:38> '_Bool' <IntegralToBoolean>
                        (ParenExpr 0x8da4050 <col:23, col:38> 'int'
                          (BinaryOperator 0x8da4038 <col:24, col:34> 'int' '&'
                            (ImplicitCastExpr 0x8da4028 <col:24, col:25> 'int' <IntegralCast>
                              (ImplicitCastExpr 0x8da4018 <col:24, col:25> 'char' <LValueToRValue>
                                (UnaryOperator 0x8da3fe8 <col:24, col:25> 'const char' lvalue prefix '*'
                                  (ImplicitCastExpr 0x8da3fd8 <col:25> 'const char *' <LValueToRValue>
                                    (DeclRefExpr 0x8da3fc0 <col:25> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                            (IntegerLiteral 0x8da4000 <col:34> 'int' 2)))))
                    (CompoundStmt 0x8da41b0 <line:100:13, line:103:13>
                      (BinaryOperator 0x8da4150 <line:101:17, col:38> 'xdg_unichar_t':'unsigned int' lvalue '='
                        (DeclRefExpr 0x8da408c <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                        (ImplicitCastExpr 0x8da4140 <col:26, col:38> 'xdg_unichar_t':'unsigned int' <IntegralCast>
                          (BinaryOperator 0x8da4128 <col:26, col:38> 'int' '&'
                            (ImplicitCastExpr 0x8da4118 <col:26, col:33> 'int' <IntegralCast>
                              (ImplicitCastExpr 0x8da4108 <col:26, col:33> 'char' <LValueToRValue>
                                (UnaryOperator 0x8da40d8 <col:26, col:33> 'const char' lvalue prefix '*'
                                  (UnaryOperator 0x8da40c0 <col:27, col:33> 'const char *' postfix '++'
                                    (DeclRefExpr 0x8da40a4 <col:27> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                            (IntegerLiteral 0x8da40f0 <col:38> 'int' 1))))
                      (BinaryOperator 0x8da4198 <line:102:17, col:30> 'int' lvalue '='
                        (DeclRefExpr 0x8da4168 <col:17> 'int' lvalue Var 0x8da3570 'bytelength' 'int')
                        (IntegerLiteral 0x8da4180 <col:30> 'int' 6)))
                    (CompoundStmt 0x8da52c8 <line:105:13, line:108:13>
                      (BinaryOperator 0x8da4248 <line:106:17, col:33> 'xdg_unichar_t':'unsigned int' lvalue '='
                        (DeclRefExpr 0x8da41c8 <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                        (ImplicitCastExpr 0x8da4238 <col:26, col:33> 'xdg_unichar_t':'unsigned int' <IntegralCast>
                          (ImplicitCastExpr 0x8da4228 <col:26, col:33> 'char' <LValueToRValue>
                            (UnaryOperator 0x8da4210 <col:26, col:33> 'const char' lvalue prefix '*'
                              (UnaryOperator 0x8da41f8 <col:27, col:33> 'const char *' postfix '++'
                                (DeclRefExpr 0x8da41e0 <col:27> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *'))))))
                      (BinaryOperator 0x8da52b0 <line:107:17, col:30> 'int' lvalue '='
                        (DeclRefExpr 0x8da5280 <col:17> 'int' lvalue Var 0x8da3570 'bytelength' 'int')
                        (IntegerLiteral 0x8da5298 <col:30> 'int' 1))))))))
          (ForStmt 0x8da5590 <line:110:13, line:114:13>
            (UnaryOperator 0x8da5398 <line:110:18, col:29> 'int' postfix '--'
              (DeclRefExpr 0x8da537c <col:18> 'int' lvalue Var 0x8da3570 'bytelength' 'int'))
            <<<NULL>>>
            (BinaryOperator 0x8da53f0 <col:33, col:46> '_Bool' '>'
              (ImplicitCastExpr 0x8da53e0 <col:33> 'int' <LValueToRValue>
                (DeclRefExpr 0x8da53ac <col:33> 'int' lvalue Var 0x8da3570 'bytelength' 'int'))
              (IntegerLiteral 0x8da53c8 <col:46> 'int' 0))
            (UnaryOperator 0x8da5420 <col:49, col:60> 'int' postfix '--'
              (DeclRefExpr 0x8da5408 <col:49> 'int' lvalue Var 0x8da3570 'bytelength' 'int'))
            (CompoundStmt 0x8da5578 <line:111:13, line:114:13>
              (CompoundAssignOperator 0x8da5478 <line:112:17, col:28> 'xdg_unichar_t':'unsigned int' lvalue '<<=' ComputeLHSTy='xdg_unichar_t':'unsigned int' ComputeResultTy='xdg_unichar_t':'unsigned int'
                (DeclRefExpr 0x8da5434 <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                (IntegerLiteral 0x8da5450 <col:28> 'int' 6))
              (CompoundAssignOperator 0x8da5558 <line:113:17, col:39> 'xdg_unichar_t':'unsigned int' lvalue '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
                (DeclRefExpr 0x8da5498 <col:17> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')
                (ImplicitCastExpr 0x8da5548 <col:27, col:39> 'unsigned int' <IntegralCast>
                  (BinaryOperator 0x8da5530 <col:27, col:39> 'int' '&'
                    (ImplicitCastExpr 0x8da5520 <col:27, col:34> 'int' <IntegralCast>
                      (ImplicitCastExpr 0x8da5510 <col:27, col:34> 'char' <LValueToRValue>
                        (UnaryOperator 0x8da54e0 <col:27, col:34> 'const char' lvalue prefix '*'
                          (UnaryOperator 0x8da54c8 <col:28, col:34> 'const char *' postfix '++'
                            (DeclRefExpr 0x8da54b0 <col:28> 'const char *' lvalue ParmVar 0x8da32e0 'source' 'const char *')))))
                    (IntegerLiteral 0x8da54f8 <col:39> 'int' 63))))))
          (BinaryOperator 0x8da55f8 <line:115:13, col:21> 'xdg_unichar_t':'unsigned int' lvalue '='
            (DeclRefExpr 0x8da55b4 <col:13> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da33a0 'ucs32' 'xdg_unichar_t':'unsigned int')
            (ImplicitCastExpr 0x8da55e8 <col:21> 'xdg_unichar_t':'unsigned int' <LValueToRValue>
              (DeclRefExpr 0x8da55cc <col:21> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da35e0 'result' 'xdg_unichar_t':'unsigned int')))))))
  (ReturnStmt 0x8da56b8 <line:118:5, col:12>
    (ImplicitCastExpr 0x8da56a8 <col:12> 'xdg_unichar_t':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0x8da568c <col:12> 'xdg_unichar_t':'unsigned int' lvalue Var 0x8da33a0 'ucs32' 'xdg_unichar_t':'unsigned int'))))


xdg_unichar_t _xdg_ucs4_to_lower(xdg_unichar_t source) (CompoundStmt 0x8da5a30 <../codeBase/fish-shell-master/xdgmimeint.cpp:126:1, line:132:1>
  (IfStmt 0x8da59d8 <line:129:5, line:130:62>
    <<<NULL>>>
    (BinaryOperator 0x8da5850 <line:129:9, col:28> '_Bool' '=='
      (ParenExpr 0x8da5810 <col:9, col:23> 'unsigned int'
        (BinaryOperator 0x8da57f8 <col:10, col:19> 'unsigned int' '&'
          (ImplicitCastExpr 0x8da57d8 <col:10> 'xdg_unichar_t':'unsigned int' <LValueToRValue>
            (DeclRefExpr 0x8da57a4 <col:10> 'xdg_unichar_t':'unsigned int' lvalue ParmVar 0x8da56f0 'source' 'xdg_unichar_t':'unsigned int'))
          (ImplicitCastExpr 0x8da57e8 <col:19> 'unsigned int' <IntegralCast>
            (IntegerLiteral 0x8da57c0 <col:19> 'int' 255))))
      (ImplicitCastExpr 0x8da5840 <col:28> 'xdg_unichar_t':'unsigned int' <LValueToRValue>
        (DeclRefExpr 0x8da5824 <col:28> 'xdg_unichar_t':'unsigned int' lvalue ParmVar 0x8da56f0 'source' 'xdg_unichar_t':'unsigned int')))
    (ReturnStmt 0x8da59c8 <line:130:9, col:62>
      (CStyleCastExpr 0x8da59b0 <col:16, col:62> 'xdg_unichar_t':'unsigned int' <NoOp>
        (ImplicitCastExpr 0x8da59a0 <col:32, col:62> 'xdg_unichar_t':'unsigned int' <IntegralCast>
          (CallExpr 0x8da5968 <col:32, col:62> 'int'
            (ImplicitCastExpr 0x8da5958 <col:32> 'int (*)(int) throw()' <FunctionToPointerDecay>
              (DeclRefExpr 0x8da5900 <col:32> 'int (int) throw()' lvalue Function 0x8d8dfd0 'tolower' 'int (int) throw()'))
            (ImplicitCastExpr 0x8da5988 <col:40, col:56> 'int' <IntegralCast>
              (CStyleCastExpr 0x8da58e8 <col:40, col:56> 'unsigned char' <NoOp>
                (ImplicitCastExpr 0x8da58d8 <col:56> 'unsigned char' <IntegralCast>
                  (ImplicitCastExpr 0x8da58c8 <col:56> 'xdg_unichar_t':'unsigned int' <LValueToRValue>
                    (DeclRefExpr 0x8da589c <col:56> 'xdg_unichar_t':'unsigned int' lvalue ParmVar 0x8da56f0 'source' 'xdg_unichar_t':'unsigned int')))))))))
    <<<NULL>>>)
  (ReturnStmt 0x8da5a20 <line:131:5, col:12>
    (ImplicitCastExpr 0x8da5a10 <col:12> 'xdg_unichar_t':'unsigned int' <LValueToRValue>
      (DeclRefExpr 0x8da59f4 <col:12> 'xdg_unichar_t':'unsigned int' lvalue ParmVar 0x8da56f0 'source' 'xdg_unichar_t':'unsigned int'))))


int _xdg_utf8_validate(const char *source) (CompoundStmt 0x8da5bb8 <../codeBase/fish-shell-master/xdgmimeint.cpp:136:1, line:139:1>
  (ReturnStmt 0x8da5ba8 <line:138:5, ../codeBase/fish-shell-master/xdgmimeint.h:39:22>
    (ImplicitCastExpr 0x8da5b98 <col:15, col:22> 'int' <IntegralCast>
      (ParenExpr 0x8da5b80 <col:15, col:22> '_Bool'
        (UnaryOperator 0x8da5b68 <col:16, line:35:18> '_Bool' prefix '!'
          (ImplicitCastExpr 0x8da5b58 <col:16, col:18> '_Bool' <IntegralToBoolean>
            (ParenExpr 0x8da5b40 <col:16, col:18> 'int'
              (IntegerLiteral 0x8da5b28 <col:17> 'int' 0))))))))


const char *_xdg_get_base_name(const char *file_name) (CompoundStmt 0x8da6028 <../codeBase/fish-shell-master/xdgmimeint.cpp:143:1, line:155:1>
  (DeclStmt 0x8da5cf8 <line:144:5, col:26>
    0x8da5cc0 "const char *base_name")
  (IfStmt 0x8da5d98 <line:146:5, /usr/include/clang/3.0/include/stddef.h:47:14>
    <<<NULL>>>
    (BinaryOperator 0x8da5d50 <../codeBase/fish-shell-master/xdgmimeint.cpp:146:9, /usr/include/clang/3.0/include/stddef.h:47:14> '_Bool' '=='
      (ImplicitCastExpr 0x8da5d30 <../codeBase/fish-shell-master/xdgmimeint.cpp:146:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0x8da5d08 <col:9> 'const char *' lvalue ParmVar 0x8da5be0 'file_name' 'const char *'))
      (ImplicitCastExpr 0x8da5d40 </usr/include/clang/3.0/include/stddef.h:47:14> 'const char *' <NullToPointer>
        (GNUNullExpr 0x8da5d20 <col:14> 'int')))
    (ReturnStmt 0x8da5d88 <../codeBase/fish-shell-master/xdgmimeint.cpp:147:9, /usr/include/clang/3.0/include/stddef.h:47:14>
      (ImplicitCastExpr 0x8da5d78 <col:14> 'const char *' <NullToPointer>
        (GNUNullExpr 0x8da5d68 <col:14> 'int')))
    <<<NULL>>>)
  (BinaryOperator 0x8da5ef0 <../codeBase/fish-shell-master/xdgmimeint.cpp:149:5, col:39> 'const char *' lvalue '='
    (DeclRefExpr 0x8da5db4 <col:5> 'const char *' lvalue Var 0x8da5cc0 'base_name' 'const char *')
    (ImplicitCastExpr 0x8da5ee0 <col:17, col:39> 'const char *' <NoOp>
      (CallExpr 0x8da5e98 <col:17, col:39> 'char *'
        (ImplicitCastExpr 0x8da5e88 <col:17> 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
          (DeclRefExpr 0x8da5e34 <col:17> 'char *(const char *, int) throw()' lvalue Function 0x8d97ff0 'strrchr' 'char *(const char *, int) throw()'))
        (ImplicitCastExpr 0x8da5ec0 <col:25> 'const char *' <LValueToRValue>
          (DeclRefExpr 0x8da5e04 <col:25> 'const char *' lvalue ParmVar 0x8da5be0 'file_name' 'const char *'))
        (ImplicitCastExpr 0x8da5ed0 <col:36> 'int' <IntegralCast>
          (CharacterLiteral 0x8da5e20 <col:36> 'char'47)))))
  (IfStmt 0x8da6008 <line:151:5, line:154:28>
    <<<NULL>>>
    (BinaryOperator 0x8da5f50 <line:151:9, /usr/include/clang/3.0/include/stddef.h:47:14> '_Bool' '=='
      (ImplicitCastExpr 0x8da5f30 <../codeBase/fish-shell-master/xdgmimeint.cpp:151:9> 'const char *' <LValueToRValue>
        (DeclRefExpr 0x8da5f08 <col:9> 'const char *' lvalue Var 0x8da5cc0 'base_name' 'const char *'))
      (ImplicitCastExpr 0x8da5f40 </usr/include/clang/3.0/include/stddef.h:47:14> 'const char *' <NullToPointer>
        (GNUNullExpr 0x8da5f20 <col:14> 'int')))
    (ReturnStmt 0x8da5f90 <../codeBase/fish-shell-master/xdgmimeint.cpp:152:9, col:16>
      (ImplicitCastExpr 0x8da5f80 <col:16> 'const char *' <LValueToRValue>
        (DeclRefExpr 0x8da5f68 <col:16> 'const char *' lvalue ParmVar 0x8da5be0 'file_name' 'const char *')))
    (ReturnStmt 0x8da5ff8 <line:154:9, col:28>
      (BinaryOperator 0x8da5fe0 <col:16, col:28> 'const char *' '+'
        (ImplicitCastExpr 0x8da5fd0 <col:16> 'const char *' <LValueToRValue>
          (DeclRefExpr 0x8da5fa0 <col:16> 'const char *' lvalue Var 0x8da5cc0 'base_name' 'const char *'))
        (IntegerLiteral 0x8da5fb8 <col:28> 'int' 1)))))


